
Project1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000adc8  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001edc  0800afb0  0800afb0  0001afb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce8c  0800ce8c  000200ac  2**0
                  CONTENTS
  4 .ARM          00000000  0800ce8c  0800ce8c  000200ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ce8c  0800ce8c  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce8c  0800ce8c  0001ce8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ce90  0800ce90  0001ce90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  0800ce94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001290  200000ac  0800cf40  000200ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000133c  0800cf40  0002133c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f913  00000000  00000000  000200d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000272b  00000000  00000000  0002f9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e20  00000000  00000000  00032118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d48  00000000  00000000  00032f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a88c  00000000  00000000  00033c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000115ef  00000000  00000000  0004e50c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099a84  00000000  00000000  0005fafb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f957f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004014  00000000  00000000  000f95d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200000ac 	.word	0x200000ac
 8000204:	00000000 	.word	0x00000000
 8000208:	0800af98 	.word	0x0800af98

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200000b0 	.word	0x200000b0
 8000224:	0800af98 	.word	0x0800af98

08000228 <strcmp>:
 8000228:	f810 2b01 	ldrb.w	r2, [r0], #1
 800022c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000230:	2a01      	cmp	r2, #1
 8000232:	bf28      	it	cs
 8000234:	429a      	cmpcs	r2, r3
 8000236:	d0f7      	beq.n	8000228 <strcmp>
 8000238:	1ad0      	subs	r0, r2, r3
 800023a:	4770      	bx	lr

0800023c <strlen>:
 800023c:	4603      	mov	r3, r0
 800023e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000242:	2a00      	cmp	r2, #0
 8000244:	d1fb      	bne.n	800023e <strlen+0x2>
 8000246:	1a18      	subs	r0, r3, r0
 8000248:	3801      	subs	r0, #1
 800024a:	4770      	bx	lr

0800024c <__aeabi_dmul>:
 800024c:	b570      	push	{r4, r5, r6, lr}
 800024e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000252:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000256:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800025a:	bf1d      	ittte	ne
 800025c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000260:	ea94 0f0c 	teqne	r4, ip
 8000264:	ea95 0f0c 	teqne	r5, ip
 8000268:	f000 f8de 	bleq	8000428 <__aeabi_dmul+0x1dc>
 800026c:	442c      	add	r4, r5
 800026e:	ea81 0603 	eor.w	r6, r1, r3
 8000272:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000276:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800027a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800027e:	bf18      	it	ne
 8000280:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000284:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000288:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800028c:	d038      	beq.n	8000300 <__aeabi_dmul+0xb4>
 800028e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000292:	f04f 0500 	mov.w	r5, #0
 8000296:	fbe1 e502 	umlal	lr, r5, r1, r2
 800029a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800029e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002a2:	f04f 0600 	mov.w	r6, #0
 80002a6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002aa:	f09c 0f00 	teq	ip, #0
 80002ae:	bf18      	it	ne
 80002b0:	f04e 0e01 	orrne.w	lr, lr, #1
 80002b4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002b8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002bc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002c0:	d204      	bcs.n	80002cc <__aeabi_dmul+0x80>
 80002c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002c6:	416d      	adcs	r5, r5
 80002c8:	eb46 0606 	adc.w	r6, r6, r6
 80002cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002e0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002e4:	bf88      	it	hi
 80002e6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002ea:	d81e      	bhi.n	800032a <__aeabi_dmul+0xde>
 80002ec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002f0:	bf08      	it	eq
 80002f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002f6:	f150 0000 	adcs.w	r0, r0, #0
 80002fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fe:	bd70      	pop	{r4, r5, r6, pc}
 8000300:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000304:	ea46 0101 	orr.w	r1, r6, r1
 8000308:	ea40 0002 	orr.w	r0, r0, r2
 800030c:	ea81 0103 	eor.w	r1, r1, r3
 8000310:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000314:	bfc2      	ittt	gt
 8000316:	ebd4 050c 	rsbsgt	r5, r4, ip
 800031a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800031e:	bd70      	popgt	{r4, r5, r6, pc}
 8000320:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000324:	f04f 0e00 	mov.w	lr, #0
 8000328:	3c01      	subs	r4, #1
 800032a:	f300 80ab 	bgt.w	8000484 <__aeabi_dmul+0x238>
 800032e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000332:	bfde      	ittt	le
 8000334:	2000      	movle	r0, #0
 8000336:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800033a:	bd70      	pople	{r4, r5, r6, pc}
 800033c:	f1c4 0400 	rsb	r4, r4, #0
 8000340:	3c20      	subs	r4, #32
 8000342:	da35      	bge.n	80003b0 <__aeabi_dmul+0x164>
 8000344:	340c      	adds	r4, #12
 8000346:	dc1b      	bgt.n	8000380 <__aeabi_dmul+0x134>
 8000348:	f104 0414 	add.w	r4, r4, #20
 800034c:	f1c4 0520 	rsb	r5, r4, #32
 8000350:	fa00 f305 	lsl.w	r3, r0, r5
 8000354:	fa20 f004 	lsr.w	r0, r0, r4
 8000358:	fa01 f205 	lsl.w	r2, r1, r5
 800035c:	ea40 0002 	orr.w	r0, r0, r2
 8000360:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000364:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800036c:	fa21 f604 	lsr.w	r6, r1, r4
 8000370:	eb42 0106 	adc.w	r1, r2, r6
 8000374:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000378:	bf08      	it	eq
 800037a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037e:	bd70      	pop	{r4, r5, r6, pc}
 8000380:	f1c4 040c 	rsb	r4, r4, #12
 8000384:	f1c4 0520 	rsb	r5, r4, #32
 8000388:	fa00 f304 	lsl.w	r3, r0, r4
 800038c:	fa20 f005 	lsr.w	r0, r0, r5
 8000390:	fa01 f204 	lsl.w	r2, r1, r4
 8000394:	ea40 0002 	orr.w	r0, r0, r2
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	f141 0100 	adc.w	r1, r1, #0
 80003a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003a8:	bf08      	it	eq
 80003aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003ae:	bd70      	pop	{r4, r5, r6, pc}
 80003b0:	f1c4 0520 	rsb	r5, r4, #32
 80003b4:	fa00 f205 	lsl.w	r2, r0, r5
 80003b8:	ea4e 0e02 	orr.w	lr, lr, r2
 80003bc:	fa20 f304 	lsr.w	r3, r0, r4
 80003c0:	fa01 f205 	lsl.w	r2, r1, r5
 80003c4:	ea43 0302 	orr.w	r3, r3, r2
 80003c8:	fa21 f004 	lsr.w	r0, r1, r4
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	fa21 f204 	lsr.w	r2, r1, r4
 80003d4:	ea20 0002 	bic.w	r0, r0, r2
 80003d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003e0:	bf08      	it	eq
 80003e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e6:	bd70      	pop	{r4, r5, r6, pc}
 80003e8:	f094 0f00 	teq	r4, #0
 80003ec:	d10f      	bne.n	800040e <__aeabi_dmul+0x1c2>
 80003ee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003f2:	0040      	lsls	r0, r0, #1
 80003f4:	eb41 0101 	adc.w	r1, r1, r1
 80003f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fc:	bf08      	it	eq
 80003fe:	3c01      	subeq	r4, #1
 8000400:	d0f7      	beq.n	80003f2 <__aeabi_dmul+0x1a6>
 8000402:	ea41 0106 	orr.w	r1, r1, r6
 8000406:	f095 0f00 	teq	r5, #0
 800040a:	bf18      	it	ne
 800040c:	4770      	bxne	lr
 800040e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000412:	0052      	lsls	r2, r2, #1
 8000414:	eb43 0303 	adc.w	r3, r3, r3
 8000418:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800041c:	bf08      	it	eq
 800041e:	3d01      	subeq	r5, #1
 8000420:	d0f7      	beq.n	8000412 <__aeabi_dmul+0x1c6>
 8000422:	ea43 0306 	orr.w	r3, r3, r6
 8000426:	4770      	bx	lr
 8000428:	ea94 0f0c 	teq	r4, ip
 800042c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000430:	bf18      	it	ne
 8000432:	ea95 0f0c 	teqne	r5, ip
 8000436:	d00c      	beq.n	8000452 <__aeabi_dmul+0x206>
 8000438:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800043c:	bf18      	it	ne
 800043e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000442:	d1d1      	bne.n	80003e8 <__aeabi_dmul+0x19c>
 8000444:	ea81 0103 	eor.w	r1, r1, r3
 8000448:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800044c:	f04f 0000 	mov.w	r0, #0
 8000450:	bd70      	pop	{r4, r5, r6, pc}
 8000452:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000456:	bf06      	itte	eq
 8000458:	4610      	moveq	r0, r2
 800045a:	4619      	moveq	r1, r3
 800045c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000460:	d019      	beq.n	8000496 <__aeabi_dmul+0x24a>
 8000462:	ea94 0f0c 	teq	r4, ip
 8000466:	d102      	bne.n	800046e <__aeabi_dmul+0x222>
 8000468:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800046c:	d113      	bne.n	8000496 <__aeabi_dmul+0x24a>
 800046e:	ea95 0f0c 	teq	r5, ip
 8000472:	d105      	bne.n	8000480 <__aeabi_dmul+0x234>
 8000474:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000478:	bf1c      	itt	ne
 800047a:	4610      	movne	r0, r2
 800047c:	4619      	movne	r1, r3
 800047e:	d10a      	bne.n	8000496 <__aeabi_dmul+0x24a>
 8000480:	ea81 0103 	eor.w	r1, r1, r3
 8000484:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000488:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800048c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800049a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800049e:	bd70      	pop	{r4, r5, r6, pc}

080004a0 <__aeabi_drsub>:
 80004a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004a4:	e002      	b.n	80004ac <__adddf3>
 80004a6:	bf00      	nop

080004a8 <__aeabi_dsub>:
 80004a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004ac <__adddf3>:
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	bf1f      	itttt	ne
 80004c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d2:	f000 80e2 	beq.w	800069a <__adddf3+0x1ee>
 80004d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004de:	bfb8      	it	lt
 80004e0:	426d      	neglt	r5, r5
 80004e2:	dd0c      	ble.n	80004fe <__adddf3+0x52>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea80 0202 	eor.w	r2, r0, r2
 80004ea:	ea81 0303 	eor.w	r3, r1, r3
 80004ee:	ea82 0000 	eor.w	r0, r2, r0
 80004f2:	ea83 0101 	eor.w	r1, r3, r1
 80004f6:	ea80 0202 	eor.w	r2, r0, r2
 80004fa:	ea81 0303 	eor.w	r3, r1, r3
 80004fe:	2d36      	cmp	r5, #54	; 0x36
 8000500:	bf88      	it	hi
 8000502:	bd30      	pophi	{r4, r5, pc}
 8000504:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000508:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800050c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000510:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000514:	d002      	beq.n	800051c <__adddf3+0x70>
 8000516:	4240      	negs	r0, r0
 8000518:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000520:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000524:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000528:	d002      	beq.n	8000530 <__adddf3+0x84>
 800052a:	4252      	negs	r2, r2
 800052c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000530:	ea94 0f05 	teq	r4, r5
 8000534:	f000 80a7 	beq.w	8000686 <__adddf3+0x1da>
 8000538:	f1a4 0401 	sub.w	r4, r4, #1
 800053c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000540:	db0d      	blt.n	800055e <__adddf3+0xb2>
 8000542:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000546:	fa22 f205 	lsr.w	r2, r2, r5
 800054a:	1880      	adds	r0, r0, r2
 800054c:	f141 0100 	adc.w	r1, r1, #0
 8000550:	fa03 f20e 	lsl.w	r2, r3, lr
 8000554:	1880      	adds	r0, r0, r2
 8000556:	fa43 f305 	asr.w	r3, r3, r5
 800055a:	4159      	adcs	r1, r3
 800055c:	e00e      	b.n	800057c <__adddf3+0xd0>
 800055e:	f1a5 0520 	sub.w	r5, r5, #32
 8000562:	f10e 0e20 	add.w	lr, lr, #32
 8000566:	2a01      	cmp	r2, #1
 8000568:	fa03 fc0e 	lsl.w	ip, r3, lr
 800056c:	bf28      	it	cs
 800056e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000572:	fa43 f305 	asr.w	r3, r3, r5
 8000576:	18c0      	adds	r0, r0, r3
 8000578:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800057c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000580:	d507      	bpl.n	8000592 <__adddf3+0xe6>
 8000582:	f04f 0e00 	mov.w	lr, #0
 8000586:	f1dc 0c00 	rsbs	ip, ip, #0
 800058a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800058e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000592:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000596:	d31b      	bcc.n	80005d0 <__adddf3+0x124>
 8000598:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800059c:	d30c      	bcc.n	80005b8 <__adddf3+0x10c>
 800059e:	0849      	lsrs	r1, r1, #1
 80005a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80005a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005a8:	f104 0401 	add.w	r4, r4, #1
 80005ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005b4:	f080 809a 	bcs.w	80006ec <__adddf3+0x240>
 80005b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005bc:	bf08      	it	eq
 80005be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005c2:	f150 0000 	adcs.w	r0, r0, #0
 80005c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ca:	ea41 0105 	orr.w	r1, r1, r5
 80005ce:	bd30      	pop	{r4, r5, pc}
 80005d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005d4:	4140      	adcs	r0, r0
 80005d6:	eb41 0101 	adc.w	r1, r1, r1
 80005da:	3c01      	subs	r4, #1
 80005dc:	bf28      	it	cs
 80005de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005e2:	d2e9      	bcs.n	80005b8 <__adddf3+0x10c>
 80005e4:	f091 0f00 	teq	r1, #0
 80005e8:	bf04      	itt	eq
 80005ea:	4601      	moveq	r1, r0
 80005ec:	2000      	moveq	r0, #0
 80005ee:	fab1 f381 	clz	r3, r1
 80005f2:	bf08      	it	eq
 80005f4:	3320      	addeq	r3, #32
 80005f6:	f1a3 030b 	sub.w	r3, r3, #11
 80005fa:	f1b3 0220 	subs.w	r2, r3, #32
 80005fe:	da0c      	bge.n	800061a <__adddf3+0x16e>
 8000600:	320c      	adds	r2, #12
 8000602:	dd08      	ble.n	8000616 <__adddf3+0x16a>
 8000604:	f102 0c14 	add.w	ip, r2, #20
 8000608:	f1c2 020c 	rsb	r2, r2, #12
 800060c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000610:	fa21 f102 	lsr.w	r1, r1, r2
 8000614:	e00c      	b.n	8000630 <__adddf3+0x184>
 8000616:	f102 0214 	add.w	r2, r2, #20
 800061a:	bfd8      	it	le
 800061c:	f1c2 0c20 	rsble	ip, r2, #32
 8000620:	fa01 f102 	lsl.w	r1, r1, r2
 8000624:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000628:	bfdc      	itt	le
 800062a:	ea41 010c 	orrle.w	r1, r1, ip
 800062e:	4090      	lslle	r0, r2
 8000630:	1ae4      	subs	r4, r4, r3
 8000632:	bfa2      	ittt	ge
 8000634:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000638:	4329      	orrge	r1, r5
 800063a:	bd30      	popge	{r4, r5, pc}
 800063c:	ea6f 0404 	mvn.w	r4, r4
 8000640:	3c1f      	subs	r4, #31
 8000642:	da1c      	bge.n	800067e <__adddf3+0x1d2>
 8000644:	340c      	adds	r4, #12
 8000646:	dc0e      	bgt.n	8000666 <__adddf3+0x1ba>
 8000648:	f104 0414 	add.w	r4, r4, #20
 800064c:	f1c4 0220 	rsb	r2, r4, #32
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f302 	lsl.w	r3, r1, r2
 8000658:	ea40 0003 	orr.w	r0, r0, r3
 800065c:	fa21 f304 	lsr.w	r3, r1, r4
 8000660:	ea45 0103 	orr.w	r1, r5, r3
 8000664:	bd30      	pop	{r4, r5, pc}
 8000666:	f1c4 040c 	rsb	r4, r4, #12
 800066a:	f1c4 0220 	rsb	r2, r4, #32
 800066e:	fa20 f002 	lsr.w	r0, r0, r2
 8000672:	fa01 f304 	lsl.w	r3, r1, r4
 8000676:	ea40 0003 	orr.w	r0, r0, r3
 800067a:	4629      	mov	r1, r5
 800067c:	bd30      	pop	{r4, r5, pc}
 800067e:	fa21 f004 	lsr.w	r0, r1, r4
 8000682:	4629      	mov	r1, r5
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	f094 0f00 	teq	r4, #0
 800068a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800068e:	bf06      	itte	eq
 8000690:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000694:	3401      	addeq	r4, #1
 8000696:	3d01      	subne	r5, #1
 8000698:	e74e      	b.n	8000538 <__adddf3+0x8c>
 800069a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800069e:	bf18      	it	ne
 80006a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006a4:	d029      	beq.n	80006fa <__adddf3+0x24e>
 80006a6:	ea94 0f05 	teq	r4, r5
 80006aa:	bf08      	it	eq
 80006ac:	ea90 0f02 	teqeq	r0, r2
 80006b0:	d005      	beq.n	80006be <__adddf3+0x212>
 80006b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80006b6:	bf04      	itt	eq
 80006b8:	4619      	moveq	r1, r3
 80006ba:	4610      	moveq	r0, r2
 80006bc:	bd30      	pop	{r4, r5, pc}
 80006be:	ea91 0f03 	teq	r1, r3
 80006c2:	bf1e      	ittt	ne
 80006c4:	2100      	movne	r1, #0
 80006c6:	2000      	movne	r0, #0
 80006c8:	bd30      	popne	{r4, r5, pc}
 80006ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006ce:	d105      	bne.n	80006dc <__adddf3+0x230>
 80006d0:	0040      	lsls	r0, r0, #1
 80006d2:	4149      	adcs	r1, r1
 80006d4:	bf28      	it	cs
 80006d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006da:	bd30      	pop	{r4, r5, pc}
 80006dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006e0:	bf3c      	itt	cc
 80006e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006e6:	bd30      	popcc	{r4, r5, pc}
 80006e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006f4:	f04f 0000 	mov.w	r0, #0
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006fe:	bf1a      	itte	ne
 8000700:	4619      	movne	r1, r3
 8000702:	4610      	movne	r0, r2
 8000704:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000708:	bf1c      	itt	ne
 800070a:	460b      	movne	r3, r1
 800070c:	4602      	movne	r2, r0
 800070e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000712:	bf06      	itte	eq
 8000714:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000718:	ea91 0f03 	teqeq	r1, r3
 800071c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	bf00      	nop

08000724 <__aeabi_ui2d>:
 8000724:	f090 0f00 	teq	r0, #0
 8000728:	bf04      	itt	eq
 800072a:	2100      	moveq	r1, #0
 800072c:	4770      	bxeq	lr
 800072e:	b530      	push	{r4, r5, lr}
 8000730:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000734:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000738:	f04f 0500 	mov.w	r5, #0
 800073c:	f04f 0100 	mov.w	r1, #0
 8000740:	e750      	b.n	80005e4 <__adddf3+0x138>
 8000742:	bf00      	nop

08000744 <__aeabi_i2d>:
 8000744:	f090 0f00 	teq	r0, #0
 8000748:	bf04      	itt	eq
 800074a:	2100      	moveq	r1, #0
 800074c:	4770      	bxeq	lr
 800074e:	b530      	push	{r4, r5, lr}
 8000750:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000754:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000758:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800075c:	bf48      	it	mi
 800075e:	4240      	negmi	r0, r0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e73e      	b.n	80005e4 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_f2d>:
 8000768:	0042      	lsls	r2, r0, #1
 800076a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800076e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000772:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000776:	bf1f      	itttt	ne
 8000778:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800077c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000780:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000784:	4770      	bxne	lr
 8000786:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800078a:	bf08      	it	eq
 800078c:	4770      	bxeq	lr
 800078e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000792:	bf04      	itt	eq
 8000794:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000798:	4770      	bxeq	lr
 800079a:	b530      	push	{r4, r5, lr}
 800079c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	e71c      	b.n	80005e4 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_ul2d>:
 80007ac:	ea50 0201 	orrs.w	r2, r0, r1
 80007b0:	bf08      	it	eq
 80007b2:	4770      	bxeq	lr
 80007b4:	b530      	push	{r4, r5, lr}
 80007b6:	f04f 0500 	mov.w	r5, #0
 80007ba:	e00a      	b.n	80007d2 <__aeabi_l2d+0x16>

080007bc <__aeabi_l2d>:
 80007bc:	ea50 0201 	orrs.w	r2, r0, r1
 80007c0:	bf08      	it	eq
 80007c2:	4770      	bxeq	lr
 80007c4:	b530      	push	{r4, r5, lr}
 80007c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ca:	d502      	bpl.n	80007d2 <__aeabi_l2d+0x16>
 80007cc:	4240      	negs	r0, r0
 80007ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007de:	f43f aed8 	beq.w	8000592 <__adddf3+0xe6>
 80007e2:	f04f 0203 	mov.w	r2, #3
 80007e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ea:	bf18      	it	ne
 80007ec:	3203      	addne	r2, #3
 80007ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007f2:	bf18      	it	ne
 80007f4:	3203      	addne	r2, #3
 80007f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007fa:	f1c2 0320 	rsb	r3, r2, #32
 80007fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000802:	fa20 f002 	lsr.w	r0, r0, r2
 8000806:	fa01 fe03 	lsl.w	lr, r1, r3
 800080a:	ea40 000e 	orr.w	r0, r0, lr
 800080e:	fa21 f102 	lsr.w	r1, r1, r2
 8000812:	4414      	add	r4, r2
 8000814:	e6bd      	b.n	8000592 <__adddf3+0xe6>
 8000816:	bf00      	nop

08000818 <__aeabi_d2uiz>:
 8000818:	004a      	lsls	r2, r1, #1
 800081a:	d211      	bcs.n	8000840 <__aeabi_d2uiz+0x28>
 800081c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000820:	d211      	bcs.n	8000846 <__aeabi_d2uiz+0x2e>
 8000822:	d50d      	bpl.n	8000840 <__aeabi_d2uiz+0x28>
 8000824:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000828:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800082c:	d40e      	bmi.n	800084c <__aeabi_d2uiz+0x34>
 800082e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000832:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000836:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800083a:	fa23 f002 	lsr.w	r0, r3, r2
 800083e:	4770      	bx	lr
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	4770      	bx	lr
 8000846:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800084a:	d102      	bne.n	8000852 <__aeabi_d2uiz+0x3a>
 800084c:	f04f 30ff 	mov.w	r0, #4294967295
 8000850:	4770      	bx	lr
 8000852:	f04f 0000 	mov.w	r0, #0
 8000856:	4770      	bx	lr

08000858 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800085e:	4b10      	ldr	r3, [pc, #64]	; (80008a0 <MX_DMA_Init+0x48>)
 8000860:	695b      	ldr	r3, [r3, #20]
 8000862:	4a0f      	ldr	r2, [pc, #60]	; (80008a0 <MX_DMA_Init+0x48>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	6153      	str	r3, [r2, #20]
 800086a:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <MX_DMA_Init+0x48>)
 800086c:	695b      	ldr	r3, [r3, #20]
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000876:	2200      	movs	r2, #0
 8000878:	2100      	movs	r1, #0
 800087a:	200f      	movs	r0, #15
 800087c:	f007 f8bf 	bl	80079fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000880:	200f      	movs	r0, #15
 8000882:	f007 f8d8 	bl	8007a36 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000886:	2200      	movs	r2, #0
 8000888:	2100      	movs	r1, #0
 800088a:	2010      	movs	r0, #16
 800088c:	f007 f8b7 	bl	80079fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000890:	2010      	movs	r0, #16
 8000892:	f007 f8d0 	bl	8007a36 <HAL_NVIC_EnableIRQ>

}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40021000 	.word	0x40021000

080008a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b088      	sub	sp, #32
 80008a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008aa:	f107 0310 	add.w	r3, r7, #16
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]
 80008b6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008b8:	4b3c      	ldr	r3, [pc, #240]	; (80009ac <MX_GPIO_Init+0x108>)
 80008ba:	699b      	ldr	r3, [r3, #24]
 80008bc:	4a3b      	ldr	r2, [pc, #236]	; (80009ac <MX_GPIO_Init+0x108>)
 80008be:	f043 0320 	orr.w	r3, r3, #32
 80008c2:	6193      	str	r3, [r2, #24]
 80008c4:	4b39      	ldr	r3, [pc, #228]	; (80009ac <MX_GPIO_Init+0x108>)
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	f003 0320 	and.w	r3, r3, #32
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d0:	4b36      	ldr	r3, [pc, #216]	; (80009ac <MX_GPIO_Init+0x108>)
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	4a35      	ldr	r2, [pc, #212]	; (80009ac <MX_GPIO_Init+0x108>)
 80008d6:	f043 0304 	orr.w	r3, r3, #4
 80008da:	6193      	str	r3, [r2, #24]
 80008dc:	4b33      	ldr	r3, [pc, #204]	; (80009ac <MX_GPIO_Init+0x108>)
 80008de:	699b      	ldr	r3, [r3, #24]
 80008e0:	f003 0304 	and.w	r3, r3, #4
 80008e4:	60bb      	str	r3, [r7, #8]
 80008e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e8:	4b30      	ldr	r3, [pc, #192]	; (80009ac <MX_GPIO_Init+0x108>)
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	4a2f      	ldr	r2, [pc, #188]	; (80009ac <MX_GPIO_Init+0x108>)
 80008ee:	f043 0310 	orr.w	r3, r3, #16
 80008f2:	6193      	str	r3, [r2, #24]
 80008f4:	4b2d      	ldr	r3, [pc, #180]	; (80009ac <MX_GPIO_Init+0x108>)
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	f003 0310 	and.w	r3, r3, #16
 80008fc:	607b      	str	r3, [r7, #4]
 80008fe:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8000900:	2200      	movs	r2, #0
 8000902:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000906:	482a      	ldr	r0, [pc, #168]	; (80009b0 <MX_GPIO_Init+0x10c>)
 8000908:	f007 fedd 	bl	80086c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800090c:	2200      	movs	r2, #0
 800090e:	2104      	movs	r1, #4
 8000910:	4828      	ldr	r0, [pc, #160]	; (80009b4 <MX_GPIO_Init+0x110>)
 8000912:	f007 fed8 	bl	80086c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY0_Pin;
 8000916:	2320      	movs	r3, #32
 8000918:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800091a:	4b27      	ldr	r3, [pc, #156]	; (80009b8 <MX_GPIO_Init+0x114>)
 800091c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800091e:	2301      	movs	r3, #1
 8000920:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY0_GPIO_Port, &GPIO_InitStruct);
 8000922:	f107 0310 	add.w	r3, r7, #16
 8000926:	4619      	mov	r1, r3
 8000928:	4824      	ldr	r0, [pc, #144]	; (80009bc <MX_GPIO_Init+0x118>)
 800092a:	f007 fd21 	bl	8008370 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 800092e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000932:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000934:	2301      	movs	r3, #1
 8000936:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093c:	2302      	movs	r3, #2
 800093e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8000940:	f107 0310 	add.w	r3, r7, #16
 8000944:	4619      	mov	r1, r3
 8000946:	481a      	ldr	r0, [pc, #104]	; (80009b0 <MX_GPIO_Init+0x10c>)
 8000948:	f007 fd12 	bl	8008370 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 800094c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000950:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000952:	4b19      	ldr	r3, [pc, #100]	; (80009b8 <MX_GPIO_Init+0x114>)
 8000954:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000956:	2301      	movs	r3, #1
 8000958:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 800095a:	f107 0310 	add.w	r3, r7, #16
 800095e:	4619      	mov	r1, r3
 8000960:	4813      	ldr	r0, [pc, #76]	; (80009b0 <MX_GPIO_Init+0x10c>)
 8000962:	f007 fd05 	bl	8008370 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000966:	2304      	movs	r3, #4
 8000968:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096a:	2301      	movs	r3, #1
 800096c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000972:	2302      	movs	r3, #2
 8000974:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000976:	f107 0310 	add.w	r3, r7, #16
 800097a:	4619      	mov	r1, r3
 800097c:	480d      	ldr	r0, [pc, #52]	; (80009b4 <MX_GPIO_Init+0x110>)
 800097e:	f007 fcf7 	bl	8008370 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 8000982:	2200      	movs	r2, #0
 8000984:	2102      	movs	r1, #2
 8000986:	2017      	movs	r0, #23
 8000988:	f007 f839 	bl	80079fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800098c:	2017      	movs	r0, #23
 800098e:	f007 f852 	bl	8007a36 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8000992:	2200      	movs	r2, #0
 8000994:	2102      	movs	r1, #2
 8000996:	2028      	movs	r0, #40	; 0x28
 8000998:	f007 f831 	bl	80079fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800099c:	2028      	movs	r0, #40	; 0x28
 800099e:	f007 f84a 	bl	8007a36 <HAL_NVIC_EnableIRQ>

}
 80009a2:	bf00      	nop
 80009a4:	3720      	adds	r7, #32
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40021000 	.word	0x40021000
 80009b0:	40010800 	.word	0x40010800
 80009b4:	40011400 	.word	0x40011400
 80009b8:	10110000 	.word	0x10110000
 80009bc:	40011000 	.word	0x40011000

080009c0 <LCD_WR_REG>:
//默认为竖屏
_lcd_dev lcddev;

//写寄存器函数
//data:寄存器值
void LCD_WR_REG(uint16_t data) {
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	80fb      	strh	r3, [r7, #6]
	LCD_RS_CLR;  //写地址
 80009ca:	4b0d      	ldr	r3, [pc, #52]	; (8000a00 <LCD_WR_REG+0x40>)
 80009cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009d0:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 80009d2:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <LCD_WR_REG+0x40>)
 80009d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009d8:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 80009da:	4a0a      	ldr	r2, [pc, #40]	; (8000a04 <LCD_WR_REG+0x44>)
 80009dc:	88fb      	ldrh	r3, [r7, #6]
 80009de:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 80009e0:	4b07      	ldr	r3, [pc, #28]	; (8000a00 <LCD_WR_REG+0x40>)
 80009e2:	2280      	movs	r2, #128	; 0x80
 80009e4:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 80009e6:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <LCD_WR_REG+0x40>)
 80009e8:	2280      	movs	r2, #128	; 0x80
 80009ea:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 80009ec:	4b04      	ldr	r3, [pc, #16]	; (8000a00 <LCD_WR_REG+0x40>)
 80009ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009f2:	611a      	str	r2, [r3, #16]
}
 80009f4:	bf00      	nop
 80009f6:	370c      	adds	r7, #12
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bc80      	pop	{r7}
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	40011000 	.word	0x40011000
 8000a04:	40010c00 	.word	0x40010c00

08000a08 <LCD_WR_DATAX>:
//写数据函数
//可以替代LCD_WR_DATAX宏,拿时间换空间.
//data:寄存器值
void LCD_WR_DATAX(uint16_t data) {
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	80fb      	strh	r3, [r7, #6]
	LCD_RS_SET;
 8000a12:	4b0d      	ldr	r3, [pc, #52]	; (8000a48 <LCD_WR_DATAX+0x40>)
 8000a14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a18:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 8000a1a:	4b0b      	ldr	r3, [pc, #44]	; (8000a48 <LCD_WR_DATAX+0x40>)
 8000a1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a20:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 8000a22:	4a0a      	ldr	r2, [pc, #40]	; (8000a4c <LCD_WR_DATAX+0x44>)
 8000a24:	88fb      	ldrh	r3, [r7, #6]
 8000a26:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 8000a28:	4b07      	ldr	r3, [pc, #28]	; (8000a48 <LCD_WR_DATAX+0x40>)
 8000a2a:	2280      	movs	r2, #128	; 0x80
 8000a2c:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8000a2e:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <LCD_WR_DATAX+0x40>)
 8000a30:	2280      	movs	r2, #128	; 0x80
 8000a32:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8000a34:	4b04      	ldr	r3, [pc, #16]	; (8000a48 <LCD_WR_DATAX+0x40>)
 8000a36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a3a:	611a      	str	r2, [r3, #16]
}
 8000a3c:	bf00      	nop
 8000a3e:	370c      	adds	r7, #12
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bc80      	pop	{r7}
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	40011000 	.word	0x40011000
 8000a4c:	40010c00 	.word	0x40010c00

08000a50 <LCD_RD_DATA>:
//读LCD数据
//返回值:读到的值
uint16_t LCD_RD_DATA(void) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
	uint16_t t;
	GPIOB->CRL = 0X88888888; //PB0-7  上拉输入
 8000a56:	4b1d      	ldr	r3, [pc, #116]	; (8000acc <LCD_RD_DATA+0x7c>)
 8000a58:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8000a5c:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X88888888; //PB8-15 上拉输入
 8000a5e:	4b1b      	ldr	r3, [pc, #108]	; (8000acc <LCD_RD_DATA+0x7c>)
 8000a60:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8000a64:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0X0000;     //全部输出0
 8000a66:	4b19      	ldr	r3, [pc, #100]	; (8000acc <LCD_RD_DATA+0x7c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	60da      	str	r2, [r3, #12]

	LCD_RS_SET;
 8000a6c:	4b18      	ldr	r3, [pc, #96]	; (8000ad0 <LCD_RD_DATA+0x80>)
 8000a6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a72:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 8000a74:	4b16      	ldr	r3, [pc, #88]	; (8000ad0 <LCD_RD_DATA+0x80>)
 8000a76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a7a:	615a      	str	r2, [r3, #20]
	//读取数据(读寄存器时,并不需要读2次)
	LCD_RD_CLR;
 8000a7c:	4b14      	ldr	r3, [pc, #80]	; (8000ad0 <LCD_RD_DATA+0x80>)
 8000a7e:	2240      	movs	r2, #64	; 0x40
 8000a80:	615a      	str	r2, [r3, #20]
	if (lcddev.id == 0X8989)
 8000a82:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <LCD_RD_DATA+0x84>)
 8000a84:	889b      	ldrh	r3, [r3, #4]
 8000a86:	f648 1289 	movw	r2, #35209	; 0x8989
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d102      	bne.n	8000a94 <LCD_RD_DATA+0x44>
		HAL_Delay(1); // delay_us(2);//FOR 8989,延时2us
 8000a8e:	2001      	movs	r0, #1
 8000a90:	f006 feba 	bl	8007808 <HAL_Delay>
	t = DATAIN
 8000a94:	4b0d      	ldr	r3, [pc, #52]	; (8000acc <LCD_RD_DATA+0x7c>)
 8000a96:	689b      	ldr	r3, [r3, #8]
 8000a98:	80fb      	strh	r3, [r7, #6]
	;
	LCD_RD_SET;
 8000a9a:	4b0d      	ldr	r3, [pc, #52]	; (8000ad0 <LCD_RD_DATA+0x80>)
 8000a9c:	2240      	movs	r2, #64	; 0x40
 8000a9e:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8000aa0:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <LCD_RD_DATA+0x80>)
 8000aa2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aa6:	611a      	str	r2, [r3, #16]

	GPIOB->CRL = 0X33333333; //PB0-7  上拉输出
 8000aa8:	4b08      	ldr	r3, [pc, #32]	; (8000acc <LCD_RD_DATA+0x7c>)
 8000aaa:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000aae:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X33333333; //PB8-15 上拉输出
 8000ab0:	4b06      	ldr	r3, [pc, #24]	; (8000acc <LCD_RD_DATA+0x7c>)
 8000ab2:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000ab6:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0XFFFF;    //全部输出高
 8000ab8:	4b04      	ldr	r3, [pc, #16]	; (8000acc <LCD_RD_DATA+0x7c>)
 8000aba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000abe:	60da      	str	r2, [r3, #12]
	return t;
 8000ac0:	88fb      	ldrh	r3, [r7, #6]
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40010c00 	.word	0x40010c00
 8000ad0:	40011000 	.word	0x40011000
 8000ad4:	200000f4 	.word	0x200000f4

08000ad8 <LCD_WriteReg>:
//写寄存器
//LCD_Reg:寄存器编号
//LCD_RegValue:要写入的值
void LCD_WriteReg(uint16_t LCD_Reg, uint16_t LCD_RegValue) {
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	460a      	mov	r2, r1
 8000ae2:	80fb      	strh	r3, [r7, #6]
 8000ae4:	4613      	mov	r3, r2
 8000ae6:	80bb      	strh	r3, [r7, #4]
	LCD_WR_REG(LCD_Reg);
 8000ae8:	88fb      	ldrh	r3, [r7, #6]
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff ff68 	bl	80009c0 <LCD_WR_REG>
	LCD_WR_DATA(LCD_RegValue);
 8000af0:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <LCD_WriteReg+0x4c>)
 8000af2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000af6:	611a      	str	r2, [r3, #16]
 8000af8:	4b0a      	ldr	r3, [pc, #40]	; (8000b24 <LCD_WriteReg+0x4c>)
 8000afa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000afe:	615a      	str	r2, [r3, #20]
 8000b00:	4a09      	ldr	r2, [pc, #36]	; (8000b28 <LCD_WriteReg+0x50>)
 8000b02:	88bb      	ldrh	r3, [r7, #4]
 8000b04:	60d3      	str	r3, [r2, #12]
 8000b06:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <LCD_WriteReg+0x4c>)
 8000b08:	2280      	movs	r2, #128	; 0x80
 8000b0a:	615a      	str	r2, [r3, #20]
 8000b0c:	4b05      	ldr	r3, [pc, #20]	; (8000b24 <LCD_WriteReg+0x4c>)
 8000b0e:	2280      	movs	r2, #128	; 0x80
 8000b10:	611a      	str	r2, [r3, #16]
 8000b12:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <LCD_WriteReg+0x4c>)
 8000b14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b18:	611a      	str	r2, [r3, #16]
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40011000 	.word	0x40011000
 8000b28:	40010c00 	.word	0x40010c00

08000b2c <LCD_ReadReg>:
//读寄存器
//LCD_Reg:寄存器编号
//返回值:读到的值
uint16_t LCD_ReadReg(uint16_t LCD_Reg) {
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	80fb      	strh	r3, [r7, #6]
	LCD_WR_REG(LCD_Reg);  //写入要读的寄存器号
 8000b36:	88fb      	ldrh	r3, [r7, #6]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff ff41 	bl	80009c0 <LCD_WR_REG>
	return LCD_RD_DATA();
 8000b3e:	f7ff ff87 	bl	8000a50 <LCD_RD_DATA>
 8000b42:	4603      	mov	r3, r0
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <LCD_WriteRAM_Prepare>:
//开始写GRAM
void LCD_WriteRAM_Prepare(void) {
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
	LCD_WR_REG(lcddev.wramcmd);
 8000b50:	4b03      	ldr	r3, [pc, #12]	; (8000b60 <LCD_WriteRAM_Prepare+0x14>)
 8000b52:	891b      	ldrh	r3, [r3, #8]
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff ff33 	bl	80009c0 <LCD_WR_REG>
}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	200000f4 	.word	0x200000f4

08000b64 <LCD_SetCursor>:
		LCD_WriteReg(0X07, 0x0);	//关闭显示
}
//设置光标位置
//Xpos:横坐标
//Ypos:纵坐标
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	460a      	mov	r2, r1
 8000b6e:	80fb      	strh	r3, [r7, #6]
 8000b70:	4613      	mov	r3, r2
 8000b72:	80bb      	strh	r3, [r7, #4]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8000b74:	4b73      	ldr	r3, [pc, #460]	; (8000d44 <LCD_SetCursor+0x1e0>)
 8000b76:	889b      	ldrh	r3, [r3, #4]
 8000b78:	f249 3241 	movw	r2, #37697	; 0x9341
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d005      	beq.n	8000b8c <LCD_SetCursor+0x28>
 8000b80:	4b70      	ldr	r3, [pc, #448]	; (8000d44 <LCD_SetCursor+0x1e0>)
 8000b82:	889b      	ldrh	r3, [r3, #4]
 8000b84:	f245 3210 	movw	r2, #21264	; 0x5310
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d164      	bne.n	8000c56 <LCD_SetCursor+0xf2>
		LCD_WR_REG(lcddev.setxcmd);
 8000b8c:	4b6d      	ldr	r3, [pc, #436]	; (8000d44 <LCD_SetCursor+0x1e0>)
 8000b8e:	895b      	ldrh	r3, [r3, #10]
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff ff15 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000b96:	4b6c      	ldr	r3, [pc, #432]	; (8000d48 <LCD_SetCursor+0x1e4>)
 8000b98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b9c:	611a      	str	r2, [r3, #16]
 8000b9e:	4b6a      	ldr	r3, [pc, #424]	; (8000d48 <LCD_SetCursor+0x1e4>)
 8000ba0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ba4:	615a      	str	r2, [r3, #20]
 8000ba6:	88fb      	ldrh	r3, [r7, #6]
 8000ba8:	0a1b      	lsrs	r3, r3, #8
 8000baa:	b29a      	uxth	r2, r3
 8000bac:	4b67      	ldr	r3, [pc, #412]	; (8000d4c <LCD_SetCursor+0x1e8>)
 8000bae:	60da      	str	r2, [r3, #12]
 8000bb0:	4b65      	ldr	r3, [pc, #404]	; (8000d48 <LCD_SetCursor+0x1e4>)
 8000bb2:	2280      	movs	r2, #128	; 0x80
 8000bb4:	615a      	str	r2, [r3, #20]
 8000bb6:	4b64      	ldr	r3, [pc, #400]	; (8000d48 <LCD_SetCursor+0x1e4>)
 8000bb8:	2280      	movs	r2, #128	; 0x80
 8000bba:	611a      	str	r2, [r3, #16]
 8000bbc:	4b62      	ldr	r3, [pc, #392]	; (8000d48 <LCD_SetCursor+0x1e4>)
 8000bbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bc2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8000bc4:	4b60      	ldr	r3, [pc, #384]	; (8000d48 <LCD_SetCursor+0x1e4>)
 8000bc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bca:	611a      	str	r2, [r3, #16]
 8000bcc:	4b5e      	ldr	r3, [pc, #376]	; (8000d48 <LCD_SetCursor+0x1e4>)
 8000bce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bd2:	615a      	str	r2, [r3, #20]
 8000bd4:	88fb      	ldrh	r3, [r7, #6]
 8000bd6:	4a5d      	ldr	r2, [pc, #372]	; (8000d4c <LCD_SetCursor+0x1e8>)
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	60d3      	str	r3, [r2, #12]
 8000bdc:	4b5a      	ldr	r3, [pc, #360]	; (8000d48 <LCD_SetCursor+0x1e4>)
 8000bde:	2280      	movs	r2, #128	; 0x80
 8000be0:	615a      	str	r2, [r3, #20]
 8000be2:	4b59      	ldr	r3, [pc, #356]	; (8000d48 <LCD_SetCursor+0x1e4>)
 8000be4:	2280      	movs	r2, #128	; 0x80
 8000be6:	611a      	str	r2, [r3, #16]
 8000be8:	4b57      	ldr	r3, [pc, #348]	; (8000d48 <LCD_SetCursor+0x1e4>)
 8000bea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bee:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000bf0:	4b54      	ldr	r3, [pc, #336]	; (8000d44 <LCD_SetCursor+0x1e0>)
 8000bf2:	899b      	ldrh	r3, [r3, #12]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff fee3 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000bfa:	4b53      	ldr	r3, [pc, #332]	; (8000d48 <LCD_SetCursor+0x1e4>)
 8000bfc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c00:	611a      	str	r2, [r3, #16]
 8000c02:	4b51      	ldr	r3, [pc, #324]	; (8000d48 <LCD_SetCursor+0x1e4>)
 8000c04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c08:	615a      	str	r2, [r3, #20]
 8000c0a:	88bb      	ldrh	r3, [r7, #4]
 8000c0c:	0a1b      	lsrs	r3, r3, #8
 8000c0e:	b29a      	uxth	r2, r3
 8000c10:	4b4e      	ldr	r3, [pc, #312]	; (8000d4c <LCD_SetCursor+0x1e8>)
 8000c12:	60da      	str	r2, [r3, #12]
 8000c14:	4b4c      	ldr	r3, [pc, #304]	; (8000d48 <LCD_SetCursor+0x1e4>)
 8000c16:	2280      	movs	r2, #128	; 0x80
 8000c18:	615a      	str	r2, [r3, #20]
 8000c1a:	4b4b      	ldr	r3, [pc, #300]	; (8000d48 <LCD_SetCursor+0x1e4>)
 8000c1c:	2280      	movs	r2, #128	; 0x80
 8000c1e:	611a      	str	r2, [r3, #16]
 8000c20:	4b49      	ldr	r3, [pc, #292]	; (8000d48 <LCD_SetCursor+0x1e4>)
 8000c22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c26:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000c28:	4b47      	ldr	r3, [pc, #284]	; (8000d48 <LCD_SetCursor+0x1e4>)
 8000c2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c2e:	611a      	str	r2, [r3, #16]
 8000c30:	4b45      	ldr	r3, [pc, #276]	; (8000d48 <LCD_SetCursor+0x1e4>)
 8000c32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c36:	615a      	str	r2, [r3, #20]
 8000c38:	88bb      	ldrh	r3, [r7, #4]
 8000c3a:	4a44      	ldr	r2, [pc, #272]	; (8000d4c <LCD_SetCursor+0x1e8>)
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	60d3      	str	r3, [r2, #12]
 8000c40:	4b41      	ldr	r3, [pc, #260]	; (8000d48 <LCD_SetCursor+0x1e4>)
 8000c42:	2280      	movs	r2, #128	; 0x80
 8000c44:	615a      	str	r2, [r3, #20]
 8000c46:	4b40      	ldr	r3, [pc, #256]	; (8000d48 <LCD_SetCursor+0x1e4>)
 8000c48:	2280      	movs	r2, #128	; 0x80
 8000c4a:	611a      	str	r2, [r3, #16]
 8000c4c:	4b3e      	ldr	r3, [pc, #248]	; (8000d48 <LCD_SetCursor+0x1e4>)
 8000c4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c52:	611a      	str	r2, [r3, #16]
		if (lcddev.dir == 1)
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
		LCD_WriteReg(lcddev.setxcmd, Xpos);
		LCD_WriteReg(lcddev.setycmd, Ypos);
	}
}
 8000c54:	e248      	b.n	80010e8 <LCD_SetCursor+0x584>
	} else if (lcddev.id == 0X6804) {
 8000c56:	4b3b      	ldr	r3, [pc, #236]	; (8000d44 <LCD_SetCursor+0x1e0>)
 8000c58:	889b      	ldrh	r3, [r3, #4]
 8000c5a:	f646 0204 	movw	r2, #26628	; 0x6804
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d176      	bne.n	8000d50 <LCD_SetCursor+0x1ec>
		if (lcddev.dir == 1)
 8000c62:	4b38      	ldr	r3, [pc, #224]	; (8000d44 <LCD_SetCursor+0x1e0>)
 8000c64:	799b      	ldrb	r3, [r3, #6]
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d106      	bne.n	8000c78 <LCD_SetCursor+0x114>
			Xpos = lcddev.width - 1 - Xpos;	//横屏时处理
 8000c6a:	4b36      	ldr	r3, [pc, #216]	; (8000d44 <LCD_SetCursor+0x1e0>)
 8000c6c:	881a      	ldrh	r2, [r3, #0]
 8000c6e:	88fb      	ldrh	r3, [r7, #6]
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	b29b      	uxth	r3, r3
 8000c74:	3b01      	subs	r3, #1
 8000c76:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8000c78:	4b32      	ldr	r3, [pc, #200]	; (8000d44 <LCD_SetCursor+0x1e0>)
 8000c7a:	895b      	ldrh	r3, [r3, #10]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff fe9f 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000c82:	4b31      	ldr	r3, [pc, #196]	; (8000d48 <LCD_SetCursor+0x1e4>)
 8000c84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c88:	611a      	str	r2, [r3, #16]
 8000c8a:	4b2f      	ldr	r3, [pc, #188]	; (8000d48 <LCD_SetCursor+0x1e4>)
 8000c8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c90:	615a      	str	r2, [r3, #20]
 8000c92:	88fb      	ldrh	r3, [r7, #6]
 8000c94:	0a1b      	lsrs	r3, r3, #8
 8000c96:	b29a      	uxth	r2, r3
 8000c98:	4b2c      	ldr	r3, [pc, #176]	; (8000d4c <LCD_SetCursor+0x1e8>)
 8000c9a:	60da      	str	r2, [r3, #12]
 8000c9c:	4b2a      	ldr	r3, [pc, #168]	; (8000d48 <LCD_SetCursor+0x1e4>)
 8000c9e:	2280      	movs	r2, #128	; 0x80
 8000ca0:	615a      	str	r2, [r3, #20]
 8000ca2:	4b29      	ldr	r3, [pc, #164]	; (8000d48 <LCD_SetCursor+0x1e4>)
 8000ca4:	2280      	movs	r2, #128	; 0x80
 8000ca6:	611a      	str	r2, [r3, #16]
 8000ca8:	4b27      	ldr	r3, [pc, #156]	; (8000d48 <LCD_SetCursor+0x1e4>)
 8000caa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cae:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8000cb0:	4b25      	ldr	r3, [pc, #148]	; (8000d48 <LCD_SetCursor+0x1e4>)
 8000cb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cb6:	611a      	str	r2, [r3, #16]
 8000cb8:	4b23      	ldr	r3, [pc, #140]	; (8000d48 <LCD_SetCursor+0x1e4>)
 8000cba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cbe:	615a      	str	r2, [r3, #20]
 8000cc0:	88fb      	ldrh	r3, [r7, #6]
 8000cc2:	4a22      	ldr	r2, [pc, #136]	; (8000d4c <LCD_SetCursor+0x1e8>)
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	60d3      	str	r3, [r2, #12]
 8000cc8:	4b1f      	ldr	r3, [pc, #124]	; (8000d48 <LCD_SetCursor+0x1e4>)
 8000cca:	2280      	movs	r2, #128	; 0x80
 8000ccc:	615a      	str	r2, [r3, #20]
 8000cce:	4b1e      	ldr	r3, [pc, #120]	; (8000d48 <LCD_SetCursor+0x1e4>)
 8000cd0:	2280      	movs	r2, #128	; 0x80
 8000cd2:	611a      	str	r2, [r3, #16]
 8000cd4:	4b1c      	ldr	r3, [pc, #112]	; (8000d48 <LCD_SetCursor+0x1e4>)
 8000cd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cda:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000cdc:	4b19      	ldr	r3, [pc, #100]	; (8000d44 <LCD_SetCursor+0x1e0>)
 8000cde:	899b      	ldrh	r3, [r3, #12]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff fe6d 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000ce6:	4b18      	ldr	r3, [pc, #96]	; (8000d48 <LCD_SetCursor+0x1e4>)
 8000ce8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cec:	611a      	str	r2, [r3, #16]
 8000cee:	4b16      	ldr	r3, [pc, #88]	; (8000d48 <LCD_SetCursor+0x1e4>)
 8000cf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cf4:	615a      	str	r2, [r3, #20]
 8000cf6:	88bb      	ldrh	r3, [r7, #4]
 8000cf8:	0a1b      	lsrs	r3, r3, #8
 8000cfa:	b29a      	uxth	r2, r3
 8000cfc:	4b13      	ldr	r3, [pc, #76]	; (8000d4c <LCD_SetCursor+0x1e8>)
 8000cfe:	60da      	str	r2, [r3, #12]
 8000d00:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <LCD_SetCursor+0x1e4>)
 8000d02:	2280      	movs	r2, #128	; 0x80
 8000d04:	615a      	str	r2, [r3, #20]
 8000d06:	4b10      	ldr	r3, [pc, #64]	; (8000d48 <LCD_SetCursor+0x1e4>)
 8000d08:	2280      	movs	r2, #128	; 0x80
 8000d0a:	611a      	str	r2, [r3, #16]
 8000d0c:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <LCD_SetCursor+0x1e4>)
 8000d0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d12:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000d14:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <LCD_SetCursor+0x1e4>)
 8000d16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d1a:	611a      	str	r2, [r3, #16]
 8000d1c:	4b0a      	ldr	r3, [pc, #40]	; (8000d48 <LCD_SetCursor+0x1e4>)
 8000d1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d22:	615a      	str	r2, [r3, #20]
 8000d24:	88bb      	ldrh	r3, [r7, #4]
 8000d26:	4a09      	ldr	r2, [pc, #36]	; (8000d4c <LCD_SetCursor+0x1e8>)
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	60d3      	str	r3, [r2, #12]
 8000d2c:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <LCD_SetCursor+0x1e4>)
 8000d2e:	2280      	movs	r2, #128	; 0x80
 8000d30:	615a      	str	r2, [r3, #20]
 8000d32:	4b05      	ldr	r3, [pc, #20]	; (8000d48 <LCD_SetCursor+0x1e4>)
 8000d34:	2280      	movs	r2, #128	; 0x80
 8000d36:	611a      	str	r2, [r3, #16]
 8000d38:	4b03      	ldr	r3, [pc, #12]	; (8000d48 <LCD_SetCursor+0x1e4>)
 8000d3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d3e:	611a      	str	r2, [r3, #16]
}
 8000d40:	e1d2      	b.n	80010e8 <LCD_SetCursor+0x584>
 8000d42:	bf00      	nop
 8000d44:	200000f4 	.word	0x200000f4
 8000d48:	40011000 	.word	0x40011000
 8000d4c:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 8000d50:	4b99      	ldr	r3, [pc, #612]	; (8000fb8 <LCD_SetCursor+0x454>)
 8000d52:	889b      	ldrh	r3, [r3, #4]
 8000d54:	f641 1263 	movw	r2, #6499	; 0x1963
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	f040 8133 	bne.w	8000fc4 <LCD_SetCursor+0x460>
		if (lcddev.dir == 0)	//x坐标需要变换
 8000d5e:	4b96      	ldr	r3, [pc, #600]	; (8000fb8 <LCD_SetCursor+0x454>)
 8000d60:	799b      	ldrb	r3, [r3, #6]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d163      	bne.n	8000e2e <LCD_SetCursor+0x2ca>
			Xpos = lcddev.width - 1 - Xpos;
 8000d66:	4b94      	ldr	r3, [pc, #592]	; (8000fb8 <LCD_SetCursor+0x454>)
 8000d68:	881a      	ldrh	r2, [r3, #0]
 8000d6a:	88fb      	ldrh	r3, [r7, #6]
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	3b01      	subs	r3, #1
 8000d72:	80fb      	strh	r3, [r7, #6]
			LCD_WR_REG(lcddev.setxcmd);
 8000d74:	4b90      	ldr	r3, [pc, #576]	; (8000fb8 <LCD_SetCursor+0x454>)
 8000d76:	895b      	ldrh	r3, [r3, #10]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff fe21 	bl	80009c0 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8000d7e:	4b8f      	ldr	r3, [pc, #572]	; (8000fbc <LCD_SetCursor+0x458>)
 8000d80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d84:	611a      	str	r2, [r3, #16]
 8000d86:	4b8d      	ldr	r3, [pc, #564]	; (8000fbc <LCD_SetCursor+0x458>)
 8000d88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d8c:	615a      	str	r2, [r3, #20]
 8000d8e:	4b8c      	ldr	r3, [pc, #560]	; (8000fc0 <LCD_SetCursor+0x45c>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	60da      	str	r2, [r3, #12]
 8000d94:	4b89      	ldr	r3, [pc, #548]	; (8000fbc <LCD_SetCursor+0x458>)
 8000d96:	2280      	movs	r2, #128	; 0x80
 8000d98:	615a      	str	r2, [r3, #20]
 8000d9a:	4b88      	ldr	r3, [pc, #544]	; (8000fbc <LCD_SetCursor+0x458>)
 8000d9c:	2280      	movs	r2, #128	; 0x80
 8000d9e:	611a      	str	r2, [r3, #16]
 8000da0:	4b86      	ldr	r3, [pc, #536]	; (8000fbc <LCD_SetCursor+0x458>)
 8000da2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000da6:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8000da8:	4b84      	ldr	r3, [pc, #528]	; (8000fbc <LCD_SetCursor+0x458>)
 8000daa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dae:	611a      	str	r2, [r3, #16]
 8000db0:	4b82      	ldr	r3, [pc, #520]	; (8000fbc <LCD_SetCursor+0x458>)
 8000db2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000db6:	615a      	str	r2, [r3, #20]
 8000db8:	4b81      	ldr	r3, [pc, #516]	; (8000fc0 <LCD_SetCursor+0x45c>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	4b7f      	ldr	r3, [pc, #508]	; (8000fbc <LCD_SetCursor+0x458>)
 8000dc0:	2280      	movs	r2, #128	; 0x80
 8000dc2:	615a      	str	r2, [r3, #20]
 8000dc4:	4b7d      	ldr	r3, [pc, #500]	; (8000fbc <LCD_SetCursor+0x458>)
 8000dc6:	2280      	movs	r2, #128	; 0x80
 8000dc8:	611a      	str	r2, [r3, #16]
 8000dca:	4b7c      	ldr	r3, [pc, #496]	; (8000fbc <LCD_SetCursor+0x458>)
 8000dcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dd0:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos >> 8);
 8000dd2:	4b7a      	ldr	r3, [pc, #488]	; (8000fbc <LCD_SetCursor+0x458>)
 8000dd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dd8:	611a      	str	r2, [r3, #16]
 8000dda:	4b78      	ldr	r3, [pc, #480]	; (8000fbc <LCD_SetCursor+0x458>)
 8000ddc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000de0:	615a      	str	r2, [r3, #20]
 8000de2:	88fb      	ldrh	r3, [r7, #6]
 8000de4:	0a1b      	lsrs	r3, r3, #8
 8000de6:	b29a      	uxth	r2, r3
 8000de8:	4b75      	ldr	r3, [pc, #468]	; (8000fc0 <LCD_SetCursor+0x45c>)
 8000dea:	60da      	str	r2, [r3, #12]
 8000dec:	4b73      	ldr	r3, [pc, #460]	; (8000fbc <LCD_SetCursor+0x458>)
 8000dee:	2280      	movs	r2, #128	; 0x80
 8000df0:	615a      	str	r2, [r3, #20]
 8000df2:	4b72      	ldr	r3, [pc, #456]	; (8000fbc <LCD_SetCursor+0x458>)
 8000df4:	2280      	movs	r2, #128	; 0x80
 8000df6:	611a      	str	r2, [r3, #16]
 8000df8:	4b70      	ldr	r3, [pc, #448]	; (8000fbc <LCD_SetCursor+0x458>)
 8000dfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dfe:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8000e00:	4b6e      	ldr	r3, [pc, #440]	; (8000fbc <LCD_SetCursor+0x458>)
 8000e02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e06:	611a      	str	r2, [r3, #16]
 8000e08:	4b6c      	ldr	r3, [pc, #432]	; (8000fbc <LCD_SetCursor+0x458>)
 8000e0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e0e:	615a      	str	r2, [r3, #20]
 8000e10:	88fb      	ldrh	r3, [r7, #6]
 8000e12:	4a6b      	ldr	r2, [pc, #428]	; (8000fc0 <LCD_SetCursor+0x45c>)
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	60d3      	str	r3, [r2, #12]
 8000e18:	4b68      	ldr	r3, [pc, #416]	; (8000fbc <LCD_SetCursor+0x458>)
 8000e1a:	2280      	movs	r2, #128	; 0x80
 8000e1c:	615a      	str	r2, [r3, #20]
 8000e1e:	4b67      	ldr	r3, [pc, #412]	; (8000fbc <LCD_SetCursor+0x458>)
 8000e20:	2280      	movs	r2, #128	; 0x80
 8000e22:	611a      	str	r2, [r3, #16]
 8000e24:	4b65      	ldr	r3, [pc, #404]	; (8000fbc <LCD_SetCursor+0x458>)
 8000e26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e2a:	611a      	str	r2, [r3, #16]
 8000e2c:	e061      	b.n	8000ef2 <LCD_SetCursor+0x38e>
			LCD_WR_REG(lcddev.setxcmd);
 8000e2e:	4b62      	ldr	r3, [pc, #392]	; (8000fb8 <LCD_SetCursor+0x454>)
 8000e30:	895b      	ldrh	r3, [r3, #10]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff fdc4 	bl	80009c0 <LCD_WR_REG>
			LCD_WR_DATA(Xpos >> 8);
 8000e38:	4b60      	ldr	r3, [pc, #384]	; (8000fbc <LCD_SetCursor+0x458>)
 8000e3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e3e:	611a      	str	r2, [r3, #16]
 8000e40:	4b5e      	ldr	r3, [pc, #376]	; (8000fbc <LCD_SetCursor+0x458>)
 8000e42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e46:	615a      	str	r2, [r3, #20]
 8000e48:	88fb      	ldrh	r3, [r7, #6]
 8000e4a:	0a1b      	lsrs	r3, r3, #8
 8000e4c:	b29a      	uxth	r2, r3
 8000e4e:	4b5c      	ldr	r3, [pc, #368]	; (8000fc0 <LCD_SetCursor+0x45c>)
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	4b5a      	ldr	r3, [pc, #360]	; (8000fbc <LCD_SetCursor+0x458>)
 8000e54:	2280      	movs	r2, #128	; 0x80
 8000e56:	615a      	str	r2, [r3, #20]
 8000e58:	4b58      	ldr	r3, [pc, #352]	; (8000fbc <LCD_SetCursor+0x458>)
 8000e5a:	2280      	movs	r2, #128	; 0x80
 8000e5c:	611a      	str	r2, [r3, #16]
 8000e5e:	4b57      	ldr	r3, [pc, #348]	; (8000fbc <LCD_SetCursor+0x458>)
 8000e60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e64:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8000e66:	4b55      	ldr	r3, [pc, #340]	; (8000fbc <LCD_SetCursor+0x458>)
 8000e68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e6c:	611a      	str	r2, [r3, #16]
 8000e6e:	4b53      	ldr	r3, [pc, #332]	; (8000fbc <LCD_SetCursor+0x458>)
 8000e70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e74:	615a      	str	r2, [r3, #20]
 8000e76:	88fb      	ldrh	r3, [r7, #6]
 8000e78:	4a51      	ldr	r2, [pc, #324]	; (8000fc0 <LCD_SetCursor+0x45c>)
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	60d3      	str	r3, [r2, #12]
 8000e7e:	4b4f      	ldr	r3, [pc, #316]	; (8000fbc <LCD_SetCursor+0x458>)
 8000e80:	2280      	movs	r2, #128	; 0x80
 8000e82:	615a      	str	r2, [r3, #20]
 8000e84:	4b4d      	ldr	r3, [pc, #308]	; (8000fbc <LCD_SetCursor+0x458>)
 8000e86:	2280      	movs	r2, #128	; 0x80
 8000e88:	611a      	str	r2, [r3, #16]
 8000e8a:	4b4c      	ldr	r3, [pc, #304]	; (8000fbc <LCD_SetCursor+0x458>)
 8000e8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e90:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 8000e92:	4b4a      	ldr	r3, [pc, #296]	; (8000fbc <LCD_SetCursor+0x458>)
 8000e94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e98:	611a      	str	r2, [r3, #16]
 8000e9a:	4b48      	ldr	r3, [pc, #288]	; (8000fbc <LCD_SetCursor+0x458>)
 8000e9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ea0:	615a      	str	r2, [r3, #20]
 8000ea2:	4b45      	ldr	r3, [pc, #276]	; (8000fb8 <LCD_SetCursor+0x454>)
 8000ea4:	881b      	ldrh	r3, [r3, #0]
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	121a      	asrs	r2, r3, #8
 8000eaa:	4b45      	ldr	r3, [pc, #276]	; (8000fc0 <LCD_SetCursor+0x45c>)
 8000eac:	60da      	str	r2, [r3, #12]
 8000eae:	4b43      	ldr	r3, [pc, #268]	; (8000fbc <LCD_SetCursor+0x458>)
 8000eb0:	2280      	movs	r2, #128	; 0x80
 8000eb2:	615a      	str	r2, [r3, #20]
 8000eb4:	4b41      	ldr	r3, [pc, #260]	; (8000fbc <LCD_SetCursor+0x458>)
 8000eb6:	2280      	movs	r2, #128	; 0x80
 8000eb8:	611a      	str	r2, [r3, #16]
 8000eba:	4b40      	ldr	r3, [pc, #256]	; (8000fbc <LCD_SetCursor+0x458>)
 8000ebc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ec0:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8000ec2:	4b3e      	ldr	r3, [pc, #248]	; (8000fbc <LCD_SetCursor+0x458>)
 8000ec4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ec8:	611a      	str	r2, [r3, #16]
 8000eca:	4b3c      	ldr	r3, [pc, #240]	; (8000fbc <LCD_SetCursor+0x458>)
 8000ecc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ed0:	615a      	str	r2, [r3, #20]
 8000ed2:	4b39      	ldr	r3, [pc, #228]	; (8000fb8 <LCD_SetCursor+0x454>)
 8000ed4:	881b      	ldrh	r3, [r3, #0]
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	4a39      	ldr	r2, [pc, #228]	; (8000fc0 <LCD_SetCursor+0x45c>)
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	60d3      	str	r3, [r2, #12]
 8000ede:	4b37      	ldr	r3, [pc, #220]	; (8000fbc <LCD_SetCursor+0x458>)
 8000ee0:	2280      	movs	r2, #128	; 0x80
 8000ee2:	615a      	str	r2, [r3, #20]
 8000ee4:	4b35      	ldr	r3, [pc, #212]	; (8000fbc <LCD_SetCursor+0x458>)
 8000ee6:	2280      	movs	r2, #128	; 0x80
 8000ee8:	611a      	str	r2, [r3, #16]
 8000eea:	4b34      	ldr	r3, [pc, #208]	; (8000fbc <LCD_SetCursor+0x458>)
 8000eec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ef0:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000ef2:	4b31      	ldr	r3, [pc, #196]	; (8000fb8 <LCD_SetCursor+0x454>)
 8000ef4:	899b      	ldrh	r3, [r3, #12]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff fd62 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000efc:	4b2f      	ldr	r3, [pc, #188]	; (8000fbc <LCD_SetCursor+0x458>)
 8000efe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f02:	611a      	str	r2, [r3, #16]
 8000f04:	4b2d      	ldr	r3, [pc, #180]	; (8000fbc <LCD_SetCursor+0x458>)
 8000f06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f0a:	615a      	str	r2, [r3, #20]
 8000f0c:	88bb      	ldrh	r3, [r7, #4]
 8000f0e:	0a1b      	lsrs	r3, r3, #8
 8000f10:	b29a      	uxth	r2, r3
 8000f12:	4b2b      	ldr	r3, [pc, #172]	; (8000fc0 <LCD_SetCursor+0x45c>)
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	4b29      	ldr	r3, [pc, #164]	; (8000fbc <LCD_SetCursor+0x458>)
 8000f18:	2280      	movs	r2, #128	; 0x80
 8000f1a:	615a      	str	r2, [r3, #20]
 8000f1c:	4b27      	ldr	r3, [pc, #156]	; (8000fbc <LCD_SetCursor+0x458>)
 8000f1e:	2280      	movs	r2, #128	; 0x80
 8000f20:	611a      	str	r2, [r3, #16]
 8000f22:	4b26      	ldr	r3, [pc, #152]	; (8000fbc <LCD_SetCursor+0x458>)
 8000f24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f28:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000f2a:	4b24      	ldr	r3, [pc, #144]	; (8000fbc <LCD_SetCursor+0x458>)
 8000f2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f30:	611a      	str	r2, [r3, #16]
 8000f32:	4b22      	ldr	r3, [pc, #136]	; (8000fbc <LCD_SetCursor+0x458>)
 8000f34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f38:	615a      	str	r2, [r3, #20]
 8000f3a:	88bb      	ldrh	r3, [r7, #4]
 8000f3c:	4a20      	ldr	r2, [pc, #128]	; (8000fc0 <LCD_SetCursor+0x45c>)
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	60d3      	str	r3, [r2, #12]
 8000f42:	4b1e      	ldr	r3, [pc, #120]	; (8000fbc <LCD_SetCursor+0x458>)
 8000f44:	2280      	movs	r2, #128	; 0x80
 8000f46:	615a      	str	r2, [r3, #20]
 8000f48:	4b1c      	ldr	r3, [pc, #112]	; (8000fbc <LCD_SetCursor+0x458>)
 8000f4a:	2280      	movs	r2, #128	; 0x80
 8000f4c:	611a      	str	r2, [r3, #16]
 8000f4e:	4b1b      	ldr	r3, [pc, #108]	; (8000fbc <LCD_SetCursor+0x458>)
 8000f50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f54:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) >> 8);
 8000f56:	4b19      	ldr	r3, [pc, #100]	; (8000fbc <LCD_SetCursor+0x458>)
 8000f58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f5c:	611a      	str	r2, [r3, #16]
 8000f5e:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <LCD_SetCursor+0x458>)
 8000f60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f64:	615a      	str	r2, [r3, #20]
 8000f66:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <LCD_SetCursor+0x454>)
 8000f68:	885b      	ldrh	r3, [r3, #2]
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	121a      	asrs	r2, r3, #8
 8000f6e:	4b14      	ldr	r3, [pc, #80]	; (8000fc0 <LCD_SetCursor+0x45c>)
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <LCD_SetCursor+0x458>)
 8000f74:	2280      	movs	r2, #128	; 0x80
 8000f76:	615a      	str	r2, [r3, #20]
 8000f78:	4b10      	ldr	r3, [pc, #64]	; (8000fbc <LCD_SetCursor+0x458>)
 8000f7a:	2280      	movs	r2, #128	; 0x80
 8000f7c:	611a      	str	r2, [r3, #16]
 8000f7e:	4b0f      	ldr	r3, [pc, #60]	; (8000fbc <LCD_SetCursor+0x458>)
 8000f80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f84:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8000f86:	4b0d      	ldr	r3, [pc, #52]	; (8000fbc <LCD_SetCursor+0x458>)
 8000f88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f8c:	611a      	str	r2, [r3, #16]
 8000f8e:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <LCD_SetCursor+0x458>)
 8000f90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f94:	615a      	str	r2, [r3, #20]
 8000f96:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <LCD_SetCursor+0x454>)
 8000f98:	885b      	ldrh	r3, [r3, #2]
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	4a08      	ldr	r2, [pc, #32]	; (8000fc0 <LCD_SetCursor+0x45c>)
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	60d3      	str	r3, [r2, #12]
 8000fa2:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <LCD_SetCursor+0x458>)
 8000fa4:	2280      	movs	r2, #128	; 0x80
 8000fa6:	615a      	str	r2, [r3, #20]
 8000fa8:	4b04      	ldr	r3, [pc, #16]	; (8000fbc <LCD_SetCursor+0x458>)
 8000faa:	2280      	movs	r2, #128	; 0x80
 8000fac:	611a      	str	r2, [r3, #16]
 8000fae:	4b03      	ldr	r3, [pc, #12]	; (8000fbc <LCD_SetCursor+0x458>)
 8000fb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fb4:	611a      	str	r2, [r3, #16]
}
 8000fb6:	e097      	b.n	80010e8 <LCD_SetCursor+0x584>
 8000fb8:	200000f4 	.word	0x200000f4
 8000fbc:	40011000 	.word	0x40011000
 8000fc0:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X5510) {
 8000fc4:	4b4a      	ldr	r3, [pc, #296]	; (80010f0 <LCD_SetCursor+0x58c>)
 8000fc6:	889b      	ldrh	r3, [r3, #4]
 8000fc8:	f245 5210 	movw	r2, #21776	; 0x5510
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d172      	bne.n	80010b6 <LCD_SetCursor+0x552>
		LCD_WR_REG(lcddev.setxcmd);
 8000fd0:	4b47      	ldr	r3, [pc, #284]	; (80010f0 <LCD_SetCursor+0x58c>)
 8000fd2:	895b      	ldrh	r3, [r3, #10]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff fcf3 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000fda:	4b46      	ldr	r3, [pc, #280]	; (80010f4 <LCD_SetCursor+0x590>)
 8000fdc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fe0:	611a      	str	r2, [r3, #16]
 8000fe2:	4b44      	ldr	r3, [pc, #272]	; (80010f4 <LCD_SetCursor+0x590>)
 8000fe4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fe8:	615a      	str	r2, [r3, #20]
 8000fea:	88fb      	ldrh	r3, [r7, #6]
 8000fec:	0a1b      	lsrs	r3, r3, #8
 8000fee:	b29a      	uxth	r2, r3
 8000ff0:	4b41      	ldr	r3, [pc, #260]	; (80010f8 <LCD_SetCursor+0x594>)
 8000ff2:	60da      	str	r2, [r3, #12]
 8000ff4:	4b3f      	ldr	r3, [pc, #252]	; (80010f4 <LCD_SetCursor+0x590>)
 8000ff6:	2280      	movs	r2, #128	; 0x80
 8000ff8:	615a      	str	r2, [r3, #20]
 8000ffa:	4b3e      	ldr	r3, [pc, #248]	; (80010f4 <LCD_SetCursor+0x590>)
 8000ffc:	2280      	movs	r2, #128	; 0x80
 8000ffe:	611a      	str	r2, [r3, #16]
 8001000:	4b3c      	ldr	r3, [pc, #240]	; (80010f4 <LCD_SetCursor+0x590>)
 8001002:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001006:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 8001008:	4b39      	ldr	r3, [pc, #228]	; (80010f0 <LCD_SetCursor+0x58c>)
 800100a:	895b      	ldrh	r3, [r3, #10]
 800100c:	3301      	adds	r3, #1
 800100e:	b29b      	uxth	r3, r3
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff fcd5 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATA(Xpos & 0XFF);
 8001016:	4b37      	ldr	r3, [pc, #220]	; (80010f4 <LCD_SetCursor+0x590>)
 8001018:	f44f 7280 	mov.w	r2, #256	; 0x100
 800101c:	611a      	str	r2, [r3, #16]
 800101e:	4b35      	ldr	r3, [pc, #212]	; (80010f4 <LCD_SetCursor+0x590>)
 8001020:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001024:	615a      	str	r2, [r3, #20]
 8001026:	88fb      	ldrh	r3, [r7, #6]
 8001028:	4a33      	ldr	r2, [pc, #204]	; (80010f8 <LCD_SetCursor+0x594>)
 800102a:	b2db      	uxtb	r3, r3
 800102c:	60d3      	str	r3, [r2, #12]
 800102e:	4b31      	ldr	r3, [pc, #196]	; (80010f4 <LCD_SetCursor+0x590>)
 8001030:	2280      	movs	r2, #128	; 0x80
 8001032:	615a      	str	r2, [r3, #20]
 8001034:	4b2f      	ldr	r3, [pc, #188]	; (80010f4 <LCD_SetCursor+0x590>)
 8001036:	2280      	movs	r2, #128	; 0x80
 8001038:	611a      	str	r2, [r3, #16]
 800103a:	4b2e      	ldr	r3, [pc, #184]	; (80010f4 <LCD_SetCursor+0x590>)
 800103c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001040:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8001042:	4b2b      	ldr	r3, [pc, #172]	; (80010f0 <LCD_SetCursor+0x58c>)
 8001044:	899b      	ldrh	r3, [r3, #12]
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff fcba 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 800104c:	4b29      	ldr	r3, [pc, #164]	; (80010f4 <LCD_SetCursor+0x590>)
 800104e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001052:	611a      	str	r2, [r3, #16]
 8001054:	4b27      	ldr	r3, [pc, #156]	; (80010f4 <LCD_SetCursor+0x590>)
 8001056:	f44f 7200 	mov.w	r2, #512	; 0x200
 800105a:	615a      	str	r2, [r3, #20]
 800105c:	88bb      	ldrh	r3, [r7, #4]
 800105e:	0a1b      	lsrs	r3, r3, #8
 8001060:	b29a      	uxth	r2, r3
 8001062:	4b25      	ldr	r3, [pc, #148]	; (80010f8 <LCD_SetCursor+0x594>)
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	4b23      	ldr	r3, [pc, #140]	; (80010f4 <LCD_SetCursor+0x590>)
 8001068:	2280      	movs	r2, #128	; 0x80
 800106a:	615a      	str	r2, [r3, #20]
 800106c:	4b21      	ldr	r3, [pc, #132]	; (80010f4 <LCD_SetCursor+0x590>)
 800106e:	2280      	movs	r2, #128	; 0x80
 8001070:	611a      	str	r2, [r3, #16]
 8001072:	4b20      	ldr	r3, [pc, #128]	; (80010f4 <LCD_SetCursor+0x590>)
 8001074:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001078:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 800107a:	4b1d      	ldr	r3, [pc, #116]	; (80010f0 <LCD_SetCursor+0x58c>)
 800107c:	899b      	ldrh	r3, [r3, #12]
 800107e:	3301      	adds	r3, #1
 8001080:	b29b      	uxth	r3, r3
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff fc9c 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATA(Ypos & 0XFF);
 8001088:	4b1a      	ldr	r3, [pc, #104]	; (80010f4 <LCD_SetCursor+0x590>)
 800108a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800108e:	611a      	str	r2, [r3, #16]
 8001090:	4b18      	ldr	r3, [pc, #96]	; (80010f4 <LCD_SetCursor+0x590>)
 8001092:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001096:	615a      	str	r2, [r3, #20]
 8001098:	88bb      	ldrh	r3, [r7, #4]
 800109a:	4a17      	ldr	r2, [pc, #92]	; (80010f8 <LCD_SetCursor+0x594>)
 800109c:	b2db      	uxtb	r3, r3
 800109e:	60d3      	str	r3, [r2, #12]
 80010a0:	4b14      	ldr	r3, [pc, #80]	; (80010f4 <LCD_SetCursor+0x590>)
 80010a2:	2280      	movs	r2, #128	; 0x80
 80010a4:	615a      	str	r2, [r3, #20]
 80010a6:	4b13      	ldr	r3, [pc, #76]	; (80010f4 <LCD_SetCursor+0x590>)
 80010a8:	2280      	movs	r2, #128	; 0x80
 80010aa:	611a      	str	r2, [r3, #16]
 80010ac:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <LCD_SetCursor+0x590>)
 80010ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010b2:	611a      	str	r2, [r3, #16]
}
 80010b4:	e018      	b.n	80010e8 <LCD_SetCursor+0x584>
		if (lcddev.dir == 1)
 80010b6:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <LCD_SetCursor+0x58c>)
 80010b8:	799b      	ldrb	r3, [r3, #6]
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d106      	bne.n	80010cc <LCD_SetCursor+0x568>
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
 80010be:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <LCD_SetCursor+0x58c>)
 80010c0:	881a      	ldrh	r2, [r3, #0]
 80010c2:	88fb      	ldrh	r3, [r7, #6]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	3b01      	subs	r3, #1
 80010ca:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, Xpos);
 80010cc:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <LCD_SetCursor+0x58c>)
 80010ce:	895b      	ldrh	r3, [r3, #10]
 80010d0:	88fa      	ldrh	r2, [r7, #6]
 80010d2:	4611      	mov	r1, r2
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff fcff 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, Ypos);
 80010da:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <LCD_SetCursor+0x58c>)
 80010dc:	899b      	ldrh	r3, [r3, #12]
 80010de:	88ba      	ldrh	r2, [r7, #4]
 80010e0:	4611      	mov	r1, r2
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff fcf8 	bl	8000ad8 <LCD_WriteReg>
}
 80010e8:	bf00      	nop
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	200000f4 	.word	0x200000f4
 80010f4:	40011000 	.word	0x40011000
 80010f8:	40010c00 	.word	0x40010c00

080010fc <LCD_Scan_Dir>:
//设置LCD的自动扫描方向
//注意:其他函数可能会受到此函数设置的影响(尤其是9341/6804这两个奇葩),
//所以,一般设置为L2R_U2D即可,如果设置为其他扫描方式,可能导致显示不正常.
//dir:0~7,代表8个方向(具体定义见lcd.h)
//9320/9325/9328/4531/4535/1505/b505/5408/9341/5310/5510/1963等IC已经实际测试	   	   
void LCD_Scan_Dir(uint8_t dir) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	71fb      	strb	r3, [r7, #7]
	uint16_t regval = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	81fb      	strh	r3, [r7, #14]
	uint16_t dirreg = 0;
 800110a:	2300      	movs	r3, #0
 800110c:	81bb      	strh	r3, [r7, #12]
	uint16_t temp;
	if ((lcddev.dir == 1 && lcddev.id != 0X6804 && lcddev.id != 0X1963)
 800110e:	4b78      	ldr	r3, [pc, #480]	; (80012f0 <LCD_Scan_Dir+0x1f4>)
 8001110:	799b      	ldrb	r3, [r3, #6]
 8001112:	2b01      	cmp	r3, #1
 8001114:	d10b      	bne.n	800112e <LCD_Scan_Dir+0x32>
 8001116:	4b76      	ldr	r3, [pc, #472]	; (80012f0 <LCD_Scan_Dir+0x1f4>)
 8001118:	889b      	ldrh	r3, [r3, #4]
 800111a:	f646 0204 	movw	r2, #26628	; 0x6804
 800111e:	4293      	cmp	r3, r2
 8001120:	d005      	beq.n	800112e <LCD_Scan_Dir+0x32>
 8001122:	4b73      	ldr	r3, [pc, #460]	; (80012f0 <LCD_Scan_Dir+0x1f4>)
 8001124:	889b      	ldrh	r3, [r3, #4]
 8001126:	f641 1263 	movw	r2, #6499	; 0x1963
 800112a:	4293      	cmp	r3, r2
 800112c:	d109      	bne.n	8001142 <LCD_Scan_Dir+0x46>
			|| (lcddev.dir == 0 && lcddev.id == 0X1963))//横屏时，对6804和1963不改变扫描方向！竖屏时1963改变方向
 800112e:	4b70      	ldr	r3, [pc, #448]	; (80012f0 <LCD_Scan_Dir+0x1f4>)
 8001130:	799b      	ldrb	r3, [r3, #6]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d134      	bne.n	80011a0 <LCD_Scan_Dir+0xa4>
 8001136:	4b6e      	ldr	r3, [pc, #440]	; (80012f0 <LCD_Scan_Dir+0x1f4>)
 8001138:	889b      	ldrh	r3, [r3, #4]
 800113a:	f641 1263 	movw	r2, #6499	; 0x1963
 800113e:	4293      	cmp	r3, r2
 8001140:	d12e      	bne.n	80011a0 <LCD_Scan_Dir+0xa4>
			{
		switch (dir)	//方向转换
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	2b07      	cmp	r3, #7
 8001146:	d82c      	bhi.n	80011a2 <LCD_Scan_Dir+0xa6>
 8001148:	a201      	add	r2, pc, #4	; (adr r2, 8001150 <LCD_Scan_Dir+0x54>)
 800114a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800114e:	bf00      	nop
 8001150:	08001171 	.word	0x08001171
 8001154:	08001177 	.word	0x08001177
 8001158:	0800117d 	.word	0x0800117d
 800115c:	08001183 	.word	0x08001183
 8001160:	08001189 	.word	0x08001189
 8001164:	0800118f 	.word	0x0800118f
 8001168:	08001195 	.word	0x08001195
 800116c:	0800119b 	.word	0x0800119b
		{
		case 0:
			dir = 6;
 8001170:	2306      	movs	r3, #6
 8001172:	71fb      	strb	r3, [r7, #7]
			break;
 8001174:	e015      	b.n	80011a2 <LCD_Scan_Dir+0xa6>
		case 1:
			dir = 7;
 8001176:	2307      	movs	r3, #7
 8001178:	71fb      	strb	r3, [r7, #7]
			break;
 800117a:	e012      	b.n	80011a2 <LCD_Scan_Dir+0xa6>
		case 2:
			dir = 4;
 800117c:	2304      	movs	r3, #4
 800117e:	71fb      	strb	r3, [r7, #7]
			break;
 8001180:	e00f      	b.n	80011a2 <LCD_Scan_Dir+0xa6>
		case 3:
			dir = 5;
 8001182:	2305      	movs	r3, #5
 8001184:	71fb      	strb	r3, [r7, #7]
			break;
 8001186:	e00c      	b.n	80011a2 <LCD_Scan_Dir+0xa6>
		case 4:
			dir = 1;
 8001188:	2301      	movs	r3, #1
 800118a:	71fb      	strb	r3, [r7, #7]
			break;
 800118c:	e009      	b.n	80011a2 <LCD_Scan_Dir+0xa6>
		case 5:
			dir = 0;
 800118e:	2300      	movs	r3, #0
 8001190:	71fb      	strb	r3, [r7, #7]
			break;
 8001192:	e006      	b.n	80011a2 <LCD_Scan_Dir+0xa6>
		case 6:
			dir = 3;
 8001194:	2303      	movs	r3, #3
 8001196:	71fb      	strb	r3, [r7, #7]
			break;
 8001198:	e003      	b.n	80011a2 <LCD_Scan_Dir+0xa6>
		case 7:
			dir = 2;
 800119a:	2302      	movs	r3, #2
 800119c:	71fb      	strb	r3, [r7, #7]
			break;
 800119e:	e000      	b.n	80011a2 <LCD_Scan_Dir+0xa6>
		}
	}
 80011a0:	bf00      	nop
	if (lcddev.id == 0x9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310
 80011a2:	4b53      	ldr	r3, [pc, #332]	; (80012f0 <LCD_Scan_Dir+0x1f4>)
 80011a4:	889b      	ldrh	r3, [r3, #4]
 80011a6:	f249 3241 	movw	r2, #37697	; 0x9341
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d018      	beq.n	80011e0 <LCD_Scan_Dir+0xe4>
 80011ae:	4b50      	ldr	r3, [pc, #320]	; (80012f0 <LCD_Scan_Dir+0x1f4>)
 80011b0:	889b      	ldrh	r3, [r3, #4]
 80011b2:	f646 0204 	movw	r2, #26628	; 0x6804
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d012      	beq.n	80011e0 <LCD_Scan_Dir+0xe4>
 80011ba:	4b4d      	ldr	r3, [pc, #308]	; (80012f0 <LCD_Scan_Dir+0x1f4>)
 80011bc:	889b      	ldrh	r3, [r3, #4]
 80011be:	f245 3210 	movw	r2, #21264	; 0x5310
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d00c      	beq.n	80011e0 <LCD_Scan_Dir+0xe4>
			|| lcddev.id == 0X5510 || lcddev.id == 0X1963)//9341/6804/5310/5510/1963,特殊处理
 80011c6:	4b4a      	ldr	r3, [pc, #296]	; (80012f0 <LCD_Scan_Dir+0x1f4>)
 80011c8:	889b      	ldrh	r3, [r3, #4]
 80011ca:	f245 5210 	movw	r2, #21776	; 0x5510
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d006      	beq.n	80011e0 <LCD_Scan_Dir+0xe4>
 80011d2:	4b47      	ldr	r3, [pc, #284]	; (80012f0 <LCD_Scan_Dir+0x1f4>)
 80011d4:	889b      	ldrh	r3, [r3, #4]
 80011d6:	f641 1263 	movw	r2, #6499	; 0x1963
 80011da:	4293      	cmp	r3, r2
 80011dc:	f040 824f 	bne.w	800167e <LCD_Scan_Dir+0x582>
					{
		switch (dir) {
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	2b07      	cmp	r3, #7
 80011e4:	d835      	bhi.n	8001252 <LCD_Scan_Dir+0x156>
 80011e6:	a201      	add	r2, pc, #4	; (adr r2, 80011ec <LCD_Scan_Dir+0xf0>)
 80011e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ec:	08001253 	.word	0x08001253
 80011f0:	0800120d 	.word	0x0800120d
 80011f4:	08001217 	.word	0x08001217
 80011f8:	08001221 	.word	0x08001221
 80011fc:	0800122b 	.word	0x0800122b
 8001200:	08001235 	.word	0x08001235
 8001204:	0800123f 	.word	0x0800123f
 8001208:	08001249 	.word	0x08001249
		case L2R_U2D:	//从左到右,从上到下
			regval |= (0 << 7) | (0 << 6) | (0 << 5);
			break;
		case L2R_D2U:	//从左到右,从下到上
			regval |= (1 << 7) | (0 << 6) | (0 << 5);
 800120c:	89fb      	ldrh	r3, [r7, #14]
 800120e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001212:	81fb      	strh	r3, [r7, #14]
			break;
 8001214:	e01d      	b.n	8001252 <LCD_Scan_Dir+0x156>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (0 << 7) | (1 << 6) | (0 << 5);
 8001216:	89fb      	ldrh	r3, [r7, #14]
 8001218:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800121c:	81fb      	strh	r3, [r7, #14]
			break;
 800121e:	e018      	b.n	8001252 <LCD_Scan_Dir+0x156>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (1 << 7) | (1 << 6) | (0 << 5);
 8001220:	89fb      	ldrh	r3, [r7, #14]
 8001222:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001226:	81fb      	strh	r3, [r7, #14]
			break;
 8001228:	e013      	b.n	8001252 <LCD_Scan_Dir+0x156>
		case U2D_L2R:	//从上到下,从左到右
			regval |= (0 << 7) | (0 << 6) | (1 << 5);
 800122a:	89fb      	ldrh	r3, [r7, #14]
 800122c:	f043 0320 	orr.w	r3, r3, #32
 8001230:	81fb      	strh	r3, [r7, #14]
			break;
 8001232:	e00e      	b.n	8001252 <LCD_Scan_Dir+0x156>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (0 << 7) | (1 << 6) | (1 << 5);
 8001234:	89fb      	ldrh	r3, [r7, #14]
 8001236:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800123a:	81fb      	strh	r3, [r7, #14]
			break;
 800123c:	e009      	b.n	8001252 <LCD_Scan_Dir+0x156>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (1 << 7) | (0 << 6) | (1 << 5);
 800123e:	89fb      	ldrh	r3, [r7, #14]
 8001240:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001244:	81fb      	strh	r3, [r7, #14]
			break;
 8001246:	e004      	b.n	8001252 <LCD_Scan_Dir+0x156>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (1 << 7) | (1 << 6) | (1 << 5);
 8001248:	89fb      	ldrh	r3, [r7, #14]
 800124a:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800124e:	81fb      	strh	r3, [r7, #14]
			break;
 8001250:	bf00      	nop
		}
		if (lcddev.id == 0X5510)
 8001252:	4b27      	ldr	r3, [pc, #156]	; (80012f0 <LCD_Scan_Dir+0x1f4>)
 8001254:	889b      	ldrh	r3, [r3, #4]
 8001256:	f245 5210 	movw	r2, #21776	; 0x5510
 800125a:	4293      	cmp	r3, r2
 800125c:	d103      	bne.n	8001266 <LCD_Scan_Dir+0x16a>
			dirreg = 0X3600;
 800125e:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 8001262:	81bb      	strh	r3, [r7, #12]
 8001264:	e001      	b.n	800126a <LCD_Scan_Dir+0x16e>
		else
			dirreg = 0X36;
 8001266:	2336      	movs	r3, #54	; 0x36
 8001268:	81bb      	strh	r3, [r7, #12]
		if ((lcddev.id != 0X5310) && (lcddev.id != 0X5510) && (lcddev.id != 0X1963))
 800126a:	4b21      	ldr	r3, [pc, #132]	; (80012f0 <LCD_Scan_Dir+0x1f4>)
 800126c:	889b      	ldrh	r3, [r3, #4]
 800126e:	f245 3210 	movw	r2, #21264	; 0x5310
 8001272:	4293      	cmp	r3, r2
 8001274:	d00f      	beq.n	8001296 <LCD_Scan_Dir+0x19a>
 8001276:	4b1e      	ldr	r3, [pc, #120]	; (80012f0 <LCD_Scan_Dir+0x1f4>)
 8001278:	889b      	ldrh	r3, [r3, #4]
 800127a:	f245 5210 	movw	r2, #21776	; 0x5510
 800127e:	4293      	cmp	r3, r2
 8001280:	d009      	beq.n	8001296 <LCD_Scan_Dir+0x19a>
 8001282:	4b1b      	ldr	r3, [pc, #108]	; (80012f0 <LCD_Scan_Dir+0x1f4>)
 8001284:	889b      	ldrh	r3, [r3, #4]
 8001286:	f641 1263 	movw	r2, #6499	; 0x1963
 800128a:	4293      	cmp	r3, r2
 800128c:	d003      	beq.n	8001296 <LCD_Scan_Dir+0x19a>
			regval |= 0X08;	//5310/5510/1963不需要BGR
 800128e:	89fb      	ldrh	r3, [r7, #14]
 8001290:	f043 0308 	orr.w	r3, r3, #8
 8001294:	81fb      	strh	r3, [r7, #14]
		if (lcddev.id == 0X6804)
 8001296:	4b16      	ldr	r3, [pc, #88]	; (80012f0 <LCD_Scan_Dir+0x1f4>)
 8001298:	889b      	ldrh	r3, [r3, #4]
 800129a:	f646 0204 	movw	r2, #26628	; 0x6804
 800129e:	4293      	cmp	r3, r2
 80012a0:	d103      	bne.n	80012aa <LCD_Scan_Dir+0x1ae>
			regval |= 0x02;	//6804的BIT6和9341的反了
 80012a2:	89fb      	ldrh	r3, [r7, #14]
 80012a4:	f043 0302 	orr.w	r3, r3, #2
 80012a8:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 80012aa:	89fa      	ldrh	r2, [r7, #14]
 80012ac:	89bb      	ldrh	r3, [r7, #12]
 80012ae:	4611      	mov	r1, r2
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff fc11 	bl	8000ad8 <LCD_WriteReg>
		if (lcddev.id != 0X1963)	//1963不做坐标处理
 80012b6:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <LCD_Scan_Dir+0x1f4>)
 80012b8:	889b      	ldrh	r3, [r3, #4]
 80012ba:	f641 1263 	movw	r2, #6499	; 0x1963
 80012be:	4293      	cmp	r3, r2
 80012c0:	d028      	beq.n	8001314 <LCD_Scan_Dir+0x218>
				{
			if (regval & 0X20) {
 80012c2:	89fb      	ldrh	r3, [r7, #14]
 80012c4:	f003 0320 	and.w	r3, r3, #32
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d013      	beq.n	80012f4 <LCD_Scan_Dir+0x1f8>
				if (lcddev.width < lcddev.height)	//交换X,Y
 80012cc:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <LCD_Scan_Dir+0x1f4>)
 80012ce:	881a      	ldrh	r2, [r3, #0]
 80012d0:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <LCD_Scan_Dir+0x1f4>)
 80012d2:	885b      	ldrh	r3, [r3, #2]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d21d      	bcs.n	8001314 <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 80012d8:	4b05      	ldr	r3, [pc, #20]	; (80012f0 <LCD_Scan_Dir+0x1f4>)
 80012da:	881b      	ldrh	r3, [r3, #0]
 80012dc:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 80012de:	4b04      	ldr	r3, [pc, #16]	; (80012f0 <LCD_Scan_Dir+0x1f4>)
 80012e0:	885a      	ldrh	r2, [r3, #2]
 80012e2:	4b03      	ldr	r3, [pc, #12]	; (80012f0 <LCD_Scan_Dir+0x1f4>)
 80012e4:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 80012e6:	4a02      	ldr	r2, [pc, #8]	; (80012f0 <LCD_Scan_Dir+0x1f4>)
 80012e8:	897b      	ldrh	r3, [r7, #10]
 80012ea:	8053      	strh	r3, [r2, #2]
 80012ec:	e012      	b.n	8001314 <LCD_Scan_Dir+0x218>
 80012ee:	bf00      	nop
 80012f0:	200000f4 	.word	0x200000f4
				}
			} else {
				if (lcddev.width > lcddev.height)	//交换X,Y
 80012f4:	4b7f      	ldr	r3, [pc, #508]	; (80014f4 <LCD_Scan_Dir+0x3f8>)
 80012f6:	881a      	ldrh	r2, [r3, #0]
 80012f8:	4b7e      	ldr	r3, [pc, #504]	; (80014f4 <LCD_Scan_Dir+0x3f8>)
 80012fa:	885b      	ldrh	r3, [r3, #2]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d909      	bls.n	8001314 <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 8001300:	4b7c      	ldr	r3, [pc, #496]	; (80014f4 <LCD_Scan_Dir+0x3f8>)
 8001302:	881b      	ldrh	r3, [r3, #0]
 8001304:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 8001306:	4b7b      	ldr	r3, [pc, #492]	; (80014f4 <LCD_Scan_Dir+0x3f8>)
 8001308:	885a      	ldrh	r2, [r3, #2]
 800130a:	4b7a      	ldr	r3, [pc, #488]	; (80014f4 <LCD_Scan_Dir+0x3f8>)
 800130c:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 800130e:	4a79      	ldr	r2, [pc, #484]	; (80014f4 <LCD_Scan_Dir+0x3f8>)
 8001310:	897b      	ldrh	r3, [r7, #10]
 8001312:	8053      	strh	r3, [r2, #2]
				}
			}
		}
		if (lcddev.id == 0X5510) {
 8001314:	4b77      	ldr	r3, [pc, #476]	; (80014f4 <LCD_Scan_Dir+0x3f8>)
 8001316:	889b      	ldrh	r3, [r3, #4]
 8001318:	f245 5210 	movw	r2, #21776	; 0x5510
 800131c:	4293      	cmp	r3, r2
 800131e:	f040 80ef 	bne.w	8001500 <LCD_Scan_Dir+0x404>
			LCD_WR_REG(lcddev.setxcmd);
 8001322:	4b74      	ldr	r3, [pc, #464]	; (80014f4 <LCD_Scan_Dir+0x3f8>)
 8001324:	895b      	ldrh	r3, [r3, #10]
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff fb4a 	bl	80009c0 <LCD_WR_REG>
			LCD_WR_DATA(0);
 800132c:	4b72      	ldr	r3, [pc, #456]	; (80014f8 <LCD_Scan_Dir+0x3fc>)
 800132e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001332:	611a      	str	r2, [r3, #16]
 8001334:	4b70      	ldr	r3, [pc, #448]	; (80014f8 <LCD_Scan_Dir+0x3fc>)
 8001336:	f44f 7200 	mov.w	r2, #512	; 0x200
 800133a:	615a      	str	r2, [r3, #20]
 800133c:	4b6f      	ldr	r3, [pc, #444]	; (80014fc <LCD_Scan_Dir+0x400>)
 800133e:	2200      	movs	r2, #0
 8001340:	60da      	str	r2, [r3, #12]
 8001342:	4b6d      	ldr	r3, [pc, #436]	; (80014f8 <LCD_Scan_Dir+0x3fc>)
 8001344:	2280      	movs	r2, #128	; 0x80
 8001346:	615a      	str	r2, [r3, #20]
 8001348:	4b6b      	ldr	r3, [pc, #428]	; (80014f8 <LCD_Scan_Dir+0x3fc>)
 800134a:	2280      	movs	r2, #128	; 0x80
 800134c:	611a      	str	r2, [r3, #16]
 800134e:	4b6a      	ldr	r3, [pc, #424]	; (80014f8 <LCD_Scan_Dir+0x3fc>)
 8001350:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001354:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 1);
 8001356:	4b67      	ldr	r3, [pc, #412]	; (80014f4 <LCD_Scan_Dir+0x3f8>)
 8001358:	895b      	ldrh	r3, [r3, #10]
 800135a:	3301      	adds	r3, #1
 800135c:	b29b      	uxth	r3, r3
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff fb2e 	bl	80009c0 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001364:	4b64      	ldr	r3, [pc, #400]	; (80014f8 <LCD_Scan_Dir+0x3fc>)
 8001366:	f44f 7280 	mov.w	r2, #256	; 0x100
 800136a:	611a      	str	r2, [r3, #16]
 800136c:	4b62      	ldr	r3, [pc, #392]	; (80014f8 <LCD_Scan_Dir+0x3fc>)
 800136e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001372:	615a      	str	r2, [r3, #20]
 8001374:	4b61      	ldr	r3, [pc, #388]	; (80014fc <LCD_Scan_Dir+0x400>)
 8001376:	2200      	movs	r2, #0
 8001378:	60da      	str	r2, [r3, #12]
 800137a:	4b5f      	ldr	r3, [pc, #380]	; (80014f8 <LCD_Scan_Dir+0x3fc>)
 800137c:	2280      	movs	r2, #128	; 0x80
 800137e:	615a      	str	r2, [r3, #20]
 8001380:	4b5d      	ldr	r3, [pc, #372]	; (80014f8 <LCD_Scan_Dir+0x3fc>)
 8001382:	2280      	movs	r2, #128	; 0x80
 8001384:	611a      	str	r2, [r3, #16]
 8001386:	4b5c      	ldr	r3, [pc, #368]	; (80014f8 <LCD_Scan_Dir+0x3fc>)
 8001388:	f44f 7200 	mov.w	r2, #512	; 0x200
 800138c:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 2);
 800138e:	4b59      	ldr	r3, [pc, #356]	; (80014f4 <LCD_Scan_Dir+0x3f8>)
 8001390:	895b      	ldrh	r3, [r3, #10]
 8001392:	3302      	adds	r3, #2
 8001394:	b29b      	uxth	r3, r3
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff fb12 	bl	80009c0 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 800139c:	4b56      	ldr	r3, [pc, #344]	; (80014f8 <LCD_Scan_Dir+0x3fc>)
 800139e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013a2:	611a      	str	r2, [r3, #16]
 80013a4:	4b54      	ldr	r3, [pc, #336]	; (80014f8 <LCD_Scan_Dir+0x3fc>)
 80013a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013aa:	615a      	str	r2, [r3, #20]
 80013ac:	4b51      	ldr	r3, [pc, #324]	; (80014f4 <LCD_Scan_Dir+0x3f8>)
 80013ae:	881b      	ldrh	r3, [r3, #0]
 80013b0:	3b01      	subs	r3, #1
 80013b2:	121a      	asrs	r2, r3, #8
 80013b4:	4b51      	ldr	r3, [pc, #324]	; (80014fc <LCD_Scan_Dir+0x400>)
 80013b6:	60da      	str	r2, [r3, #12]
 80013b8:	4b4f      	ldr	r3, [pc, #316]	; (80014f8 <LCD_Scan_Dir+0x3fc>)
 80013ba:	2280      	movs	r2, #128	; 0x80
 80013bc:	615a      	str	r2, [r3, #20]
 80013be:	4b4e      	ldr	r3, [pc, #312]	; (80014f8 <LCD_Scan_Dir+0x3fc>)
 80013c0:	2280      	movs	r2, #128	; 0x80
 80013c2:	611a      	str	r2, [r3, #16]
 80013c4:	4b4c      	ldr	r3, [pc, #304]	; (80014f8 <LCD_Scan_Dir+0x3fc>)
 80013c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013ca:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 3);
 80013cc:	4b49      	ldr	r3, [pc, #292]	; (80014f4 <LCD_Scan_Dir+0x3f8>)
 80013ce:	895b      	ldrh	r3, [r3, #10]
 80013d0:	3303      	adds	r3, #3
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff faf3 	bl	80009c0 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 80013da:	4b47      	ldr	r3, [pc, #284]	; (80014f8 <LCD_Scan_Dir+0x3fc>)
 80013dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013e0:	611a      	str	r2, [r3, #16]
 80013e2:	4b45      	ldr	r3, [pc, #276]	; (80014f8 <LCD_Scan_Dir+0x3fc>)
 80013e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013e8:	615a      	str	r2, [r3, #20]
 80013ea:	4b42      	ldr	r3, [pc, #264]	; (80014f4 <LCD_Scan_Dir+0x3f8>)
 80013ec:	881b      	ldrh	r3, [r3, #0]
 80013ee:	3b01      	subs	r3, #1
 80013f0:	4a42      	ldr	r2, [pc, #264]	; (80014fc <LCD_Scan_Dir+0x400>)
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	60d3      	str	r3, [r2, #12]
 80013f6:	4b40      	ldr	r3, [pc, #256]	; (80014f8 <LCD_Scan_Dir+0x3fc>)
 80013f8:	2280      	movs	r2, #128	; 0x80
 80013fa:	615a      	str	r2, [r3, #20]
 80013fc:	4b3e      	ldr	r3, [pc, #248]	; (80014f8 <LCD_Scan_Dir+0x3fc>)
 80013fe:	2280      	movs	r2, #128	; 0x80
 8001400:	611a      	str	r2, [r3, #16]
 8001402:	4b3d      	ldr	r3, [pc, #244]	; (80014f8 <LCD_Scan_Dir+0x3fc>)
 8001404:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001408:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 800140a:	4b3a      	ldr	r3, [pc, #232]	; (80014f4 <LCD_Scan_Dir+0x3f8>)
 800140c:	899b      	ldrh	r3, [r3, #12]
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff fad6 	bl	80009c0 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001414:	4b38      	ldr	r3, [pc, #224]	; (80014f8 <LCD_Scan_Dir+0x3fc>)
 8001416:	f44f 7280 	mov.w	r2, #256	; 0x100
 800141a:	611a      	str	r2, [r3, #16]
 800141c:	4b36      	ldr	r3, [pc, #216]	; (80014f8 <LCD_Scan_Dir+0x3fc>)
 800141e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001422:	615a      	str	r2, [r3, #20]
 8001424:	4b35      	ldr	r3, [pc, #212]	; (80014fc <LCD_Scan_Dir+0x400>)
 8001426:	2200      	movs	r2, #0
 8001428:	60da      	str	r2, [r3, #12]
 800142a:	4b33      	ldr	r3, [pc, #204]	; (80014f8 <LCD_Scan_Dir+0x3fc>)
 800142c:	2280      	movs	r2, #128	; 0x80
 800142e:	615a      	str	r2, [r3, #20]
 8001430:	4b31      	ldr	r3, [pc, #196]	; (80014f8 <LCD_Scan_Dir+0x3fc>)
 8001432:	2280      	movs	r2, #128	; 0x80
 8001434:	611a      	str	r2, [r3, #16]
 8001436:	4b30      	ldr	r3, [pc, #192]	; (80014f8 <LCD_Scan_Dir+0x3fc>)
 8001438:	f44f 7200 	mov.w	r2, #512	; 0x200
 800143c:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 1);
 800143e:	4b2d      	ldr	r3, [pc, #180]	; (80014f4 <LCD_Scan_Dir+0x3f8>)
 8001440:	899b      	ldrh	r3, [r3, #12]
 8001442:	3301      	adds	r3, #1
 8001444:	b29b      	uxth	r3, r3
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff faba 	bl	80009c0 <LCD_WR_REG>
			LCD_WR_DATA(0);
 800144c:	4b2a      	ldr	r3, [pc, #168]	; (80014f8 <LCD_Scan_Dir+0x3fc>)
 800144e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001452:	611a      	str	r2, [r3, #16]
 8001454:	4b28      	ldr	r3, [pc, #160]	; (80014f8 <LCD_Scan_Dir+0x3fc>)
 8001456:	f44f 7200 	mov.w	r2, #512	; 0x200
 800145a:	615a      	str	r2, [r3, #20]
 800145c:	4b27      	ldr	r3, [pc, #156]	; (80014fc <LCD_Scan_Dir+0x400>)
 800145e:	2200      	movs	r2, #0
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	4b25      	ldr	r3, [pc, #148]	; (80014f8 <LCD_Scan_Dir+0x3fc>)
 8001464:	2280      	movs	r2, #128	; 0x80
 8001466:	615a      	str	r2, [r3, #20]
 8001468:	4b23      	ldr	r3, [pc, #140]	; (80014f8 <LCD_Scan_Dir+0x3fc>)
 800146a:	2280      	movs	r2, #128	; 0x80
 800146c:	611a      	str	r2, [r3, #16]
 800146e:	4b22      	ldr	r3, [pc, #136]	; (80014f8 <LCD_Scan_Dir+0x3fc>)
 8001470:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001474:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 2);
 8001476:	4b1f      	ldr	r3, [pc, #124]	; (80014f4 <LCD_Scan_Dir+0x3f8>)
 8001478:	899b      	ldrh	r3, [r3, #12]
 800147a:	3302      	adds	r3, #2
 800147c:	b29b      	uxth	r3, r3
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff fa9e 	bl	80009c0 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 8001484:	4b1c      	ldr	r3, [pc, #112]	; (80014f8 <LCD_Scan_Dir+0x3fc>)
 8001486:	f44f 7280 	mov.w	r2, #256	; 0x100
 800148a:	611a      	str	r2, [r3, #16]
 800148c:	4b1a      	ldr	r3, [pc, #104]	; (80014f8 <LCD_Scan_Dir+0x3fc>)
 800148e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001492:	615a      	str	r2, [r3, #20]
 8001494:	4b17      	ldr	r3, [pc, #92]	; (80014f4 <LCD_Scan_Dir+0x3f8>)
 8001496:	885b      	ldrh	r3, [r3, #2]
 8001498:	3b01      	subs	r3, #1
 800149a:	121a      	asrs	r2, r3, #8
 800149c:	4b17      	ldr	r3, [pc, #92]	; (80014fc <LCD_Scan_Dir+0x400>)
 800149e:	60da      	str	r2, [r3, #12]
 80014a0:	4b15      	ldr	r3, [pc, #84]	; (80014f8 <LCD_Scan_Dir+0x3fc>)
 80014a2:	2280      	movs	r2, #128	; 0x80
 80014a4:	615a      	str	r2, [r3, #20]
 80014a6:	4b14      	ldr	r3, [pc, #80]	; (80014f8 <LCD_Scan_Dir+0x3fc>)
 80014a8:	2280      	movs	r2, #128	; 0x80
 80014aa:	611a      	str	r2, [r3, #16]
 80014ac:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <LCD_Scan_Dir+0x3fc>)
 80014ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014b2:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 3);
 80014b4:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <LCD_Scan_Dir+0x3f8>)
 80014b6:	899b      	ldrh	r3, [r3, #12]
 80014b8:	3303      	adds	r3, #3
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff fa7f 	bl	80009c0 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 80014c2:	4b0d      	ldr	r3, [pc, #52]	; (80014f8 <LCD_Scan_Dir+0x3fc>)
 80014c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014c8:	611a      	str	r2, [r3, #16]
 80014ca:	4b0b      	ldr	r3, [pc, #44]	; (80014f8 <LCD_Scan_Dir+0x3fc>)
 80014cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014d0:	615a      	str	r2, [r3, #20]
 80014d2:	4b08      	ldr	r3, [pc, #32]	; (80014f4 <LCD_Scan_Dir+0x3f8>)
 80014d4:	885b      	ldrh	r3, [r3, #2]
 80014d6:	3b01      	subs	r3, #1
 80014d8:	4a08      	ldr	r2, [pc, #32]	; (80014fc <LCD_Scan_Dir+0x400>)
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	60d3      	str	r3, [r2, #12]
 80014de:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <LCD_Scan_Dir+0x3fc>)
 80014e0:	2280      	movs	r2, #128	; 0x80
 80014e2:	615a      	str	r2, [r3, #20]
 80014e4:	4b04      	ldr	r3, [pc, #16]	; (80014f8 <LCD_Scan_Dir+0x3fc>)
 80014e6:	2280      	movs	r2, #128	; 0x80
 80014e8:	611a      	str	r2, [r3, #16]
 80014ea:	4b03      	ldr	r3, [pc, #12]	; (80014f8 <LCD_Scan_Dir+0x3fc>)
 80014ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014f0:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 80014f2:	e10b      	b.n	800170c <LCD_Scan_Dir+0x610>
 80014f4:	200000f4 	.word	0x200000f4
 80014f8:	40011000 	.word	0x40011000
 80014fc:	40010c00 	.word	0x40010c00
		} else {
			LCD_WR_REG(lcddev.setxcmd);
 8001500:	4b84      	ldr	r3, [pc, #528]	; (8001714 <LCD_Scan_Dir+0x618>)
 8001502:	895b      	ldrh	r3, [r3, #10]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff fa5b 	bl	80009c0 <LCD_WR_REG>
			LCD_WR_DATA(0);
 800150a:	4b83      	ldr	r3, [pc, #524]	; (8001718 <LCD_Scan_Dir+0x61c>)
 800150c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001510:	611a      	str	r2, [r3, #16]
 8001512:	4b81      	ldr	r3, [pc, #516]	; (8001718 <LCD_Scan_Dir+0x61c>)
 8001514:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001518:	615a      	str	r2, [r3, #20]
 800151a:	4b80      	ldr	r3, [pc, #512]	; (800171c <LCD_Scan_Dir+0x620>)
 800151c:	2200      	movs	r2, #0
 800151e:	60da      	str	r2, [r3, #12]
 8001520:	4b7d      	ldr	r3, [pc, #500]	; (8001718 <LCD_Scan_Dir+0x61c>)
 8001522:	2280      	movs	r2, #128	; 0x80
 8001524:	615a      	str	r2, [r3, #20]
 8001526:	4b7c      	ldr	r3, [pc, #496]	; (8001718 <LCD_Scan_Dir+0x61c>)
 8001528:	2280      	movs	r2, #128	; 0x80
 800152a:	611a      	str	r2, [r3, #16]
 800152c:	4b7a      	ldr	r3, [pc, #488]	; (8001718 <LCD_Scan_Dir+0x61c>)
 800152e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001532:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8001534:	4b78      	ldr	r3, [pc, #480]	; (8001718 <LCD_Scan_Dir+0x61c>)
 8001536:	f44f 7280 	mov.w	r2, #256	; 0x100
 800153a:	611a      	str	r2, [r3, #16]
 800153c:	4b76      	ldr	r3, [pc, #472]	; (8001718 <LCD_Scan_Dir+0x61c>)
 800153e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001542:	615a      	str	r2, [r3, #20]
 8001544:	4b75      	ldr	r3, [pc, #468]	; (800171c <LCD_Scan_Dir+0x620>)
 8001546:	2200      	movs	r2, #0
 8001548:	60da      	str	r2, [r3, #12]
 800154a:	4b73      	ldr	r3, [pc, #460]	; (8001718 <LCD_Scan_Dir+0x61c>)
 800154c:	2280      	movs	r2, #128	; 0x80
 800154e:	615a      	str	r2, [r3, #20]
 8001550:	4b71      	ldr	r3, [pc, #452]	; (8001718 <LCD_Scan_Dir+0x61c>)
 8001552:	2280      	movs	r2, #128	; 0x80
 8001554:	611a      	str	r2, [r3, #16]
 8001556:	4b70      	ldr	r3, [pc, #448]	; (8001718 <LCD_Scan_Dir+0x61c>)
 8001558:	f44f 7200 	mov.w	r2, #512	; 0x200
 800155c:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 800155e:	4b6e      	ldr	r3, [pc, #440]	; (8001718 <LCD_Scan_Dir+0x61c>)
 8001560:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001564:	611a      	str	r2, [r3, #16]
 8001566:	4b6c      	ldr	r3, [pc, #432]	; (8001718 <LCD_Scan_Dir+0x61c>)
 8001568:	f44f 7200 	mov.w	r2, #512	; 0x200
 800156c:	615a      	str	r2, [r3, #20]
 800156e:	4b69      	ldr	r3, [pc, #420]	; (8001714 <LCD_Scan_Dir+0x618>)
 8001570:	881b      	ldrh	r3, [r3, #0]
 8001572:	3b01      	subs	r3, #1
 8001574:	121a      	asrs	r2, r3, #8
 8001576:	4b69      	ldr	r3, [pc, #420]	; (800171c <LCD_Scan_Dir+0x620>)
 8001578:	60da      	str	r2, [r3, #12]
 800157a:	4b67      	ldr	r3, [pc, #412]	; (8001718 <LCD_Scan_Dir+0x61c>)
 800157c:	2280      	movs	r2, #128	; 0x80
 800157e:	615a      	str	r2, [r3, #20]
 8001580:	4b65      	ldr	r3, [pc, #404]	; (8001718 <LCD_Scan_Dir+0x61c>)
 8001582:	2280      	movs	r2, #128	; 0x80
 8001584:	611a      	str	r2, [r3, #16]
 8001586:	4b64      	ldr	r3, [pc, #400]	; (8001718 <LCD_Scan_Dir+0x61c>)
 8001588:	f44f 7200 	mov.w	r2, #512	; 0x200
 800158c:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 800158e:	4b62      	ldr	r3, [pc, #392]	; (8001718 <LCD_Scan_Dir+0x61c>)
 8001590:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001594:	611a      	str	r2, [r3, #16]
 8001596:	4b60      	ldr	r3, [pc, #384]	; (8001718 <LCD_Scan_Dir+0x61c>)
 8001598:	f44f 7200 	mov.w	r2, #512	; 0x200
 800159c:	615a      	str	r2, [r3, #20]
 800159e:	4b5d      	ldr	r3, [pc, #372]	; (8001714 <LCD_Scan_Dir+0x618>)
 80015a0:	881b      	ldrh	r3, [r3, #0]
 80015a2:	3b01      	subs	r3, #1
 80015a4:	4a5d      	ldr	r2, [pc, #372]	; (800171c <LCD_Scan_Dir+0x620>)
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	60d3      	str	r3, [r2, #12]
 80015aa:	4b5b      	ldr	r3, [pc, #364]	; (8001718 <LCD_Scan_Dir+0x61c>)
 80015ac:	2280      	movs	r2, #128	; 0x80
 80015ae:	615a      	str	r2, [r3, #20]
 80015b0:	4b59      	ldr	r3, [pc, #356]	; (8001718 <LCD_Scan_Dir+0x61c>)
 80015b2:	2280      	movs	r2, #128	; 0x80
 80015b4:	611a      	str	r2, [r3, #16]
 80015b6:	4b58      	ldr	r3, [pc, #352]	; (8001718 <LCD_Scan_Dir+0x61c>)
 80015b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015bc:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 80015be:	4b55      	ldr	r3, [pc, #340]	; (8001714 <LCD_Scan_Dir+0x618>)
 80015c0:	899b      	ldrh	r3, [r3, #12]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff f9fc 	bl	80009c0 <LCD_WR_REG>
			LCD_WR_DATA(0);
 80015c8:	4b53      	ldr	r3, [pc, #332]	; (8001718 <LCD_Scan_Dir+0x61c>)
 80015ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015ce:	611a      	str	r2, [r3, #16]
 80015d0:	4b51      	ldr	r3, [pc, #324]	; (8001718 <LCD_Scan_Dir+0x61c>)
 80015d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015d6:	615a      	str	r2, [r3, #20]
 80015d8:	4b50      	ldr	r3, [pc, #320]	; (800171c <LCD_Scan_Dir+0x620>)
 80015da:	2200      	movs	r2, #0
 80015dc:	60da      	str	r2, [r3, #12]
 80015de:	4b4e      	ldr	r3, [pc, #312]	; (8001718 <LCD_Scan_Dir+0x61c>)
 80015e0:	2280      	movs	r2, #128	; 0x80
 80015e2:	615a      	str	r2, [r3, #20]
 80015e4:	4b4c      	ldr	r3, [pc, #304]	; (8001718 <LCD_Scan_Dir+0x61c>)
 80015e6:	2280      	movs	r2, #128	; 0x80
 80015e8:	611a      	str	r2, [r3, #16]
 80015ea:	4b4b      	ldr	r3, [pc, #300]	; (8001718 <LCD_Scan_Dir+0x61c>)
 80015ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015f0:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 80015f2:	4b49      	ldr	r3, [pc, #292]	; (8001718 <LCD_Scan_Dir+0x61c>)
 80015f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015f8:	611a      	str	r2, [r3, #16]
 80015fa:	4b47      	ldr	r3, [pc, #284]	; (8001718 <LCD_Scan_Dir+0x61c>)
 80015fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001600:	615a      	str	r2, [r3, #20]
 8001602:	4b46      	ldr	r3, [pc, #280]	; (800171c <LCD_Scan_Dir+0x620>)
 8001604:	2200      	movs	r2, #0
 8001606:	60da      	str	r2, [r3, #12]
 8001608:	4b43      	ldr	r3, [pc, #268]	; (8001718 <LCD_Scan_Dir+0x61c>)
 800160a:	2280      	movs	r2, #128	; 0x80
 800160c:	615a      	str	r2, [r3, #20]
 800160e:	4b42      	ldr	r3, [pc, #264]	; (8001718 <LCD_Scan_Dir+0x61c>)
 8001610:	2280      	movs	r2, #128	; 0x80
 8001612:	611a      	str	r2, [r3, #16]
 8001614:	4b40      	ldr	r3, [pc, #256]	; (8001718 <LCD_Scan_Dir+0x61c>)
 8001616:	f44f 7200 	mov.w	r2, #512	; 0x200
 800161a:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 800161c:	4b3e      	ldr	r3, [pc, #248]	; (8001718 <LCD_Scan_Dir+0x61c>)
 800161e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001622:	611a      	str	r2, [r3, #16]
 8001624:	4b3c      	ldr	r3, [pc, #240]	; (8001718 <LCD_Scan_Dir+0x61c>)
 8001626:	f44f 7200 	mov.w	r2, #512	; 0x200
 800162a:	615a      	str	r2, [r3, #20]
 800162c:	4b39      	ldr	r3, [pc, #228]	; (8001714 <LCD_Scan_Dir+0x618>)
 800162e:	885b      	ldrh	r3, [r3, #2]
 8001630:	3b01      	subs	r3, #1
 8001632:	121a      	asrs	r2, r3, #8
 8001634:	4b39      	ldr	r3, [pc, #228]	; (800171c <LCD_Scan_Dir+0x620>)
 8001636:	60da      	str	r2, [r3, #12]
 8001638:	4b37      	ldr	r3, [pc, #220]	; (8001718 <LCD_Scan_Dir+0x61c>)
 800163a:	2280      	movs	r2, #128	; 0x80
 800163c:	615a      	str	r2, [r3, #20]
 800163e:	4b36      	ldr	r3, [pc, #216]	; (8001718 <LCD_Scan_Dir+0x61c>)
 8001640:	2280      	movs	r2, #128	; 0x80
 8001642:	611a      	str	r2, [r3, #16]
 8001644:	4b34      	ldr	r3, [pc, #208]	; (8001718 <LCD_Scan_Dir+0x61c>)
 8001646:	f44f 7200 	mov.w	r2, #512	; 0x200
 800164a:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 800164c:	4b32      	ldr	r3, [pc, #200]	; (8001718 <LCD_Scan_Dir+0x61c>)
 800164e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001652:	611a      	str	r2, [r3, #16]
 8001654:	4b30      	ldr	r3, [pc, #192]	; (8001718 <LCD_Scan_Dir+0x61c>)
 8001656:	f44f 7200 	mov.w	r2, #512	; 0x200
 800165a:	615a      	str	r2, [r3, #20]
 800165c:	4b2d      	ldr	r3, [pc, #180]	; (8001714 <LCD_Scan_Dir+0x618>)
 800165e:	885b      	ldrh	r3, [r3, #2]
 8001660:	3b01      	subs	r3, #1
 8001662:	4a2e      	ldr	r2, [pc, #184]	; (800171c <LCD_Scan_Dir+0x620>)
 8001664:	b2db      	uxtb	r3, r3
 8001666:	60d3      	str	r3, [r2, #12]
 8001668:	4b2b      	ldr	r3, [pc, #172]	; (8001718 <LCD_Scan_Dir+0x61c>)
 800166a:	2280      	movs	r2, #128	; 0x80
 800166c:	615a      	str	r2, [r3, #20]
 800166e:	4b2a      	ldr	r3, [pc, #168]	; (8001718 <LCD_Scan_Dir+0x61c>)
 8001670:	2280      	movs	r2, #128	; 0x80
 8001672:	611a      	str	r2, [r3, #16]
 8001674:	4b28      	ldr	r3, [pc, #160]	; (8001718 <LCD_Scan_Dir+0x61c>)
 8001676:	f44f 7200 	mov.w	r2, #512	; 0x200
 800167a:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 800167c:	e046      	b.n	800170c <LCD_Scan_Dir+0x610>
		}
	} else {
		switch (dir) {
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	2b07      	cmp	r3, #7
 8001682:	d836      	bhi.n	80016f2 <LCD_Scan_Dir+0x5f6>
 8001684:	a201      	add	r2, pc, #4	; (adr r2, 800168c <LCD_Scan_Dir+0x590>)
 8001686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800168a:	bf00      	nop
 800168c:	080016ad 	.word	0x080016ad
 8001690:	080016b7 	.word	0x080016b7
 8001694:	080016c1 	.word	0x080016c1
 8001698:	080016f3 	.word	0x080016f3
 800169c:	080016cb 	.word	0x080016cb
 80016a0:	080016d5 	.word	0x080016d5
 80016a4:	080016df 	.word	0x080016df
 80016a8:	080016e9 	.word	0x080016e9
		case L2R_U2D:	//从左到右,从上到下
			regval |= (1 << 5) | (1 << 4) | (0 << 3);
 80016ac:	89fb      	ldrh	r3, [r7, #14]
 80016ae:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80016b2:	81fb      	strh	r3, [r7, #14]
			break;
 80016b4:	e01d      	b.n	80016f2 <LCD_Scan_Dir+0x5f6>
		case L2R_D2U:	//从左到右,从下到上
			regval |= (0 << 5) | (1 << 4) | (0 << 3);
 80016b6:	89fb      	ldrh	r3, [r7, #14]
 80016b8:	f043 0310 	orr.w	r3, r3, #16
 80016bc:	81fb      	strh	r3, [r7, #14]
			break;
 80016be:	e018      	b.n	80016f2 <LCD_Scan_Dir+0x5f6>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (1 << 5) | (0 << 4) | (0 << 3);
 80016c0:	89fb      	ldrh	r3, [r7, #14]
 80016c2:	f043 0320 	orr.w	r3, r3, #32
 80016c6:	81fb      	strh	r3, [r7, #14]
			break;
 80016c8:	e013      	b.n	80016f2 <LCD_Scan_Dir+0x5f6>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (0 << 5) | (0 << 4) | (0 << 3);
			break;
		case U2D_L2R:	//从上到下,从左到右
			regval |= (1 << 5) | (1 << 4) | (1 << 3);
 80016ca:	89fb      	ldrh	r3, [r7, #14]
 80016cc:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80016d0:	81fb      	strh	r3, [r7, #14]
			break;
 80016d2:	e00e      	b.n	80016f2 <LCD_Scan_Dir+0x5f6>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (1 << 5) | (0 << 4) | (1 << 3);
 80016d4:	89fb      	ldrh	r3, [r7, #14]
 80016d6:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80016da:	81fb      	strh	r3, [r7, #14]
			break;
 80016dc:	e009      	b.n	80016f2 <LCD_Scan_Dir+0x5f6>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (0 << 5) | (1 << 4) | (1 << 3);
 80016de:	89fb      	ldrh	r3, [r7, #14]
 80016e0:	f043 0318 	orr.w	r3, r3, #24
 80016e4:	81fb      	strh	r3, [r7, #14]
			break;
 80016e6:	e004      	b.n	80016f2 <LCD_Scan_Dir+0x5f6>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (0 << 5) | (0 << 4) | (1 << 3);
 80016e8:	89fb      	ldrh	r3, [r7, #14]
 80016ea:	f043 0308 	orr.w	r3, r3, #8
 80016ee:	81fb      	strh	r3, [r7, #14]
			break;
 80016f0:	bf00      	nop
		}
		dirreg = 0X03;
 80016f2:	2303      	movs	r3, #3
 80016f4:	81bb      	strh	r3, [r7, #12]
		regval |= 1 << 12;
 80016f6:	89fb      	ldrh	r3, [r7, #14]
 80016f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016fc:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 80016fe:	89fa      	ldrh	r2, [r7, #14]
 8001700:	89bb      	ldrh	r3, [r7, #12]
 8001702:	4611      	mov	r1, r2
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff f9e7 	bl	8000ad8 <LCD_WriteReg>
	}
}
 800170a:	bf00      	nop
 800170c:	bf00      	nop
 800170e:	3710      	adds	r7, #16
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	200000f4 	.word	0x200000f4
 8001718:	40011000 	.word	0x40011000
 800171c:	40010c00 	.word	0x40010c00

08001720 <LCD_Fast_DrawPoint>:
	LCD_WriteRAM_Prepare();
	LCD_WR_DATA(POINT_COLOR); //POINT_COLOR: Color of this point
}
//Draw a point with color(quicker)
//x,y: coordinate
void LCD_Fast_DrawPoint(uint16_t x, uint16_t y, uint16_t color) {
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	80fb      	strh	r3, [r7, #6]
 800172a:	460b      	mov	r3, r1
 800172c:	80bb      	strh	r3, [r7, #4]
 800172e:	4613      	mov	r3, r2
 8001730:	807b      	strh	r3, [r7, #2]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8001732:	4b75      	ldr	r3, [pc, #468]	; (8001908 <LCD_Fast_DrawPoint+0x1e8>)
 8001734:	889b      	ldrh	r3, [r3, #4]
 8001736:	f249 3241 	movw	r2, #37697	; 0x9341
 800173a:	4293      	cmp	r3, r2
 800173c:	d005      	beq.n	800174a <LCD_Fast_DrawPoint+0x2a>
 800173e:	4b72      	ldr	r3, [pc, #456]	; (8001908 <LCD_Fast_DrawPoint+0x1e8>)
 8001740:	889b      	ldrh	r3, [r3, #4]
 8001742:	f245 3210 	movw	r2, #21264	; 0x5310
 8001746:	4293      	cmp	r3, r2
 8001748:	d164      	bne.n	8001814 <LCD_Fast_DrawPoint+0xf4>
		LCD_WR_REG(lcddev.setxcmd);
 800174a:	4b6f      	ldr	r3, [pc, #444]	; (8001908 <LCD_Fast_DrawPoint+0x1e8>)
 800174c:	895b      	ldrh	r3, [r3, #10]
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff f936 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8001754:	4b6d      	ldr	r3, [pc, #436]	; (800190c <LCD_Fast_DrawPoint+0x1ec>)
 8001756:	f44f 7280 	mov.w	r2, #256	; 0x100
 800175a:	611a      	str	r2, [r3, #16]
 800175c:	4b6b      	ldr	r3, [pc, #428]	; (800190c <LCD_Fast_DrawPoint+0x1ec>)
 800175e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001762:	615a      	str	r2, [r3, #20]
 8001764:	88fb      	ldrh	r3, [r7, #6]
 8001766:	0a1b      	lsrs	r3, r3, #8
 8001768:	b29a      	uxth	r2, r3
 800176a:	4b69      	ldr	r3, [pc, #420]	; (8001910 <LCD_Fast_DrawPoint+0x1f0>)
 800176c:	60da      	str	r2, [r3, #12]
 800176e:	4b67      	ldr	r3, [pc, #412]	; (800190c <LCD_Fast_DrawPoint+0x1ec>)
 8001770:	2280      	movs	r2, #128	; 0x80
 8001772:	615a      	str	r2, [r3, #20]
 8001774:	4b65      	ldr	r3, [pc, #404]	; (800190c <LCD_Fast_DrawPoint+0x1ec>)
 8001776:	2280      	movs	r2, #128	; 0x80
 8001778:	611a      	str	r2, [r3, #16]
 800177a:	4b64      	ldr	r3, [pc, #400]	; (800190c <LCD_Fast_DrawPoint+0x1ec>)
 800177c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001780:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8001782:	4b62      	ldr	r3, [pc, #392]	; (800190c <LCD_Fast_DrawPoint+0x1ec>)
 8001784:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001788:	611a      	str	r2, [r3, #16]
 800178a:	4b60      	ldr	r3, [pc, #384]	; (800190c <LCD_Fast_DrawPoint+0x1ec>)
 800178c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001790:	615a      	str	r2, [r3, #20]
 8001792:	88fb      	ldrh	r3, [r7, #6]
 8001794:	4a5e      	ldr	r2, [pc, #376]	; (8001910 <LCD_Fast_DrawPoint+0x1f0>)
 8001796:	b2db      	uxtb	r3, r3
 8001798:	60d3      	str	r3, [r2, #12]
 800179a:	4b5c      	ldr	r3, [pc, #368]	; (800190c <LCD_Fast_DrawPoint+0x1ec>)
 800179c:	2280      	movs	r2, #128	; 0x80
 800179e:	615a      	str	r2, [r3, #20]
 80017a0:	4b5a      	ldr	r3, [pc, #360]	; (800190c <LCD_Fast_DrawPoint+0x1ec>)
 80017a2:	2280      	movs	r2, #128	; 0x80
 80017a4:	611a      	str	r2, [r3, #16]
 80017a6:	4b59      	ldr	r3, [pc, #356]	; (800190c <LCD_Fast_DrawPoint+0x1ec>)
 80017a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017ac:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 80017ae:	4b56      	ldr	r3, [pc, #344]	; (8001908 <LCD_Fast_DrawPoint+0x1e8>)
 80017b0:	899b      	ldrh	r3, [r3, #12]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff f904 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 80017b8:	4b54      	ldr	r3, [pc, #336]	; (800190c <LCD_Fast_DrawPoint+0x1ec>)
 80017ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017be:	611a      	str	r2, [r3, #16]
 80017c0:	4b52      	ldr	r3, [pc, #328]	; (800190c <LCD_Fast_DrawPoint+0x1ec>)
 80017c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017c6:	615a      	str	r2, [r3, #20]
 80017c8:	88bb      	ldrh	r3, [r7, #4]
 80017ca:	0a1b      	lsrs	r3, r3, #8
 80017cc:	b29a      	uxth	r2, r3
 80017ce:	4b50      	ldr	r3, [pc, #320]	; (8001910 <LCD_Fast_DrawPoint+0x1f0>)
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	4b4e      	ldr	r3, [pc, #312]	; (800190c <LCD_Fast_DrawPoint+0x1ec>)
 80017d4:	2280      	movs	r2, #128	; 0x80
 80017d6:	615a      	str	r2, [r3, #20]
 80017d8:	4b4c      	ldr	r3, [pc, #304]	; (800190c <LCD_Fast_DrawPoint+0x1ec>)
 80017da:	2280      	movs	r2, #128	; 0x80
 80017dc:	611a      	str	r2, [r3, #16]
 80017de:	4b4b      	ldr	r3, [pc, #300]	; (800190c <LCD_Fast_DrawPoint+0x1ec>)
 80017e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017e4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 80017e6:	4b49      	ldr	r3, [pc, #292]	; (800190c <LCD_Fast_DrawPoint+0x1ec>)
 80017e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017ec:	611a      	str	r2, [r3, #16]
 80017ee:	4b47      	ldr	r3, [pc, #284]	; (800190c <LCD_Fast_DrawPoint+0x1ec>)
 80017f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017f4:	615a      	str	r2, [r3, #20]
 80017f6:	88bb      	ldrh	r3, [r7, #4]
 80017f8:	4a45      	ldr	r2, [pc, #276]	; (8001910 <LCD_Fast_DrawPoint+0x1f0>)
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	60d3      	str	r3, [r2, #12]
 80017fe:	4b43      	ldr	r3, [pc, #268]	; (800190c <LCD_Fast_DrawPoint+0x1ec>)
 8001800:	2280      	movs	r2, #128	; 0x80
 8001802:	615a      	str	r2, [r3, #20]
 8001804:	4b41      	ldr	r3, [pc, #260]	; (800190c <LCD_Fast_DrawPoint+0x1ec>)
 8001806:	2280      	movs	r2, #128	; 0x80
 8001808:	611a      	str	r2, [r3, #16]
 800180a:	4b40      	ldr	r3, [pc, #256]	; (800190c <LCD_Fast_DrawPoint+0x1ec>)
 800180c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001810:	611a      	str	r2, [r3, #16]
 8001812:	e1e6      	b.n	8001be2 <LCD_Fast_DrawPoint+0x4c2>
	} else if (lcddev.id == 0X5510) {
 8001814:	4b3c      	ldr	r3, [pc, #240]	; (8001908 <LCD_Fast_DrawPoint+0x1e8>)
 8001816:	889b      	ldrh	r3, [r3, #4]
 8001818:	f245 5210 	movw	r2, #21776	; 0x5510
 800181c:	4293      	cmp	r3, r2
 800181e:	d179      	bne.n	8001914 <LCD_Fast_DrawPoint+0x1f4>
		LCD_WR_REG(lcddev.setxcmd);
 8001820:	4b39      	ldr	r3, [pc, #228]	; (8001908 <LCD_Fast_DrawPoint+0x1e8>)
 8001822:	895b      	ldrh	r3, [r3, #10]
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff f8cb 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 800182a:	4b38      	ldr	r3, [pc, #224]	; (800190c <LCD_Fast_DrawPoint+0x1ec>)
 800182c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001830:	611a      	str	r2, [r3, #16]
 8001832:	4b36      	ldr	r3, [pc, #216]	; (800190c <LCD_Fast_DrawPoint+0x1ec>)
 8001834:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001838:	615a      	str	r2, [r3, #20]
 800183a:	88fb      	ldrh	r3, [r7, #6]
 800183c:	0a1b      	lsrs	r3, r3, #8
 800183e:	b29a      	uxth	r2, r3
 8001840:	4b33      	ldr	r3, [pc, #204]	; (8001910 <LCD_Fast_DrawPoint+0x1f0>)
 8001842:	60da      	str	r2, [r3, #12]
 8001844:	4b31      	ldr	r3, [pc, #196]	; (800190c <LCD_Fast_DrawPoint+0x1ec>)
 8001846:	2280      	movs	r2, #128	; 0x80
 8001848:	615a      	str	r2, [r3, #20]
 800184a:	4b30      	ldr	r3, [pc, #192]	; (800190c <LCD_Fast_DrawPoint+0x1ec>)
 800184c:	2280      	movs	r2, #128	; 0x80
 800184e:	611a      	str	r2, [r3, #16]
 8001850:	4b2e      	ldr	r3, [pc, #184]	; (800190c <LCD_Fast_DrawPoint+0x1ec>)
 8001852:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001856:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 8001858:	4b2b      	ldr	r3, [pc, #172]	; (8001908 <LCD_Fast_DrawPoint+0x1e8>)
 800185a:	895b      	ldrh	r3, [r3, #10]
 800185c:	3301      	adds	r3, #1
 800185e:	b29b      	uxth	r3, r3
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff f8ad 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATA(x & 0XFF);
 8001866:	4b29      	ldr	r3, [pc, #164]	; (800190c <LCD_Fast_DrawPoint+0x1ec>)
 8001868:	f44f 7280 	mov.w	r2, #256	; 0x100
 800186c:	611a      	str	r2, [r3, #16]
 800186e:	4b27      	ldr	r3, [pc, #156]	; (800190c <LCD_Fast_DrawPoint+0x1ec>)
 8001870:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001874:	615a      	str	r2, [r3, #20]
 8001876:	88fb      	ldrh	r3, [r7, #6]
 8001878:	4a25      	ldr	r2, [pc, #148]	; (8001910 <LCD_Fast_DrawPoint+0x1f0>)
 800187a:	b2db      	uxtb	r3, r3
 800187c:	60d3      	str	r3, [r2, #12]
 800187e:	4b23      	ldr	r3, [pc, #140]	; (800190c <LCD_Fast_DrawPoint+0x1ec>)
 8001880:	2280      	movs	r2, #128	; 0x80
 8001882:	615a      	str	r2, [r3, #20]
 8001884:	4b21      	ldr	r3, [pc, #132]	; (800190c <LCD_Fast_DrawPoint+0x1ec>)
 8001886:	2280      	movs	r2, #128	; 0x80
 8001888:	611a      	str	r2, [r3, #16]
 800188a:	4b20      	ldr	r3, [pc, #128]	; (800190c <LCD_Fast_DrawPoint+0x1ec>)
 800188c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001890:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8001892:	4b1d      	ldr	r3, [pc, #116]	; (8001908 <LCD_Fast_DrawPoint+0x1e8>)
 8001894:	899b      	ldrh	r3, [r3, #12]
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff f892 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 800189c:	4b1b      	ldr	r3, [pc, #108]	; (800190c <LCD_Fast_DrawPoint+0x1ec>)
 800189e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018a2:	611a      	str	r2, [r3, #16]
 80018a4:	4b19      	ldr	r3, [pc, #100]	; (800190c <LCD_Fast_DrawPoint+0x1ec>)
 80018a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018aa:	615a      	str	r2, [r3, #20]
 80018ac:	88bb      	ldrh	r3, [r7, #4]
 80018ae:	0a1b      	lsrs	r3, r3, #8
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	4b17      	ldr	r3, [pc, #92]	; (8001910 <LCD_Fast_DrawPoint+0x1f0>)
 80018b4:	60da      	str	r2, [r3, #12]
 80018b6:	4b15      	ldr	r3, [pc, #84]	; (800190c <LCD_Fast_DrawPoint+0x1ec>)
 80018b8:	2280      	movs	r2, #128	; 0x80
 80018ba:	615a      	str	r2, [r3, #20]
 80018bc:	4b13      	ldr	r3, [pc, #76]	; (800190c <LCD_Fast_DrawPoint+0x1ec>)
 80018be:	2280      	movs	r2, #128	; 0x80
 80018c0:	611a      	str	r2, [r3, #16]
 80018c2:	4b12      	ldr	r3, [pc, #72]	; (800190c <LCD_Fast_DrawPoint+0x1ec>)
 80018c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018c8:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 80018ca:	4b0f      	ldr	r3, [pc, #60]	; (8001908 <LCD_Fast_DrawPoint+0x1e8>)
 80018cc:	899b      	ldrh	r3, [r3, #12]
 80018ce:	3301      	adds	r3, #1
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff f874 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATA(y & 0XFF);
 80018d8:	4b0c      	ldr	r3, [pc, #48]	; (800190c <LCD_Fast_DrawPoint+0x1ec>)
 80018da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018de:	611a      	str	r2, [r3, #16]
 80018e0:	4b0a      	ldr	r3, [pc, #40]	; (800190c <LCD_Fast_DrawPoint+0x1ec>)
 80018e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018e6:	615a      	str	r2, [r3, #20]
 80018e8:	88bb      	ldrh	r3, [r7, #4]
 80018ea:	4a09      	ldr	r2, [pc, #36]	; (8001910 <LCD_Fast_DrawPoint+0x1f0>)
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	60d3      	str	r3, [r2, #12]
 80018f0:	4b06      	ldr	r3, [pc, #24]	; (800190c <LCD_Fast_DrawPoint+0x1ec>)
 80018f2:	2280      	movs	r2, #128	; 0x80
 80018f4:	615a      	str	r2, [r3, #20]
 80018f6:	4b05      	ldr	r3, [pc, #20]	; (800190c <LCD_Fast_DrawPoint+0x1ec>)
 80018f8:	2280      	movs	r2, #128	; 0x80
 80018fa:	611a      	str	r2, [r3, #16]
 80018fc:	4b03      	ldr	r3, [pc, #12]	; (800190c <LCD_Fast_DrawPoint+0x1ec>)
 80018fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001902:	611a      	str	r2, [r3, #16]
 8001904:	e16d      	b.n	8001be2 <LCD_Fast_DrawPoint+0x4c2>
 8001906:	bf00      	nop
 8001908:	200000f4 	.word	0x200000f4
 800190c:	40011000 	.word	0x40011000
 8001910:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 8001914:	4b68      	ldr	r3, [pc, #416]	; (8001ab8 <LCD_Fast_DrawPoint+0x398>)
 8001916:	889b      	ldrh	r3, [r3, #4]
 8001918:	f641 1263 	movw	r2, #6499	; 0x1963
 800191c:	4293      	cmp	r3, r2
 800191e:	f040 80d1 	bne.w	8001ac4 <LCD_Fast_DrawPoint+0x3a4>
		if (lcddev.dir == 0)
 8001922:	4b65      	ldr	r3, [pc, #404]	; (8001ab8 <LCD_Fast_DrawPoint+0x398>)
 8001924:	799b      	ldrb	r3, [r3, #6]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d106      	bne.n	8001938 <LCD_Fast_DrawPoint+0x218>
			x = lcddev.width - 1 - x;
 800192a:	4b63      	ldr	r3, [pc, #396]	; (8001ab8 <LCD_Fast_DrawPoint+0x398>)
 800192c:	881a      	ldrh	r2, [r3, #0]
 800192e:	88fb      	ldrh	r3, [r7, #6]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	b29b      	uxth	r3, r3
 8001934:	3b01      	subs	r3, #1
 8001936:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8001938:	4b5f      	ldr	r3, [pc, #380]	; (8001ab8 <LCD_Fast_DrawPoint+0x398>)
 800193a:	895b      	ldrh	r3, [r3, #10]
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff f83f 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8001942:	4b5e      	ldr	r3, [pc, #376]	; (8001abc <LCD_Fast_DrawPoint+0x39c>)
 8001944:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001948:	611a      	str	r2, [r3, #16]
 800194a:	4b5c      	ldr	r3, [pc, #368]	; (8001abc <LCD_Fast_DrawPoint+0x39c>)
 800194c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001950:	615a      	str	r2, [r3, #20]
 8001952:	88fb      	ldrh	r3, [r7, #6]
 8001954:	0a1b      	lsrs	r3, r3, #8
 8001956:	b29a      	uxth	r2, r3
 8001958:	4b59      	ldr	r3, [pc, #356]	; (8001ac0 <LCD_Fast_DrawPoint+0x3a0>)
 800195a:	60da      	str	r2, [r3, #12]
 800195c:	4b57      	ldr	r3, [pc, #348]	; (8001abc <LCD_Fast_DrawPoint+0x39c>)
 800195e:	2280      	movs	r2, #128	; 0x80
 8001960:	615a      	str	r2, [r3, #20]
 8001962:	4b56      	ldr	r3, [pc, #344]	; (8001abc <LCD_Fast_DrawPoint+0x39c>)
 8001964:	2280      	movs	r2, #128	; 0x80
 8001966:	611a      	str	r2, [r3, #16]
 8001968:	4b54      	ldr	r3, [pc, #336]	; (8001abc <LCD_Fast_DrawPoint+0x39c>)
 800196a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800196e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8001970:	4b52      	ldr	r3, [pc, #328]	; (8001abc <LCD_Fast_DrawPoint+0x39c>)
 8001972:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001976:	611a      	str	r2, [r3, #16]
 8001978:	4b50      	ldr	r3, [pc, #320]	; (8001abc <LCD_Fast_DrawPoint+0x39c>)
 800197a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800197e:	615a      	str	r2, [r3, #20]
 8001980:	88fb      	ldrh	r3, [r7, #6]
 8001982:	4a4f      	ldr	r2, [pc, #316]	; (8001ac0 <LCD_Fast_DrawPoint+0x3a0>)
 8001984:	b2db      	uxtb	r3, r3
 8001986:	60d3      	str	r3, [r2, #12]
 8001988:	4b4c      	ldr	r3, [pc, #304]	; (8001abc <LCD_Fast_DrawPoint+0x39c>)
 800198a:	2280      	movs	r2, #128	; 0x80
 800198c:	615a      	str	r2, [r3, #20]
 800198e:	4b4b      	ldr	r3, [pc, #300]	; (8001abc <LCD_Fast_DrawPoint+0x39c>)
 8001990:	2280      	movs	r2, #128	; 0x80
 8001992:	611a      	str	r2, [r3, #16]
 8001994:	4b49      	ldr	r3, [pc, #292]	; (8001abc <LCD_Fast_DrawPoint+0x39c>)
 8001996:	f44f 7200 	mov.w	r2, #512	; 0x200
 800199a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x >> 8);
 800199c:	4b47      	ldr	r3, [pc, #284]	; (8001abc <LCD_Fast_DrawPoint+0x39c>)
 800199e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019a2:	611a      	str	r2, [r3, #16]
 80019a4:	4b45      	ldr	r3, [pc, #276]	; (8001abc <LCD_Fast_DrawPoint+0x39c>)
 80019a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019aa:	615a      	str	r2, [r3, #20]
 80019ac:	88fb      	ldrh	r3, [r7, #6]
 80019ae:	0a1b      	lsrs	r3, r3, #8
 80019b0:	b29a      	uxth	r2, r3
 80019b2:	4b43      	ldr	r3, [pc, #268]	; (8001ac0 <LCD_Fast_DrawPoint+0x3a0>)
 80019b4:	60da      	str	r2, [r3, #12]
 80019b6:	4b41      	ldr	r3, [pc, #260]	; (8001abc <LCD_Fast_DrawPoint+0x39c>)
 80019b8:	2280      	movs	r2, #128	; 0x80
 80019ba:	615a      	str	r2, [r3, #20]
 80019bc:	4b3f      	ldr	r3, [pc, #252]	; (8001abc <LCD_Fast_DrawPoint+0x39c>)
 80019be:	2280      	movs	r2, #128	; 0x80
 80019c0:	611a      	str	r2, [r3, #16]
 80019c2:	4b3e      	ldr	r3, [pc, #248]	; (8001abc <LCD_Fast_DrawPoint+0x39c>)
 80019c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019c8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 80019ca:	4b3c      	ldr	r3, [pc, #240]	; (8001abc <LCD_Fast_DrawPoint+0x39c>)
 80019cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019d0:	611a      	str	r2, [r3, #16]
 80019d2:	4b3a      	ldr	r3, [pc, #232]	; (8001abc <LCD_Fast_DrawPoint+0x39c>)
 80019d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019d8:	615a      	str	r2, [r3, #20]
 80019da:	88fb      	ldrh	r3, [r7, #6]
 80019dc:	4a38      	ldr	r2, [pc, #224]	; (8001ac0 <LCD_Fast_DrawPoint+0x3a0>)
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	60d3      	str	r3, [r2, #12]
 80019e2:	4b36      	ldr	r3, [pc, #216]	; (8001abc <LCD_Fast_DrawPoint+0x39c>)
 80019e4:	2280      	movs	r2, #128	; 0x80
 80019e6:	615a      	str	r2, [r3, #20]
 80019e8:	4b34      	ldr	r3, [pc, #208]	; (8001abc <LCD_Fast_DrawPoint+0x39c>)
 80019ea:	2280      	movs	r2, #128	; 0x80
 80019ec:	611a      	str	r2, [r3, #16]
 80019ee:	4b33      	ldr	r3, [pc, #204]	; (8001abc <LCD_Fast_DrawPoint+0x39c>)
 80019f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019f4:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 80019f6:	4b30      	ldr	r3, [pc, #192]	; (8001ab8 <LCD_Fast_DrawPoint+0x398>)
 80019f8:	899b      	ldrh	r3, [r3, #12]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7fe ffe0 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8001a00:	4b2e      	ldr	r3, [pc, #184]	; (8001abc <LCD_Fast_DrawPoint+0x39c>)
 8001a02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a06:	611a      	str	r2, [r3, #16]
 8001a08:	4b2c      	ldr	r3, [pc, #176]	; (8001abc <LCD_Fast_DrawPoint+0x39c>)
 8001a0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a0e:	615a      	str	r2, [r3, #20]
 8001a10:	88bb      	ldrh	r3, [r7, #4]
 8001a12:	0a1b      	lsrs	r3, r3, #8
 8001a14:	b29a      	uxth	r2, r3
 8001a16:	4b2a      	ldr	r3, [pc, #168]	; (8001ac0 <LCD_Fast_DrawPoint+0x3a0>)
 8001a18:	60da      	str	r2, [r3, #12]
 8001a1a:	4b28      	ldr	r3, [pc, #160]	; (8001abc <LCD_Fast_DrawPoint+0x39c>)
 8001a1c:	2280      	movs	r2, #128	; 0x80
 8001a1e:	615a      	str	r2, [r3, #20]
 8001a20:	4b26      	ldr	r3, [pc, #152]	; (8001abc <LCD_Fast_DrawPoint+0x39c>)
 8001a22:	2280      	movs	r2, #128	; 0x80
 8001a24:	611a      	str	r2, [r3, #16]
 8001a26:	4b25      	ldr	r3, [pc, #148]	; (8001abc <LCD_Fast_DrawPoint+0x39c>)
 8001a28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a2c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8001a2e:	4b23      	ldr	r3, [pc, #140]	; (8001abc <LCD_Fast_DrawPoint+0x39c>)
 8001a30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a34:	611a      	str	r2, [r3, #16]
 8001a36:	4b21      	ldr	r3, [pc, #132]	; (8001abc <LCD_Fast_DrawPoint+0x39c>)
 8001a38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a3c:	615a      	str	r2, [r3, #20]
 8001a3e:	88bb      	ldrh	r3, [r7, #4]
 8001a40:	4a1f      	ldr	r2, [pc, #124]	; (8001ac0 <LCD_Fast_DrawPoint+0x3a0>)
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	60d3      	str	r3, [r2, #12]
 8001a46:	4b1d      	ldr	r3, [pc, #116]	; (8001abc <LCD_Fast_DrawPoint+0x39c>)
 8001a48:	2280      	movs	r2, #128	; 0x80
 8001a4a:	615a      	str	r2, [r3, #20]
 8001a4c:	4b1b      	ldr	r3, [pc, #108]	; (8001abc <LCD_Fast_DrawPoint+0x39c>)
 8001a4e:	2280      	movs	r2, #128	; 0x80
 8001a50:	611a      	str	r2, [r3, #16]
 8001a52:	4b1a      	ldr	r3, [pc, #104]	; (8001abc <LCD_Fast_DrawPoint+0x39c>)
 8001a54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a58:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y >> 8);
 8001a5a:	4b18      	ldr	r3, [pc, #96]	; (8001abc <LCD_Fast_DrawPoint+0x39c>)
 8001a5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a60:	611a      	str	r2, [r3, #16]
 8001a62:	4b16      	ldr	r3, [pc, #88]	; (8001abc <LCD_Fast_DrawPoint+0x39c>)
 8001a64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a68:	615a      	str	r2, [r3, #20]
 8001a6a:	88bb      	ldrh	r3, [r7, #4]
 8001a6c:	0a1b      	lsrs	r3, r3, #8
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	4b13      	ldr	r3, [pc, #76]	; (8001ac0 <LCD_Fast_DrawPoint+0x3a0>)
 8001a72:	60da      	str	r2, [r3, #12]
 8001a74:	4b11      	ldr	r3, [pc, #68]	; (8001abc <LCD_Fast_DrawPoint+0x39c>)
 8001a76:	2280      	movs	r2, #128	; 0x80
 8001a78:	615a      	str	r2, [r3, #20]
 8001a7a:	4b10      	ldr	r3, [pc, #64]	; (8001abc <LCD_Fast_DrawPoint+0x39c>)
 8001a7c:	2280      	movs	r2, #128	; 0x80
 8001a7e:	611a      	str	r2, [r3, #16]
 8001a80:	4b0e      	ldr	r3, [pc, #56]	; (8001abc <LCD_Fast_DrawPoint+0x39c>)
 8001a82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a86:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8001a88:	4b0c      	ldr	r3, [pc, #48]	; (8001abc <LCD_Fast_DrawPoint+0x39c>)
 8001a8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a8e:	611a      	str	r2, [r3, #16]
 8001a90:	4b0a      	ldr	r3, [pc, #40]	; (8001abc <LCD_Fast_DrawPoint+0x39c>)
 8001a92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a96:	615a      	str	r2, [r3, #20]
 8001a98:	88bb      	ldrh	r3, [r7, #4]
 8001a9a:	4a09      	ldr	r2, [pc, #36]	; (8001ac0 <LCD_Fast_DrawPoint+0x3a0>)
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	60d3      	str	r3, [r2, #12]
 8001aa0:	4b06      	ldr	r3, [pc, #24]	; (8001abc <LCD_Fast_DrawPoint+0x39c>)
 8001aa2:	2280      	movs	r2, #128	; 0x80
 8001aa4:	615a      	str	r2, [r3, #20]
 8001aa6:	4b05      	ldr	r3, [pc, #20]	; (8001abc <LCD_Fast_DrawPoint+0x39c>)
 8001aa8:	2280      	movs	r2, #128	; 0x80
 8001aaa:	611a      	str	r2, [r3, #16]
 8001aac:	4b03      	ldr	r3, [pc, #12]	; (8001abc <LCD_Fast_DrawPoint+0x39c>)
 8001aae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ab2:	611a      	str	r2, [r3, #16]
 8001ab4:	e095      	b.n	8001be2 <LCD_Fast_DrawPoint+0x4c2>
 8001ab6:	bf00      	nop
 8001ab8:	200000f4 	.word	0x200000f4
 8001abc:	40011000 	.word	0x40011000
 8001ac0:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X6804) {
 8001ac4:	4b5e      	ldr	r3, [pc, #376]	; (8001c40 <LCD_Fast_DrawPoint+0x520>)
 8001ac6:	889b      	ldrh	r3, [r3, #4]
 8001ac8:	f646 0204 	movw	r2, #26628	; 0x6804
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d16f      	bne.n	8001bb0 <LCD_Fast_DrawPoint+0x490>
		if (lcddev.dir == 1)
 8001ad0:	4b5b      	ldr	r3, [pc, #364]	; (8001c40 <LCD_Fast_DrawPoint+0x520>)
 8001ad2:	799b      	ldrb	r3, [r3, #6]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d106      	bne.n	8001ae6 <LCD_Fast_DrawPoint+0x3c6>
			x = lcddev.width - 1 - x;	//横屏时处理
 8001ad8:	4b59      	ldr	r3, [pc, #356]	; (8001c40 <LCD_Fast_DrawPoint+0x520>)
 8001ada:	881a      	ldrh	r2, [r3, #0]
 8001adc:	88fb      	ldrh	r3, [r7, #6]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8001ae6:	4b56      	ldr	r3, [pc, #344]	; (8001c40 <LCD_Fast_DrawPoint+0x520>)
 8001ae8:	895b      	ldrh	r3, [r3, #10]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7fe ff68 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8001af0:	4b54      	ldr	r3, [pc, #336]	; (8001c44 <LCD_Fast_DrawPoint+0x524>)
 8001af2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001af6:	611a      	str	r2, [r3, #16]
 8001af8:	4b52      	ldr	r3, [pc, #328]	; (8001c44 <LCD_Fast_DrawPoint+0x524>)
 8001afa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001afe:	615a      	str	r2, [r3, #20]
 8001b00:	88fb      	ldrh	r3, [r7, #6]
 8001b02:	0a1b      	lsrs	r3, r3, #8
 8001b04:	b29a      	uxth	r2, r3
 8001b06:	4b50      	ldr	r3, [pc, #320]	; (8001c48 <LCD_Fast_DrawPoint+0x528>)
 8001b08:	60da      	str	r2, [r3, #12]
 8001b0a:	4b4e      	ldr	r3, [pc, #312]	; (8001c44 <LCD_Fast_DrawPoint+0x524>)
 8001b0c:	2280      	movs	r2, #128	; 0x80
 8001b0e:	615a      	str	r2, [r3, #20]
 8001b10:	4b4c      	ldr	r3, [pc, #304]	; (8001c44 <LCD_Fast_DrawPoint+0x524>)
 8001b12:	2280      	movs	r2, #128	; 0x80
 8001b14:	611a      	str	r2, [r3, #16]
 8001b16:	4b4b      	ldr	r3, [pc, #300]	; (8001c44 <LCD_Fast_DrawPoint+0x524>)
 8001b18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b1c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8001b1e:	4b49      	ldr	r3, [pc, #292]	; (8001c44 <LCD_Fast_DrawPoint+0x524>)
 8001b20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b24:	611a      	str	r2, [r3, #16]
 8001b26:	4b47      	ldr	r3, [pc, #284]	; (8001c44 <LCD_Fast_DrawPoint+0x524>)
 8001b28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b2c:	615a      	str	r2, [r3, #20]
 8001b2e:	88fb      	ldrh	r3, [r7, #6]
 8001b30:	4a45      	ldr	r2, [pc, #276]	; (8001c48 <LCD_Fast_DrawPoint+0x528>)
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	60d3      	str	r3, [r2, #12]
 8001b36:	4b43      	ldr	r3, [pc, #268]	; (8001c44 <LCD_Fast_DrawPoint+0x524>)
 8001b38:	2280      	movs	r2, #128	; 0x80
 8001b3a:	615a      	str	r2, [r3, #20]
 8001b3c:	4b41      	ldr	r3, [pc, #260]	; (8001c44 <LCD_Fast_DrawPoint+0x524>)
 8001b3e:	2280      	movs	r2, #128	; 0x80
 8001b40:	611a      	str	r2, [r3, #16]
 8001b42:	4b40      	ldr	r3, [pc, #256]	; (8001c44 <LCD_Fast_DrawPoint+0x524>)
 8001b44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b48:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8001b4a:	4b3d      	ldr	r3, [pc, #244]	; (8001c40 <LCD_Fast_DrawPoint+0x520>)
 8001b4c:	899b      	ldrh	r3, [r3, #12]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7fe ff36 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8001b54:	4b3b      	ldr	r3, [pc, #236]	; (8001c44 <LCD_Fast_DrawPoint+0x524>)
 8001b56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b5a:	611a      	str	r2, [r3, #16]
 8001b5c:	4b39      	ldr	r3, [pc, #228]	; (8001c44 <LCD_Fast_DrawPoint+0x524>)
 8001b5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b62:	615a      	str	r2, [r3, #20]
 8001b64:	88bb      	ldrh	r3, [r7, #4]
 8001b66:	0a1b      	lsrs	r3, r3, #8
 8001b68:	b29a      	uxth	r2, r3
 8001b6a:	4b37      	ldr	r3, [pc, #220]	; (8001c48 <LCD_Fast_DrawPoint+0x528>)
 8001b6c:	60da      	str	r2, [r3, #12]
 8001b6e:	4b35      	ldr	r3, [pc, #212]	; (8001c44 <LCD_Fast_DrawPoint+0x524>)
 8001b70:	2280      	movs	r2, #128	; 0x80
 8001b72:	615a      	str	r2, [r3, #20]
 8001b74:	4b33      	ldr	r3, [pc, #204]	; (8001c44 <LCD_Fast_DrawPoint+0x524>)
 8001b76:	2280      	movs	r2, #128	; 0x80
 8001b78:	611a      	str	r2, [r3, #16]
 8001b7a:	4b32      	ldr	r3, [pc, #200]	; (8001c44 <LCD_Fast_DrawPoint+0x524>)
 8001b7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b80:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8001b82:	4b30      	ldr	r3, [pc, #192]	; (8001c44 <LCD_Fast_DrawPoint+0x524>)
 8001b84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b88:	611a      	str	r2, [r3, #16]
 8001b8a:	4b2e      	ldr	r3, [pc, #184]	; (8001c44 <LCD_Fast_DrawPoint+0x524>)
 8001b8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b90:	615a      	str	r2, [r3, #20]
 8001b92:	88bb      	ldrh	r3, [r7, #4]
 8001b94:	4a2c      	ldr	r2, [pc, #176]	; (8001c48 <LCD_Fast_DrawPoint+0x528>)
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	60d3      	str	r3, [r2, #12]
 8001b9a:	4b2a      	ldr	r3, [pc, #168]	; (8001c44 <LCD_Fast_DrawPoint+0x524>)
 8001b9c:	2280      	movs	r2, #128	; 0x80
 8001b9e:	615a      	str	r2, [r3, #20]
 8001ba0:	4b28      	ldr	r3, [pc, #160]	; (8001c44 <LCD_Fast_DrawPoint+0x524>)
 8001ba2:	2280      	movs	r2, #128	; 0x80
 8001ba4:	611a      	str	r2, [r3, #16]
 8001ba6:	4b27      	ldr	r3, [pc, #156]	; (8001c44 <LCD_Fast_DrawPoint+0x524>)
 8001ba8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bac:	611a      	str	r2, [r3, #16]
 8001bae:	e018      	b.n	8001be2 <LCD_Fast_DrawPoint+0x4c2>
	} else {
		if (lcddev.dir == 1)
 8001bb0:	4b23      	ldr	r3, [pc, #140]	; (8001c40 <LCD_Fast_DrawPoint+0x520>)
 8001bb2:	799b      	ldrb	r3, [r3, #6]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d106      	bne.n	8001bc6 <LCD_Fast_DrawPoint+0x4a6>
			x = lcddev.width - 1 - x;	//横屏其实就是调转x,y坐标
 8001bb8:	4b21      	ldr	r3, [pc, #132]	; (8001c40 <LCD_Fast_DrawPoint+0x520>)
 8001bba:	881a      	ldrh	r2, [r3, #0]
 8001bbc:	88fb      	ldrh	r3, [r7, #6]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, x);
 8001bc6:	4b1e      	ldr	r3, [pc, #120]	; (8001c40 <LCD_Fast_DrawPoint+0x520>)
 8001bc8:	895b      	ldrh	r3, [r3, #10]
 8001bca:	88fa      	ldrh	r2, [r7, #6]
 8001bcc:	4611      	mov	r1, r2
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7fe ff82 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, y);
 8001bd4:	4b1a      	ldr	r3, [pc, #104]	; (8001c40 <LCD_Fast_DrawPoint+0x520>)
 8001bd6:	899b      	ldrh	r3, [r3, #12]
 8001bd8:	88ba      	ldrh	r2, [r7, #4]
 8001bda:	4611      	mov	r1, r2
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7fe ff7b 	bl	8000ad8 <LCD_WriteReg>
	}
	LCD_RS_CLR;
 8001be2:	4b18      	ldr	r3, [pc, #96]	; (8001c44 <LCD_Fast_DrawPoint+0x524>)
 8001be4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001be8:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 8001bea:	4b16      	ldr	r3, [pc, #88]	; (8001c44 <LCD_Fast_DrawPoint+0x524>)
 8001bec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bf0:	615a      	str	r2, [r3, #20]
	DATAOUT(lcddev.wramcmd);	//写指令
 8001bf2:	4b13      	ldr	r3, [pc, #76]	; (8001c40 <LCD_Fast_DrawPoint+0x520>)
 8001bf4:	891a      	ldrh	r2, [r3, #8]
 8001bf6:	4b14      	ldr	r3, [pc, #80]	; (8001c48 <LCD_Fast_DrawPoint+0x528>)
 8001bf8:	60da      	str	r2, [r3, #12]
	LCD_WR_CLR;
 8001bfa:	4b12      	ldr	r3, [pc, #72]	; (8001c44 <LCD_Fast_DrawPoint+0x524>)
 8001bfc:	2280      	movs	r2, #128	; 0x80
 8001bfe:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8001c00:	4b10      	ldr	r3, [pc, #64]	; (8001c44 <LCD_Fast_DrawPoint+0x524>)
 8001c02:	2280      	movs	r2, #128	; 0x80
 8001c04:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8001c06:	4b0f      	ldr	r3, [pc, #60]	; (8001c44 <LCD_Fast_DrawPoint+0x524>)
 8001c08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c0c:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(color);		//写数据
 8001c0e:	4b0d      	ldr	r3, [pc, #52]	; (8001c44 <LCD_Fast_DrawPoint+0x524>)
 8001c10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c14:	611a      	str	r2, [r3, #16]
 8001c16:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <LCD_Fast_DrawPoint+0x524>)
 8001c18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c1c:	615a      	str	r2, [r3, #20]
 8001c1e:	4a0a      	ldr	r2, [pc, #40]	; (8001c48 <LCD_Fast_DrawPoint+0x528>)
 8001c20:	887b      	ldrh	r3, [r7, #2]
 8001c22:	60d3      	str	r3, [r2, #12]
 8001c24:	4b07      	ldr	r3, [pc, #28]	; (8001c44 <LCD_Fast_DrawPoint+0x524>)
 8001c26:	2280      	movs	r2, #128	; 0x80
 8001c28:	615a      	str	r2, [r3, #20]
 8001c2a:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <LCD_Fast_DrawPoint+0x524>)
 8001c2c:	2280      	movs	r2, #128	; 0x80
 8001c2e:	611a      	str	r2, [r3, #16]
 8001c30:	4b04      	ldr	r3, [pc, #16]	; (8001c44 <LCD_Fast_DrawPoint+0x524>)
 8001c32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c36:	611a      	str	r2, [r3, #16]
}
 8001c38:	bf00      	nop
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	200000f4 	.word	0x200000f4
 8001c44:	40011000 	.word	0x40011000
 8001c48:	40010c00 	.word	0x40010c00
 8001c4c:	00000000 	.word	0x00000000

08001c50 <LCD_SSD_BackLightSet>:
//SSD1963 背光设置
//pwm:背光等级,0~100.越大越亮.
void LCD_SSD_BackLightSet(uint8_t pwm) {
 8001c50:	b590      	push	{r4, r7, lr}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4603      	mov	r3, r0
 8001c58:	71fb      	strb	r3, [r7, #7]
	LCD_WR_REG(0xBE);	//配置PWM输出
 8001c5a:	20be      	movs	r0, #190	; 0xbe
 8001c5c:	f7fe feb0 	bl	80009c0 <LCD_WR_REG>
	LCD_WR_DATA(0x05);	//1设置PWM频率
 8001c60:	4b4b      	ldr	r3, [pc, #300]	; (8001d90 <LCD_SSD_BackLightSet+0x140>)
 8001c62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c66:	611a      	str	r2, [r3, #16]
 8001c68:	4b49      	ldr	r3, [pc, #292]	; (8001d90 <LCD_SSD_BackLightSet+0x140>)
 8001c6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c6e:	615a      	str	r2, [r3, #20]
 8001c70:	4b48      	ldr	r3, [pc, #288]	; (8001d94 <LCD_SSD_BackLightSet+0x144>)
 8001c72:	2205      	movs	r2, #5
 8001c74:	60da      	str	r2, [r3, #12]
 8001c76:	4b46      	ldr	r3, [pc, #280]	; (8001d90 <LCD_SSD_BackLightSet+0x140>)
 8001c78:	2280      	movs	r2, #128	; 0x80
 8001c7a:	615a      	str	r2, [r3, #20]
 8001c7c:	4b44      	ldr	r3, [pc, #272]	; (8001d90 <LCD_SSD_BackLightSet+0x140>)
 8001c7e:	2280      	movs	r2, #128	; 0x80
 8001c80:	611a      	str	r2, [r3, #16]
 8001c82:	4b43      	ldr	r3, [pc, #268]	; (8001d90 <LCD_SSD_BackLightSet+0x140>)
 8001c84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c88:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(pwm * 2.55);	//2设置PWM占空比
 8001c8a:	4b41      	ldr	r3, [pc, #260]	; (8001d90 <LCD_SSD_BackLightSet+0x140>)
 8001c8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c90:	611a      	str	r2, [r3, #16]
 8001c92:	4b3f      	ldr	r3, [pc, #252]	; (8001d90 <LCD_SSD_BackLightSet+0x140>)
 8001c94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c98:	615a      	str	r2, [r3, #20]
 8001c9a:	79fb      	ldrb	r3, [r7, #7]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7fe fd51 	bl	8000744 <__aeabi_i2d>
 8001ca2:	a339      	add	r3, pc, #228	; (adr r3, 8001d88 <LCD_SSD_BackLightSet+0x138>)
 8001ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca8:	f7fe fad0 	bl	800024c <__aeabi_dmul>
 8001cac:	4602      	mov	r2, r0
 8001cae:	460b      	mov	r3, r1
 8001cb0:	4c38      	ldr	r4, [pc, #224]	; (8001d94 <LCD_SSD_BackLightSet+0x144>)
 8001cb2:	4610      	mov	r0, r2
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	f7fe fdaf 	bl	8000818 <__aeabi_d2uiz>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	60e3      	str	r3, [r4, #12]
 8001cbe:	4b34      	ldr	r3, [pc, #208]	; (8001d90 <LCD_SSD_BackLightSet+0x140>)
 8001cc0:	2280      	movs	r2, #128	; 0x80
 8001cc2:	615a      	str	r2, [r3, #20]
 8001cc4:	4b32      	ldr	r3, [pc, #200]	; (8001d90 <LCD_SSD_BackLightSet+0x140>)
 8001cc6:	2280      	movs	r2, #128	; 0x80
 8001cc8:	611a      	str	r2, [r3, #16]
 8001cca:	4b31      	ldr	r3, [pc, #196]	; (8001d90 <LCD_SSD_BackLightSet+0x140>)
 8001ccc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cd0:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x01);	//3设置C
 8001cd2:	4b2f      	ldr	r3, [pc, #188]	; (8001d90 <LCD_SSD_BackLightSet+0x140>)
 8001cd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cd8:	611a      	str	r2, [r3, #16]
 8001cda:	4b2d      	ldr	r3, [pc, #180]	; (8001d90 <LCD_SSD_BackLightSet+0x140>)
 8001cdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ce0:	615a      	str	r2, [r3, #20]
 8001ce2:	4b2c      	ldr	r3, [pc, #176]	; (8001d94 <LCD_SSD_BackLightSet+0x144>)
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	60da      	str	r2, [r3, #12]
 8001ce8:	4b29      	ldr	r3, [pc, #164]	; (8001d90 <LCD_SSD_BackLightSet+0x140>)
 8001cea:	2280      	movs	r2, #128	; 0x80
 8001cec:	615a      	str	r2, [r3, #20]
 8001cee:	4b28      	ldr	r3, [pc, #160]	; (8001d90 <LCD_SSD_BackLightSet+0x140>)
 8001cf0:	2280      	movs	r2, #128	; 0x80
 8001cf2:	611a      	str	r2, [r3, #16]
 8001cf4:	4b26      	ldr	r3, [pc, #152]	; (8001d90 <LCD_SSD_BackLightSet+0x140>)
 8001cf6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cfa:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0xFF);	//4设置D
 8001cfc:	4b24      	ldr	r3, [pc, #144]	; (8001d90 <LCD_SSD_BackLightSet+0x140>)
 8001cfe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d02:	611a      	str	r2, [r3, #16]
 8001d04:	4b22      	ldr	r3, [pc, #136]	; (8001d90 <LCD_SSD_BackLightSet+0x140>)
 8001d06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d0a:	615a      	str	r2, [r3, #20]
 8001d0c:	4b21      	ldr	r3, [pc, #132]	; (8001d94 <LCD_SSD_BackLightSet+0x144>)
 8001d0e:	22ff      	movs	r2, #255	; 0xff
 8001d10:	60da      	str	r2, [r3, #12]
 8001d12:	4b1f      	ldr	r3, [pc, #124]	; (8001d90 <LCD_SSD_BackLightSet+0x140>)
 8001d14:	2280      	movs	r2, #128	; 0x80
 8001d16:	615a      	str	r2, [r3, #20]
 8001d18:	4b1d      	ldr	r3, [pc, #116]	; (8001d90 <LCD_SSD_BackLightSet+0x140>)
 8001d1a:	2280      	movs	r2, #128	; 0x80
 8001d1c:	611a      	str	r2, [r3, #16]
 8001d1e:	4b1c      	ldr	r3, [pc, #112]	; (8001d90 <LCD_SSD_BackLightSet+0x140>)
 8001d20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d24:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//5设置E
 8001d26:	4b1a      	ldr	r3, [pc, #104]	; (8001d90 <LCD_SSD_BackLightSet+0x140>)
 8001d28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d2c:	611a      	str	r2, [r3, #16]
 8001d2e:	4b18      	ldr	r3, [pc, #96]	; (8001d90 <LCD_SSD_BackLightSet+0x140>)
 8001d30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d34:	615a      	str	r2, [r3, #20]
 8001d36:	4b17      	ldr	r3, [pc, #92]	; (8001d94 <LCD_SSD_BackLightSet+0x144>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	60da      	str	r2, [r3, #12]
 8001d3c:	4b14      	ldr	r3, [pc, #80]	; (8001d90 <LCD_SSD_BackLightSet+0x140>)
 8001d3e:	2280      	movs	r2, #128	; 0x80
 8001d40:	615a      	str	r2, [r3, #20]
 8001d42:	4b13      	ldr	r3, [pc, #76]	; (8001d90 <LCD_SSD_BackLightSet+0x140>)
 8001d44:	2280      	movs	r2, #128	; 0x80
 8001d46:	611a      	str	r2, [r3, #16]
 8001d48:	4b11      	ldr	r3, [pc, #68]	; (8001d90 <LCD_SSD_BackLightSet+0x140>)
 8001d4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d4e:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//6设置F
 8001d50:	4b0f      	ldr	r3, [pc, #60]	; (8001d90 <LCD_SSD_BackLightSet+0x140>)
 8001d52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d56:	611a      	str	r2, [r3, #16]
 8001d58:	4b0d      	ldr	r3, [pc, #52]	; (8001d90 <LCD_SSD_BackLightSet+0x140>)
 8001d5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d5e:	615a      	str	r2, [r3, #20]
 8001d60:	4b0c      	ldr	r3, [pc, #48]	; (8001d94 <LCD_SSD_BackLightSet+0x144>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	60da      	str	r2, [r3, #12]
 8001d66:	4b0a      	ldr	r3, [pc, #40]	; (8001d90 <LCD_SSD_BackLightSet+0x140>)
 8001d68:	2280      	movs	r2, #128	; 0x80
 8001d6a:	615a      	str	r2, [r3, #20]
 8001d6c:	4b08      	ldr	r3, [pc, #32]	; (8001d90 <LCD_SSD_BackLightSet+0x140>)
 8001d6e:	2280      	movs	r2, #128	; 0x80
 8001d70:	611a      	str	r2, [r3, #16]
 8001d72:	4b07      	ldr	r3, [pc, #28]	; (8001d90 <LCD_SSD_BackLightSet+0x140>)
 8001d74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d78:	611a      	str	r2, [r3, #16]
}
 8001d7a:	bf00      	nop
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd90      	pop	{r4, r7, pc}
 8001d82:	bf00      	nop
 8001d84:	f3af 8000 	nop.w
 8001d88:	66666666 	.word	0x66666666
 8001d8c:	40046666 	.word	0x40046666
 8001d90:	40011000 	.word	0x40011000
 8001d94:	40010c00 	.word	0x40010c00

08001d98 <LCD_Display_Dir>:
// Set LCD display direction
// dir: 0, vertical 1, horizontal
void LCD_Display_Dir(uint8_t dir) {
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	71fb      	strb	r3, [r7, #7]
	if (dir == 0)			//竖屏
 8001da2:	79fb      	ldrb	r3, [r7, #7]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d177      	bne.n	8001e98 <LCD_Display_Dir+0x100>
			{
		lcddev.dir = 0;	//竖屏
 8001da8:	4b80      	ldr	r3, [pc, #512]	; (8001fac <LCD_Display_Dir+0x214>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	719a      	strb	r2, [r3, #6]
		lcddev.width = 240;
 8001dae:	4b7f      	ldr	r3, [pc, #508]	; (8001fac <LCD_Display_Dir+0x214>)
 8001db0:	22f0      	movs	r2, #240	; 0xf0
 8001db2:	801a      	strh	r2, [r3, #0]
		lcddev.height = 320;
 8001db4:	4b7d      	ldr	r3, [pc, #500]	; (8001fac <LCD_Display_Dir+0x214>)
 8001db6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001dba:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001dbc:	4b7b      	ldr	r3, [pc, #492]	; (8001fac <LCD_Display_Dir+0x214>)
 8001dbe:	889b      	ldrh	r3, [r3, #4]
 8001dc0:	f249 3241 	movw	r2, #37697	; 0x9341
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d00b      	beq.n	8001de0 <LCD_Display_Dir+0x48>
 8001dc8:	4b78      	ldr	r3, [pc, #480]	; (8001fac <LCD_Display_Dir+0x214>)
 8001dca:	889b      	ldrh	r3, [r3, #4]
 8001dcc:	f646 0204 	movw	r2, #26628	; 0x6804
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d005      	beq.n	8001de0 <LCD_Display_Dir+0x48>
 8001dd4:	4b75      	ldr	r3, [pc, #468]	; (8001fac <LCD_Display_Dir+0x214>)
 8001dd6:	889b      	ldrh	r3, [r3, #4]
 8001dd8:	f245 3210 	movw	r2, #21264	; 0x5310
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d11e      	bne.n	8001e1e <LCD_Display_Dir+0x86>
			lcddev.wramcmd = 0X2C;
 8001de0:	4b72      	ldr	r3, [pc, #456]	; (8001fac <LCD_Display_Dir+0x214>)
 8001de2:	222c      	movs	r2, #44	; 0x2c
 8001de4:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 8001de6:	4b71      	ldr	r3, [pc, #452]	; (8001fac <LCD_Display_Dir+0x214>)
 8001de8:	222a      	movs	r2, #42	; 0x2a
 8001dea:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 8001dec:	4b6f      	ldr	r3, [pc, #444]	; (8001fac <LCD_Display_Dir+0x214>)
 8001dee:	222b      	movs	r2, #43	; 0x2b
 8001df0:	819a      	strh	r2, [r3, #12]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001df2:	4b6e      	ldr	r3, [pc, #440]	; (8001fac <LCD_Display_Dir+0x214>)
 8001df4:	889b      	ldrh	r3, [r3, #4]
 8001df6:	f646 0204 	movw	r2, #26628	; 0x6804
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d006      	beq.n	8001e0c <LCD_Display_Dir+0x74>
 8001dfe:	4b6b      	ldr	r3, [pc, #428]	; (8001fac <LCD_Display_Dir+0x214>)
 8001e00:	889b      	ldrh	r3, [r3, #4]
 8001e02:	f245 3210 	movw	r2, #21264	; 0x5310
 8001e06:	4293      	cmp	r3, r2
 8001e08:	f040 80c7 	bne.w	8001f9a <LCD_Display_Dir+0x202>
				lcddev.width = 320;
 8001e0c:	4b67      	ldr	r3, [pc, #412]	; (8001fac <LCD_Display_Dir+0x214>)
 8001e0e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001e12:	801a      	strh	r2, [r3, #0]
				lcddev.height = 480;
 8001e14:	4b65      	ldr	r3, [pc, #404]	; (8001fac <LCD_Display_Dir+0x214>)
 8001e16:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001e1a:	805a      	strh	r2, [r3, #2]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001e1c:	e0bd      	b.n	8001f9a <LCD_Display_Dir+0x202>
			}
		} else if (lcddev.id == 0x5510) {
 8001e1e:	4b63      	ldr	r3, [pc, #396]	; (8001fac <LCD_Display_Dir+0x214>)
 8001e20:	889b      	ldrh	r3, [r3, #4]
 8001e22:	f245 5210 	movw	r2, #21776	; 0x5510
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d114      	bne.n	8001e54 <LCD_Display_Dir+0xbc>
			lcddev.wramcmd = 0X2C00;
 8001e2a:	4b60      	ldr	r3, [pc, #384]	; (8001fac <LCD_Display_Dir+0x214>)
 8001e2c:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8001e30:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 8001e32:	4b5e      	ldr	r3, [pc, #376]	; (8001fac <LCD_Display_Dir+0x214>)
 8001e34:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8001e38:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 8001e3a:	4b5c      	ldr	r3, [pc, #368]	; (8001fac <LCD_Display_Dir+0x214>)
 8001e3c:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8001e40:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;
 8001e42:	4b5a      	ldr	r3, [pc, #360]	; (8001fac <LCD_Display_Dir+0x214>)
 8001e44:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001e48:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;
 8001e4a:	4b58      	ldr	r3, [pc, #352]	; (8001fac <LCD_Display_Dir+0x214>)
 8001e4c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001e50:	805a      	strh	r2, [r3, #2]
 8001e52:	e0a3      	b.n	8001f9c <LCD_Display_Dir+0x204>
		} else if (lcddev.id == 0X1963) {
 8001e54:	4b55      	ldr	r3, [pc, #340]	; (8001fac <LCD_Display_Dir+0x214>)
 8001e56:	889b      	ldrh	r3, [r3, #4]
 8001e58:	f641 1263 	movw	r2, #6499	; 0x1963
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d111      	bne.n	8001e84 <LCD_Display_Dir+0xec>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 8001e60:	4b52      	ldr	r3, [pc, #328]	; (8001fac <LCD_Display_Dir+0x214>)
 8001e62:	222c      	movs	r2, #44	; 0x2c
 8001e64:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;	//设置写X坐标指令
 8001e66:	4b51      	ldr	r3, [pc, #324]	; (8001fac <LCD_Display_Dir+0x214>)
 8001e68:	222b      	movs	r2, #43	; 0x2b
 8001e6a:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;	//设置写Y坐标指令
 8001e6c:	4b4f      	ldr	r3, [pc, #316]	; (8001fac <LCD_Display_Dir+0x214>)
 8001e6e:	222a      	movs	r2, #42	; 0x2a
 8001e70:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;		//设置宽度480
 8001e72:	4b4e      	ldr	r3, [pc, #312]	; (8001fac <LCD_Display_Dir+0x214>)
 8001e74:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001e78:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;		//设置高度800
 8001e7a:	4b4c      	ldr	r3, [pc, #304]	; (8001fac <LCD_Display_Dir+0x214>)
 8001e7c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001e80:	805a      	strh	r2, [r3, #2]
 8001e82:	e08b      	b.n	8001f9c <LCD_Display_Dir+0x204>
		} else {
			lcddev.wramcmd = 0X22;
 8001e84:	4b49      	ldr	r3, [pc, #292]	; (8001fac <LCD_Display_Dir+0x214>)
 8001e86:	2222      	movs	r2, #34	; 0x22
 8001e88:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X20;
 8001e8a:	4b48      	ldr	r3, [pc, #288]	; (8001fac <LCD_Display_Dir+0x214>)
 8001e8c:	2220      	movs	r2, #32
 8001e8e:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X21;
 8001e90:	4b46      	ldr	r3, [pc, #280]	; (8001fac <LCD_Display_Dir+0x214>)
 8001e92:	2221      	movs	r2, #33	; 0x21
 8001e94:	819a      	strh	r2, [r3, #12]
 8001e96:	e081      	b.n	8001f9c <LCD_Display_Dir+0x204>
		}
	} else 				//横屏
	{
		lcddev.dir = 1;	//横屏
 8001e98:	4b44      	ldr	r3, [pc, #272]	; (8001fac <LCD_Display_Dir+0x214>)
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	719a      	strb	r2, [r3, #6]
		lcddev.width = 320;
 8001e9e:	4b43      	ldr	r3, [pc, #268]	; (8001fac <LCD_Display_Dir+0x214>)
 8001ea0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001ea4:	801a      	strh	r2, [r3, #0]
		lcddev.height = 240;
 8001ea6:	4b41      	ldr	r3, [pc, #260]	; (8001fac <LCD_Display_Dir+0x214>)
 8001ea8:	22f0      	movs	r2, #240	; 0xf0
 8001eaa:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8001eac:	4b3f      	ldr	r3, [pc, #252]	; (8001fac <LCD_Display_Dir+0x214>)
 8001eae:	889b      	ldrh	r3, [r3, #4]
 8001eb0:	f249 3241 	movw	r2, #37697	; 0x9341
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d005      	beq.n	8001ec4 <LCD_Display_Dir+0x12c>
 8001eb8:	4b3c      	ldr	r3, [pc, #240]	; (8001fac <LCD_Display_Dir+0x214>)
 8001eba:	889b      	ldrh	r3, [r3, #4]
 8001ebc:	f245 3210 	movw	r2, #21264	; 0x5310
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d109      	bne.n	8001ed8 <LCD_Display_Dir+0x140>
			lcddev.wramcmd = 0X2C;
 8001ec4:	4b39      	ldr	r3, [pc, #228]	; (8001fac <LCD_Display_Dir+0x214>)
 8001ec6:	222c      	movs	r2, #44	; 0x2c
 8001ec8:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 8001eca:	4b38      	ldr	r3, [pc, #224]	; (8001fac <LCD_Display_Dir+0x214>)
 8001ecc:	222a      	movs	r2, #42	; 0x2a
 8001ece:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 8001ed0:	4b36      	ldr	r3, [pc, #216]	; (8001fac <LCD_Display_Dir+0x214>)
 8001ed2:	222b      	movs	r2, #43	; 0x2b
 8001ed4:	819a      	strh	r2, [r3, #12]
 8001ed6:	e04b      	b.n	8001f70 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X6804) {
 8001ed8:	4b34      	ldr	r3, [pc, #208]	; (8001fac <LCD_Display_Dir+0x214>)
 8001eda:	889b      	ldrh	r3, [r3, #4]
 8001edc:	f646 0204 	movw	r2, #26628	; 0x6804
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d109      	bne.n	8001ef8 <LCD_Display_Dir+0x160>
			lcddev.wramcmd = 0X2C;
 8001ee4:	4b31      	ldr	r3, [pc, #196]	; (8001fac <LCD_Display_Dir+0x214>)
 8001ee6:	222c      	movs	r2, #44	; 0x2c
 8001ee8:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;
 8001eea:	4b30      	ldr	r3, [pc, #192]	; (8001fac <LCD_Display_Dir+0x214>)
 8001eec:	222b      	movs	r2, #43	; 0x2b
 8001eee:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;
 8001ef0:	4b2e      	ldr	r3, [pc, #184]	; (8001fac <LCD_Display_Dir+0x214>)
 8001ef2:	222a      	movs	r2, #42	; 0x2a
 8001ef4:	819a      	strh	r2, [r3, #12]
 8001ef6:	e03b      	b.n	8001f70 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0x5510) {
 8001ef8:	4b2c      	ldr	r3, [pc, #176]	; (8001fac <LCD_Display_Dir+0x214>)
 8001efa:	889b      	ldrh	r3, [r3, #4]
 8001efc:	f245 5210 	movw	r2, #21776	; 0x5510
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d114      	bne.n	8001f2e <LCD_Display_Dir+0x196>
			lcddev.wramcmd = 0X2C00;
 8001f04:	4b29      	ldr	r3, [pc, #164]	; (8001fac <LCD_Display_Dir+0x214>)
 8001f06:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8001f0a:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 8001f0c:	4b27      	ldr	r3, [pc, #156]	; (8001fac <LCD_Display_Dir+0x214>)
 8001f0e:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8001f12:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 8001f14:	4b25      	ldr	r3, [pc, #148]	; (8001fac <LCD_Display_Dir+0x214>)
 8001f16:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8001f1a:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;
 8001f1c:	4b23      	ldr	r3, [pc, #140]	; (8001fac <LCD_Display_Dir+0x214>)
 8001f1e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001f22:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;
 8001f24:	4b21      	ldr	r3, [pc, #132]	; (8001fac <LCD_Display_Dir+0x214>)
 8001f26:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001f2a:	805a      	strh	r2, [r3, #2]
 8001f2c:	e020      	b.n	8001f70 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X1963) {
 8001f2e:	4b1f      	ldr	r3, [pc, #124]	; (8001fac <LCD_Display_Dir+0x214>)
 8001f30:	889b      	ldrh	r3, [r3, #4]
 8001f32:	f641 1263 	movw	r2, #6499	; 0x1963
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d111      	bne.n	8001f5e <LCD_Display_Dir+0x1c6>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 8001f3a:	4b1c      	ldr	r3, [pc, #112]	; (8001fac <LCD_Display_Dir+0x214>)
 8001f3c:	222c      	movs	r2, #44	; 0x2c
 8001f3e:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;	//设置写X坐标指令
 8001f40:	4b1a      	ldr	r3, [pc, #104]	; (8001fac <LCD_Display_Dir+0x214>)
 8001f42:	222a      	movs	r2, #42	; 0x2a
 8001f44:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;	//设置写Y坐标指令
 8001f46:	4b19      	ldr	r3, [pc, #100]	; (8001fac <LCD_Display_Dir+0x214>)
 8001f48:	222b      	movs	r2, #43	; 0x2b
 8001f4a:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;		//设置宽度800
 8001f4c:	4b17      	ldr	r3, [pc, #92]	; (8001fac <LCD_Display_Dir+0x214>)
 8001f4e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001f52:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;		//设置高度480
 8001f54:	4b15      	ldr	r3, [pc, #84]	; (8001fac <LCD_Display_Dir+0x214>)
 8001f56:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001f5a:	805a      	strh	r2, [r3, #2]
 8001f5c:	e008      	b.n	8001f70 <LCD_Display_Dir+0x1d8>
		} else {
			lcddev.wramcmd = 0X22;
 8001f5e:	4b13      	ldr	r3, [pc, #76]	; (8001fac <LCD_Display_Dir+0x214>)
 8001f60:	2222      	movs	r2, #34	; 0x22
 8001f62:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X21;
 8001f64:	4b11      	ldr	r3, [pc, #68]	; (8001fac <LCD_Display_Dir+0x214>)
 8001f66:	2221      	movs	r2, #33	; 0x21
 8001f68:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X20;
 8001f6a:	4b10      	ldr	r3, [pc, #64]	; (8001fac <LCD_Display_Dir+0x214>)
 8001f6c:	2220      	movs	r2, #32
 8001f6e:	819a      	strh	r2, [r3, #12]
		}
		if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001f70:	4b0e      	ldr	r3, [pc, #56]	; (8001fac <LCD_Display_Dir+0x214>)
 8001f72:	889b      	ldrh	r3, [r3, #4]
 8001f74:	f646 0204 	movw	r2, #26628	; 0x6804
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d005      	beq.n	8001f88 <LCD_Display_Dir+0x1f0>
 8001f7c:	4b0b      	ldr	r3, [pc, #44]	; (8001fac <LCD_Display_Dir+0x214>)
 8001f7e:	889b      	ldrh	r3, [r3, #4]
 8001f80:	f245 3210 	movw	r2, #21264	; 0x5310
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d109      	bne.n	8001f9c <LCD_Display_Dir+0x204>
			lcddev.width = 480;
 8001f88:	4b08      	ldr	r3, [pc, #32]	; (8001fac <LCD_Display_Dir+0x214>)
 8001f8a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001f8e:	801a      	strh	r2, [r3, #0]
			lcddev.height = 320;
 8001f90:	4b06      	ldr	r3, [pc, #24]	; (8001fac <LCD_Display_Dir+0x214>)
 8001f92:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f96:	805a      	strh	r2, [r3, #2]
 8001f98:	e000      	b.n	8001f9c <LCD_Display_Dir+0x204>
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001f9a:	bf00      	nop
		}
	}
	LCD_Scan_Dir(DFT_SCAN_DIR);	//默认扫描方向
 8001f9c:	2000      	movs	r0, #0
 8001f9e:	f7ff f8ad 	bl	80010fc <LCD_Scan_Dir>
}
 8001fa2:	bf00      	nop
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	200000f4 	.word	0x200000f4

08001fb0 <LCD_Init>:
	}
}
//初始化lcd
//该初始化函数可以初始化各种ALIENTEK出品的LCD液晶屏
//本函数占用较大flash,用户可以根据自己的实际情况,删掉未用到的LCD初始化代码.以节省空间.
void LCD_Init(void) {
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_Initure;

	__HAL_RCC_GPIOB_CLK_ENABLE();           	//开启GPIOB时钟
 8001fb6:	4b90      	ldr	r3, [pc, #576]	; (80021f8 <LCD_Init+0x248>)
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	4a8f      	ldr	r2, [pc, #572]	; (80021f8 <LCD_Init+0x248>)
 8001fbc:	f043 0308 	orr.w	r3, r3, #8
 8001fc0:	6193      	str	r3, [r2, #24]
 8001fc2:	4b8d      	ldr	r3, [pc, #564]	; (80021f8 <LCD_Init+0x248>)
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	f003 0308 	and.w	r3, r3, #8
 8001fca:	607b      	str	r3, [r7, #4]
 8001fcc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();           	//开启GPIOC时钟
 8001fce:	4b8a      	ldr	r3, [pc, #552]	; (80021f8 <LCD_Init+0x248>)
 8001fd0:	699b      	ldr	r3, [r3, #24]
 8001fd2:	4a89      	ldr	r2, [pc, #548]	; (80021f8 <LCD_Init+0x248>)
 8001fd4:	f043 0310 	orr.w	r3, r3, #16
 8001fd8:	6193      	str	r3, [r2, #24]
 8001fda:	4b87      	ldr	r3, [pc, #540]	; (80021f8 <LCD_Init+0x248>)
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	f003 0310 	and.w	r3, r3, #16
 8001fe2:	603b      	str	r3, [r7, #0]
 8001fe4:	683b      	ldr	r3, [r7, #0]

	//PC6,7,8,9,10
	GPIO_Initure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 |\
 8001fe6:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001fea:	60bb      	str	r3, [r7, #8]
 GPIO_PIN_9
			| GPIO_PIN_10;
	GPIO_Initure.Mode = GPIO_MODE_OUTPUT_PP;  	//推挽输出
 8001fec:	2301      	movs	r3, #1
 8001fee:	60fb      	str	r3, [r7, #12]
	GPIO_Initure.Pull = GPIO_PULLUP;          	//上拉
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	613b      	str	r3, [r7, #16]
	GPIO_Initure.Speed = GPIO_SPEED_FREQ_HIGH;    	 	//高速
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_Initure);
 8001ff8:	f107 0308 	add.w	r3, r7, #8
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	487f      	ldr	r0, [pc, #508]	; (80021fc <LCD_Init+0x24c>)
 8002000:	f006 f9b6 	bl	8008370 <HAL_GPIO_Init>

	//PB0~15
	GPIO_Initure.Pin = GPIO_PIN_All;				//PB推挽输出
 8002004:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002008:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_Initure);
 800200a:	f107 0308 	add.w	r3, r7, #8
 800200e:	4619      	mov	r1, r3
 8002010:	487b      	ldr	r0, [pc, #492]	; (8002200 <LCD_Init+0x250>)
 8002012:	f006 f9ad 	bl	8008370 <HAL_GPIO_Init>

//	__HAL_AFIO_REMAP_SWJ_DISABLE();				//禁止JTAG

	HAL_Delay(50); // delay 50 ms
 8002016:	2032      	movs	r0, #50	; 0x32
 8002018:	f005 fbf6 	bl	8007808 <HAL_Delay>
	LCD_WriteReg(0x0000, 0x0001);
 800201c:	2101      	movs	r1, #1
 800201e:	2000      	movs	r0, #0
 8002020:	f7fe fd5a 	bl	8000ad8 <LCD_WriteReg>
	HAL_Delay(50); // delay 50 ms
 8002024:	2032      	movs	r0, #50	; 0x32
 8002026:	f005 fbef 	bl	8007808 <HAL_Delay>
	lcddev.id = LCD_ReadReg(0x0000);
 800202a:	2000      	movs	r0, #0
 800202c:	f7fe fd7e 	bl	8000b2c <LCD_ReadReg>
 8002030:	4603      	mov	r3, r0
 8002032:	461a      	mov	r2, r3
 8002034:	4b73      	ldr	r3, [pc, #460]	; (8002204 <LCD_Init+0x254>)
 8002036:	809a      	strh	r2, [r3, #4]
	if (lcddev.id < 0XFF || lcddev.id == 0XFFFF || lcddev.id == 0X9300) //读到ID不正确,新增lcddev.id==0X9300判断，因为9341在未被复位的情况下会被读成9300
 8002038:	4b72      	ldr	r3, [pc, #456]	; (8002204 <LCD_Init+0x254>)
 800203a:	889b      	ldrh	r3, [r3, #4]
 800203c:	2bfe      	cmp	r3, #254	; 0xfe
 800203e:	d90b      	bls.n	8002058 <LCD_Init+0xa8>
 8002040:	4b70      	ldr	r3, [pc, #448]	; (8002204 <LCD_Init+0x254>)
 8002042:	889b      	ldrh	r3, [r3, #4]
 8002044:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002048:	4293      	cmp	r3, r2
 800204a:	d005      	beq.n	8002058 <LCD_Init+0xa8>
 800204c:	4b6d      	ldr	r3, [pc, #436]	; (8002204 <LCD_Init+0x254>)
 800204e:	889b      	ldrh	r3, [r3, #4]
 8002050:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 8002054:	f040 80c8 	bne.w	80021e8 <LCD_Init+0x238>
			{
		//尝试9341 ID的读取
		LCD_WR_REG(0XD3);
 8002058:	20d3      	movs	r0, #211	; 0xd3
 800205a:	f7fe fcb1 	bl	80009c0 <LCD_WR_REG>
		LCD_RD_DATA(); 				//dummy read 	
 800205e:	f7fe fcf7 	bl	8000a50 <LCD_RD_DATA>
		LCD_RD_DATA();   	    	//读到0X00
 8002062:	f7fe fcf5 	bl	8000a50 <LCD_RD_DATA>
		lcddev.id = LCD_RD_DATA();   	//读取93
 8002066:	f7fe fcf3 	bl	8000a50 <LCD_RD_DATA>
 800206a:	4603      	mov	r3, r0
 800206c:	461a      	mov	r2, r3
 800206e:	4b65      	ldr	r3, [pc, #404]	; (8002204 <LCD_Init+0x254>)
 8002070:	809a      	strh	r2, [r3, #4]
		lcddev.id <<= 8;
 8002072:	4b64      	ldr	r3, [pc, #400]	; (8002204 <LCD_Init+0x254>)
 8002074:	889b      	ldrh	r3, [r3, #4]
 8002076:	021b      	lsls	r3, r3, #8
 8002078:	b29a      	uxth	r2, r3
 800207a:	4b62      	ldr	r3, [pc, #392]	; (8002204 <LCD_Init+0x254>)
 800207c:	809a      	strh	r2, [r3, #4]
		lcddev.id |= LCD_RD_DATA();  	//读取41
 800207e:	f7fe fce7 	bl	8000a50 <LCD_RD_DATA>
 8002082:	4603      	mov	r3, r0
 8002084:	461a      	mov	r2, r3
 8002086:	4b5f      	ldr	r3, [pc, #380]	; (8002204 <LCD_Init+0x254>)
 8002088:	889b      	ldrh	r3, [r3, #4]
 800208a:	4313      	orrs	r3, r2
 800208c:	b29a      	uxth	r2, r3
 800208e:	4b5d      	ldr	r3, [pc, #372]	; (8002204 <LCD_Init+0x254>)
 8002090:	809a      	strh	r2, [r3, #4]
		if (lcddev.id != 0X9341)		//非9341,尝试是不是6804
 8002092:	4b5c      	ldr	r3, [pc, #368]	; (8002204 <LCD_Init+0x254>)
 8002094:	889b      	ldrh	r3, [r3, #4]
 8002096:	f249 3241 	movw	r2, #37697	; 0x9341
 800209a:	4293      	cmp	r3, r2
 800209c:	f000 80a4 	beq.w	80021e8 <LCD_Init+0x238>
				{
			LCD_WR_REG(0XBF);
 80020a0:	20bf      	movs	r0, #191	; 0xbf
 80020a2:	f7fe fc8d 	bl	80009c0 <LCD_WR_REG>
			LCD_RD_DATA(); 			//dummy read 	 
 80020a6:	f7fe fcd3 	bl	8000a50 <LCD_RD_DATA>
			LCD_RD_DATA();   	    //读回0X01
 80020aa:	f7fe fcd1 	bl	8000a50 <LCD_RD_DATA>
			LCD_RD_DATA(); 			//读回0XD0
 80020ae:	f7fe fccf 	bl	8000a50 <LCD_RD_DATA>
			lcddev.id = LCD_RD_DATA(); 			//这里读回0X68
 80020b2:	f7fe fccd 	bl	8000a50 <LCD_RD_DATA>
 80020b6:	4603      	mov	r3, r0
 80020b8:	461a      	mov	r2, r3
 80020ba:	4b52      	ldr	r3, [pc, #328]	; (8002204 <LCD_Init+0x254>)
 80020bc:	809a      	strh	r2, [r3, #4]
			lcddev.id <<= 8;
 80020be:	4b51      	ldr	r3, [pc, #324]	; (8002204 <LCD_Init+0x254>)
 80020c0:	889b      	ldrh	r3, [r3, #4]
 80020c2:	021b      	lsls	r3, r3, #8
 80020c4:	b29a      	uxth	r2, r3
 80020c6:	4b4f      	ldr	r3, [pc, #316]	; (8002204 <LCD_Init+0x254>)
 80020c8:	809a      	strh	r2, [r3, #4]
			lcddev.id |= LCD_RD_DATA(); 			//这里读回0X04
 80020ca:	f7fe fcc1 	bl	8000a50 <LCD_RD_DATA>
 80020ce:	4603      	mov	r3, r0
 80020d0:	461a      	mov	r2, r3
 80020d2:	4b4c      	ldr	r3, [pc, #304]	; (8002204 <LCD_Init+0x254>)
 80020d4:	889b      	ldrh	r3, [r3, #4]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	b29a      	uxth	r2, r3
 80020da:	4b4a      	ldr	r3, [pc, #296]	; (8002204 <LCD_Init+0x254>)
 80020dc:	809a      	strh	r2, [r3, #4]
			if (lcddev.id != 0X6804)	//也不是6804,尝试看看是不是NT35310
 80020de:	4b49      	ldr	r3, [pc, #292]	; (8002204 <LCD_Init+0x254>)
 80020e0:	889b      	ldrh	r3, [r3, #4]
 80020e2:	f646 0204 	movw	r2, #26628	; 0x6804
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d07e      	beq.n	80021e8 <LCD_Init+0x238>
					{
				LCD_WR_REG(0XD4);
 80020ea:	20d4      	movs	r0, #212	; 0xd4
 80020ec:	f7fe fc68 	bl	80009c0 <LCD_WR_REG>
				LCD_RD_DATA(); 				//dummy read  
 80020f0:	f7fe fcae 	bl	8000a50 <LCD_RD_DATA>
				LCD_RD_DATA();   			//读回0X01	 
 80020f4:	f7fe fcac 	bl	8000a50 <LCD_RD_DATA>
				lcddev.id = LCD_RD_DATA();	//读回0X53
 80020f8:	f7fe fcaa 	bl	8000a50 <LCD_RD_DATA>
 80020fc:	4603      	mov	r3, r0
 80020fe:	461a      	mov	r2, r3
 8002100:	4b40      	ldr	r3, [pc, #256]	; (8002204 <LCD_Init+0x254>)
 8002102:	809a      	strh	r2, [r3, #4]
				lcddev.id <<= 8;
 8002104:	4b3f      	ldr	r3, [pc, #252]	; (8002204 <LCD_Init+0x254>)
 8002106:	889b      	ldrh	r3, [r3, #4]
 8002108:	021b      	lsls	r3, r3, #8
 800210a:	b29a      	uxth	r2, r3
 800210c:	4b3d      	ldr	r3, [pc, #244]	; (8002204 <LCD_Init+0x254>)
 800210e:	809a      	strh	r2, [r3, #4]
				lcddev.id |= LCD_RD_DATA();	//这里读回0X10
 8002110:	f7fe fc9e 	bl	8000a50 <LCD_RD_DATA>
 8002114:	4603      	mov	r3, r0
 8002116:	461a      	mov	r2, r3
 8002118:	4b3a      	ldr	r3, [pc, #232]	; (8002204 <LCD_Init+0x254>)
 800211a:	889b      	ldrh	r3, [r3, #4]
 800211c:	4313      	orrs	r3, r2
 800211e:	b29a      	uxth	r2, r3
 8002120:	4b38      	ldr	r3, [pc, #224]	; (8002204 <LCD_Init+0x254>)
 8002122:	809a      	strh	r2, [r3, #4]
				if (lcddev.id != 0X5310)		//也不是NT35310,尝试看看是不是NT35510
 8002124:	4b37      	ldr	r3, [pc, #220]	; (8002204 <LCD_Init+0x254>)
 8002126:	889b      	ldrh	r3, [r3, #4]
 8002128:	f245 3210 	movw	r2, #21264	; 0x5310
 800212c:	4293      	cmp	r3, r2
 800212e:	d05b      	beq.n	80021e8 <LCD_Init+0x238>
						{
					LCD_WR_REG(0XDA00);
 8002130:	f44f 405a 	mov.w	r0, #55808	; 0xda00
 8002134:	f7fe fc44 	bl	80009c0 <LCD_WR_REG>
					LCD_RD_DATA();   		//读回0X00	 
 8002138:	f7fe fc8a 	bl	8000a50 <LCD_RD_DATA>
					LCD_WR_REG(0XDB00);
 800213c:	f44f 405b 	mov.w	r0, #56064	; 0xdb00
 8002140:	f7fe fc3e 	bl	80009c0 <LCD_WR_REG>
					lcddev.id = LCD_RD_DATA();   		//读回0X80
 8002144:	f7fe fc84 	bl	8000a50 <LCD_RD_DATA>
 8002148:	4603      	mov	r3, r0
 800214a:	461a      	mov	r2, r3
 800214c:	4b2d      	ldr	r3, [pc, #180]	; (8002204 <LCD_Init+0x254>)
 800214e:	809a      	strh	r2, [r3, #4]
					lcddev.id <<= 8;
 8002150:	4b2c      	ldr	r3, [pc, #176]	; (8002204 <LCD_Init+0x254>)
 8002152:	889b      	ldrh	r3, [r3, #4]
 8002154:	021b      	lsls	r3, r3, #8
 8002156:	b29a      	uxth	r2, r3
 8002158:	4b2a      	ldr	r3, [pc, #168]	; (8002204 <LCD_Init+0x254>)
 800215a:	809a      	strh	r2, [r3, #4]
					LCD_WR_REG(0XDC00);
 800215c:	f44f 405c 	mov.w	r0, #56320	; 0xdc00
 8002160:	f7fe fc2e 	bl	80009c0 <LCD_WR_REG>
					lcddev.id |= LCD_RD_DATA();   		//读回0X00
 8002164:	f7fe fc74 	bl	8000a50 <LCD_RD_DATA>
 8002168:	4603      	mov	r3, r0
 800216a:	461a      	mov	r2, r3
 800216c:	4b25      	ldr	r3, [pc, #148]	; (8002204 <LCD_Init+0x254>)
 800216e:	889b      	ldrh	r3, [r3, #4]
 8002170:	4313      	orrs	r3, r2
 8002172:	b29a      	uxth	r2, r3
 8002174:	4b23      	ldr	r3, [pc, #140]	; (8002204 <LCD_Init+0x254>)
 8002176:	809a      	strh	r2, [r3, #4]
					if (lcddev.id == 0x8000)
 8002178:	4b22      	ldr	r3, [pc, #136]	; (8002204 <LCD_Init+0x254>)
 800217a:	889b      	ldrh	r3, [r3, #4]
 800217c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002180:	d103      	bne.n	800218a <LCD_Init+0x1da>
						lcddev.id = 0x5510;   		//NT35510读回的ID是8000H,为方便区分,我们强制设置为5510
 8002182:	4b20      	ldr	r3, [pc, #128]	; (8002204 <LCD_Init+0x254>)
 8002184:	f245 5210 	movw	r2, #21776	; 0x5510
 8002188:	809a      	strh	r2, [r3, #4]
					if (lcddev.id != 0X5510)			//也不是NT5510,尝试看看是不是SSD1963
 800218a:	4b1e      	ldr	r3, [pc, #120]	; (8002204 <LCD_Init+0x254>)
 800218c:	889b      	ldrh	r3, [r3, #4]
 800218e:	f245 5210 	movw	r2, #21776	; 0x5510
 8002192:	4293      	cmp	r3, r2
 8002194:	d028      	beq.n	80021e8 <LCD_Init+0x238>
							{
						LCD_WR_REG(0XA1);
 8002196:	20a1      	movs	r0, #161	; 0xa1
 8002198:	f7fe fc12 	bl	80009c0 <LCD_WR_REG>
						lcddev.id = LCD_RD_DATA();
 800219c:	f7fe fc58 	bl	8000a50 <LCD_RD_DATA>
 80021a0:	4603      	mov	r3, r0
 80021a2:	461a      	mov	r2, r3
 80021a4:	4b17      	ldr	r3, [pc, #92]	; (8002204 <LCD_Init+0x254>)
 80021a6:	809a      	strh	r2, [r3, #4]
						lcddev.id = LCD_RD_DATA();	//读回0X57
 80021a8:	f7fe fc52 	bl	8000a50 <LCD_RD_DATA>
 80021ac:	4603      	mov	r3, r0
 80021ae:	461a      	mov	r2, r3
 80021b0:	4b14      	ldr	r3, [pc, #80]	; (8002204 <LCD_Init+0x254>)
 80021b2:	809a      	strh	r2, [r3, #4]
						lcddev.id <<= 8;
 80021b4:	4b13      	ldr	r3, [pc, #76]	; (8002204 <LCD_Init+0x254>)
 80021b6:	889b      	ldrh	r3, [r3, #4]
 80021b8:	021b      	lsls	r3, r3, #8
 80021ba:	b29a      	uxth	r2, r3
 80021bc:	4b11      	ldr	r3, [pc, #68]	; (8002204 <LCD_Init+0x254>)
 80021be:	809a      	strh	r2, [r3, #4]
						lcddev.id |= LCD_RD_DATA();	//读回0X61
 80021c0:	f7fe fc46 	bl	8000a50 <LCD_RD_DATA>
 80021c4:	4603      	mov	r3, r0
 80021c6:	461a      	mov	r2, r3
 80021c8:	4b0e      	ldr	r3, [pc, #56]	; (8002204 <LCD_Init+0x254>)
 80021ca:	889b      	ldrh	r3, [r3, #4]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	4b0c      	ldr	r3, [pc, #48]	; (8002204 <LCD_Init+0x254>)
 80021d2:	809a      	strh	r2, [r3, #4]
						if (lcddev.id == 0X5761)
 80021d4:	4b0b      	ldr	r3, [pc, #44]	; (8002204 <LCD_Init+0x254>)
 80021d6:	889b      	ldrh	r3, [r3, #4]
 80021d8:	f245 7261 	movw	r2, #22369	; 0x5761
 80021dc:	4293      	cmp	r3, r2
 80021de:	d103      	bne.n	80021e8 <LCD_Init+0x238>
							lcddev.id = 0X1963;	//SSD1963读回的ID是5761H,为方便区分,我们强制设置为1963
 80021e0:	4b08      	ldr	r3, [pc, #32]	; (8002204 <LCD_Init+0x254>)
 80021e2:	f641 1263 	movw	r2, #6499	; 0x1963
 80021e6:	809a      	strh	r2, [r3, #4]
				}
			}
		}
	}
// 	printf(" LCD ID:%x\r\n",lcddev.id); //打印LCD ID
	if (lcddev.id == 0X9341)	//9341初始化
 80021e8:	4b06      	ldr	r3, [pc, #24]	; (8002204 <LCD_Init+0x254>)
 80021ea:	889b      	ldrh	r3, [r3, #4]
 80021ec:	f249 3241 	movw	r2, #37697	; 0x9341
 80021f0:	4293      	cmp	r3, r2
 80021f2:	f040 811f 	bne.w	8002434 <LCD_Init+0x484>
 80021f6:	e007      	b.n	8002208 <LCD_Init+0x258>
 80021f8:	40021000 	.word	0x40021000
 80021fc:	40011000 	.word	0x40011000
 8002200:	40010c00 	.word	0x40010c00
 8002204:	200000f4 	.word	0x200000f4
			{
		LCD_WR_REG(0xCF);
 8002208:	20cf      	movs	r0, #207	; 0xcf
 800220a:	f7fe fbd9 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800220e:	2000      	movs	r0, #0
 8002210:	f7fe fbfa 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC1);
 8002214:	20c1      	movs	r0, #193	; 0xc1
 8002216:	f7fe fbf7 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X30);
 800221a:	2030      	movs	r0, #48	; 0x30
 800221c:	f7fe fbf4 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_REG(0xED);
 8002220:	20ed      	movs	r0, #237	; 0xed
 8002222:	f7fe fbcd 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0x64);
 8002226:	2064      	movs	r0, #100	; 0x64
 8002228:	f7fe fbee 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 800222c:	2003      	movs	r0, #3
 800222e:	f7fe fbeb 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X12);
 8002232:	2012      	movs	r0, #18
 8002234:	f7fe fbe8 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X81);
 8002238:	2081      	movs	r0, #129	; 0x81
 800223a:	f7fe fbe5 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_REG(0xE8);
 800223e:	20e8      	movs	r0, #232	; 0xe8
 8002240:	f7fe fbbe 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0x85);
 8002244:	2085      	movs	r0, #133	; 0x85
 8002246:	f7fe fbdf 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 800224a:	2010      	movs	r0, #16
 800224c:	f7fe fbdc 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8002250:	207a      	movs	r0, #122	; 0x7a
 8002252:	f7fe fbd9 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_REG(0xCB);
 8002256:	20cb      	movs	r0, #203	; 0xcb
 8002258:	f7fe fbb2 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0x39);
 800225c:	2039      	movs	r0, #57	; 0x39
 800225e:	f7fe fbd3 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8002262:	202c      	movs	r0, #44	; 0x2c
 8002264:	f7fe fbd0 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002268:	2000      	movs	r0, #0
 800226a:	f7fe fbcd 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 800226e:	2034      	movs	r0, #52	; 0x34
 8002270:	f7fe fbca 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8002274:	2002      	movs	r0, #2
 8002276:	f7fe fbc7 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_REG(0xF7);
 800227a:	20f7      	movs	r0, #247	; 0xf7
 800227c:	f7fe fba0 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8002280:	2020      	movs	r0, #32
 8002282:	f7fe fbc1 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_REG(0xEA);
 8002286:	20ea      	movs	r0, #234	; 0xea
 8002288:	f7fe fb9a 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800228c:	2000      	movs	r0, #0
 800228e:	f7fe fbbb 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002292:	2000      	movs	r0, #0
 8002294:	f7fe fbb8 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_REG(0xC0);    //Power control 
 8002298:	20c0      	movs	r0, #192	; 0xc0
 800229a:	f7fe fb91 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0x1B);   //VRH[5:0] 
 800229e:	201b      	movs	r0, #27
 80022a0:	f7fe fbb2 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_REG(0xC1);    //Power control 
 80022a4:	20c1      	movs	r0, #193	; 0xc1
 80022a6:	f7fe fb8b 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);   //SAP[2:0];BT[3:0] 
 80022aa:	2001      	movs	r0, #1
 80022ac:	f7fe fbac 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_REG(0xC5);    //VCM control 
 80022b0:	20c5      	movs	r0, #197	; 0xc5
 80022b2:	f7fe fb85 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0x30); 	 //3F
 80022b6:	2030      	movs	r0, #48	; 0x30
 80022b8:	f7fe fba6 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x30); 	 //3C
 80022bc:	2030      	movs	r0, #48	; 0x30
 80022be:	f7fe fba3 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_REG(0xC7);    //VCM control2 
 80022c2:	20c7      	movs	r0, #199	; 0xc7
 80022c4:	f7fe fb7c 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0XB7);
 80022c8:	20b7      	movs	r0, #183	; 0xb7
 80022ca:	f7fe fb9d 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_REG(0x36);    // Memory Access Control 
 80022ce:	2036      	movs	r0, #54	; 0x36
 80022d0:	f7fe fb76 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0x48);
 80022d4:	2048      	movs	r0, #72	; 0x48
 80022d6:	f7fe fb97 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_REG(0x3A);
 80022da:	203a      	movs	r0, #58	; 0x3a
 80022dc:	f7fe fb70 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0x55);
 80022e0:	2055      	movs	r0, #85	; 0x55
 80022e2:	f7fe fb91 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_REG(0xB1);
 80022e6:	20b1      	movs	r0, #177	; 0xb1
 80022e8:	f7fe fb6a 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80022ec:	2000      	movs	r0, #0
 80022ee:	f7fe fb8b 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1A);
 80022f2:	201a      	movs	r0, #26
 80022f4:	f7fe fb88 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_REG(0xB6);    // Display Function Control 
 80022f8:	20b6      	movs	r0, #182	; 0xb6
 80022fa:	f7fe fb61 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 80022fe:	200a      	movs	r0, #10
 8002300:	f7fe fb82 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8002304:	20a2      	movs	r0, #162	; 0xa2
 8002306:	f7fe fb7f 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_REG(0xF2);    // 3Gamma Function Disable 
 800230a:	20f2      	movs	r0, #242	; 0xf2
 800230c:	f7fe fb58 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002310:	2000      	movs	r0, #0
 8002312:	f7fe fb79 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_REG(0x26);    //Gamma curve selected 
 8002316:	2026      	movs	r0, #38	; 0x26
 8002318:	f7fe fb52 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 800231c:	2001      	movs	r0, #1
 800231e:	f7fe fb73 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_REG(0xE0);    //Set Gamma 
 8002322:	20e0      	movs	r0, #224	; 0xe0
 8002324:	f7fe fb4c 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0x0F);
 8002328:	200f      	movs	r0, #15
 800232a:	f7fe fb6d 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 800232e:	202a      	movs	r0, #42	; 0x2a
 8002330:	f7fe fb6a 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x28);
 8002334:	2028      	movs	r0, #40	; 0x28
 8002336:	f7fe fb67 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 800233a:	2008      	movs	r0, #8
 800233c:	f7fe fb64 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0E);
 8002340:	200e      	movs	r0, #14
 8002342:	f7fe fb61 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 8002346:	2008      	movs	r0, #8
 8002348:	f7fe fb5e 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 800234c:	2054      	movs	r0, #84	; 0x54
 800234e:	f7fe fb5b 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0XA9);
 8002352:	20a9      	movs	r0, #169	; 0xa9
 8002354:	f7fe fb58 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 8002358:	2043      	movs	r0, #67	; 0x43
 800235a:	f7fe fb55 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0A);
 800235e:	200a      	movs	r0, #10
 8002360:	f7fe fb52 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 8002364:	200f      	movs	r0, #15
 8002366:	f7fe fb4f 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800236a:	2000      	movs	r0, #0
 800236c:	f7fe fb4c 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002370:	2000      	movs	r0, #0
 8002372:	f7fe fb49 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002376:	2000      	movs	r0, #0
 8002378:	f7fe fb46 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800237c:	2000      	movs	r0, #0
 800237e:	f7fe fb43 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_REG(0XE1);    //Set Gamma 
 8002382:	20e1      	movs	r0, #225	; 0xe1
 8002384:	f7fe fb1c 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002388:	2000      	movs	r0, #0
 800238a:	f7fe fb3d 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x15);
 800238e:	2015      	movs	r0, #21
 8002390:	f7fe fb3a 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8002394:	2017      	movs	r0, #23
 8002396:	f7fe fb37 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x07);
 800239a:	2007      	movs	r0, #7
 800239c:	f7fe fb34 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 80023a0:	2011      	movs	r0, #17
 80023a2:	f7fe fb31 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x06);
 80023a6:	2006      	movs	r0, #6
 80023a8:	f7fe fb2e 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2B);
 80023ac:	202b      	movs	r0, #43	; 0x2b
 80023ae:	f7fe fb2b 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 80023b2:	2056      	movs	r0, #86	; 0x56
 80023b4:	f7fe fb28 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 80023b8:	203c      	movs	r0, #60	; 0x3c
 80023ba:	f7fe fb25 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 80023be:	2005      	movs	r0, #5
 80023c0:	f7fe fb22 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 80023c4:	2010      	movs	r0, #16
 80023c6:	f7fe fb1f 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 80023ca:	200f      	movs	r0, #15
 80023cc:	f7fe fb1c 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 80023d0:	203f      	movs	r0, #63	; 0x3f
 80023d2:	f7fe fb19 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 80023d6:	203f      	movs	r0, #63	; 0x3f
 80023d8:	f7fe fb16 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 80023dc:	200f      	movs	r0, #15
 80023de:	f7fe fb13 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_REG(0x2B);
 80023e2:	202b      	movs	r0, #43	; 0x2b
 80023e4:	f7fe faec 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80023e8:	2000      	movs	r0, #0
 80023ea:	f7fe fb0d 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023ee:	2000      	movs	r0, #0
 80023f0:	f7fe fb0a 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 80023f4:	2001      	movs	r0, #1
 80023f6:	f7fe fb07 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3f);
 80023fa:	203f      	movs	r0, #63	; 0x3f
 80023fc:	f7fe fb04 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_REG(0x2A);
 8002400:	202a      	movs	r0, #42	; 0x2a
 8002402:	f7fe fadd 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002406:	2000      	movs	r0, #0
 8002408:	f7fe fafe 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800240c:	2000      	movs	r0, #0
 800240e:	f7fe fafb 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002412:	2000      	movs	r0, #0
 8002414:	f7fe faf8 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xef);
 8002418:	20ef      	movs	r0, #239	; 0xef
 800241a:	f7fe faf5 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_REG(0x11); //Exit Sleep
 800241e:	2011      	movs	r0, #17
 8002420:	f7fe face 	bl	80009c0 <LCD_WR_REG>
		HAL_Delay(120);
 8002424:	2078      	movs	r0, #120	; 0x78
 8002426:	f005 f9ef 	bl	8007808 <HAL_Delay>
		LCD_WR_REG(0x29); //display on	
 800242a:	2029      	movs	r0, #41	; 0x29
 800242c:	f7fe fac8 	bl	80009c0 <LCD_WR_REG>
 8002430:	f003 bcd8 	b.w	8005de4 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x6804) //6804初始化
 8002434:	4b58      	ldr	r3, [pc, #352]	; (8002598 <LCD_Init+0x5e8>)
 8002436:	889b      	ldrh	r3, [r3, #4]
 8002438:	f646 0204 	movw	r2, #26628	; 0x6804
 800243c:	4293      	cmp	r3, r2
 800243e:	f040 80ad 	bne.w	800259c <LCD_Init+0x5ec>
			{
		LCD_WR_REG(0X11);
 8002442:	2011      	movs	r0, #17
 8002444:	f7fe fabc 	bl	80009c0 <LCD_WR_REG>
		HAL_Delay(20);
 8002448:	2014      	movs	r0, #20
 800244a:	f005 f9dd 	bl	8007808 <HAL_Delay>
		LCD_WR_REG(0XD0); //VCI1  VCL  VGH  VGL DDVDH VREG1OUT power amplitude setting
 800244e:	20d0      	movs	r0, #208	; 0xd0
 8002450:	f7fe fab6 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0X07);
 8002454:	2007      	movs	r0, #7
 8002456:	f7fe fad7 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X42);
 800245a:	2042      	movs	r0, #66	; 0x42
 800245c:	f7fe fad4 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1D);
 8002460:	201d      	movs	r0, #29
 8002462:	f7fe fad1 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_REG(0XD1); //VCOMH VCOM_AC amplitude setting
 8002466:	20d1      	movs	r0, #209	; 0xd1
 8002468:	f7fe faaa 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 800246c:	2000      	movs	r0, #0
 800246e:	f7fe facb 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1a);
 8002472:	201a      	movs	r0, #26
 8002474:	f7fe fac8 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X09);
 8002478:	2009      	movs	r0, #9
 800247a:	f7fe fac5 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_REG(0XD2); //Operational Amplifier Circuit Constant Current Adjust , charge pump frequency setting
 800247e:	20d2      	movs	r0, #210	; 0xd2
 8002480:	f7fe fa9e 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 8002484:	2001      	movs	r0, #1
 8002486:	f7fe fabf 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X22);
 800248a:	2022      	movs	r0, #34	; 0x22
 800248c:	f7fe fabc 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_REG(0XC0); //REV SM GS
 8002490:	20c0      	movs	r0, #192	; 0xc0
 8002492:	f7fe fa95 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0X10);
 8002496:	2010      	movs	r0, #16
 8002498:	f7fe fab6 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3B);
 800249c:	203b      	movs	r0, #59	; 0x3b
 800249e:	f7fe fab3 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 80024a2:	2000      	movs	r0, #0
 80024a4:	f7fe fab0 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 80024a8:	2002      	movs	r0, #2
 80024aa:	f7fe faad 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X11);
 80024ae:	2011      	movs	r0, #17
 80024b0:	f7fe faaa 	bl	8000a08 <LCD_WR_DATAX>

		LCD_WR_REG(0XC5); // Frame rate setting = 72HZ  when setting 0x03
 80024b4:	20c5      	movs	r0, #197	; 0xc5
 80024b6:	f7fe fa83 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0X03);
 80024ba:	2003      	movs	r0, #3
 80024bc:	f7fe faa4 	bl	8000a08 <LCD_WR_DATAX>

		LCD_WR_REG(0XC8); //Gamma setting
 80024c0:	20c8      	movs	r0, #200	; 0xc8
 80024c2:	f7fe fa7d 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 80024c6:	2000      	movs	r0, #0
 80024c8:	f7fe fa9e 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 80024cc:	2025      	movs	r0, #37	; 0x25
 80024ce:	f7fe fa9b 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X21);
 80024d2:	2021      	movs	r0, #33	; 0x21
 80024d4:	f7fe fa98 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X05);
 80024d8:	2005      	movs	r0, #5
 80024da:	f7fe fa95 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 80024de:	2000      	movs	r0, #0
 80024e0:	f7fe fa92 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0a);
 80024e4:	200a      	movs	r0, #10
 80024e6:	f7fe fa8f 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X65);
 80024ea:	2065      	movs	r0, #101	; 0x65
 80024ec:	f7fe fa8c 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 80024f0:	2025      	movs	r0, #37	; 0x25
 80024f2:	f7fe fa89 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X77);
 80024f6:	2077      	movs	r0, #119	; 0x77
 80024f8:	f7fe fa86 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X50);
 80024fc:	2050      	movs	r0, #80	; 0x50
 80024fe:	f7fe fa83 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0f);
 8002502:	200f      	movs	r0, #15
 8002504:	f7fe fa80 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8002508:	2000      	movs	r0, #0
 800250a:	f7fe fa7d 	bl	8000a08 <LCD_WR_DATAX>

		LCD_WR_REG(0XF8);
 800250e:	20f8      	movs	r0, #248	; 0xf8
 8002510:	f7fe fa56 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 8002514:	2001      	movs	r0, #1
 8002516:	f7fe fa77 	bl	8000a08 <LCD_WR_DATAX>

		LCD_WR_REG(0XFE);
 800251a:	20fe      	movs	r0, #254	; 0xfe
 800251c:	f7fe fa50 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002520:	2000      	movs	r0, #0
 8002522:	f7fe fa71 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 8002526:	2002      	movs	r0, #2
 8002528:	f7fe fa6e 	bl	8000a08 <LCD_WR_DATAX>

		LCD_WR_REG(0X20); //Exit invert mode
 800252c:	2020      	movs	r0, #32
 800252e:	f7fe fa47 	bl	80009c0 <LCD_WR_REG>

		LCD_WR_REG(0X36);
 8002532:	2036      	movs	r0, #54	; 0x36
 8002534:	f7fe fa44 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0X08); //原来是a
 8002538:	2008      	movs	r0, #8
 800253a:	f7fe fa65 	bl	8000a08 <LCD_WR_DATAX>

		LCD_WR_REG(0X3A);
 800253e:	203a      	movs	r0, #58	; 0x3a
 8002540:	f7fe fa3e 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0X55); //16位模式
 8002544:	2055      	movs	r0, #85	; 0x55
 8002546:	f7fe fa5f 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_REG(0X2B);
 800254a:	202b      	movs	r0, #43	; 0x2b
 800254c:	f7fe fa38 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002550:	2000      	movs	r0, #0
 8002552:	f7fe fa59 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8002556:	2000      	movs	r0, #0
 8002558:	f7fe fa56 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 800255c:	2001      	movs	r0, #1
 800255e:	f7fe fa53 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3F);
 8002562:	203f      	movs	r0, #63	; 0x3f
 8002564:	f7fe fa50 	bl	8000a08 <LCD_WR_DATAX>

		LCD_WR_REG(0X2A);
 8002568:	202a      	movs	r0, #42	; 0x2a
 800256a:	f7fe fa29 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 800256e:	2000      	movs	r0, #0
 8002570:	f7fe fa4a 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8002574:	2000      	movs	r0, #0
 8002576:	f7fe fa47 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 800257a:	2001      	movs	r0, #1
 800257c:	f7fe fa44 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0XDF);
 8002580:	20df      	movs	r0, #223	; 0xdf
 8002582:	f7fe fa41 	bl	8000a08 <LCD_WR_DATAX>
		HAL_Delay(120);
 8002586:	2078      	movs	r0, #120	; 0x78
 8002588:	f005 f93e 	bl	8007808 <HAL_Delay>
		LCD_WR_REG(0X29);
 800258c:	2029      	movs	r0, #41	; 0x29
 800258e:	f7fe fa17 	bl	80009c0 <LCD_WR_REG>
 8002592:	f003 bc27 	b.w	8005de4 <LCD_Init+0x3e34>
 8002596:	bf00      	nop
 8002598:	200000f4 	.word	0x200000f4
	} else if (lcddev.id == 0x5310) {
 800259c:	4b03      	ldr	r3, [pc, #12]	; (80025ac <LCD_Init+0x5fc>)
 800259e:	889b      	ldrh	r3, [r3, #4]
 80025a0:	f245 3210 	movw	r2, #21264	; 0x5310
 80025a4:	4293      	cmp	r3, r2
 80025a6:	f040 877c 	bne.w	80034a2 <LCD_Init+0x14f2>
 80025aa:	e001      	b.n	80025b0 <LCD_Init+0x600>
 80025ac:	200000f4 	.word	0x200000f4
		LCD_WR_REG(0xED);
 80025b0:	20ed      	movs	r0, #237	; 0xed
 80025b2:	f7fe fa05 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 80025b6:	2001      	movs	r0, #1
 80025b8:	f7fe fa26 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFE);
 80025bc:	20fe      	movs	r0, #254	; 0xfe
 80025be:	f7fe fa23 	bl	8000a08 <LCD_WR_DATAX>

		LCD_WR_REG(0xEE);
 80025c2:	20ee      	movs	r0, #238	; 0xee
 80025c4:	f7fe f9fc 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0xDE);
 80025c8:	20de      	movs	r0, #222	; 0xde
 80025ca:	f7fe fa1d 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 80025ce:	2021      	movs	r0, #33	; 0x21
 80025d0:	f7fe fa1a 	bl	8000a08 <LCD_WR_DATAX>

		LCD_WR_REG(0xF1);
 80025d4:	20f1      	movs	r0, #241	; 0xf1
 80025d6:	f7fe f9f3 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 80025da:	2001      	movs	r0, #1
 80025dc:	f7fe fa14 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_REG(0xDF);
 80025e0:	20df      	movs	r0, #223	; 0xdf
 80025e2:	f7fe f9ed 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0x10);
 80025e6:	2010      	movs	r0, #16
 80025e8:	f7fe fa0e 	bl	8000a08 <LCD_WR_DATAX>

		//VCOMvoltage//
		LCD_WR_REG(0xC4);
 80025ec:	20c4      	movs	r0, #196	; 0xc4
 80025ee:	f7fe f9e7 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0x8F);	  //5f
 80025f2:	208f      	movs	r0, #143	; 0x8f
 80025f4:	f7fe fa08 	bl	8000a08 <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 80025f8:	20c6      	movs	r0, #198	; 0xc6
 80025fa:	f7fe f9e1 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80025fe:	2000      	movs	r0, #0
 8002600:	f7fe fa02 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 8002604:	20e2      	movs	r0, #226	; 0xe2
 8002606:	f7fe f9ff 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 800260a:	20e2      	movs	r0, #226	; 0xe2
 800260c:	f7fe f9fc 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 8002610:	20e2      	movs	r0, #226	; 0xe2
 8002612:	f7fe f9f9 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_REG(0xBF);
 8002616:	20bf      	movs	r0, #191	; 0xbf
 8002618:	f7fe f9d2 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 800261c:	20aa      	movs	r0, #170	; 0xaa
 800261e:	f7fe f9f3 	bl	8000a08 <LCD_WR_DATAX>

		LCD_WR_REG(0xB0);
 8002622:	20b0      	movs	r0, #176	; 0xb0
 8002624:	f7fe f9cc 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0x0D);
 8002628:	200d      	movs	r0, #13
 800262a:	f7fe f9ed 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800262e:	2000      	movs	r0, #0
 8002630:	f7fe f9ea 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0D);
 8002634:	200d      	movs	r0, #13
 8002636:	f7fe f9e7 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800263a:	2000      	movs	r0, #0
 800263c:	f7fe f9e4 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 8002640:	2011      	movs	r0, #17
 8002642:	f7fe f9e1 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002646:	2000      	movs	r0, #0
 8002648:	f7fe f9de 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x19);
 800264c:	2019      	movs	r0, #25
 800264e:	f7fe f9db 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002652:	2000      	movs	r0, #0
 8002654:	f7fe f9d8 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8002658:	2021      	movs	r0, #33	; 0x21
 800265a:	f7fe f9d5 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800265e:	2000      	movs	r0, #0
 8002660:	f7fe f9d2 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2D);
 8002664:	202d      	movs	r0, #45	; 0x2d
 8002666:	f7fe f9cf 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800266a:	2000      	movs	r0, #0
 800266c:	f7fe f9cc 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3D);
 8002670:	203d      	movs	r0, #61	; 0x3d
 8002672:	f7fe f9c9 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002676:	2000      	movs	r0, #0
 8002678:	f7fe f9c6 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 800267c:	205d      	movs	r0, #93	; 0x5d
 800267e:	f7fe f9c3 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002682:	2000      	movs	r0, #0
 8002684:	f7fe f9c0 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8002688:	205d      	movs	r0, #93	; 0x5d
 800268a:	f7fe f9bd 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800268e:	2000      	movs	r0, #0
 8002690:	f7fe f9ba 	bl	8000a08 <LCD_WR_DATAX>

		LCD_WR_REG(0xB1);
 8002694:	20b1      	movs	r0, #177	; 0xb1
 8002696:	f7fe f993 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0x80);
 800269a:	2080      	movs	r0, #128	; 0x80
 800269c:	f7fe f9b4 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026a0:	2000      	movs	r0, #0
 80026a2:	f7fe f9b1 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 80026a6:	208b      	movs	r0, #139	; 0x8b
 80026a8:	f7fe f9ae 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026ac:	2000      	movs	r0, #0
 80026ae:	f7fe f9ab 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 80026b2:	2096      	movs	r0, #150	; 0x96
 80026b4:	f7fe f9a8 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026b8:	2000      	movs	r0, #0
 80026ba:	f7fe f9a5 	bl	8000a08 <LCD_WR_DATAX>

		LCD_WR_REG(0xB2);
 80026be:	20b2      	movs	r0, #178	; 0xb2
 80026c0:	f7fe f97e 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80026c4:	2000      	movs	r0, #0
 80026c6:	f7fe f99f 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026ca:	2000      	movs	r0, #0
 80026cc:	f7fe f99c 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 80026d0:	2002      	movs	r0, #2
 80026d2:	f7fe f999 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026d6:	2000      	movs	r0, #0
 80026d8:	f7fe f996 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 80026dc:	2003      	movs	r0, #3
 80026de:	f7fe f993 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026e2:	2000      	movs	r0, #0
 80026e4:	f7fe f990 	bl	8000a08 <LCD_WR_DATAX>

		LCD_WR_REG(0xB3);
 80026e8:	20b3      	movs	r0, #179	; 0xb3
 80026ea:	f7fe f969 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80026ee:	2000      	movs	r0, #0
 80026f0:	f7fe f98a 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026f4:	2000      	movs	r0, #0
 80026f6:	f7fe f987 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026fa:	2000      	movs	r0, #0
 80026fc:	f7fe f984 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002700:	2000      	movs	r0, #0
 8002702:	f7fe f981 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002706:	2000      	movs	r0, #0
 8002708:	f7fe f97e 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800270c:	2000      	movs	r0, #0
 800270e:	f7fe f97b 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002712:	2000      	movs	r0, #0
 8002714:	f7fe f978 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002718:	2000      	movs	r0, #0
 800271a:	f7fe f975 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800271e:	2000      	movs	r0, #0
 8002720:	f7fe f972 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002724:	2000      	movs	r0, #0
 8002726:	f7fe f96f 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800272a:	2000      	movs	r0, #0
 800272c:	f7fe f96c 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002730:	2000      	movs	r0, #0
 8002732:	f7fe f969 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002736:	2000      	movs	r0, #0
 8002738:	f7fe f966 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800273c:	2000      	movs	r0, #0
 800273e:	f7fe f963 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002742:	2000      	movs	r0, #0
 8002744:	f7fe f960 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002748:	2000      	movs	r0, #0
 800274a:	f7fe f95d 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800274e:	2000      	movs	r0, #0
 8002750:	f7fe f95a 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002754:	2000      	movs	r0, #0
 8002756:	f7fe f957 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800275a:	2000      	movs	r0, #0
 800275c:	f7fe f954 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002760:	2000      	movs	r0, #0
 8002762:	f7fe f951 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002766:	2000      	movs	r0, #0
 8002768:	f7fe f94e 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800276c:	2000      	movs	r0, #0
 800276e:	f7fe f94b 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002772:	2000      	movs	r0, #0
 8002774:	f7fe f948 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002778:	2000      	movs	r0, #0
 800277a:	f7fe f945 	bl	8000a08 <LCD_WR_DATAX>

		LCD_WR_REG(0xB4);
 800277e:	20b4      	movs	r0, #180	; 0xb4
 8002780:	f7fe f91e 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0x8B);
 8002784:	208b      	movs	r0, #139	; 0x8b
 8002786:	f7fe f93f 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800278a:	2000      	movs	r0, #0
 800278c:	f7fe f93c 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 8002790:	2096      	movs	r0, #150	; 0x96
 8002792:	f7fe f939 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002796:	2000      	movs	r0, #0
 8002798:	f7fe f936 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA1);
 800279c:	20a1      	movs	r0, #161	; 0xa1
 800279e:	f7fe f933 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027a2:	2000      	movs	r0, #0
 80027a4:	f7fe f930 	bl	8000a08 <LCD_WR_DATAX>

		LCD_WR_REG(0xB5);
 80027a8:	20b5      	movs	r0, #181	; 0xb5
 80027aa:	f7fe f909 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0x02);
 80027ae:	2002      	movs	r0, #2
 80027b0:	f7fe f92a 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027b4:	2000      	movs	r0, #0
 80027b6:	f7fe f927 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 80027ba:	2003      	movs	r0, #3
 80027bc:	f7fe f924 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027c0:	2000      	movs	r0, #0
 80027c2:	f7fe f921 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 80027c6:	2004      	movs	r0, #4
 80027c8:	f7fe f91e 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027cc:	2000      	movs	r0, #0
 80027ce:	f7fe f91b 	bl	8000a08 <LCD_WR_DATAX>

		LCD_WR_REG(0xB6);
 80027d2:	20b6      	movs	r0, #182	; 0xb6
 80027d4:	f7fe f8f4 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80027d8:	2000      	movs	r0, #0
 80027da:	f7fe f915 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027de:	2000      	movs	r0, #0
 80027e0:	f7fe f912 	bl	8000a08 <LCD_WR_DATAX>

		LCD_WR_REG(0xB7);
 80027e4:	20b7      	movs	r0, #183	; 0xb7
 80027e6:	f7fe f8eb 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80027ea:	2000      	movs	r0, #0
 80027ec:	f7fe f90c 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027f0:	2000      	movs	r0, #0
 80027f2:	f7fe f909 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 80027f6:	203f      	movs	r0, #63	; 0x3f
 80027f8:	f7fe f906 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027fc:	2000      	movs	r0, #0
 80027fe:	f7fe f903 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5E);
 8002802:	205e      	movs	r0, #94	; 0x5e
 8002804:	f7fe f900 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002808:	2000      	movs	r0, #0
 800280a:	f7fe f8fd 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 800280e:	2064      	movs	r0, #100	; 0x64
 8002810:	f7fe f8fa 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002814:	2000      	movs	r0, #0
 8002816:	f7fe f8f7 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8C);
 800281a:	208c      	movs	r0, #140	; 0x8c
 800281c:	f7fe f8f4 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002820:	2000      	movs	r0, #0
 8002822:	f7fe f8f1 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAC);
 8002826:	20ac      	movs	r0, #172	; 0xac
 8002828:	f7fe f8ee 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800282c:	2000      	movs	r0, #0
 800282e:	f7fe f8eb 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 8002832:	20dc      	movs	r0, #220	; 0xdc
 8002834:	f7fe f8e8 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002838:	2000      	movs	r0, #0
 800283a:	f7fe f8e5 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x70);
 800283e:	2070      	movs	r0, #112	; 0x70
 8002840:	f7fe f8e2 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002844:	2000      	movs	r0, #0
 8002846:	f7fe f8df 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x90);
 800284a:	2090      	movs	r0, #144	; 0x90
 800284c:	f7fe f8dc 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002850:	2000      	movs	r0, #0
 8002852:	f7fe f8d9 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xEB);
 8002856:	20eb      	movs	r0, #235	; 0xeb
 8002858:	f7fe f8d6 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800285c:	2000      	movs	r0, #0
 800285e:	f7fe f8d3 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 8002862:	20dc      	movs	r0, #220	; 0xdc
 8002864:	f7fe f8d0 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002868:	2000      	movs	r0, #0
 800286a:	f7fe f8cd 	bl	8000a08 <LCD_WR_DATAX>

		LCD_WR_REG(0xB8);
 800286e:	20b8      	movs	r0, #184	; 0xb8
 8002870:	f7fe f8a6 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002874:	2000      	movs	r0, #0
 8002876:	f7fe f8c7 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800287a:	2000      	movs	r0, #0
 800287c:	f7fe f8c4 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002880:	2000      	movs	r0, #0
 8002882:	f7fe f8c1 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002886:	2000      	movs	r0, #0
 8002888:	f7fe f8be 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800288c:	2000      	movs	r0, #0
 800288e:	f7fe f8bb 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002892:	2000      	movs	r0, #0
 8002894:	f7fe f8b8 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002898:	2000      	movs	r0, #0
 800289a:	f7fe f8b5 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800289e:	2000      	movs	r0, #0
 80028a0:	f7fe f8b2 	bl	8000a08 <LCD_WR_DATAX>

		LCD_WR_REG(0xBA);
 80028a4:	20ba      	movs	r0, #186	; 0xba
 80028a6:	f7fe f88b 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0x24);
 80028aa:	2024      	movs	r0, #36	; 0x24
 80028ac:	f7fe f8ac 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028b0:	2000      	movs	r0, #0
 80028b2:	f7fe f8a9 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028b6:	2000      	movs	r0, #0
 80028b8:	f7fe f8a6 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028bc:	2000      	movs	r0, #0
 80028be:	f7fe f8a3 	bl	8000a08 <LCD_WR_DATAX>

		LCD_WR_REG(0xC1);
 80028c2:	20c1      	movs	r0, #193	; 0xc1
 80028c4:	f7fe f87c 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 80028c8:	2020      	movs	r0, #32
 80028ca:	f7fe f89d 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028ce:	2000      	movs	r0, #0
 80028d0:	f7fe f89a 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 80028d4:	2054      	movs	r0, #84	; 0x54
 80028d6:	f7fe f897 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028da:	2000      	movs	r0, #0
 80028dc:	f7fe f894 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFF);
 80028e0:	20ff      	movs	r0, #255	; 0xff
 80028e2:	f7fe f891 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028e6:	2000      	movs	r0, #0
 80028e8:	f7fe f88e 	bl	8000a08 <LCD_WR_DATAX>

		LCD_WR_REG(0xC2);
 80028ec:	20c2      	movs	r0, #194	; 0xc2
 80028ee:	f7fe f867 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 80028f2:	200a      	movs	r0, #10
 80028f4:	f7fe f888 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028f8:	2000      	movs	r0, #0
 80028fa:	f7fe f885 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 80028fe:	2004      	movs	r0, #4
 8002900:	f7fe f882 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002904:	2000      	movs	r0, #0
 8002906:	f7fe f87f 	bl	8000a08 <LCD_WR_DATAX>

		LCD_WR_REG(0xC3);
 800290a:	20c3      	movs	r0, #195	; 0xc3
 800290c:	f7fe f858 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0x3C);
 8002910:	203c      	movs	r0, #60	; 0x3c
 8002912:	f7fe f879 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002916:	2000      	movs	r0, #0
 8002918:	f7fe f876 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3A);
 800291c:	203a      	movs	r0, #58	; 0x3a
 800291e:	f7fe f873 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002922:	2000      	movs	r0, #0
 8002924:	f7fe f870 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x39);
 8002928:	2039      	movs	r0, #57	; 0x39
 800292a:	f7fe f86d 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800292e:	2000      	movs	r0, #0
 8002930:	f7fe f86a 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x37);
 8002934:	2037      	movs	r0, #55	; 0x37
 8002936:	f7fe f867 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800293a:	2000      	movs	r0, #0
 800293c:	f7fe f864 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002940:	203c      	movs	r0, #60	; 0x3c
 8002942:	f7fe f861 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002946:	2000      	movs	r0, #0
 8002948:	f7fe f85e 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 800294c:	2036      	movs	r0, #54	; 0x36
 800294e:	f7fe f85b 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002952:	2000      	movs	r0, #0
 8002954:	f7fe f858 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 8002958:	2032      	movs	r0, #50	; 0x32
 800295a:	f7fe f855 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800295e:	2000      	movs	r0, #0
 8002960:	f7fe f852 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 8002964:	202f      	movs	r0, #47	; 0x2f
 8002966:	f7fe f84f 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800296a:	2000      	movs	r0, #0
 800296c:	f7fe f84c 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8002970:	202c      	movs	r0, #44	; 0x2c
 8002972:	f7fe f849 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002976:	2000      	movs	r0, #0
 8002978:	f7fe f846 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 800297c:	2029      	movs	r0, #41	; 0x29
 800297e:	f7fe f843 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002982:	2000      	movs	r0, #0
 8002984:	f7fe f840 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 8002988:	2026      	movs	r0, #38	; 0x26
 800298a:	f7fe f83d 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800298e:	2000      	movs	r0, #0
 8002990:	f7fe f83a 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002994:	2024      	movs	r0, #36	; 0x24
 8002996:	f7fe f837 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800299a:	2000      	movs	r0, #0
 800299c:	f7fe f834 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 80029a0:	2024      	movs	r0, #36	; 0x24
 80029a2:	f7fe f831 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029a6:	2000      	movs	r0, #0
 80029a8:	f7fe f82e 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 80029ac:	2023      	movs	r0, #35	; 0x23
 80029ae:	f7fe f82b 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029b2:	2000      	movs	r0, #0
 80029b4:	f7fe f828 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 80029b8:	203c      	movs	r0, #60	; 0x3c
 80029ba:	f7fe f825 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029be:	2000      	movs	r0, #0
 80029c0:	f7fe f822 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 80029c4:	2036      	movs	r0, #54	; 0x36
 80029c6:	f7fe f81f 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029ca:	2000      	movs	r0, #0
 80029cc:	f7fe f81c 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 80029d0:	2032      	movs	r0, #50	; 0x32
 80029d2:	f7fe f819 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029d6:	2000      	movs	r0, #0
 80029d8:	f7fe f816 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 80029dc:	202f      	movs	r0, #47	; 0x2f
 80029de:	f7fe f813 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029e2:	2000      	movs	r0, #0
 80029e4:	f7fe f810 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 80029e8:	202c      	movs	r0, #44	; 0x2c
 80029ea:	f7fe f80d 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029ee:	2000      	movs	r0, #0
 80029f0:	f7fe f80a 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 80029f4:	2029      	movs	r0, #41	; 0x29
 80029f6:	f7fe f807 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029fa:	2000      	movs	r0, #0
 80029fc:	f7fe f804 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 8002a00:	2026      	movs	r0, #38	; 0x26
 8002a02:	f7fe f801 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a06:	2000      	movs	r0, #0
 8002a08:	f7fd fffe 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002a0c:	2024      	movs	r0, #36	; 0x24
 8002a0e:	f7fd fffb 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a12:	2000      	movs	r0, #0
 8002a14:	f7fd fff8 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002a18:	2024      	movs	r0, #36	; 0x24
 8002a1a:	f7fd fff5 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a1e:	2000      	movs	r0, #0
 8002a20:	f7fd fff2 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 8002a24:	2023      	movs	r0, #35	; 0x23
 8002a26:	f7fd ffef 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a2a:	2000      	movs	r0, #0
 8002a2c:	f7fd ffec 	bl	8000a08 <LCD_WR_DATAX>

		LCD_WR_REG(0xC4);
 8002a30:	20c4      	movs	r0, #196	; 0xc4
 8002a32:	f7fd ffc5 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0x62);
 8002a36:	2062      	movs	r0, #98	; 0x62
 8002a38:	f7fd ffe6 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a3c:	2000      	movs	r0, #0
 8002a3e:	f7fd ffe3 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 8002a42:	2005      	movs	r0, #5
 8002a44:	f7fd ffe0 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a48:	2000      	movs	r0, #0
 8002a4a:	f7fd ffdd 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8002a4e:	2084      	movs	r0, #132	; 0x84
 8002a50:	f7fd ffda 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a54:	2000      	movs	r0, #0
 8002a56:	f7fd ffd7 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF0);
 8002a5a:	20f0      	movs	r0, #240	; 0xf0
 8002a5c:	f7fd ffd4 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a60:	2000      	movs	r0, #0
 8002a62:	f7fd ffd1 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 8002a66:	2018      	movs	r0, #24
 8002a68:	f7fd ffce 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a6c:	2000      	movs	r0, #0
 8002a6e:	f7fd ffcb 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA4);
 8002a72:	20a4      	movs	r0, #164	; 0xa4
 8002a74:	f7fd ffc8 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a78:	2000      	movs	r0, #0
 8002a7a:	f7fd ffc5 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 8002a7e:	2018      	movs	r0, #24
 8002a80:	f7fd ffc2 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a84:	2000      	movs	r0, #0
 8002a86:	f7fd ffbf 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8002a8a:	2050      	movs	r0, #80	; 0x50
 8002a8c:	f7fd ffbc 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a90:	2000      	movs	r0, #0
 8002a92:	f7fd ffb9 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0C);
 8002a96:	200c      	movs	r0, #12
 8002a98:	f7fd ffb6 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a9c:	2000      	movs	r0, #0
 8002a9e:	f7fd ffb3 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8002aa2:	2017      	movs	r0, #23
 8002aa4:	f7fd ffb0 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002aa8:	2000      	movs	r0, #0
 8002aaa:	f7fd ffad 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x95);
 8002aae:	2095      	movs	r0, #149	; 0x95
 8002ab0:	f7fd ffaa 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ab4:	2000      	movs	r0, #0
 8002ab6:	f7fd ffa7 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002aba:	20f3      	movs	r0, #243	; 0xf3
 8002abc:	f7fd ffa4 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ac0:	2000      	movs	r0, #0
 8002ac2:	f7fd ffa1 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE6);
 8002ac6:	20e6      	movs	r0, #230	; 0xe6
 8002ac8:	f7fd ff9e 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002acc:	2000      	movs	r0, #0
 8002ace:	f7fd ff9b 	bl	8000a08 <LCD_WR_DATAX>

		LCD_WR_REG(0xC5);
 8002ad2:	20c5      	movs	r0, #197	; 0xc5
 8002ad4:	f7fd ff74 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 8002ad8:	2032      	movs	r0, #50	; 0x32
 8002ada:	f7fd ff95 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ade:	2000      	movs	r0, #0
 8002ae0:	f7fd ff92 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002ae4:	2044      	movs	r0, #68	; 0x44
 8002ae6:	f7fd ff8f 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002aea:	2000      	movs	r0, #0
 8002aec:	f7fd ff8c 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x65);
 8002af0:	2065      	movs	r0, #101	; 0x65
 8002af2:	f7fd ff89 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002af6:	2000      	movs	r0, #0
 8002af8:	f7fd ff86 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8002afc:	2076      	movs	r0, #118	; 0x76
 8002afe:	f7fd ff83 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b02:	2000      	movs	r0, #0
 8002b04:	f7fd ff80 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002b08:	2088      	movs	r0, #136	; 0x88
 8002b0a:	f7fd ff7d 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b0e:	2000      	movs	r0, #0
 8002b10:	f7fd ff7a 	bl	8000a08 <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 8002b14:	20c6      	movs	r0, #198	; 0xc6
 8002b16:	f7fd ff53 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8002b1a:	2020      	movs	r0, #32
 8002b1c:	f7fd ff74 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b20:	2000      	movs	r0, #0
 8002b22:	f7fd ff71 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8002b26:	2017      	movs	r0, #23
 8002b28:	f7fd ff6e 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b2c:	2000      	movs	r0, #0
 8002b2e:	f7fd ff6b 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8002b32:	2001      	movs	r0, #1
 8002b34:	f7fd ff68 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b38:	2000      	movs	r0, #0
 8002b3a:	f7fd ff65 	bl	8000a08 <LCD_WR_DATAX>

		LCD_WR_REG(0xC7);
 8002b3e:	20c7      	movs	r0, #199	; 0xc7
 8002b40:	f7fd ff3e 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002b44:	2000      	movs	r0, #0
 8002b46:	f7fd ff5f 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	f7fd ff5c 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b50:	2000      	movs	r0, #0
 8002b52:	f7fd ff59 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b56:	2000      	movs	r0, #0
 8002b58:	f7fd ff56 	bl	8000a08 <LCD_WR_DATAX>

		LCD_WR_REG(0xC8);
 8002b5c:	20c8      	movs	r0, #200	; 0xc8
 8002b5e:	f7fd ff2f 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002b62:	2000      	movs	r0, #0
 8002b64:	f7fd ff50 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b68:	2000      	movs	r0, #0
 8002b6a:	f7fd ff4d 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b6e:	2000      	movs	r0, #0
 8002b70:	f7fd ff4a 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b74:	2000      	movs	r0, #0
 8002b76:	f7fd ff47 	bl	8000a08 <LCD_WR_DATAX>

		LCD_WR_REG(0xC9);
 8002b7a:	20c9      	movs	r0, #201	; 0xc9
 8002b7c:	f7fd ff20 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002b80:	2000      	movs	r0, #0
 8002b82:	f7fd ff41 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b86:	2000      	movs	r0, #0
 8002b88:	f7fd ff3e 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b8c:	2000      	movs	r0, #0
 8002b8e:	f7fd ff3b 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b92:	2000      	movs	r0, #0
 8002b94:	f7fd ff38 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b98:	2000      	movs	r0, #0
 8002b9a:	f7fd ff35 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b9e:	2000      	movs	r0, #0
 8002ba0:	f7fd ff32 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ba4:	2000      	movs	r0, #0
 8002ba6:	f7fd ff2f 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002baa:	2000      	movs	r0, #0
 8002bac:	f7fd ff2c 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bb0:	2000      	movs	r0, #0
 8002bb2:	f7fd ff29 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bb6:	2000      	movs	r0, #0
 8002bb8:	f7fd ff26 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bbc:	2000      	movs	r0, #0
 8002bbe:	f7fd ff23 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bc2:	2000      	movs	r0, #0
 8002bc4:	f7fd ff20 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bc8:	2000      	movs	r0, #0
 8002bca:	f7fd ff1d 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bce:	2000      	movs	r0, #0
 8002bd0:	f7fd ff1a 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bd4:	2000      	movs	r0, #0
 8002bd6:	f7fd ff17 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bda:	2000      	movs	r0, #0
 8002bdc:	f7fd ff14 	bl	8000a08 <LCD_WR_DATAX>

		LCD_WR_REG(0xE0);
 8002be0:	20e0      	movs	r0, #224	; 0xe0
 8002be2:	f7fd feed 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 8002be6:	2016      	movs	r0, #22
 8002be8:	f7fd ff0e 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bec:	2000      	movs	r0, #0
 8002bee:	f7fd ff0b 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8002bf2:	201c      	movs	r0, #28
 8002bf4:	f7fd ff08 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bf8:	2000      	movs	r0, #0
 8002bfa:	f7fd ff05 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8002bfe:	2021      	movs	r0, #33	; 0x21
 8002c00:	f7fd ff02 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c04:	2000      	movs	r0, #0
 8002c06:	f7fd feff 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002c0a:	2036      	movs	r0, #54	; 0x36
 8002c0c:	f7fd fefc 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c10:	2000      	movs	r0, #0
 8002c12:	f7fd fef9 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x46);
 8002c16:	2046      	movs	r0, #70	; 0x46
 8002c18:	f7fd fef6 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c1c:	2000      	movs	r0, #0
 8002c1e:	f7fd fef3 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 8002c22:	2052      	movs	r0, #82	; 0x52
 8002c24:	f7fd fef0 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c28:	2000      	movs	r0, #0
 8002c2a:	f7fd feed 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8002c2e:	2064      	movs	r0, #100	; 0x64
 8002c30:	f7fd feea 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c34:	2000      	movs	r0, #0
 8002c36:	f7fd fee7 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8002c3a:	207a      	movs	r0, #122	; 0x7a
 8002c3c:	f7fd fee4 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c40:	2000      	movs	r0, #0
 8002c42:	f7fd fee1 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8002c46:	208b      	movs	r0, #139	; 0x8b
 8002c48:	f7fd fede 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c4c:	2000      	movs	r0, #0
 8002c4e:	f7fd fedb 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002c52:	2099      	movs	r0, #153	; 0x99
 8002c54:	f7fd fed8 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c58:	2000      	movs	r0, #0
 8002c5a:	f7fd fed5 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 8002c5e:	20a8      	movs	r0, #168	; 0xa8
 8002c60:	f7fd fed2 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c64:	2000      	movs	r0, #0
 8002c66:	f7fd fecf 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 8002c6a:	20b9      	movs	r0, #185	; 0xb9
 8002c6c:	f7fd fecc 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c70:	2000      	movs	r0, #0
 8002c72:	f7fd fec9 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002c76:	20c4      	movs	r0, #196	; 0xc4
 8002c78:	f7fd fec6 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c7c:	2000      	movs	r0, #0
 8002c7e:	f7fd fec3 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 8002c82:	20ca      	movs	r0, #202	; 0xca
 8002c84:	f7fd fec0 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c88:	2000      	movs	r0, #0
 8002c8a:	f7fd febd 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 8002c8e:	20d2      	movs	r0, #210	; 0xd2
 8002c90:	f7fd feba 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c94:	2000      	movs	r0, #0
 8002c96:	f7fd feb7 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD9);
 8002c9a:	20d9      	movs	r0, #217	; 0xd9
 8002c9c:	f7fd feb4 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ca0:	2000      	movs	r0, #0
 8002ca2:	f7fd feb1 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 8002ca6:	20e0      	movs	r0, #224	; 0xe0
 8002ca8:	f7fd feae 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cac:	2000      	movs	r0, #0
 8002cae:	f7fd feab 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002cb2:	20f3      	movs	r0, #243	; 0xf3
 8002cb4:	f7fd fea8 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cb8:	2000      	movs	r0, #0
 8002cba:	f7fd fea5 	bl	8000a08 <LCD_WR_DATAX>

		LCD_WR_REG(0xE1);
 8002cbe:	20e1      	movs	r0, #225	; 0xe1
 8002cc0:	f7fd fe7e 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 8002cc4:	2016      	movs	r0, #22
 8002cc6:	f7fd fe9f 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cca:	2000      	movs	r0, #0
 8002ccc:	f7fd fe9c 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8002cd0:	201c      	movs	r0, #28
 8002cd2:	f7fd fe99 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cd6:	2000      	movs	r0, #0
 8002cd8:	f7fd fe96 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x22);
 8002cdc:	2022      	movs	r0, #34	; 0x22
 8002cde:	f7fd fe93 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ce2:	2000      	movs	r0, #0
 8002ce4:	f7fd fe90 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002ce8:	2036      	movs	r0, #54	; 0x36
 8002cea:	f7fd fe8d 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cee:	2000      	movs	r0, #0
 8002cf0:	f7fd fe8a 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8002cf4:	2045      	movs	r0, #69	; 0x45
 8002cf6:	f7fd fe87 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cfa:	2000      	movs	r0, #0
 8002cfc:	f7fd fe84 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 8002d00:	2052      	movs	r0, #82	; 0x52
 8002d02:	f7fd fe81 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d06:	2000      	movs	r0, #0
 8002d08:	f7fd fe7e 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8002d0c:	2064      	movs	r0, #100	; 0x64
 8002d0e:	f7fd fe7b 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d12:	2000      	movs	r0, #0
 8002d14:	f7fd fe78 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8002d18:	207a      	movs	r0, #122	; 0x7a
 8002d1a:	f7fd fe75 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d1e:	2000      	movs	r0, #0
 8002d20:	f7fd fe72 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8002d24:	208b      	movs	r0, #139	; 0x8b
 8002d26:	f7fd fe6f 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d2a:	2000      	movs	r0, #0
 8002d2c:	f7fd fe6c 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002d30:	2099      	movs	r0, #153	; 0x99
 8002d32:	f7fd fe69 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d36:	2000      	movs	r0, #0
 8002d38:	f7fd fe66 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 8002d3c:	20a8      	movs	r0, #168	; 0xa8
 8002d3e:	f7fd fe63 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d42:	2000      	movs	r0, #0
 8002d44:	f7fd fe60 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 8002d48:	20b9      	movs	r0, #185	; 0xb9
 8002d4a:	f7fd fe5d 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d4e:	2000      	movs	r0, #0
 8002d50:	f7fd fe5a 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002d54:	20c4      	movs	r0, #196	; 0xc4
 8002d56:	f7fd fe57 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d5a:	2000      	movs	r0, #0
 8002d5c:	f7fd fe54 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 8002d60:	20ca      	movs	r0, #202	; 0xca
 8002d62:	f7fd fe51 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d66:	2000      	movs	r0, #0
 8002d68:	f7fd fe4e 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 8002d6c:	20d2      	movs	r0, #210	; 0xd2
 8002d6e:	f7fd fe4b 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d72:	2000      	movs	r0, #0
 8002d74:	f7fd fe48 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD8);
 8002d78:	20d8      	movs	r0, #216	; 0xd8
 8002d7a:	f7fd fe45 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d7e:	2000      	movs	r0, #0
 8002d80:	f7fd fe42 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 8002d84:	20e0      	movs	r0, #224	; 0xe0
 8002d86:	f7fd fe3f 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d8a:	2000      	movs	r0, #0
 8002d8c:	f7fd fe3c 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002d90:	20f3      	movs	r0, #243	; 0xf3
 8002d92:	f7fd fe39 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d96:	2000      	movs	r0, #0
 8002d98:	f7fd fe36 	bl	8000a08 <LCD_WR_DATAX>

		LCD_WR_REG(0xE2);
 8002d9c:	20e2      	movs	r0, #226	; 0xe2
 8002d9e:	f7fd fe0f 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 8002da2:	2005      	movs	r0, #5
 8002da4:	f7fd fe30 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002da8:	2000      	movs	r0, #0
 8002daa:	f7fd fe2d 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0B);
 8002dae:	200b      	movs	r0, #11
 8002db0:	f7fd fe2a 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002db4:	2000      	movs	r0, #0
 8002db6:	f7fd fe27 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1B);
 8002dba:	201b      	movs	r0, #27
 8002dbc:	f7fd fe24 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dc0:	2000      	movs	r0, #0
 8002dc2:	f7fd fe21 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8002dc6:	2034      	movs	r0, #52	; 0x34
 8002dc8:	f7fd fe1e 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dcc:	2000      	movs	r0, #0
 8002dce:	f7fd fe1b 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002dd2:	2044      	movs	r0, #68	; 0x44
 8002dd4:	f7fd fe18 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dd8:	2000      	movs	r0, #0
 8002dda:	f7fd fe15 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4F);
 8002dde:	204f      	movs	r0, #79	; 0x4f
 8002de0:	f7fd fe12 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002de4:	2000      	movs	r0, #0
 8002de6:	f7fd fe0f 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x61);
 8002dea:	2061      	movs	r0, #97	; 0x61
 8002dec:	f7fd fe0c 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002df0:	2000      	movs	r0, #0
 8002df2:	f7fd fe09 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x79);
 8002df6:	2079      	movs	r0, #121	; 0x79
 8002df8:	f7fd fe06 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dfc:	2000      	movs	r0, #0
 8002dfe:	f7fd fe03 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002e02:	2088      	movs	r0, #136	; 0x88
 8002e04:	f7fd fe00 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e08:	2000      	movs	r0, #0
 8002e0a:	f7fd fdfd 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 8002e0e:	2097      	movs	r0, #151	; 0x97
 8002e10:	f7fd fdfa 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e14:	2000      	movs	r0, #0
 8002e16:	f7fd fdf7 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 8002e1a:	20a6      	movs	r0, #166	; 0xa6
 8002e1c:	f7fd fdf4 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e20:	2000      	movs	r0, #0
 8002e22:	f7fd fdf1 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 8002e26:	20b7      	movs	r0, #183	; 0xb7
 8002e28:	f7fd fdee 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e2c:	2000      	movs	r0, #0
 8002e2e:	f7fd fdeb 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 8002e32:	20c2      	movs	r0, #194	; 0xc2
 8002e34:	f7fd fde8 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e38:	2000      	movs	r0, #0
 8002e3a:	f7fd fde5 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 8002e3e:	20c7      	movs	r0, #199	; 0xc7
 8002e40:	f7fd fde2 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e44:	2000      	movs	r0, #0
 8002e46:	f7fd fddf 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 8002e4a:	20d1      	movs	r0, #209	; 0xd1
 8002e4c:	f7fd fddc 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e50:	2000      	movs	r0, #0
 8002e52:	f7fd fdd9 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD6);
 8002e56:	20d6      	movs	r0, #214	; 0xd6
 8002e58:	f7fd fdd6 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e5c:	2000      	movs	r0, #0
 8002e5e:	f7fd fdd3 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8002e62:	20dd      	movs	r0, #221	; 0xdd
 8002e64:	f7fd fdd0 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e68:	2000      	movs	r0, #0
 8002e6a:	f7fd fdcd 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002e6e:	20f3      	movs	r0, #243	; 0xf3
 8002e70:	f7fd fdca 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e74:	2000      	movs	r0, #0
 8002e76:	f7fd fdc7 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_REG(0xE3);
 8002e7a:	20e3      	movs	r0, #227	; 0xe3
 8002e7c:	f7fd fda0 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 8002e80:	2005      	movs	r0, #5
 8002e82:	f7fd fdc1 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e86:	2000      	movs	r0, #0
 8002e88:	f7fd fdbe 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA);
 8002e8c:	200a      	movs	r0, #10
 8002e8e:	f7fd fdbb 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e92:	2000      	movs	r0, #0
 8002e94:	f7fd fdb8 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8002e98:	201c      	movs	r0, #28
 8002e9a:	f7fd fdb5 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e9e:	2000      	movs	r0, #0
 8002ea0:	f7fd fdb2 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 8002ea4:	2033      	movs	r0, #51	; 0x33
 8002ea6:	f7fd fdaf 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eaa:	2000      	movs	r0, #0
 8002eac:	f7fd fdac 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002eb0:	2044      	movs	r0, #68	; 0x44
 8002eb2:	f7fd fda9 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eb6:	2000      	movs	r0, #0
 8002eb8:	f7fd fda6 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8002ebc:	2050      	movs	r0, #80	; 0x50
 8002ebe:	f7fd fda3 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ec2:	2000      	movs	r0, #0
 8002ec4:	f7fd fda0 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x62);
 8002ec8:	2062      	movs	r0, #98	; 0x62
 8002eca:	f7fd fd9d 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ece:	2000      	movs	r0, #0
 8002ed0:	f7fd fd9a 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x78);
 8002ed4:	2078      	movs	r0, #120	; 0x78
 8002ed6:	f7fd fd97 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eda:	2000      	movs	r0, #0
 8002edc:	f7fd fd94 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002ee0:	2088      	movs	r0, #136	; 0x88
 8002ee2:	f7fd fd91 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ee6:	2000      	movs	r0, #0
 8002ee8:	f7fd fd8e 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 8002eec:	2097      	movs	r0, #151	; 0x97
 8002eee:	f7fd fd8b 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ef2:	2000      	movs	r0, #0
 8002ef4:	f7fd fd88 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 8002ef8:	20a6      	movs	r0, #166	; 0xa6
 8002efa:	f7fd fd85 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002efe:	2000      	movs	r0, #0
 8002f00:	f7fd fd82 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 8002f04:	20b7      	movs	r0, #183	; 0xb7
 8002f06:	f7fd fd7f 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f0a:	2000      	movs	r0, #0
 8002f0c:	f7fd fd7c 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 8002f10:	20c2      	movs	r0, #194	; 0xc2
 8002f12:	f7fd fd79 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f16:	2000      	movs	r0, #0
 8002f18:	f7fd fd76 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 8002f1c:	20c7      	movs	r0, #199	; 0xc7
 8002f1e:	f7fd fd73 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f22:	2000      	movs	r0, #0
 8002f24:	f7fd fd70 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 8002f28:	20d1      	movs	r0, #209	; 0xd1
 8002f2a:	f7fd fd6d 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f2e:	2000      	movs	r0, #0
 8002f30:	f7fd fd6a 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD5);
 8002f34:	20d5      	movs	r0, #213	; 0xd5
 8002f36:	f7fd fd67 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f3a:	2000      	movs	r0, #0
 8002f3c:	f7fd fd64 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8002f40:	20dd      	movs	r0, #221	; 0xdd
 8002f42:	f7fd fd61 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f46:	2000      	movs	r0, #0
 8002f48:	f7fd fd5e 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002f4c:	20f3      	movs	r0, #243	; 0xf3
 8002f4e:	f7fd fd5b 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f52:	2000      	movs	r0, #0
 8002f54:	f7fd fd58 	bl	8000a08 <LCD_WR_DATAX>

		LCD_WR_REG(0xE4);
 8002f58:	20e4      	movs	r0, #228	; 0xe4
 8002f5a:	f7fd fd31 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8002f5e:	2001      	movs	r0, #1
 8002f60:	f7fd fd52 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f64:	2000      	movs	r0, #0
 8002f66:	f7fd fd4f 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8002f6a:	2001      	movs	r0, #1
 8002f6c:	f7fd fd4c 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f70:	2000      	movs	r0, #0
 8002f72:	f7fd fd49 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8002f76:	2002      	movs	r0, #2
 8002f78:	f7fd fd46 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f7c:	2000      	movs	r0, #0
 8002f7e:	f7fd fd43 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 8002f82:	202a      	movs	r0, #42	; 0x2a
 8002f84:	f7fd fd40 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f88:	2000      	movs	r0, #0
 8002f8a:	f7fd fd3d 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002f8e:	203c      	movs	r0, #60	; 0x3c
 8002f90:	f7fd fd3a 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f94:	2000      	movs	r0, #0
 8002f96:	f7fd fd37 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 8002f9a:	204b      	movs	r0, #75	; 0x4b
 8002f9c:	f7fd fd34 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fa0:	2000      	movs	r0, #0
 8002fa2:	f7fd fd31 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8002fa6:	205d      	movs	r0, #93	; 0x5d
 8002fa8:	f7fd fd2e 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fac:	2000      	movs	r0, #0
 8002fae:	f7fd fd2b 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 8002fb2:	2074      	movs	r0, #116	; 0x74
 8002fb4:	f7fd fd28 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fb8:	2000      	movs	r0, #0
 8002fba:	f7fd fd25 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8002fbe:	2084      	movs	r0, #132	; 0x84
 8002fc0:	f7fd fd22 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fc4:	2000      	movs	r0, #0
 8002fc6:	f7fd fd1f 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 8002fca:	2093      	movs	r0, #147	; 0x93
 8002fcc:	f7fd fd1c 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fd0:	2000      	movs	r0, #0
 8002fd2:	f7fd fd19 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8002fd6:	20a2      	movs	r0, #162	; 0xa2
 8002fd8:	f7fd fd16 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fdc:	2000      	movs	r0, #0
 8002fde:	f7fd fd13 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 8002fe2:	20b3      	movs	r0, #179	; 0xb3
 8002fe4:	f7fd fd10 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fe8:	2000      	movs	r0, #0
 8002fea:	f7fd fd0d 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 8002fee:	20be      	movs	r0, #190	; 0xbe
 8002ff0:	f7fd fd0a 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ff4:	2000      	movs	r0, #0
 8002ff6:	f7fd fd07 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002ffa:	20c4      	movs	r0, #196	; 0xc4
 8002ffc:	f7fd fd04 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003000:	2000      	movs	r0, #0
 8003002:	f7fd fd01 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 8003006:	20cd      	movs	r0, #205	; 0xcd
 8003008:	f7fd fcfe 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800300c:	2000      	movs	r0, #0
 800300e:	f7fd fcfb 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 8003012:	20d3      	movs	r0, #211	; 0xd3
 8003014:	f7fd fcf8 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003018:	2000      	movs	r0, #0
 800301a:	f7fd fcf5 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 800301e:	20dd      	movs	r0, #221	; 0xdd
 8003020:	f7fd fcf2 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003024:	2000      	movs	r0, #0
 8003026:	f7fd fcef 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 800302a:	20f3      	movs	r0, #243	; 0xf3
 800302c:	f7fd fcec 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003030:	2000      	movs	r0, #0
 8003032:	f7fd fce9 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_REG(0xE5);
 8003036:	20e5      	movs	r0, #229	; 0xe5
 8003038:	f7fd fcc2 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800303c:	2000      	movs	r0, #0
 800303e:	f7fd fce3 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003042:	2000      	movs	r0, #0
 8003044:	f7fd fce0 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003048:	2000      	movs	r0, #0
 800304a:	f7fd fcdd 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800304e:	2000      	movs	r0, #0
 8003050:	f7fd fcda 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8003054:	2002      	movs	r0, #2
 8003056:	f7fd fcd7 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800305a:	2000      	movs	r0, #0
 800305c:	f7fd fcd4 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8003060:	2029      	movs	r0, #41	; 0x29
 8003062:	f7fd fcd1 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003066:	2000      	movs	r0, #0
 8003068:	f7fd fcce 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 800306c:	203c      	movs	r0, #60	; 0x3c
 800306e:	f7fd fccb 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003072:	2000      	movs	r0, #0
 8003074:	f7fd fcc8 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 8003078:	204b      	movs	r0, #75	; 0x4b
 800307a:	f7fd fcc5 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800307e:	2000      	movs	r0, #0
 8003080:	f7fd fcc2 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8003084:	205d      	movs	r0, #93	; 0x5d
 8003086:	f7fd fcbf 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800308a:	2000      	movs	r0, #0
 800308c:	f7fd fcbc 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 8003090:	2074      	movs	r0, #116	; 0x74
 8003092:	f7fd fcb9 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003096:	2000      	movs	r0, #0
 8003098:	f7fd fcb6 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 800309c:	2084      	movs	r0, #132	; 0x84
 800309e:	f7fd fcb3 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030a2:	2000      	movs	r0, #0
 80030a4:	f7fd fcb0 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 80030a8:	2093      	movs	r0, #147	; 0x93
 80030aa:	f7fd fcad 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030ae:	2000      	movs	r0, #0
 80030b0:	f7fd fcaa 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 80030b4:	20a2      	movs	r0, #162	; 0xa2
 80030b6:	f7fd fca7 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030ba:	2000      	movs	r0, #0
 80030bc:	f7fd fca4 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 80030c0:	20b3      	movs	r0, #179	; 0xb3
 80030c2:	f7fd fca1 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030c6:	2000      	movs	r0, #0
 80030c8:	f7fd fc9e 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 80030cc:	20be      	movs	r0, #190	; 0xbe
 80030ce:	f7fd fc9b 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030d2:	2000      	movs	r0, #0
 80030d4:	f7fd fc98 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 80030d8:	20c4      	movs	r0, #196	; 0xc4
 80030da:	f7fd fc95 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030de:	2000      	movs	r0, #0
 80030e0:	f7fd fc92 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 80030e4:	20cd      	movs	r0, #205	; 0xcd
 80030e6:	f7fd fc8f 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030ea:	2000      	movs	r0, #0
 80030ec:	f7fd fc8c 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 80030f0:	20d3      	movs	r0, #211	; 0xd3
 80030f2:	f7fd fc89 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030f6:	2000      	movs	r0, #0
 80030f8:	f7fd fc86 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 80030fc:	20dc      	movs	r0, #220	; 0xdc
 80030fe:	f7fd fc83 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003102:	2000      	movs	r0, #0
 8003104:	f7fd fc80 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8003108:	20f3      	movs	r0, #243	; 0xf3
 800310a:	f7fd fc7d 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800310e:	2000      	movs	r0, #0
 8003110:	f7fd fc7a 	bl	8000a08 <LCD_WR_DATAX>

		LCD_WR_REG(0xE6);
 8003114:	20e6      	movs	r0, #230	; 0xe6
 8003116:	f7fd fc53 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0x11);
 800311a:	2011      	movs	r0, #17
 800311c:	f7fd fc74 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003120:	2000      	movs	r0, #0
 8003122:	f7fd fc71 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8003126:	2034      	movs	r0, #52	; 0x34
 8003128:	f7fd fc6e 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800312c:	2000      	movs	r0, #0
 800312e:	f7fd fc6b 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8003132:	2056      	movs	r0, #86	; 0x56
 8003134:	f7fd fc68 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003138:	2000      	movs	r0, #0
 800313a:	f7fd fc65 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 800313e:	2076      	movs	r0, #118	; 0x76
 8003140:	f7fd fc62 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003144:	2000      	movs	r0, #0
 8003146:	f7fd fc5f 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 800314a:	2077      	movs	r0, #119	; 0x77
 800314c:	f7fd fc5c 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003150:	2000      	movs	r0, #0
 8003152:	f7fd fc59 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8003156:	2066      	movs	r0, #102	; 0x66
 8003158:	f7fd fc56 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800315c:	2000      	movs	r0, #0
 800315e:	f7fd fc53 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8003162:	2088      	movs	r0, #136	; 0x88
 8003164:	f7fd fc50 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003168:	2000      	movs	r0, #0
 800316a:	f7fd fc4d 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 800316e:	2099      	movs	r0, #153	; 0x99
 8003170:	f7fd fc4a 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003174:	2000      	movs	r0, #0
 8003176:	f7fd fc47 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 800317a:	20bb      	movs	r0, #187	; 0xbb
 800317c:	f7fd fc44 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003180:	2000      	movs	r0, #0
 8003182:	f7fd fc41 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8003186:	2099      	movs	r0, #153	; 0x99
 8003188:	f7fd fc3e 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800318c:	2000      	movs	r0, #0
 800318e:	f7fd fc3b 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8003192:	2066      	movs	r0, #102	; 0x66
 8003194:	f7fd fc38 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003198:	2000      	movs	r0, #0
 800319a:	f7fd fc35 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 800319e:	2055      	movs	r0, #85	; 0x55
 80031a0:	f7fd fc32 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031a4:	2000      	movs	r0, #0
 80031a6:	f7fd fc2f 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80031aa:	2055      	movs	r0, #85	; 0x55
 80031ac:	f7fd fc2c 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031b0:	2000      	movs	r0, #0
 80031b2:	f7fd fc29 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 80031b6:	2045      	movs	r0, #69	; 0x45
 80031b8:	f7fd fc26 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031bc:	2000      	movs	r0, #0
 80031be:	f7fd fc23 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 80031c2:	2043      	movs	r0, #67	; 0x43
 80031c4:	f7fd fc20 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031c8:	2000      	movs	r0, #0
 80031ca:	f7fd fc1d 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 80031ce:	2044      	movs	r0, #68	; 0x44
 80031d0:	f7fd fc1a 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031d4:	2000      	movs	r0, #0
 80031d6:	f7fd fc17 	bl	8000a08 <LCD_WR_DATAX>

		LCD_WR_REG(0xE7);
 80031da:	20e7      	movs	r0, #231	; 0xe7
 80031dc:	f7fd fbf0 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 80031e0:	2032      	movs	r0, #50	; 0x32
 80031e2:	f7fd fc11 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031e6:	2000      	movs	r0, #0
 80031e8:	f7fd fc0e 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80031ec:	2055      	movs	r0, #85	; 0x55
 80031ee:	f7fd fc0b 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031f2:	2000      	movs	r0, #0
 80031f4:	f7fd fc08 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 80031f8:	2076      	movs	r0, #118	; 0x76
 80031fa:	f7fd fc05 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031fe:	2000      	movs	r0, #0
 8003200:	f7fd fc02 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8003204:	2066      	movs	r0, #102	; 0x66
 8003206:	f7fd fbff 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800320a:	2000      	movs	r0, #0
 800320c:	f7fd fbfc 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 8003210:	2067      	movs	r0, #103	; 0x67
 8003212:	f7fd fbf9 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003216:	2000      	movs	r0, #0
 8003218:	f7fd fbf6 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 800321c:	2067      	movs	r0, #103	; 0x67
 800321e:	f7fd fbf3 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003222:	2000      	movs	r0, #0
 8003224:	f7fd fbf0 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 8003228:	2087      	movs	r0, #135	; 0x87
 800322a:	f7fd fbed 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800322e:	2000      	movs	r0, #0
 8003230:	f7fd fbea 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8003234:	2099      	movs	r0, #153	; 0x99
 8003236:	f7fd fbe7 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800323a:	2000      	movs	r0, #0
 800323c:	f7fd fbe4 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8003240:	20bb      	movs	r0, #187	; 0xbb
 8003242:	f7fd fbe1 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003246:	2000      	movs	r0, #0
 8003248:	f7fd fbde 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 800324c:	2099      	movs	r0, #153	; 0x99
 800324e:	f7fd fbdb 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003252:	2000      	movs	r0, #0
 8003254:	f7fd fbd8 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8003258:	2077      	movs	r0, #119	; 0x77
 800325a:	f7fd fbd5 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800325e:	2000      	movs	r0, #0
 8003260:	f7fd fbd2 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8003264:	2044      	movs	r0, #68	; 0x44
 8003266:	f7fd fbcf 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800326a:	2000      	movs	r0, #0
 800326c:	f7fd fbcc 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8003270:	2056      	movs	r0, #86	; 0x56
 8003272:	f7fd fbc9 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003276:	2000      	movs	r0, #0
 8003278:	f7fd fbc6 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 800327c:	2023      	movs	r0, #35	; 0x23
 800327e:	f7fd fbc3 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003282:	2000      	movs	r0, #0
 8003284:	f7fd fbc0 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 8003288:	2033      	movs	r0, #51	; 0x33
 800328a:	f7fd fbbd 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800328e:	2000      	movs	r0, #0
 8003290:	f7fd fbba 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8003294:	2045      	movs	r0, #69	; 0x45
 8003296:	f7fd fbb7 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800329a:	2000      	movs	r0, #0
 800329c:	f7fd fbb4 	bl	8000a08 <LCD_WR_DATAX>

		LCD_WR_REG(0xE8);
 80032a0:	20e8      	movs	r0, #232	; 0xe8
 80032a2:	f7fd fb8d 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80032a6:	2000      	movs	r0, #0
 80032a8:	f7fd fbae 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032ac:	2000      	movs	r0, #0
 80032ae:	f7fd fbab 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80032b2:	2099      	movs	r0, #153	; 0x99
 80032b4:	f7fd fba8 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032b8:	2000      	movs	r0, #0
 80032ba:	f7fd fba5 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 80032be:	2087      	movs	r0, #135	; 0x87
 80032c0:	f7fd fba2 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032c4:	2000      	movs	r0, #0
 80032c6:	f7fd fb9f 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 80032ca:	2088      	movs	r0, #136	; 0x88
 80032cc:	f7fd fb9c 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032d0:	2000      	movs	r0, #0
 80032d2:	f7fd fb99 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 80032d6:	2077      	movs	r0, #119	; 0x77
 80032d8:	f7fd fb96 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032dc:	2000      	movs	r0, #0
 80032de:	f7fd fb93 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 80032e2:	2066      	movs	r0, #102	; 0x66
 80032e4:	f7fd fb90 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032e8:	2000      	movs	r0, #0
 80032ea:	f7fd fb8d 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 80032ee:	2088      	movs	r0, #136	; 0x88
 80032f0:	f7fd fb8a 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032f4:	2000      	movs	r0, #0
 80032f6:	f7fd fb87 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAA);
 80032fa:	20aa      	movs	r0, #170	; 0xaa
 80032fc:	f7fd fb84 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003300:	2000      	movs	r0, #0
 8003302:	f7fd fb81 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8003306:	20bb      	movs	r0, #187	; 0xbb
 8003308:	f7fd fb7e 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800330c:	2000      	movs	r0, #0
 800330e:	f7fd fb7b 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8003312:	2099      	movs	r0, #153	; 0x99
 8003314:	f7fd fb78 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003318:	2000      	movs	r0, #0
 800331a:	f7fd fb75 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 800331e:	2066      	movs	r0, #102	; 0x66
 8003320:	f7fd fb72 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003324:	2000      	movs	r0, #0
 8003326:	f7fd fb6f 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 800332a:	2055      	movs	r0, #85	; 0x55
 800332c:	f7fd fb6c 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003330:	2000      	movs	r0, #0
 8003332:	f7fd fb69 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8003336:	2055      	movs	r0, #85	; 0x55
 8003338:	f7fd fb66 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800333c:	2000      	movs	r0, #0
 800333e:	f7fd fb63 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8003342:	2044      	movs	r0, #68	; 0x44
 8003344:	f7fd fb60 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003348:	2000      	movs	r0, #0
 800334a:	f7fd fb5d 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 800334e:	2044      	movs	r0, #68	; 0x44
 8003350:	f7fd fb5a 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003354:	2000      	movs	r0, #0
 8003356:	f7fd fb57 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 800335a:	2055      	movs	r0, #85	; 0x55
 800335c:	f7fd fb54 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003360:	2000      	movs	r0, #0
 8003362:	f7fd fb51 	bl	8000a08 <LCD_WR_DATAX>

		LCD_WR_REG(0xE9);
 8003366:	20e9      	movs	r0, #233	; 0xe9
 8003368:	f7fd fb2a 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 800336c:	20aa      	movs	r0, #170	; 0xaa
 800336e:	f7fd fb4b 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003372:	2000      	movs	r0, #0
 8003374:	f7fd fb48 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003378:	2000      	movs	r0, #0
 800337a:	f7fd fb45 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800337e:	2000      	movs	r0, #0
 8003380:	f7fd fb42 	bl	8000a08 <LCD_WR_DATAX>

		LCD_WR_REG(0x00);
 8003384:	2000      	movs	r0, #0
 8003386:	f7fd fb1b 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 800338a:	20aa      	movs	r0, #170	; 0xaa
 800338c:	f7fd fb3c 	bl	8000a08 <LCD_WR_DATAX>

		LCD_WR_REG(0xCF);
 8003390:	20cf      	movs	r0, #207	; 0xcf
 8003392:	f7fd fb15 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003396:	2000      	movs	r0, #0
 8003398:	f7fd fb36 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800339c:	2000      	movs	r0, #0
 800339e:	f7fd fb33 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033a2:	2000      	movs	r0, #0
 80033a4:	f7fd fb30 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033a8:	2000      	movs	r0, #0
 80033aa:	f7fd fb2d 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033ae:	2000      	movs	r0, #0
 80033b0:	f7fd fb2a 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033b4:	2000      	movs	r0, #0
 80033b6:	f7fd fb27 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033ba:	2000      	movs	r0, #0
 80033bc:	f7fd fb24 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033c0:	2000      	movs	r0, #0
 80033c2:	f7fd fb21 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033c6:	2000      	movs	r0, #0
 80033c8:	f7fd fb1e 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033cc:	2000      	movs	r0, #0
 80033ce:	f7fd fb1b 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033d2:	2000      	movs	r0, #0
 80033d4:	f7fd fb18 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033d8:	2000      	movs	r0, #0
 80033da:	f7fd fb15 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033de:	2000      	movs	r0, #0
 80033e0:	f7fd fb12 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033e4:	2000      	movs	r0, #0
 80033e6:	f7fd fb0f 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033ea:	2000      	movs	r0, #0
 80033ec:	f7fd fb0c 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033f0:	2000      	movs	r0, #0
 80033f2:	f7fd fb09 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033f6:	2000      	movs	r0, #0
 80033f8:	f7fd fb06 	bl	8000a08 <LCD_WR_DATAX>

		LCD_WR_REG(0xF0);
 80033fc:	20f0      	movs	r0, #240	; 0xf0
 80033fe:	f7fd fadf 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003402:	2000      	movs	r0, #0
 8003404:	f7fd fb00 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8003408:	2050      	movs	r0, #80	; 0x50
 800340a:	f7fd fafd 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800340e:	2000      	movs	r0, #0
 8003410:	f7fd fafa 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003414:	2000      	movs	r0, #0
 8003416:	f7fd faf7 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800341a:	2000      	movs	r0, #0
 800341c:	f7fd faf4 	bl	8000a08 <LCD_WR_DATAX>

		LCD_WR_REG(0xF3);
 8003420:	20f3      	movs	r0, #243	; 0xf3
 8003422:	f7fd facd 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003426:	2000      	movs	r0, #0
 8003428:	f7fd faee 	bl	8000a08 <LCD_WR_DATAX>

		LCD_WR_REG(0xF9);
 800342c:	20f9      	movs	r0, #249	; 0xf9
 800342e:	f7fd fac7 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0x06);
 8003432:	2006      	movs	r0, #6
 8003434:	f7fd fae8 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8003438:	2010      	movs	r0, #16
 800343a:	f7fd fae5 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 800343e:	2029      	movs	r0, #41	; 0x29
 8003440:	f7fd fae2 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003444:	2000      	movs	r0, #0
 8003446:	f7fd fadf 	bl	8000a08 <LCD_WR_DATAX>

		LCD_WR_REG(0x3A);
 800344a:	203a      	movs	r0, #58	; 0x3a
 800344c:	f7fd fab8 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0x55);	//66
 8003450:	2055      	movs	r0, #85	; 0x55
 8003452:	f7fd fad9 	bl	8000a08 <LCD_WR_DATAX>

		LCD_WR_REG(0x11);
 8003456:	2011      	movs	r0, #17
 8003458:	f7fd fab2 	bl	80009c0 <LCD_WR_REG>
		HAL_Delay(100);
 800345c:	2064      	movs	r0, #100	; 0x64
 800345e:	f004 f9d3 	bl	8007808 <HAL_Delay>
		LCD_WR_REG(0x29);
 8003462:	2029      	movs	r0, #41	; 0x29
 8003464:	f7fd faac 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_REG(0x35);
 8003468:	2035      	movs	r0, #53	; 0x35
 800346a:	f7fd faa9 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800346e:	2000      	movs	r0, #0
 8003470:	f7fd faca 	bl	8000a08 <LCD_WR_DATAX>

		LCD_WR_REG(0x51);
 8003474:	2051      	movs	r0, #81	; 0x51
 8003476:	f7fd faa3 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0xFF);
 800347a:	20ff      	movs	r0, #255	; 0xff
 800347c:	f7fd fac4 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_REG(0x53);
 8003480:	2053      	movs	r0, #83	; 0x53
 8003482:	f7fd fa9d 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0x2C);
 8003486:	202c      	movs	r0, #44	; 0x2c
 8003488:	f7fd fabe 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_REG(0x55);
 800348c:	2055      	movs	r0, #85	; 0x55
 800348e:	f7fd fa97 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATAX(0x82);
 8003492:	2082      	movs	r0, #130	; 0x82
 8003494:	f7fd fab8 	bl	8000a08 <LCD_WR_DATAX>
		LCD_WR_REG(0x2c);
 8003498:	202c      	movs	r0, #44	; 0x2c
 800349a:	f7fd fa91 	bl	80009c0 <LCD_WR_REG>
 800349e:	f002 bca1 	b.w	8005de4 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x5510) {
 80034a2:	4b04      	ldr	r3, [pc, #16]	; (80034b4 <LCD_Init+0x1504>)
 80034a4:	889b      	ldrh	r3, [r3, #4]
 80034a6:	f245 5210 	movw	r2, #21776	; 0x5510
 80034aa:	4293      	cmp	r3, r2
 80034ac:	f040 8782 	bne.w	80043b4 <LCD_Init+0x2404>
 80034b0:	e002      	b.n	80034b8 <LCD_Init+0x1508>
 80034b2:	bf00      	nop
 80034b4:	200000f4 	.word	0x200000f4
		LCD_WriteReg(0xF000, 0x55);
 80034b8:	2155      	movs	r1, #85	; 0x55
 80034ba:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 80034be:	f7fd fb0b 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 80034c2:	21aa      	movs	r1, #170	; 0xaa
 80034c4:	f24f 0001 	movw	r0, #61441	; 0xf001
 80034c8:	f7fd fb06 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 80034cc:	2152      	movs	r1, #82	; 0x52
 80034ce:	f24f 0002 	movw	r0, #61442	; 0xf002
 80034d2:	f7fd fb01 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 80034d6:	2108      	movs	r1, #8
 80034d8:	f24f 0003 	movw	r0, #61443	; 0xf003
 80034dc:	f7fd fafc 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x01);
 80034e0:	2101      	movs	r1, #1
 80034e2:	f24f 0004 	movw	r0, #61444	; 0xf004
 80034e6:	f7fd faf7 	bl	8000ad8 <LCD_WriteReg>
		//AVDD Set AVDD 5.2V
		LCD_WriteReg(0xB000, 0x0D);
 80034ea:	210d      	movs	r1, #13
 80034ec:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 80034f0:	f7fd faf2 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xB001, 0x0D);
 80034f4:	210d      	movs	r1, #13
 80034f6:	f24b 0001 	movw	r0, #45057	; 0xb001
 80034fa:	f7fd faed 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xB002, 0x0D);
 80034fe:	210d      	movs	r1, #13
 8003500:	f24b 0002 	movw	r0, #45058	; 0xb002
 8003504:	f7fd fae8 	bl	8000ad8 <LCD_WriteReg>
		//AVDD ratio
		LCD_WriteReg(0xB600, 0x34);
 8003508:	2134      	movs	r1, #52	; 0x34
 800350a:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 800350e:	f7fd fae3 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xB601, 0x34);
 8003512:	2134      	movs	r1, #52	; 0x34
 8003514:	f24b 6001 	movw	r0, #46593	; 0xb601
 8003518:	f7fd fade 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xB602, 0x34);
 800351c:	2134      	movs	r1, #52	; 0x34
 800351e:	f24b 6002 	movw	r0, #46594	; 0xb602
 8003522:	f7fd fad9 	bl	8000ad8 <LCD_WriteReg>
		//AVEE -5.2V
		LCD_WriteReg(0xB100, 0x0D);
 8003526:	210d      	movs	r1, #13
 8003528:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 800352c:	f7fd fad4 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x0D);
 8003530:	210d      	movs	r1, #13
 8003532:	f24b 1001 	movw	r0, #45313	; 0xb101
 8003536:	f7fd facf 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xB102, 0x0D);
 800353a:	210d      	movs	r1, #13
 800353c:	f24b 1002 	movw	r0, #45314	; 0xb102
 8003540:	f7fd faca 	bl	8000ad8 <LCD_WriteReg>
		//AVEE ratio
		LCD_WriteReg(0xB700, 0x34);
 8003544:	2134      	movs	r1, #52	; 0x34
 8003546:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 800354a:	f7fd fac5 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x34);
 800354e:	2134      	movs	r1, #52	; 0x34
 8003550:	f24b 7001 	movw	r0, #46849	; 0xb701
 8003554:	f7fd fac0 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xB702, 0x34);
 8003558:	2134      	movs	r1, #52	; 0x34
 800355a:	f24b 7002 	movw	r0, #46850	; 0xb702
 800355e:	f7fd fabb 	bl	8000ad8 <LCD_WriteReg>
		//VCL -2.5V
		LCD_WriteReg(0xB200, 0x00);
 8003562:	2100      	movs	r1, #0
 8003564:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 8003568:	f7fd fab6 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xB201, 0x00);
 800356c:	2100      	movs	r1, #0
 800356e:	f24b 2001 	movw	r0, #45569	; 0xb201
 8003572:	f7fd fab1 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xB202, 0x00);
 8003576:	2100      	movs	r1, #0
 8003578:	f24b 2002 	movw	r0, #45570	; 0xb202
 800357c:	f7fd faac 	bl	8000ad8 <LCD_WriteReg>
		//VCL ratio
		LCD_WriteReg(0xB800, 0x24);
 8003580:	2124      	movs	r1, #36	; 0x24
 8003582:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8003586:	f7fd faa7 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x24);
 800358a:	2124      	movs	r1, #36	; 0x24
 800358c:	f64b 0001 	movw	r0, #47105	; 0xb801
 8003590:	f7fd faa2 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x24);
 8003594:	2124      	movs	r1, #36	; 0x24
 8003596:	f64b 0002 	movw	r0, #47106	; 0xb802
 800359a:	f7fd fa9d 	bl	8000ad8 <LCD_WriteReg>
		//VGH 15V (Free pump)
		LCD_WriteReg(0xBF00, 0x01);
 800359e:	2101      	movs	r1, #1
 80035a0:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 80035a4:	f7fd fa98 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xB300, 0x0F);
 80035a8:	210f      	movs	r1, #15
 80035aa:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 80035ae:	f7fd fa93 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xB301, 0x0F);
 80035b2:	210f      	movs	r1, #15
 80035b4:	f24b 3001 	movw	r0, #45825	; 0xb301
 80035b8:	f7fd fa8e 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xB302, 0x0F);
 80035bc:	210f      	movs	r1, #15
 80035be:	f24b 3002 	movw	r0, #45826	; 0xb302
 80035c2:	f7fd fa89 	bl	8000ad8 <LCD_WriteReg>
		//VGH ratio
		LCD_WriteReg(0xB900, 0x34);
 80035c6:	2134      	movs	r1, #52	; 0x34
 80035c8:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 80035cc:	f7fd fa84 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xB901, 0x34);
 80035d0:	2134      	movs	r1, #52	; 0x34
 80035d2:	f64b 1001 	movw	r0, #47361	; 0xb901
 80035d6:	f7fd fa7f 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xB902, 0x34);
 80035da:	2134      	movs	r1, #52	; 0x34
 80035dc:	f64b 1002 	movw	r0, #47362	; 0xb902
 80035e0:	f7fd fa7a 	bl	8000ad8 <LCD_WriteReg>
		//VGL_REG -10V
		LCD_WriteReg(0xB500, 0x08);
 80035e4:	2108      	movs	r1, #8
 80035e6:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 80035ea:	f7fd fa75 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xB501, 0x08);
 80035ee:	2108      	movs	r1, #8
 80035f0:	f24b 5001 	movw	r0, #46337	; 0xb501
 80035f4:	f7fd fa70 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xB502, 0x08);
 80035f8:	2108      	movs	r1, #8
 80035fa:	f24b 5002 	movw	r0, #46338	; 0xb502
 80035fe:	f7fd fa6b 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xC200, 0x03);
 8003602:	2103      	movs	r1, #3
 8003604:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 8003608:	f7fd fa66 	bl	8000ad8 <LCD_WriteReg>
		//VGLX ratio
		LCD_WriteReg(0xBA00, 0x24);
 800360c:	2124      	movs	r1, #36	; 0x24
 800360e:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 8003612:	f7fd fa61 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xBA01, 0x24);
 8003616:	2124      	movs	r1, #36	; 0x24
 8003618:	f64b 2001 	movw	r0, #47617	; 0xba01
 800361c:	f7fd fa5c 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xBA02, 0x24);
 8003620:	2124      	movs	r1, #36	; 0x24
 8003622:	f64b 2002 	movw	r0, #47618	; 0xba02
 8003626:	f7fd fa57 	bl	8000ad8 <LCD_WriteReg>
		//VGMP/VGSP 4.5V/0V
		LCD_WriteReg(0xBC00, 0x00);
 800362a:	2100      	movs	r1, #0
 800362c:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8003630:	f7fd fa52 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x78);
 8003634:	2178      	movs	r1, #120	; 0x78
 8003636:	f64b 4001 	movw	r0, #48129	; 0xbc01
 800363a:	f7fd fa4d 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 800363e:	2100      	movs	r1, #0
 8003640:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8003644:	f7fd fa48 	bl	8000ad8 <LCD_WriteReg>
		//VGMN/VGSN -4.5V/0V
		LCD_WriteReg(0xBD00, 0x00);
 8003648:	2100      	movs	r1, #0
 800364a:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 800364e:	f7fd fa43 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xBD01, 0x78);
 8003652:	2178      	movs	r1, #120	; 0x78
 8003654:	f64b 5001 	movw	r0, #48385	; 0xbd01
 8003658:	f7fd fa3e 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xBD02, 0x00);
 800365c:	2100      	movs	r1, #0
 800365e:	f64b 5002 	movw	r0, #48386	; 0xbd02
 8003662:	f7fd fa39 	bl	8000ad8 <LCD_WriteReg>
		//VCOM
		LCD_WriteReg(0xBE00, 0x00);
 8003666:	2100      	movs	r1, #0
 8003668:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 800366c:	f7fd fa34 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xBE01, 0x64);
 8003670:	2164      	movs	r1, #100	; 0x64
 8003672:	f64b 6001 	movw	r0, #48641	; 0xbe01
 8003676:	f7fd fa2f 	bl	8000ad8 <LCD_WriteReg>
		//Gamma Setting
		LCD_WriteReg(0xD100, 0x00);
 800367a:	2100      	movs	r1, #0
 800367c:	f44f 4051 	mov.w	r0, #53504	; 0xd100
 8003680:	f7fd fa2a 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD101, 0x33);
 8003684:	2133      	movs	r1, #51	; 0x33
 8003686:	f24d 1001 	movw	r0, #53505	; 0xd101
 800368a:	f7fd fa25 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD102, 0x00);
 800368e:	2100      	movs	r1, #0
 8003690:	f24d 1002 	movw	r0, #53506	; 0xd102
 8003694:	f7fd fa20 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD103, 0x34);
 8003698:	2134      	movs	r1, #52	; 0x34
 800369a:	f24d 1003 	movw	r0, #53507	; 0xd103
 800369e:	f7fd fa1b 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD104, 0x00);
 80036a2:	2100      	movs	r1, #0
 80036a4:	f24d 1004 	movw	r0, #53508	; 0xd104
 80036a8:	f7fd fa16 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD105, 0x3A);
 80036ac:	213a      	movs	r1, #58	; 0x3a
 80036ae:	f24d 1005 	movw	r0, #53509	; 0xd105
 80036b2:	f7fd fa11 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD106, 0x00);
 80036b6:	2100      	movs	r1, #0
 80036b8:	f24d 1006 	movw	r0, #53510	; 0xd106
 80036bc:	f7fd fa0c 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD107, 0x4A);
 80036c0:	214a      	movs	r1, #74	; 0x4a
 80036c2:	f24d 1007 	movw	r0, #53511	; 0xd107
 80036c6:	f7fd fa07 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD108, 0x00);
 80036ca:	2100      	movs	r1, #0
 80036cc:	f24d 1008 	movw	r0, #53512	; 0xd108
 80036d0:	f7fd fa02 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD109, 0x5C);
 80036d4:	215c      	movs	r1, #92	; 0x5c
 80036d6:	f24d 1009 	movw	r0, #53513	; 0xd109
 80036da:	f7fd f9fd 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD10A, 0x00);
 80036de:	2100      	movs	r1, #0
 80036e0:	f24d 100a 	movw	r0, #53514	; 0xd10a
 80036e4:	f7fd f9f8 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD10B, 0x81);
 80036e8:	2181      	movs	r1, #129	; 0x81
 80036ea:	f24d 100b 	movw	r0, #53515	; 0xd10b
 80036ee:	f7fd f9f3 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD10C, 0x00);
 80036f2:	2100      	movs	r1, #0
 80036f4:	f24d 100c 	movw	r0, #53516	; 0xd10c
 80036f8:	f7fd f9ee 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD10D, 0xA6);
 80036fc:	21a6      	movs	r1, #166	; 0xa6
 80036fe:	f24d 100d 	movw	r0, #53517	; 0xd10d
 8003702:	f7fd f9e9 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD10E, 0x00);
 8003706:	2100      	movs	r1, #0
 8003708:	f24d 100e 	movw	r0, #53518	; 0xd10e
 800370c:	f7fd f9e4 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD10F, 0xE5);
 8003710:	21e5      	movs	r1, #229	; 0xe5
 8003712:	f24d 100f 	movw	r0, #53519	; 0xd10f
 8003716:	f7fd f9df 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD110, 0x01);
 800371a:	2101      	movs	r1, #1
 800371c:	f24d 1010 	movw	r0, #53520	; 0xd110
 8003720:	f7fd f9da 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD111, 0x13);
 8003724:	2113      	movs	r1, #19
 8003726:	f24d 1011 	movw	r0, #53521	; 0xd111
 800372a:	f7fd f9d5 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD112, 0x01);
 800372e:	2101      	movs	r1, #1
 8003730:	f24d 1012 	movw	r0, #53522	; 0xd112
 8003734:	f7fd f9d0 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD113, 0x54);
 8003738:	2154      	movs	r1, #84	; 0x54
 800373a:	f24d 1013 	movw	r0, #53523	; 0xd113
 800373e:	f7fd f9cb 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD114, 0x01);
 8003742:	2101      	movs	r1, #1
 8003744:	f24d 1014 	movw	r0, #53524	; 0xd114
 8003748:	f7fd f9c6 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD115, 0x82);
 800374c:	2182      	movs	r1, #130	; 0x82
 800374e:	f24d 1015 	movw	r0, #53525	; 0xd115
 8003752:	f7fd f9c1 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD116, 0x01);
 8003756:	2101      	movs	r1, #1
 8003758:	f24d 1016 	movw	r0, #53526	; 0xd116
 800375c:	f7fd f9bc 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD117, 0xCA);
 8003760:	21ca      	movs	r1, #202	; 0xca
 8003762:	f24d 1017 	movw	r0, #53527	; 0xd117
 8003766:	f7fd f9b7 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD118, 0x02);
 800376a:	2102      	movs	r1, #2
 800376c:	f24d 1018 	movw	r0, #53528	; 0xd118
 8003770:	f7fd f9b2 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD119, 0x00);
 8003774:	2100      	movs	r1, #0
 8003776:	f24d 1019 	movw	r0, #53529	; 0xd119
 800377a:	f7fd f9ad 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD11A, 0x02);
 800377e:	2102      	movs	r1, #2
 8003780:	f24d 101a 	movw	r0, #53530	; 0xd11a
 8003784:	f7fd f9a8 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD11B, 0x01);
 8003788:	2101      	movs	r1, #1
 800378a:	f24d 101b 	movw	r0, #53531	; 0xd11b
 800378e:	f7fd f9a3 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD11C, 0x02);
 8003792:	2102      	movs	r1, #2
 8003794:	f24d 101c 	movw	r0, #53532	; 0xd11c
 8003798:	f7fd f99e 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD11D, 0x34);
 800379c:	2134      	movs	r1, #52	; 0x34
 800379e:	f24d 101d 	movw	r0, #53533	; 0xd11d
 80037a2:	f7fd f999 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD11E, 0x02);
 80037a6:	2102      	movs	r1, #2
 80037a8:	f24d 101e 	movw	r0, #53534	; 0xd11e
 80037ac:	f7fd f994 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD11F, 0x67);
 80037b0:	2167      	movs	r1, #103	; 0x67
 80037b2:	f24d 101f 	movw	r0, #53535	; 0xd11f
 80037b6:	f7fd f98f 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD120, 0x02);
 80037ba:	2102      	movs	r1, #2
 80037bc:	f24d 1020 	movw	r0, #53536	; 0xd120
 80037c0:	f7fd f98a 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD121, 0x84);
 80037c4:	2184      	movs	r1, #132	; 0x84
 80037c6:	f24d 1021 	movw	r0, #53537	; 0xd121
 80037ca:	f7fd f985 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD122, 0x02);
 80037ce:	2102      	movs	r1, #2
 80037d0:	f24d 1022 	movw	r0, #53538	; 0xd122
 80037d4:	f7fd f980 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD123, 0xA4);
 80037d8:	21a4      	movs	r1, #164	; 0xa4
 80037da:	f24d 1023 	movw	r0, #53539	; 0xd123
 80037de:	f7fd f97b 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD124, 0x02);
 80037e2:	2102      	movs	r1, #2
 80037e4:	f24d 1024 	movw	r0, #53540	; 0xd124
 80037e8:	f7fd f976 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD125, 0xB7);
 80037ec:	21b7      	movs	r1, #183	; 0xb7
 80037ee:	f24d 1025 	movw	r0, #53541	; 0xd125
 80037f2:	f7fd f971 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD126, 0x02);
 80037f6:	2102      	movs	r1, #2
 80037f8:	f24d 1026 	movw	r0, #53542	; 0xd126
 80037fc:	f7fd f96c 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD127, 0xCF);
 8003800:	21cf      	movs	r1, #207	; 0xcf
 8003802:	f24d 1027 	movw	r0, #53543	; 0xd127
 8003806:	f7fd f967 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD128, 0x02);
 800380a:	2102      	movs	r1, #2
 800380c:	f24d 1028 	movw	r0, #53544	; 0xd128
 8003810:	f7fd f962 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD129, 0xDE);
 8003814:	21de      	movs	r1, #222	; 0xde
 8003816:	f24d 1029 	movw	r0, #53545	; 0xd129
 800381a:	f7fd f95d 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD12A, 0x02);
 800381e:	2102      	movs	r1, #2
 8003820:	f24d 102a 	movw	r0, #53546	; 0xd12a
 8003824:	f7fd f958 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD12B, 0xF2);
 8003828:	21f2      	movs	r1, #242	; 0xf2
 800382a:	f24d 102b 	movw	r0, #53547	; 0xd12b
 800382e:	f7fd f953 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD12C, 0x02);
 8003832:	2102      	movs	r1, #2
 8003834:	f24d 102c 	movw	r0, #53548	; 0xd12c
 8003838:	f7fd f94e 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD12D, 0xFE);
 800383c:	21fe      	movs	r1, #254	; 0xfe
 800383e:	f24d 102d 	movw	r0, #53549	; 0xd12d
 8003842:	f7fd f949 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD12E, 0x03);
 8003846:	2103      	movs	r1, #3
 8003848:	f24d 102e 	movw	r0, #53550	; 0xd12e
 800384c:	f7fd f944 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD12F, 0x10);
 8003850:	2110      	movs	r1, #16
 8003852:	f24d 102f 	movw	r0, #53551	; 0xd12f
 8003856:	f7fd f93f 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD130, 0x03);
 800385a:	2103      	movs	r1, #3
 800385c:	f24d 1030 	movw	r0, #53552	; 0xd130
 8003860:	f7fd f93a 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD131, 0x33);
 8003864:	2133      	movs	r1, #51	; 0x33
 8003866:	f24d 1031 	movw	r0, #53553	; 0xd131
 800386a:	f7fd f935 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD132, 0x03);
 800386e:	2103      	movs	r1, #3
 8003870:	f24d 1032 	movw	r0, #53554	; 0xd132
 8003874:	f7fd f930 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD133, 0x6D);
 8003878:	216d      	movs	r1, #109	; 0x6d
 800387a:	f24d 1033 	movw	r0, #53555	; 0xd133
 800387e:	f7fd f92b 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD200, 0x00);
 8003882:	2100      	movs	r1, #0
 8003884:	f44f 4052 	mov.w	r0, #53760	; 0xd200
 8003888:	f7fd f926 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD201, 0x33);
 800388c:	2133      	movs	r1, #51	; 0x33
 800388e:	f24d 2001 	movw	r0, #53761	; 0xd201
 8003892:	f7fd f921 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD202, 0x00);
 8003896:	2100      	movs	r1, #0
 8003898:	f24d 2002 	movw	r0, #53762	; 0xd202
 800389c:	f7fd f91c 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD203, 0x34);
 80038a0:	2134      	movs	r1, #52	; 0x34
 80038a2:	f24d 2003 	movw	r0, #53763	; 0xd203
 80038a6:	f7fd f917 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD204, 0x00);
 80038aa:	2100      	movs	r1, #0
 80038ac:	f24d 2004 	movw	r0, #53764	; 0xd204
 80038b0:	f7fd f912 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD205, 0x3A);
 80038b4:	213a      	movs	r1, #58	; 0x3a
 80038b6:	f24d 2005 	movw	r0, #53765	; 0xd205
 80038ba:	f7fd f90d 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD206, 0x00);
 80038be:	2100      	movs	r1, #0
 80038c0:	f24d 2006 	movw	r0, #53766	; 0xd206
 80038c4:	f7fd f908 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD207, 0x4A);
 80038c8:	214a      	movs	r1, #74	; 0x4a
 80038ca:	f24d 2007 	movw	r0, #53767	; 0xd207
 80038ce:	f7fd f903 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD208, 0x00);
 80038d2:	2100      	movs	r1, #0
 80038d4:	f24d 2008 	movw	r0, #53768	; 0xd208
 80038d8:	f7fd f8fe 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD209, 0x5C);
 80038dc:	215c      	movs	r1, #92	; 0x5c
 80038de:	f24d 2009 	movw	r0, #53769	; 0xd209
 80038e2:	f7fd f8f9 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD20A, 0x00);
 80038e6:	2100      	movs	r1, #0
 80038e8:	f24d 200a 	movw	r0, #53770	; 0xd20a
 80038ec:	f7fd f8f4 	bl	8000ad8 <LCD_WriteReg>

		LCD_WriteReg(0xD20B, 0x81);
 80038f0:	2181      	movs	r1, #129	; 0x81
 80038f2:	f24d 200b 	movw	r0, #53771	; 0xd20b
 80038f6:	f7fd f8ef 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD20C, 0x00);
 80038fa:	2100      	movs	r1, #0
 80038fc:	f24d 200c 	movw	r0, #53772	; 0xd20c
 8003900:	f7fd f8ea 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD20D, 0xA6);
 8003904:	21a6      	movs	r1, #166	; 0xa6
 8003906:	f24d 200d 	movw	r0, #53773	; 0xd20d
 800390a:	f7fd f8e5 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD20E, 0x00);
 800390e:	2100      	movs	r1, #0
 8003910:	f24d 200e 	movw	r0, #53774	; 0xd20e
 8003914:	f7fd f8e0 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD20F, 0xE5);
 8003918:	21e5      	movs	r1, #229	; 0xe5
 800391a:	f24d 200f 	movw	r0, #53775	; 0xd20f
 800391e:	f7fd f8db 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD210, 0x01);
 8003922:	2101      	movs	r1, #1
 8003924:	f24d 2010 	movw	r0, #53776	; 0xd210
 8003928:	f7fd f8d6 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD211, 0x13);
 800392c:	2113      	movs	r1, #19
 800392e:	f24d 2011 	movw	r0, #53777	; 0xd211
 8003932:	f7fd f8d1 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD212, 0x01);
 8003936:	2101      	movs	r1, #1
 8003938:	f24d 2012 	movw	r0, #53778	; 0xd212
 800393c:	f7fd f8cc 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD213, 0x54);
 8003940:	2154      	movs	r1, #84	; 0x54
 8003942:	f24d 2013 	movw	r0, #53779	; 0xd213
 8003946:	f7fd f8c7 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD214, 0x01);
 800394a:	2101      	movs	r1, #1
 800394c:	f24d 2014 	movw	r0, #53780	; 0xd214
 8003950:	f7fd f8c2 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD215, 0x82);
 8003954:	2182      	movs	r1, #130	; 0x82
 8003956:	f24d 2015 	movw	r0, #53781	; 0xd215
 800395a:	f7fd f8bd 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD216, 0x01);
 800395e:	2101      	movs	r1, #1
 8003960:	f24d 2016 	movw	r0, #53782	; 0xd216
 8003964:	f7fd f8b8 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD217, 0xCA);
 8003968:	21ca      	movs	r1, #202	; 0xca
 800396a:	f24d 2017 	movw	r0, #53783	; 0xd217
 800396e:	f7fd f8b3 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD218, 0x02);
 8003972:	2102      	movs	r1, #2
 8003974:	f24d 2018 	movw	r0, #53784	; 0xd218
 8003978:	f7fd f8ae 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD219, 0x00);
 800397c:	2100      	movs	r1, #0
 800397e:	f24d 2019 	movw	r0, #53785	; 0xd219
 8003982:	f7fd f8a9 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD21A, 0x02);
 8003986:	2102      	movs	r1, #2
 8003988:	f24d 201a 	movw	r0, #53786	; 0xd21a
 800398c:	f7fd f8a4 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD21B, 0x01);
 8003990:	2101      	movs	r1, #1
 8003992:	f24d 201b 	movw	r0, #53787	; 0xd21b
 8003996:	f7fd f89f 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD21C, 0x02);
 800399a:	2102      	movs	r1, #2
 800399c:	f24d 201c 	movw	r0, #53788	; 0xd21c
 80039a0:	f7fd f89a 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD21D, 0x34);
 80039a4:	2134      	movs	r1, #52	; 0x34
 80039a6:	f24d 201d 	movw	r0, #53789	; 0xd21d
 80039aa:	f7fd f895 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD21E, 0x02);
 80039ae:	2102      	movs	r1, #2
 80039b0:	f24d 201e 	movw	r0, #53790	; 0xd21e
 80039b4:	f7fd f890 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD21F, 0x67);
 80039b8:	2167      	movs	r1, #103	; 0x67
 80039ba:	f24d 201f 	movw	r0, #53791	; 0xd21f
 80039be:	f7fd f88b 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD220, 0x02);
 80039c2:	2102      	movs	r1, #2
 80039c4:	f24d 2020 	movw	r0, #53792	; 0xd220
 80039c8:	f7fd f886 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD221, 0x84);
 80039cc:	2184      	movs	r1, #132	; 0x84
 80039ce:	f24d 2021 	movw	r0, #53793	; 0xd221
 80039d2:	f7fd f881 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD222, 0x02);
 80039d6:	2102      	movs	r1, #2
 80039d8:	f24d 2022 	movw	r0, #53794	; 0xd222
 80039dc:	f7fd f87c 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD223, 0xA4);
 80039e0:	21a4      	movs	r1, #164	; 0xa4
 80039e2:	f24d 2023 	movw	r0, #53795	; 0xd223
 80039e6:	f7fd f877 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD224, 0x02);
 80039ea:	2102      	movs	r1, #2
 80039ec:	f24d 2024 	movw	r0, #53796	; 0xd224
 80039f0:	f7fd f872 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD225, 0xB7);
 80039f4:	21b7      	movs	r1, #183	; 0xb7
 80039f6:	f24d 2025 	movw	r0, #53797	; 0xd225
 80039fa:	f7fd f86d 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD226, 0x02);
 80039fe:	2102      	movs	r1, #2
 8003a00:	f24d 2026 	movw	r0, #53798	; 0xd226
 8003a04:	f7fd f868 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD227, 0xCF);
 8003a08:	21cf      	movs	r1, #207	; 0xcf
 8003a0a:	f24d 2027 	movw	r0, #53799	; 0xd227
 8003a0e:	f7fd f863 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD228, 0x02);
 8003a12:	2102      	movs	r1, #2
 8003a14:	f24d 2028 	movw	r0, #53800	; 0xd228
 8003a18:	f7fd f85e 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD229, 0xDE);
 8003a1c:	21de      	movs	r1, #222	; 0xde
 8003a1e:	f24d 2029 	movw	r0, #53801	; 0xd229
 8003a22:	f7fd f859 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD22A, 0x02);
 8003a26:	2102      	movs	r1, #2
 8003a28:	f24d 202a 	movw	r0, #53802	; 0xd22a
 8003a2c:	f7fd f854 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD22B, 0xF2);
 8003a30:	21f2      	movs	r1, #242	; 0xf2
 8003a32:	f24d 202b 	movw	r0, #53803	; 0xd22b
 8003a36:	f7fd f84f 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD22C, 0x02);
 8003a3a:	2102      	movs	r1, #2
 8003a3c:	f24d 202c 	movw	r0, #53804	; 0xd22c
 8003a40:	f7fd f84a 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD22D, 0xFE);
 8003a44:	21fe      	movs	r1, #254	; 0xfe
 8003a46:	f24d 202d 	movw	r0, #53805	; 0xd22d
 8003a4a:	f7fd f845 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD22E, 0x03);
 8003a4e:	2103      	movs	r1, #3
 8003a50:	f24d 202e 	movw	r0, #53806	; 0xd22e
 8003a54:	f7fd f840 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD22F, 0x10);
 8003a58:	2110      	movs	r1, #16
 8003a5a:	f24d 202f 	movw	r0, #53807	; 0xd22f
 8003a5e:	f7fd f83b 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD230, 0x03);
 8003a62:	2103      	movs	r1, #3
 8003a64:	f24d 2030 	movw	r0, #53808	; 0xd230
 8003a68:	f7fd f836 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD231, 0x33);
 8003a6c:	2133      	movs	r1, #51	; 0x33
 8003a6e:	f24d 2031 	movw	r0, #53809	; 0xd231
 8003a72:	f7fd f831 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD232, 0x03);
 8003a76:	2103      	movs	r1, #3
 8003a78:	f24d 2032 	movw	r0, #53810	; 0xd232
 8003a7c:	f7fd f82c 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD233, 0x6D);
 8003a80:	216d      	movs	r1, #109	; 0x6d
 8003a82:	f24d 2033 	movw	r0, #53811	; 0xd233
 8003a86:	f7fd f827 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD300, 0x00);
 8003a8a:	2100      	movs	r1, #0
 8003a8c:	f44f 4053 	mov.w	r0, #54016	; 0xd300
 8003a90:	f7fd f822 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD301, 0x33);
 8003a94:	2133      	movs	r1, #51	; 0x33
 8003a96:	f24d 3001 	movw	r0, #54017	; 0xd301
 8003a9a:	f7fd f81d 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD302, 0x00);
 8003a9e:	2100      	movs	r1, #0
 8003aa0:	f24d 3002 	movw	r0, #54018	; 0xd302
 8003aa4:	f7fd f818 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD303, 0x34);
 8003aa8:	2134      	movs	r1, #52	; 0x34
 8003aaa:	f24d 3003 	movw	r0, #54019	; 0xd303
 8003aae:	f7fd f813 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD304, 0x00);
 8003ab2:	2100      	movs	r1, #0
 8003ab4:	f24d 3004 	movw	r0, #54020	; 0xd304
 8003ab8:	f7fd f80e 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD305, 0x3A);
 8003abc:	213a      	movs	r1, #58	; 0x3a
 8003abe:	f24d 3005 	movw	r0, #54021	; 0xd305
 8003ac2:	f7fd f809 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD306, 0x00);
 8003ac6:	2100      	movs	r1, #0
 8003ac8:	f24d 3006 	movw	r0, #54022	; 0xd306
 8003acc:	f7fd f804 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD307, 0x4A);
 8003ad0:	214a      	movs	r1, #74	; 0x4a
 8003ad2:	f24d 3007 	movw	r0, #54023	; 0xd307
 8003ad6:	f7fc ffff 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD308, 0x00);
 8003ada:	2100      	movs	r1, #0
 8003adc:	f24d 3008 	movw	r0, #54024	; 0xd308
 8003ae0:	f7fc fffa 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD309, 0x5C);
 8003ae4:	215c      	movs	r1, #92	; 0x5c
 8003ae6:	f24d 3009 	movw	r0, #54025	; 0xd309
 8003aea:	f7fc fff5 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD30A, 0x00);
 8003aee:	2100      	movs	r1, #0
 8003af0:	f24d 300a 	movw	r0, #54026	; 0xd30a
 8003af4:	f7fc fff0 	bl	8000ad8 <LCD_WriteReg>

		LCD_WriteReg(0xD30B, 0x81);
 8003af8:	2181      	movs	r1, #129	; 0x81
 8003afa:	f24d 300b 	movw	r0, #54027	; 0xd30b
 8003afe:	f7fc ffeb 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD30C, 0x00);
 8003b02:	2100      	movs	r1, #0
 8003b04:	f24d 300c 	movw	r0, #54028	; 0xd30c
 8003b08:	f7fc ffe6 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD30D, 0xA6);
 8003b0c:	21a6      	movs	r1, #166	; 0xa6
 8003b0e:	f24d 300d 	movw	r0, #54029	; 0xd30d
 8003b12:	f7fc ffe1 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD30E, 0x00);
 8003b16:	2100      	movs	r1, #0
 8003b18:	f24d 300e 	movw	r0, #54030	; 0xd30e
 8003b1c:	f7fc ffdc 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD30F, 0xE5);
 8003b20:	21e5      	movs	r1, #229	; 0xe5
 8003b22:	f24d 300f 	movw	r0, #54031	; 0xd30f
 8003b26:	f7fc ffd7 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD310, 0x01);
 8003b2a:	2101      	movs	r1, #1
 8003b2c:	f24d 3010 	movw	r0, #54032	; 0xd310
 8003b30:	f7fc ffd2 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD311, 0x13);
 8003b34:	2113      	movs	r1, #19
 8003b36:	f24d 3011 	movw	r0, #54033	; 0xd311
 8003b3a:	f7fc ffcd 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD312, 0x01);
 8003b3e:	2101      	movs	r1, #1
 8003b40:	f24d 3012 	movw	r0, #54034	; 0xd312
 8003b44:	f7fc ffc8 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD313, 0x54);
 8003b48:	2154      	movs	r1, #84	; 0x54
 8003b4a:	f24d 3013 	movw	r0, #54035	; 0xd313
 8003b4e:	f7fc ffc3 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD314, 0x01);
 8003b52:	2101      	movs	r1, #1
 8003b54:	f24d 3014 	movw	r0, #54036	; 0xd314
 8003b58:	f7fc ffbe 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD315, 0x82);
 8003b5c:	2182      	movs	r1, #130	; 0x82
 8003b5e:	f24d 3015 	movw	r0, #54037	; 0xd315
 8003b62:	f7fc ffb9 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD316, 0x01);
 8003b66:	2101      	movs	r1, #1
 8003b68:	f24d 3016 	movw	r0, #54038	; 0xd316
 8003b6c:	f7fc ffb4 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD317, 0xCA);
 8003b70:	21ca      	movs	r1, #202	; 0xca
 8003b72:	f24d 3017 	movw	r0, #54039	; 0xd317
 8003b76:	f7fc ffaf 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD318, 0x02);
 8003b7a:	2102      	movs	r1, #2
 8003b7c:	f24d 3018 	movw	r0, #54040	; 0xd318
 8003b80:	f7fc ffaa 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD319, 0x00);
 8003b84:	2100      	movs	r1, #0
 8003b86:	f24d 3019 	movw	r0, #54041	; 0xd319
 8003b8a:	f7fc ffa5 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD31A, 0x02);
 8003b8e:	2102      	movs	r1, #2
 8003b90:	f24d 301a 	movw	r0, #54042	; 0xd31a
 8003b94:	f7fc ffa0 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD31B, 0x01);
 8003b98:	2101      	movs	r1, #1
 8003b9a:	f24d 301b 	movw	r0, #54043	; 0xd31b
 8003b9e:	f7fc ff9b 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD31C, 0x02);
 8003ba2:	2102      	movs	r1, #2
 8003ba4:	f24d 301c 	movw	r0, #54044	; 0xd31c
 8003ba8:	f7fc ff96 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD31D, 0x34);
 8003bac:	2134      	movs	r1, #52	; 0x34
 8003bae:	f24d 301d 	movw	r0, #54045	; 0xd31d
 8003bb2:	f7fc ff91 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD31E, 0x02);
 8003bb6:	2102      	movs	r1, #2
 8003bb8:	f24d 301e 	movw	r0, #54046	; 0xd31e
 8003bbc:	f7fc ff8c 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD31F, 0x67);
 8003bc0:	2167      	movs	r1, #103	; 0x67
 8003bc2:	f24d 301f 	movw	r0, #54047	; 0xd31f
 8003bc6:	f7fc ff87 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD320, 0x02);
 8003bca:	2102      	movs	r1, #2
 8003bcc:	f24d 3020 	movw	r0, #54048	; 0xd320
 8003bd0:	f7fc ff82 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD321, 0x84);
 8003bd4:	2184      	movs	r1, #132	; 0x84
 8003bd6:	f24d 3021 	movw	r0, #54049	; 0xd321
 8003bda:	f7fc ff7d 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD322, 0x02);
 8003bde:	2102      	movs	r1, #2
 8003be0:	f24d 3022 	movw	r0, #54050	; 0xd322
 8003be4:	f7fc ff78 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD323, 0xA4);
 8003be8:	21a4      	movs	r1, #164	; 0xa4
 8003bea:	f24d 3023 	movw	r0, #54051	; 0xd323
 8003bee:	f7fc ff73 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD324, 0x02);
 8003bf2:	2102      	movs	r1, #2
 8003bf4:	f24d 3024 	movw	r0, #54052	; 0xd324
 8003bf8:	f7fc ff6e 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD325, 0xB7);
 8003bfc:	21b7      	movs	r1, #183	; 0xb7
 8003bfe:	f24d 3025 	movw	r0, #54053	; 0xd325
 8003c02:	f7fc ff69 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD326, 0x02);
 8003c06:	2102      	movs	r1, #2
 8003c08:	f24d 3026 	movw	r0, #54054	; 0xd326
 8003c0c:	f7fc ff64 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD327, 0xCF);
 8003c10:	21cf      	movs	r1, #207	; 0xcf
 8003c12:	f24d 3027 	movw	r0, #54055	; 0xd327
 8003c16:	f7fc ff5f 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD328, 0x02);
 8003c1a:	2102      	movs	r1, #2
 8003c1c:	f24d 3028 	movw	r0, #54056	; 0xd328
 8003c20:	f7fc ff5a 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD329, 0xDE);
 8003c24:	21de      	movs	r1, #222	; 0xde
 8003c26:	f24d 3029 	movw	r0, #54057	; 0xd329
 8003c2a:	f7fc ff55 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD32A, 0x02);
 8003c2e:	2102      	movs	r1, #2
 8003c30:	f24d 302a 	movw	r0, #54058	; 0xd32a
 8003c34:	f7fc ff50 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD32B, 0xF2);
 8003c38:	21f2      	movs	r1, #242	; 0xf2
 8003c3a:	f24d 302b 	movw	r0, #54059	; 0xd32b
 8003c3e:	f7fc ff4b 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD32C, 0x02);
 8003c42:	2102      	movs	r1, #2
 8003c44:	f24d 302c 	movw	r0, #54060	; 0xd32c
 8003c48:	f7fc ff46 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD32D, 0xFE);
 8003c4c:	21fe      	movs	r1, #254	; 0xfe
 8003c4e:	f24d 302d 	movw	r0, #54061	; 0xd32d
 8003c52:	f7fc ff41 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD32E, 0x03);
 8003c56:	2103      	movs	r1, #3
 8003c58:	f24d 302e 	movw	r0, #54062	; 0xd32e
 8003c5c:	f7fc ff3c 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD32F, 0x10);
 8003c60:	2110      	movs	r1, #16
 8003c62:	f24d 302f 	movw	r0, #54063	; 0xd32f
 8003c66:	f7fc ff37 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD330, 0x03);
 8003c6a:	2103      	movs	r1, #3
 8003c6c:	f24d 3030 	movw	r0, #54064	; 0xd330
 8003c70:	f7fc ff32 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD331, 0x33);
 8003c74:	2133      	movs	r1, #51	; 0x33
 8003c76:	f24d 3031 	movw	r0, #54065	; 0xd331
 8003c7a:	f7fc ff2d 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD332, 0x03);
 8003c7e:	2103      	movs	r1, #3
 8003c80:	f24d 3032 	movw	r0, #54066	; 0xd332
 8003c84:	f7fc ff28 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD333, 0x6D);
 8003c88:	216d      	movs	r1, #109	; 0x6d
 8003c8a:	f24d 3033 	movw	r0, #54067	; 0xd333
 8003c8e:	f7fc ff23 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD400, 0x00);
 8003c92:	2100      	movs	r1, #0
 8003c94:	f44f 4054 	mov.w	r0, #54272	; 0xd400
 8003c98:	f7fc ff1e 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD401, 0x33);
 8003c9c:	2133      	movs	r1, #51	; 0x33
 8003c9e:	f24d 4001 	movw	r0, #54273	; 0xd401
 8003ca2:	f7fc ff19 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD402, 0x00);
 8003ca6:	2100      	movs	r1, #0
 8003ca8:	f24d 4002 	movw	r0, #54274	; 0xd402
 8003cac:	f7fc ff14 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD403, 0x34);
 8003cb0:	2134      	movs	r1, #52	; 0x34
 8003cb2:	f24d 4003 	movw	r0, #54275	; 0xd403
 8003cb6:	f7fc ff0f 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD404, 0x00);
 8003cba:	2100      	movs	r1, #0
 8003cbc:	f24d 4004 	movw	r0, #54276	; 0xd404
 8003cc0:	f7fc ff0a 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD405, 0x3A);
 8003cc4:	213a      	movs	r1, #58	; 0x3a
 8003cc6:	f24d 4005 	movw	r0, #54277	; 0xd405
 8003cca:	f7fc ff05 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD406, 0x00);
 8003cce:	2100      	movs	r1, #0
 8003cd0:	f24d 4006 	movw	r0, #54278	; 0xd406
 8003cd4:	f7fc ff00 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD407, 0x4A);
 8003cd8:	214a      	movs	r1, #74	; 0x4a
 8003cda:	f24d 4007 	movw	r0, #54279	; 0xd407
 8003cde:	f7fc fefb 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD408, 0x00);
 8003ce2:	2100      	movs	r1, #0
 8003ce4:	f24d 4008 	movw	r0, #54280	; 0xd408
 8003ce8:	f7fc fef6 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD409, 0x5C);
 8003cec:	215c      	movs	r1, #92	; 0x5c
 8003cee:	f24d 4009 	movw	r0, #54281	; 0xd409
 8003cf2:	f7fc fef1 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD40A, 0x00);
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	f24d 400a 	movw	r0, #54282	; 0xd40a
 8003cfc:	f7fc feec 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD40B, 0x81);
 8003d00:	2181      	movs	r1, #129	; 0x81
 8003d02:	f24d 400b 	movw	r0, #54283	; 0xd40b
 8003d06:	f7fc fee7 	bl	8000ad8 <LCD_WriteReg>

		LCD_WriteReg(0xD40C, 0x00);
 8003d0a:	2100      	movs	r1, #0
 8003d0c:	f24d 400c 	movw	r0, #54284	; 0xd40c
 8003d10:	f7fc fee2 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD40D, 0xA6);
 8003d14:	21a6      	movs	r1, #166	; 0xa6
 8003d16:	f24d 400d 	movw	r0, #54285	; 0xd40d
 8003d1a:	f7fc fedd 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD40E, 0x00);
 8003d1e:	2100      	movs	r1, #0
 8003d20:	f24d 400e 	movw	r0, #54286	; 0xd40e
 8003d24:	f7fc fed8 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD40F, 0xE5);
 8003d28:	21e5      	movs	r1, #229	; 0xe5
 8003d2a:	f24d 400f 	movw	r0, #54287	; 0xd40f
 8003d2e:	f7fc fed3 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD410, 0x01);
 8003d32:	2101      	movs	r1, #1
 8003d34:	f24d 4010 	movw	r0, #54288	; 0xd410
 8003d38:	f7fc fece 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD411, 0x13);
 8003d3c:	2113      	movs	r1, #19
 8003d3e:	f24d 4011 	movw	r0, #54289	; 0xd411
 8003d42:	f7fc fec9 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD412, 0x01);
 8003d46:	2101      	movs	r1, #1
 8003d48:	f24d 4012 	movw	r0, #54290	; 0xd412
 8003d4c:	f7fc fec4 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD413, 0x54);
 8003d50:	2154      	movs	r1, #84	; 0x54
 8003d52:	f24d 4013 	movw	r0, #54291	; 0xd413
 8003d56:	f7fc febf 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD414, 0x01);
 8003d5a:	2101      	movs	r1, #1
 8003d5c:	f24d 4014 	movw	r0, #54292	; 0xd414
 8003d60:	f7fc feba 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD415, 0x82);
 8003d64:	2182      	movs	r1, #130	; 0x82
 8003d66:	f24d 4015 	movw	r0, #54293	; 0xd415
 8003d6a:	f7fc feb5 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD416, 0x01);
 8003d6e:	2101      	movs	r1, #1
 8003d70:	f24d 4016 	movw	r0, #54294	; 0xd416
 8003d74:	f7fc feb0 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD417, 0xCA);
 8003d78:	21ca      	movs	r1, #202	; 0xca
 8003d7a:	f24d 4017 	movw	r0, #54295	; 0xd417
 8003d7e:	f7fc feab 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD418, 0x02);
 8003d82:	2102      	movs	r1, #2
 8003d84:	f24d 4018 	movw	r0, #54296	; 0xd418
 8003d88:	f7fc fea6 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD419, 0x00);
 8003d8c:	2100      	movs	r1, #0
 8003d8e:	f24d 4019 	movw	r0, #54297	; 0xd419
 8003d92:	f7fc fea1 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD41A, 0x02);
 8003d96:	2102      	movs	r1, #2
 8003d98:	f24d 401a 	movw	r0, #54298	; 0xd41a
 8003d9c:	f7fc fe9c 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD41B, 0x01);
 8003da0:	2101      	movs	r1, #1
 8003da2:	f24d 401b 	movw	r0, #54299	; 0xd41b
 8003da6:	f7fc fe97 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD41C, 0x02);
 8003daa:	2102      	movs	r1, #2
 8003dac:	f24d 401c 	movw	r0, #54300	; 0xd41c
 8003db0:	f7fc fe92 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD41D, 0x34);
 8003db4:	2134      	movs	r1, #52	; 0x34
 8003db6:	f24d 401d 	movw	r0, #54301	; 0xd41d
 8003dba:	f7fc fe8d 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD41E, 0x02);
 8003dbe:	2102      	movs	r1, #2
 8003dc0:	f24d 401e 	movw	r0, #54302	; 0xd41e
 8003dc4:	f7fc fe88 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD41F, 0x67);
 8003dc8:	2167      	movs	r1, #103	; 0x67
 8003dca:	f24d 401f 	movw	r0, #54303	; 0xd41f
 8003dce:	f7fc fe83 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD420, 0x02);
 8003dd2:	2102      	movs	r1, #2
 8003dd4:	f24d 4020 	movw	r0, #54304	; 0xd420
 8003dd8:	f7fc fe7e 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD421, 0x84);
 8003ddc:	2184      	movs	r1, #132	; 0x84
 8003dde:	f24d 4021 	movw	r0, #54305	; 0xd421
 8003de2:	f7fc fe79 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD422, 0x02);
 8003de6:	2102      	movs	r1, #2
 8003de8:	f24d 4022 	movw	r0, #54306	; 0xd422
 8003dec:	f7fc fe74 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD423, 0xA4);
 8003df0:	21a4      	movs	r1, #164	; 0xa4
 8003df2:	f24d 4023 	movw	r0, #54307	; 0xd423
 8003df6:	f7fc fe6f 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD424, 0x02);
 8003dfa:	2102      	movs	r1, #2
 8003dfc:	f24d 4024 	movw	r0, #54308	; 0xd424
 8003e00:	f7fc fe6a 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD425, 0xB7);
 8003e04:	21b7      	movs	r1, #183	; 0xb7
 8003e06:	f24d 4025 	movw	r0, #54309	; 0xd425
 8003e0a:	f7fc fe65 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD426, 0x02);
 8003e0e:	2102      	movs	r1, #2
 8003e10:	f24d 4026 	movw	r0, #54310	; 0xd426
 8003e14:	f7fc fe60 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD427, 0xCF);
 8003e18:	21cf      	movs	r1, #207	; 0xcf
 8003e1a:	f24d 4027 	movw	r0, #54311	; 0xd427
 8003e1e:	f7fc fe5b 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD428, 0x02);
 8003e22:	2102      	movs	r1, #2
 8003e24:	f24d 4028 	movw	r0, #54312	; 0xd428
 8003e28:	f7fc fe56 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD429, 0xDE);
 8003e2c:	21de      	movs	r1, #222	; 0xde
 8003e2e:	f24d 4029 	movw	r0, #54313	; 0xd429
 8003e32:	f7fc fe51 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD42A, 0x02);
 8003e36:	2102      	movs	r1, #2
 8003e38:	f24d 402a 	movw	r0, #54314	; 0xd42a
 8003e3c:	f7fc fe4c 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD42B, 0xF2);
 8003e40:	21f2      	movs	r1, #242	; 0xf2
 8003e42:	f24d 402b 	movw	r0, #54315	; 0xd42b
 8003e46:	f7fc fe47 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD42C, 0x02);
 8003e4a:	2102      	movs	r1, #2
 8003e4c:	f24d 402c 	movw	r0, #54316	; 0xd42c
 8003e50:	f7fc fe42 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD42D, 0xFE);
 8003e54:	21fe      	movs	r1, #254	; 0xfe
 8003e56:	f24d 402d 	movw	r0, #54317	; 0xd42d
 8003e5a:	f7fc fe3d 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD42E, 0x03);
 8003e5e:	2103      	movs	r1, #3
 8003e60:	f24d 402e 	movw	r0, #54318	; 0xd42e
 8003e64:	f7fc fe38 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD42F, 0x10);
 8003e68:	2110      	movs	r1, #16
 8003e6a:	f24d 402f 	movw	r0, #54319	; 0xd42f
 8003e6e:	f7fc fe33 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD430, 0x03);
 8003e72:	2103      	movs	r1, #3
 8003e74:	f24d 4030 	movw	r0, #54320	; 0xd430
 8003e78:	f7fc fe2e 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD431, 0x33);
 8003e7c:	2133      	movs	r1, #51	; 0x33
 8003e7e:	f24d 4031 	movw	r0, #54321	; 0xd431
 8003e82:	f7fc fe29 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD432, 0x03);
 8003e86:	2103      	movs	r1, #3
 8003e88:	f24d 4032 	movw	r0, #54322	; 0xd432
 8003e8c:	f7fc fe24 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD433, 0x6D);
 8003e90:	216d      	movs	r1, #109	; 0x6d
 8003e92:	f24d 4033 	movw	r0, #54323	; 0xd433
 8003e96:	f7fc fe1f 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD500, 0x00);
 8003e9a:	2100      	movs	r1, #0
 8003e9c:	f44f 4055 	mov.w	r0, #54528	; 0xd500
 8003ea0:	f7fc fe1a 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD501, 0x33);
 8003ea4:	2133      	movs	r1, #51	; 0x33
 8003ea6:	f24d 5001 	movw	r0, #54529	; 0xd501
 8003eaa:	f7fc fe15 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD502, 0x00);
 8003eae:	2100      	movs	r1, #0
 8003eb0:	f24d 5002 	movw	r0, #54530	; 0xd502
 8003eb4:	f7fc fe10 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD503, 0x34);
 8003eb8:	2134      	movs	r1, #52	; 0x34
 8003eba:	f24d 5003 	movw	r0, #54531	; 0xd503
 8003ebe:	f7fc fe0b 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD504, 0x00);
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	f24d 5004 	movw	r0, #54532	; 0xd504
 8003ec8:	f7fc fe06 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD505, 0x3A);
 8003ecc:	213a      	movs	r1, #58	; 0x3a
 8003ece:	f24d 5005 	movw	r0, #54533	; 0xd505
 8003ed2:	f7fc fe01 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD506, 0x00);
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	f24d 5006 	movw	r0, #54534	; 0xd506
 8003edc:	f7fc fdfc 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD507, 0x4A);
 8003ee0:	214a      	movs	r1, #74	; 0x4a
 8003ee2:	f24d 5007 	movw	r0, #54535	; 0xd507
 8003ee6:	f7fc fdf7 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD508, 0x00);
 8003eea:	2100      	movs	r1, #0
 8003eec:	f24d 5008 	movw	r0, #54536	; 0xd508
 8003ef0:	f7fc fdf2 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD509, 0x5C);
 8003ef4:	215c      	movs	r1, #92	; 0x5c
 8003ef6:	f24d 5009 	movw	r0, #54537	; 0xd509
 8003efa:	f7fc fded 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD50A, 0x00);
 8003efe:	2100      	movs	r1, #0
 8003f00:	f24d 500a 	movw	r0, #54538	; 0xd50a
 8003f04:	f7fc fde8 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD50B, 0x81);
 8003f08:	2181      	movs	r1, #129	; 0x81
 8003f0a:	f24d 500b 	movw	r0, #54539	; 0xd50b
 8003f0e:	f7fc fde3 	bl	8000ad8 <LCD_WriteReg>

		LCD_WriteReg(0xD50C, 0x00);
 8003f12:	2100      	movs	r1, #0
 8003f14:	f24d 500c 	movw	r0, #54540	; 0xd50c
 8003f18:	f7fc fdde 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD50D, 0xA6);
 8003f1c:	21a6      	movs	r1, #166	; 0xa6
 8003f1e:	f24d 500d 	movw	r0, #54541	; 0xd50d
 8003f22:	f7fc fdd9 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD50E, 0x00);
 8003f26:	2100      	movs	r1, #0
 8003f28:	f24d 500e 	movw	r0, #54542	; 0xd50e
 8003f2c:	f7fc fdd4 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD50F, 0xE5);
 8003f30:	21e5      	movs	r1, #229	; 0xe5
 8003f32:	f24d 500f 	movw	r0, #54543	; 0xd50f
 8003f36:	f7fc fdcf 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD510, 0x01);
 8003f3a:	2101      	movs	r1, #1
 8003f3c:	f24d 5010 	movw	r0, #54544	; 0xd510
 8003f40:	f7fc fdca 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD511, 0x13);
 8003f44:	2113      	movs	r1, #19
 8003f46:	f24d 5011 	movw	r0, #54545	; 0xd511
 8003f4a:	f7fc fdc5 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD512, 0x01);
 8003f4e:	2101      	movs	r1, #1
 8003f50:	f24d 5012 	movw	r0, #54546	; 0xd512
 8003f54:	f7fc fdc0 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD513, 0x54);
 8003f58:	2154      	movs	r1, #84	; 0x54
 8003f5a:	f24d 5013 	movw	r0, #54547	; 0xd513
 8003f5e:	f7fc fdbb 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD514, 0x01);
 8003f62:	2101      	movs	r1, #1
 8003f64:	f24d 5014 	movw	r0, #54548	; 0xd514
 8003f68:	f7fc fdb6 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD515, 0x82);
 8003f6c:	2182      	movs	r1, #130	; 0x82
 8003f6e:	f24d 5015 	movw	r0, #54549	; 0xd515
 8003f72:	f7fc fdb1 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD516, 0x01);
 8003f76:	2101      	movs	r1, #1
 8003f78:	f24d 5016 	movw	r0, #54550	; 0xd516
 8003f7c:	f7fc fdac 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD517, 0xCA);
 8003f80:	21ca      	movs	r1, #202	; 0xca
 8003f82:	f24d 5017 	movw	r0, #54551	; 0xd517
 8003f86:	f7fc fda7 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD518, 0x02);
 8003f8a:	2102      	movs	r1, #2
 8003f8c:	f24d 5018 	movw	r0, #54552	; 0xd518
 8003f90:	f7fc fda2 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD519, 0x00);
 8003f94:	2100      	movs	r1, #0
 8003f96:	f24d 5019 	movw	r0, #54553	; 0xd519
 8003f9a:	f7fc fd9d 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD51A, 0x02);
 8003f9e:	2102      	movs	r1, #2
 8003fa0:	f24d 501a 	movw	r0, #54554	; 0xd51a
 8003fa4:	f7fc fd98 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD51B, 0x01);
 8003fa8:	2101      	movs	r1, #1
 8003faa:	f24d 501b 	movw	r0, #54555	; 0xd51b
 8003fae:	f7fc fd93 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD51C, 0x02);
 8003fb2:	2102      	movs	r1, #2
 8003fb4:	f24d 501c 	movw	r0, #54556	; 0xd51c
 8003fb8:	f7fc fd8e 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD51D, 0x34);
 8003fbc:	2134      	movs	r1, #52	; 0x34
 8003fbe:	f24d 501d 	movw	r0, #54557	; 0xd51d
 8003fc2:	f7fc fd89 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD51E, 0x02);
 8003fc6:	2102      	movs	r1, #2
 8003fc8:	f24d 501e 	movw	r0, #54558	; 0xd51e
 8003fcc:	f7fc fd84 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD51F, 0x67);
 8003fd0:	2167      	movs	r1, #103	; 0x67
 8003fd2:	f24d 501f 	movw	r0, #54559	; 0xd51f
 8003fd6:	f7fc fd7f 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD520, 0x02);
 8003fda:	2102      	movs	r1, #2
 8003fdc:	f24d 5020 	movw	r0, #54560	; 0xd520
 8003fe0:	f7fc fd7a 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD521, 0x84);
 8003fe4:	2184      	movs	r1, #132	; 0x84
 8003fe6:	f24d 5021 	movw	r0, #54561	; 0xd521
 8003fea:	f7fc fd75 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD522, 0x02);
 8003fee:	2102      	movs	r1, #2
 8003ff0:	f24d 5022 	movw	r0, #54562	; 0xd522
 8003ff4:	f7fc fd70 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD523, 0xA4);
 8003ff8:	21a4      	movs	r1, #164	; 0xa4
 8003ffa:	f24d 5023 	movw	r0, #54563	; 0xd523
 8003ffe:	f7fc fd6b 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD524, 0x02);
 8004002:	2102      	movs	r1, #2
 8004004:	f24d 5024 	movw	r0, #54564	; 0xd524
 8004008:	f7fc fd66 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD525, 0xB7);
 800400c:	21b7      	movs	r1, #183	; 0xb7
 800400e:	f24d 5025 	movw	r0, #54565	; 0xd525
 8004012:	f7fc fd61 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD526, 0x02);
 8004016:	2102      	movs	r1, #2
 8004018:	f24d 5026 	movw	r0, #54566	; 0xd526
 800401c:	f7fc fd5c 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD527, 0xCF);
 8004020:	21cf      	movs	r1, #207	; 0xcf
 8004022:	f24d 5027 	movw	r0, #54567	; 0xd527
 8004026:	f7fc fd57 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD528, 0x02);
 800402a:	2102      	movs	r1, #2
 800402c:	f24d 5028 	movw	r0, #54568	; 0xd528
 8004030:	f7fc fd52 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD529, 0xDE);
 8004034:	21de      	movs	r1, #222	; 0xde
 8004036:	f24d 5029 	movw	r0, #54569	; 0xd529
 800403a:	f7fc fd4d 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD52A, 0x02);
 800403e:	2102      	movs	r1, #2
 8004040:	f24d 502a 	movw	r0, #54570	; 0xd52a
 8004044:	f7fc fd48 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD52B, 0xF2);
 8004048:	21f2      	movs	r1, #242	; 0xf2
 800404a:	f24d 502b 	movw	r0, #54571	; 0xd52b
 800404e:	f7fc fd43 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD52C, 0x02);
 8004052:	2102      	movs	r1, #2
 8004054:	f24d 502c 	movw	r0, #54572	; 0xd52c
 8004058:	f7fc fd3e 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD52D, 0xFE);
 800405c:	21fe      	movs	r1, #254	; 0xfe
 800405e:	f24d 502d 	movw	r0, #54573	; 0xd52d
 8004062:	f7fc fd39 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD52E, 0x03);
 8004066:	2103      	movs	r1, #3
 8004068:	f24d 502e 	movw	r0, #54574	; 0xd52e
 800406c:	f7fc fd34 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD52F, 0x10);
 8004070:	2110      	movs	r1, #16
 8004072:	f24d 502f 	movw	r0, #54575	; 0xd52f
 8004076:	f7fc fd2f 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD530, 0x03);
 800407a:	2103      	movs	r1, #3
 800407c:	f24d 5030 	movw	r0, #54576	; 0xd530
 8004080:	f7fc fd2a 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD531, 0x33);
 8004084:	2133      	movs	r1, #51	; 0x33
 8004086:	f24d 5031 	movw	r0, #54577	; 0xd531
 800408a:	f7fc fd25 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD532, 0x03);
 800408e:	2103      	movs	r1, #3
 8004090:	f24d 5032 	movw	r0, #54578	; 0xd532
 8004094:	f7fc fd20 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD533, 0x6D);
 8004098:	216d      	movs	r1, #109	; 0x6d
 800409a:	f24d 5033 	movw	r0, #54579	; 0xd533
 800409e:	f7fc fd1b 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD600, 0x00);
 80040a2:	2100      	movs	r1, #0
 80040a4:	f44f 4056 	mov.w	r0, #54784	; 0xd600
 80040a8:	f7fc fd16 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD601, 0x33);
 80040ac:	2133      	movs	r1, #51	; 0x33
 80040ae:	f24d 6001 	movw	r0, #54785	; 0xd601
 80040b2:	f7fc fd11 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD602, 0x00);
 80040b6:	2100      	movs	r1, #0
 80040b8:	f24d 6002 	movw	r0, #54786	; 0xd602
 80040bc:	f7fc fd0c 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD603, 0x34);
 80040c0:	2134      	movs	r1, #52	; 0x34
 80040c2:	f24d 6003 	movw	r0, #54787	; 0xd603
 80040c6:	f7fc fd07 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD604, 0x00);
 80040ca:	2100      	movs	r1, #0
 80040cc:	f24d 6004 	movw	r0, #54788	; 0xd604
 80040d0:	f7fc fd02 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD605, 0x3A);
 80040d4:	213a      	movs	r1, #58	; 0x3a
 80040d6:	f24d 6005 	movw	r0, #54789	; 0xd605
 80040da:	f7fc fcfd 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD606, 0x00);
 80040de:	2100      	movs	r1, #0
 80040e0:	f24d 6006 	movw	r0, #54790	; 0xd606
 80040e4:	f7fc fcf8 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD607, 0x4A);
 80040e8:	214a      	movs	r1, #74	; 0x4a
 80040ea:	f24d 6007 	movw	r0, #54791	; 0xd607
 80040ee:	f7fc fcf3 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD608, 0x00);
 80040f2:	2100      	movs	r1, #0
 80040f4:	f24d 6008 	movw	r0, #54792	; 0xd608
 80040f8:	f7fc fcee 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD609, 0x5C);
 80040fc:	215c      	movs	r1, #92	; 0x5c
 80040fe:	f24d 6009 	movw	r0, #54793	; 0xd609
 8004102:	f7fc fce9 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD60A, 0x00);
 8004106:	2100      	movs	r1, #0
 8004108:	f24d 600a 	movw	r0, #54794	; 0xd60a
 800410c:	f7fc fce4 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD60B, 0x81);
 8004110:	2181      	movs	r1, #129	; 0x81
 8004112:	f24d 600b 	movw	r0, #54795	; 0xd60b
 8004116:	f7fc fcdf 	bl	8000ad8 <LCD_WriteReg>

		LCD_WriteReg(0xD60C, 0x00);
 800411a:	2100      	movs	r1, #0
 800411c:	f24d 600c 	movw	r0, #54796	; 0xd60c
 8004120:	f7fc fcda 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD60D, 0xA6);
 8004124:	21a6      	movs	r1, #166	; 0xa6
 8004126:	f24d 600d 	movw	r0, #54797	; 0xd60d
 800412a:	f7fc fcd5 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD60E, 0x00);
 800412e:	2100      	movs	r1, #0
 8004130:	f24d 600e 	movw	r0, #54798	; 0xd60e
 8004134:	f7fc fcd0 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD60F, 0xE5);
 8004138:	21e5      	movs	r1, #229	; 0xe5
 800413a:	f24d 600f 	movw	r0, #54799	; 0xd60f
 800413e:	f7fc fccb 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD610, 0x01);
 8004142:	2101      	movs	r1, #1
 8004144:	f24d 6010 	movw	r0, #54800	; 0xd610
 8004148:	f7fc fcc6 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD611, 0x13);
 800414c:	2113      	movs	r1, #19
 800414e:	f24d 6011 	movw	r0, #54801	; 0xd611
 8004152:	f7fc fcc1 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD612, 0x01);
 8004156:	2101      	movs	r1, #1
 8004158:	f24d 6012 	movw	r0, #54802	; 0xd612
 800415c:	f7fc fcbc 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD613, 0x54);
 8004160:	2154      	movs	r1, #84	; 0x54
 8004162:	f24d 6013 	movw	r0, #54803	; 0xd613
 8004166:	f7fc fcb7 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD614, 0x01);
 800416a:	2101      	movs	r1, #1
 800416c:	f24d 6014 	movw	r0, #54804	; 0xd614
 8004170:	f7fc fcb2 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD615, 0x82);
 8004174:	2182      	movs	r1, #130	; 0x82
 8004176:	f24d 6015 	movw	r0, #54805	; 0xd615
 800417a:	f7fc fcad 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD616, 0x01);
 800417e:	2101      	movs	r1, #1
 8004180:	f24d 6016 	movw	r0, #54806	; 0xd616
 8004184:	f7fc fca8 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD617, 0xCA);
 8004188:	21ca      	movs	r1, #202	; 0xca
 800418a:	f24d 6017 	movw	r0, #54807	; 0xd617
 800418e:	f7fc fca3 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD618, 0x02);
 8004192:	2102      	movs	r1, #2
 8004194:	f24d 6018 	movw	r0, #54808	; 0xd618
 8004198:	f7fc fc9e 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD619, 0x00);
 800419c:	2100      	movs	r1, #0
 800419e:	f24d 6019 	movw	r0, #54809	; 0xd619
 80041a2:	f7fc fc99 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD61A, 0x02);
 80041a6:	2102      	movs	r1, #2
 80041a8:	f24d 601a 	movw	r0, #54810	; 0xd61a
 80041ac:	f7fc fc94 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD61B, 0x01);
 80041b0:	2101      	movs	r1, #1
 80041b2:	f24d 601b 	movw	r0, #54811	; 0xd61b
 80041b6:	f7fc fc8f 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD61C, 0x02);
 80041ba:	2102      	movs	r1, #2
 80041bc:	f24d 601c 	movw	r0, #54812	; 0xd61c
 80041c0:	f7fc fc8a 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD61D, 0x34);
 80041c4:	2134      	movs	r1, #52	; 0x34
 80041c6:	f24d 601d 	movw	r0, #54813	; 0xd61d
 80041ca:	f7fc fc85 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD61E, 0x02);
 80041ce:	2102      	movs	r1, #2
 80041d0:	f24d 601e 	movw	r0, #54814	; 0xd61e
 80041d4:	f7fc fc80 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD61F, 0x67);
 80041d8:	2167      	movs	r1, #103	; 0x67
 80041da:	f24d 601f 	movw	r0, #54815	; 0xd61f
 80041de:	f7fc fc7b 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD620, 0x02);
 80041e2:	2102      	movs	r1, #2
 80041e4:	f24d 6020 	movw	r0, #54816	; 0xd620
 80041e8:	f7fc fc76 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD621, 0x84);
 80041ec:	2184      	movs	r1, #132	; 0x84
 80041ee:	f24d 6021 	movw	r0, #54817	; 0xd621
 80041f2:	f7fc fc71 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD622, 0x02);
 80041f6:	2102      	movs	r1, #2
 80041f8:	f24d 6022 	movw	r0, #54818	; 0xd622
 80041fc:	f7fc fc6c 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD623, 0xA4);
 8004200:	21a4      	movs	r1, #164	; 0xa4
 8004202:	f24d 6023 	movw	r0, #54819	; 0xd623
 8004206:	f7fc fc67 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD624, 0x02);
 800420a:	2102      	movs	r1, #2
 800420c:	f24d 6024 	movw	r0, #54820	; 0xd624
 8004210:	f7fc fc62 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD625, 0xB7);
 8004214:	21b7      	movs	r1, #183	; 0xb7
 8004216:	f24d 6025 	movw	r0, #54821	; 0xd625
 800421a:	f7fc fc5d 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD626, 0x02);
 800421e:	2102      	movs	r1, #2
 8004220:	f24d 6026 	movw	r0, #54822	; 0xd626
 8004224:	f7fc fc58 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD627, 0xCF);
 8004228:	21cf      	movs	r1, #207	; 0xcf
 800422a:	f24d 6027 	movw	r0, #54823	; 0xd627
 800422e:	f7fc fc53 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD628, 0x02);
 8004232:	2102      	movs	r1, #2
 8004234:	f24d 6028 	movw	r0, #54824	; 0xd628
 8004238:	f7fc fc4e 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD629, 0xDE);
 800423c:	21de      	movs	r1, #222	; 0xde
 800423e:	f24d 6029 	movw	r0, #54825	; 0xd629
 8004242:	f7fc fc49 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD62A, 0x02);
 8004246:	2102      	movs	r1, #2
 8004248:	f24d 602a 	movw	r0, #54826	; 0xd62a
 800424c:	f7fc fc44 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD62B, 0xF2);
 8004250:	21f2      	movs	r1, #242	; 0xf2
 8004252:	f24d 602b 	movw	r0, #54827	; 0xd62b
 8004256:	f7fc fc3f 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD62C, 0x02);
 800425a:	2102      	movs	r1, #2
 800425c:	f24d 602c 	movw	r0, #54828	; 0xd62c
 8004260:	f7fc fc3a 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD62D, 0xFE);
 8004264:	21fe      	movs	r1, #254	; 0xfe
 8004266:	f24d 602d 	movw	r0, #54829	; 0xd62d
 800426a:	f7fc fc35 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD62E, 0x03);
 800426e:	2103      	movs	r1, #3
 8004270:	f24d 602e 	movw	r0, #54830	; 0xd62e
 8004274:	f7fc fc30 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD62F, 0x10);
 8004278:	2110      	movs	r1, #16
 800427a:	f24d 602f 	movw	r0, #54831	; 0xd62f
 800427e:	f7fc fc2b 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD630, 0x03);
 8004282:	2103      	movs	r1, #3
 8004284:	f24d 6030 	movw	r0, #54832	; 0xd630
 8004288:	f7fc fc26 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD631, 0x33);
 800428c:	2133      	movs	r1, #51	; 0x33
 800428e:	f24d 6031 	movw	r0, #54833	; 0xd631
 8004292:	f7fc fc21 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD632, 0x03);
 8004296:	2103      	movs	r1, #3
 8004298:	f24d 6032 	movw	r0, #54834	; 0xd632
 800429c:	f7fc fc1c 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xD633, 0x6D);
 80042a0:	216d      	movs	r1, #109	; 0x6d
 80042a2:	f24d 6033 	movw	r0, #54835	; 0xd633
 80042a6:	f7fc fc17 	bl	8000ad8 <LCD_WriteReg>
		//LV2 Page 0 enable
		LCD_WriteReg(0xF000, 0x55);
 80042aa:	2155      	movs	r1, #85	; 0x55
 80042ac:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 80042b0:	f7fc fc12 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 80042b4:	21aa      	movs	r1, #170	; 0xaa
 80042b6:	f24f 0001 	movw	r0, #61441	; 0xf001
 80042ba:	f7fc fc0d 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 80042be:	2152      	movs	r1, #82	; 0x52
 80042c0:	f24f 0002 	movw	r0, #61442	; 0xf002
 80042c4:	f7fc fc08 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 80042c8:	2108      	movs	r1, #8
 80042ca:	f24f 0003 	movw	r0, #61443	; 0xf003
 80042ce:	f7fc fc03 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x00);
 80042d2:	2100      	movs	r1, #0
 80042d4:	f24f 0004 	movw	r0, #61444	; 0xf004
 80042d8:	f7fc fbfe 	bl	8000ad8 <LCD_WriteReg>
		//Display control
		LCD_WriteReg(0xB100, 0xCC);
 80042dc:	21cc      	movs	r1, #204	; 0xcc
 80042de:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 80042e2:	f7fc fbf9 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x00);
 80042e6:	2100      	movs	r1, #0
 80042e8:	f24b 1001 	movw	r0, #45313	; 0xb101
 80042ec:	f7fc fbf4 	bl	8000ad8 <LCD_WriteReg>
		//Source hold time
		LCD_WriteReg(0xB600, 0x05);
 80042f0:	2105      	movs	r1, #5
 80042f2:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 80042f6:	f7fc fbef 	bl	8000ad8 <LCD_WriteReg>
		//Gate EQ control
		LCD_WriteReg(0xB700, 0x70);
 80042fa:	2170      	movs	r1, #112	; 0x70
 80042fc:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8004300:	f7fc fbea 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x70);
 8004304:	2170      	movs	r1, #112	; 0x70
 8004306:	f24b 7001 	movw	r0, #46849	; 0xb701
 800430a:	f7fc fbe5 	bl	8000ad8 <LCD_WriteReg>
		//Source EQ control (Mode 2)
		LCD_WriteReg(0xB800, 0x01);
 800430e:	2101      	movs	r1, #1
 8004310:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8004314:	f7fc fbe0 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x03);
 8004318:	2103      	movs	r1, #3
 800431a:	f64b 0001 	movw	r0, #47105	; 0xb801
 800431e:	f7fc fbdb 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x03);
 8004322:	2103      	movs	r1, #3
 8004324:	f64b 0002 	movw	r0, #47106	; 0xb802
 8004328:	f7fc fbd6 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xB803, 0x03);
 800432c:	2103      	movs	r1, #3
 800432e:	f64b 0003 	movw	r0, #47107	; 0xb803
 8004332:	f7fc fbd1 	bl	8000ad8 <LCD_WriteReg>
		//Inversion mode (2-dot)
		LCD_WriteReg(0xBC00, 0x02);
 8004336:	2102      	movs	r1, #2
 8004338:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 800433c:	f7fc fbcc 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x00);
 8004340:	2100      	movs	r1, #0
 8004342:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8004346:	f7fc fbc7 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 800434a:	2100      	movs	r1, #0
 800434c:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8004350:	f7fc fbc2 	bl	8000ad8 <LCD_WriteReg>
		//Timing control 4H w/ 4-delay
		LCD_WriteReg(0xC900, 0xD0);
 8004354:	21d0      	movs	r1, #208	; 0xd0
 8004356:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 800435a:	f7fc fbbd 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xC901, 0x02);
 800435e:	2102      	movs	r1, #2
 8004360:	f64c 1001 	movw	r0, #51457	; 0xc901
 8004364:	f7fc fbb8 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xC902, 0x50);
 8004368:	2150      	movs	r1, #80	; 0x50
 800436a:	f64c 1002 	movw	r0, #51458	; 0xc902
 800436e:	f7fc fbb3 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xC903, 0x50);
 8004372:	2150      	movs	r1, #80	; 0x50
 8004374:	f64c 1003 	movw	r0, #51459	; 0xc903
 8004378:	f7fc fbae 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xC904, 0x50);
 800437c:	2150      	movs	r1, #80	; 0x50
 800437e:	f64c 1004 	movw	r0, #51460	; 0xc904
 8004382:	f7fc fba9 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x3500, 0x00);
 8004386:	2100      	movs	r1, #0
 8004388:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 800438c:	f7fc fba4 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x3A00, 0x55);  //16-bit/pixel
 8004390:	2155      	movs	r1, #85	; 0x55
 8004392:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 8004396:	f7fc fb9f 	bl	8000ad8 <LCD_WriteReg>
		LCD_WR_REG(0x1100);
 800439a:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 800439e:	f7fc fb0f 	bl	80009c0 <LCD_WR_REG>
//		delay_us(120); // us
		HAL_Delay(1);
 80043a2:	2001      	movs	r0, #1
 80043a4:	f003 fa30 	bl	8007808 <HAL_Delay>
		LCD_WR_REG(0x2900);
 80043a8:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 80043ac:	f7fc fb08 	bl	80009c0 <LCD_WR_REG>
 80043b0:	f001 bd18 	b.w	8005de4 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9325)  //9325
 80043b4:	4bec      	ldr	r3, [pc, #944]	; (8004768 <LCD_Init+0x27b8>)
 80043b6:	889b      	ldrh	r3, [r3, #4]
 80043b8:	f249 3225 	movw	r2, #37669	; 0x9325
 80043bc:	4293      	cmp	r3, r2
 80043be:	f040 80d7 	bne.w	8004570 <LCD_Init+0x25c0>
			{
		LCD_WriteReg(0x00E5, 0x78F0);
 80043c2:	f647 01f0 	movw	r1, #30960	; 0x78f0
 80043c6:	20e5      	movs	r0, #229	; 0xe5
 80043c8:	f7fc fb86 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100);
 80043cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80043d0:	2001      	movs	r0, #1
 80043d2:	f7fc fb81 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 80043d6:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80043da:	2002      	movs	r0, #2
 80043dc:	f7fc fb7c 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 80043e0:	f241 0130 	movw	r1, #4144	; 0x1030
 80043e4:	2003      	movs	r0, #3
 80043e6:	f7fc fb77 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 80043ea:	2100      	movs	r1, #0
 80043ec:	2004      	movs	r0, #4
 80043ee:	f7fc fb73 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 80043f2:	f240 2102 	movw	r1, #514	; 0x202
 80043f6:	2008      	movs	r0, #8
 80043f8:	f7fc fb6e 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 80043fc:	2100      	movs	r1, #0
 80043fe:	2009      	movs	r0, #9
 8004400:	f7fc fb6a 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000);
 8004404:	2100      	movs	r1, #0
 8004406:	200a      	movs	r0, #10
 8004408:	f7fc fb66 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 800440c:	2100      	movs	r1, #0
 800440e:	200c      	movs	r0, #12
 8004410:	f7fc fb62 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000);
 8004414:	2100      	movs	r1, #0
 8004416:	200d      	movs	r0, #13
 8004418:	f7fc fb5e 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 800441c:	2100      	movs	r1, #0
 800441e:	200f      	movs	r0, #15
 8004420:	f7fc fb5a 	bl	8000ad8 <LCD_WriteReg>
		//power on sequence VGHVGL
		LCD_WriteReg(0x0010, 0x0000);
 8004424:	2100      	movs	r1, #0
 8004426:	2010      	movs	r0, #16
 8004428:	f7fc fb56 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 800442c:	2107      	movs	r1, #7
 800442e:	2011      	movs	r0, #17
 8004430:	f7fc fb52 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 8004434:	2100      	movs	r1, #0
 8004436:	2012      	movs	r0, #18
 8004438:	f7fc fb4e 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 800443c:	2100      	movs	r1, #0
 800443e:	2013      	movs	r0, #19
 8004440:	f7fc fb4a 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0000);
 8004444:	2100      	movs	r1, #0
 8004446:	2007      	movs	r0, #7
 8004448:	f7fc fb46 	bl	8000ad8 <LCD_WriteReg>
		//vgh 
		LCD_WriteReg(0x0010, 0x1690);
 800444c:	f241 6190 	movw	r1, #5776	; 0x1690
 8004450:	2010      	movs	r0, #16
 8004452:	f7fc fb41 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 8004456:	f240 2127 	movw	r1, #551	; 0x227
 800445a:	2011      	movs	r0, #17
 800445c:	f7fc fb3c 	bl	8000ad8 <LCD_WriteReg>
		//delayms(100);
		//vregiout 
		LCD_WriteReg(0x0012, 0x009D); //0x001b
 8004460:	219d      	movs	r1, #157	; 0x9d
 8004462:	2012      	movs	r0, #18
 8004464:	f7fc fb38 	bl	8000ad8 <LCD_WriteReg>
		//delayms(100); 
		//vom amplitude
		LCD_WriteReg(0x0013, 0x1900);
 8004468:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 800446c:	2013      	movs	r0, #19
 800446e:	f7fc fb33 	bl	8000ad8 <LCD_WriteReg>
		//delayms(100); 
		//vom H
		LCD_WriteReg(0x0029, 0x0025);
 8004472:	2125      	movs	r1, #37	; 0x25
 8004474:	2029      	movs	r0, #41	; 0x29
 8004476:	f7fc fb2f 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000D);
 800447a:	210d      	movs	r1, #13
 800447c:	202b      	movs	r0, #43	; 0x2b
 800447e:	f7fc fb2b 	bl	8000ad8 <LCD_WriteReg>
		//gamma
		LCD_WriteReg(0x0030, 0x0007);
 8004482:	2107      	movs	r1, #7
 8004484:	2030      	movs	r0, #48	; 0x30
 8004486:	f7fc fb27 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0303);
 800448a:	f240 3103 	movw	r1, #771	; 0x303
 800448e:	2031      	movs	r0, #49	; 0x31
 8004490:	f7fc fb22 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0003);		// 0006
 8004494:	2103      	movs	r1, #3
 8004496:	2032      	movs	r0, #50	; 0x32
 8004498:	f7fc fb1e 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0206);
 800449c:	f240 2106 	movw	r1, #518	; 0x206
 80044a0:	2035      	movs	r0, #53	; 0x35
 80044a2:	f7fc fb19 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0008);
 80044a6:	2108      	movs	r1, #8
 80044a8:	2036      	movs	r0, #54	; 0x36
 80044aa:	f7fc fb15 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0406);
 80044ae:	f240 4106 	movw	r1, #1030	; 0x406
 80044b2:	2037      	movs	r0, #55	; 0x37
 80044b4:	f7fc fb10 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0304);		//0200
 80044b8:	f44f 7141 	mov.w	r1, #772	; 0x304
 80044bc:	2038      	movs	r0, #56	; 0x38
 80044be:	f7fc fb0b 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0007);
 80044c2:	2107      	movs	r1, #7
 80044c4:	2039      	movs	r0, #57	; 0x39
 80044c6:	f7fc fb07 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0602);		// 0504
 80044ca:	f240 6102 	movw	r1, #1538	; 0x602
 80044ce:	203c      	movs	r0, #60	; 0x3c
 80044d0:	f7fc fb02 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0008);
 80044d4:	2108      	movs	r1, #8
 80044d6:	203d      	movs	r0, #61	; 0x3d
 80044d8:	f7fc fafe 	bl	8000ad8 <LCD_WriteReg>
		//ram
		LCD_WriteReg(0x0050, 0x0000);
 80044dc:	2100      	movs	r1, #0
 80044de:	2050      	movs	r0, #80	; 0x50
 80044e0:	f7fc fafa 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 80044e4:	21ef      	movs	r1, #239	; 0xef
 80044e6:	2051      	movs	r0, #81	; 0x51
 80044e8:	f7fc faf6 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 80044ec:	2100      	movs	r1, #0
 80044ee:	2052      	movs	r0, #82	; 0x52
 80044f0:	f7fc faf2 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 80044f4:	f240 113f 	movw	r1, #319	; 0x13f
 80044f8:	2053      	movs	r0, #83	; 0x53
 80044fa:	f7fc faed 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0xA700);
 80044fe:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 8004502:	2060      	movs	r0, #96	; 0x60
 8004504:	f7fc fae8 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8004508:	2101      	movs	r1, #1
 800450a:	2061      	movs	r0, #97	; 0x61
 800450c:	f7fc fae4 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8004510:	2100      	movs	r1, #0
 8004512:	206a      	movs	r0, #106	; 0x6a
 8004514:	f7fc fae0 	bl	8000ad8 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0080, 0x0000);
 8004518:	2100      	movs	r1, #0
 800451a:	2080      	movs	r0, #128	; 0x80
 800451c:	f7fc fadc 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8004520:	2100      	movs	r1, #0
 8004522:	2081      	movs	r0, #129	; 0x81
 8004524:	f7fc fad8 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004528:	2100      	movs	r1, #0
 800452a:	2082      	movs	r0, #130	; 0x82
 800452c:	f7fc fad4 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004530:	2100      	movs	r1, #0
 8004532:	2083      	movs	r0, #131	; 0x83
 8004534:	f7fc fad0 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004538:	2100      	movs	r1, #0
 800453a:	2084      	movs	r0, #132	; 0x84
 800453c:	f7fc facc 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004540:	2100      	movs	r1, #0
 8004542:	2085      	movs	r0, #133	; 0x85
 8004544:	f7fc fac8 	bl	8000ad8 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0090, 0x0010);
 8004548:	2110      	movs	r1, #16
 800454a:	2090      	movs	r0, #144	; 0x90
 800454c:	f7fc fac4 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004550:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004554:	2092      	movs	r0, #146	; 0x92
 8004556:	f7fc fabf 	bl	8000ad8 <LCD_WriteReg>

		LCD_WriteReg(0x0007, 0x0133);
 800455a:	f240 1133 	movw	r1, #307	; 0x133
 800455e:	2007      	movs	r0, #7
 8004560:	f7fc faba 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x0022);		//
 8004564:	2122      	movs	r1, #34	; 0x22
 8004566:	2000      	movs	r0, #0
 8004568:	f7fc fab6 	bl	8000ad8 <LCD_WriteReg>
 800456c:	f001 bc3a 	b.w	8005de4 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9328)		//ILI9328   OK
 8004570:	4b7d      	ldr	r3, [pc, #500]	; (8004768 <LCD_Init+0x27b8>)
 8004572:	889b      	ldrh	r3, [r3, #4]
 8004574:	f249 3228 	movw	r2, #37672	; 0x9328
 8004578:	4293      	cmp	r3, r2
 800457a:	f040 80f7 	bne.w	800476c <LCD_Init+0x27bc>
			{
		LCD_WriteReg(0x00EC, 0x108F);		// internal timeing
 800457e:	f241 018f 	movw	r1, #4239	; 0x108f
 8004582:	20ec      	movs	r0, #236	; 0xec
 8004584:	f7fc faa8 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x00EF, 0x1234);		// ADD
 8004588:	f241 2134 	movw	r1, #4660	; 0x1234
 800458c:	20ef      	movs	r0, #239	; 0xef
 800458e:	f7fc faa3 	bl	8000ad8 <LCD_WriteReg>
		//LCD_WriteReg(0x00e7,0x0010);      
		//LCD_WriteReg(0x0000,0x0001);//开启内部时钟
		LCD_WriteReg(0x0001, 0x0100);
 8004592:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004596:	2001      	movs	r0, #1
 8004598:	f7fc fa9e 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);        //电源开启
 800459c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80045a0:	2002      	movs	r0, #2
 80045a2:	f7fc fa99 	bl	8000ad8 <LCD_WriteReg>
		// 1  1   0    D->U	L->R
		// 0  0   1	   R->L U->D
		// 1  0   1    U->D	R->L
		// 0  1   1    L->R U->D 正常就用这个.
		// 1  1   1	   U->D	L->R
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (0 << 3));		//65K
 80045a6:	f241 0130 	movw	r1, #4144	; 0x1030
 80045aa:	2003      	movs	r0, #3
 80045ac:	f7fc fa94 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 80045b0:	2100      	movs	r1, #0
 80045b2:	2004      	movs	r0, #4
 80045b4:	f7fc fa90 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 80045b8:	f240 2102 	movw	r1, #514	; 0x202
 80045bc:	2008      	movs	r0, #8
 80045be:	f7fc fa8b 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 80045c2:	2100      	movs	r1, #0
 80045c4:	2009      	movs	r0, #9
 80045c6:	f7fc fa87 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);		//display setting
 80045ca:	2100      	movs	r1, #0
 80045cc:	200a      	movs	r0, #10
 80045ce:	f7fc fa83 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0001);		//display setting
 80045d2:	2101      	movs	r1, #1
 80045d4:	200c      	movs	r0, #12
 80045d6:	f7fc fa7f 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);		//0f3c
 80045da:	2100      	movs	r1, #0
 80045dc:	200d      	movs	r0, #13
 80045de:	f7fc fa7b 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x000f, 0x0000);
 80045e2:	2100      	movs	r1, #0
 80045e4:	200f      	movs	r0, #15
 80045e6:	f7fc fa77 	bl	8000ad8 <LCD_WriteReg>
		//电源配置
		LCD_WriteReg(0x0010, 0x0000);
 80045ea:	2100      	movs	r1, #0
 80045ec:	2010      	movs	r0, #16
 80045ee:	f7fc fa73 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 80045f2:	2107      	movs	r1, #7
 80045f4:	2011      	movs	r0, #17
 80045f6:	f7fc fa6f 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 80045fa:	2100      	movs	r1, #0
 80045fc:	2012      	movs	r0, #18
 80045fe:	f7fc fa6b 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 8004602:	2100      	movs	r1, #0
 8004604:	2013      	movs	r0, #19
 8004606:	f7fc fa67 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0001);
 800460a:	2101      	movs	r1, #1
 800460c:	2007      	movs	r0, #7
 800460e:	f7fc fa63 	bl	8000ad8 <LCD_WriteReg>
		HAL_Delay(50);
 8004612:	2032      	movs	r0, #50	; 0x32
 8004614:	f003 f8f8 	bl	8007808 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1490);
 8004618:	f241 4190 	movw	r1, #5264	; 0x1490
 800461c:	2010      	movs	r0, #16
 800461e:	f7fc fa5b 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 8004622:	f240 2127 	movw	r1, #551	; 0x227
 8004626:	2011      	movs	r0, #17
 8004628:	f7fc fa56 	bl	8000ad8 <LCD_WriteReg>
		HAL_Delay(50);
 800462c:	2032      	movs	r0, #50	; 0x32
 800462e:	f003 f8eb 	bl	8007808 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x008A);
 8004632:	218a      	movs	r1, #138	; 0x8a
 8004634:	2012      	movs	r0, #18
 8004636:	f7fc fa4f 	bl	8000ad8 <LCD_WriteReg>
		HAL_Delay(50);
 800463a:	2032      	movs	r0, #50	; 0x32
 800463c:	f003 f8e4 	bl	8007808 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x1a00);
 8004640:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 8004644:	2013      	movs	r0, #19
 8004646:	f7fc fa47 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0006);
 800464a:	2106      	movs	r1, #6
 800464c:	2029      	movs	r0, #41	; 0x29
 800464e:	f7fc fa43 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x002b, 0x000d);
 8004652:	210d      	movs	r1, #13
 8004654:	202b      	movs	r0, #43	; 0x2b
 8004656:	f7fc fa3f 	bl	8000ad8 <LCD_WriteReg>
		HAL_Delay(50);
 800465a:	2032      	movs	r0, #50	; 0x32
 800465c:	f003 f8d4 	bl	8007808 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000);
 8004660:	2100      	movs	r1, #0
 8004662:	2020      	movs	r0, #32
 8004664:	f7fc fa38 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8004668:	2100      	movs	r1, #0
 800466a:	2021      	movs	r0, #33	; 0x21
 800466c:	f7fc fa34 	bl	8000ad8 <LCD_WriteReg>
		HAL_Delay(50);
 8004670:	2032      	movs	r0, #50	; 0x32
 8004672:	f003 f8c9 	bl	8007808 <HAL_Delay>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0000);
 8004676:	2100      	movs	r1, #0
 8004678:	2030      	movs	r0, #48	; 0x30
 800467a:	f7fc fa2d 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0604);
 800467e:	f240 6104 	movw	r1, #1540	; 0x604
 8004682:	2031      	movs	r0, #49	; 0x31
 8004684:	f7fc fa28 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0305);
 8004688:	f240 3105 	movw	r1, #773	; 0x305
 800468c:	2032      	movs	r0, #50	; 0x32
 800468e:	f7fc fa23 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0000);
 8004692:	2100      	movs	r1, #0
 8004694:	2035      	movs	r0, #53	; 0x35
 8004696:	f7fc fa1f 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0C09);
 800469a:	f640 4109 	movw	r1, #3081	; 0xc09
 800469e:	2036      	movs	r0, #54	; 0x36
 80046a0:	f7fc fa1a 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0204);
 80046a4:	f44f 7101 	mov.w	r1, #516	; 0x204
 80046a8:	2037      	movs	r0, #55	; 0x37
 80046aa:	f7fc fa15 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0301);
 80046ae:	f240 3101 	movw	r1, #769	; 0x301
 80046b2:	2038      	movs	r0, #56	; 0x38
 80046b4:	f7fc fa10 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 80046b8:	f240 7107 	movw	r1, #1799	; 0x707
 80046bc:	2039      	movs	r0, #57	; 0x39
 80046be:	f7fc fa0b 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x003c, 0x0000);
 80046c2:	2100      	movs	r1, #0
 80046c4:	203c      	movs	r0, #60	; 0x3c
 80046c6:	f7fc fa07 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x003d, 0x0a0a);
 80046ca:	f640 210a 	movw	r1, #2570	; 0xa0a
 80046ce:	203d      	movs	r0, #61	; 0x3d
 80046d0:	f7fc fa02 	bl	8000ad8 <LCD_WriteReg>
		HAL_Delay(50);
 80046d4:	2032      	movs	r0, #50	; 0x32
 80046d6:	f003 f897 	bl	8007808 <HAL_Delay>
		LCD_WriteReg(0x0050, 0x0000); //水平GRAM起始位置
 80046da:	2100      	movs	r1, #0
 80046dc:	2050      	movs	r0, #80	; 0x50
 80046de:	f7fc f9fb 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef); //水平GRAM终止位置
 80046e2:	21ef      	movs	r1, #239	; 0xef
 80046e4:	2051      	movs	r0, #81	; 0x51
 80046e6:	f7fc f9f7 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); //垂直GRAM起始位置
 80046ea:	2100      	movs	r1, #0
 80046ec:	2052      	movs	r0, #82	; 0x52
 80046ee:	f7fc f9f3 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f); //垂直GRAM终止位置
 80046f2:	f240 113f 	movw	r1, #319	; 0x13f
 80046f6:	2053      	movs	r0, #83	; 0x53
 80046f8:	f7fc f9ee 	bl	8000ad8 <LCD_WriteReg>

		LCD_WriteReg(0x0060, 0xa700);
 80046fc:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 8004700:	2060      	movs	r0, #96	; 0x60
 8004702:	f7fc f9e9 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8004706:	2101      	movs	r1, #1
 8004708:	2061      	movs	r0, #97	; 0x61
 800470a:	f7fc f9e5 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 800470e:	2100      	movs	r1, #0
 8004710:	206a      	movs	r0, #106	; 0x6a
 8004712:	f7fc f9e1 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 8004716:	2100      	movs	r1, #0
 8004718:	2080      	movs	r0, #128	; 0x80
 800471a:	f7fc f9dd 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 800471e:	2100      	movs	r1, #0
 8004720:	2081      	movs	r0, #129	; 0x81
 8004722:	f7fc f9d9 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004726:	2100      	movs	r1, #0
 8004728:	2082      	movs	r0, #130	; 0x82
 800472a:	f7fc f9d5 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 800472e:	2100      	movs	r1, #0
 8004730:	2083      	movs	r0, #131	; 0x83
 8004732:	f7fc f9d1 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004736:	2100      	movs	r1, #0
 8004738:	2084      	movs	r0, #132	; 0x84
 800473a:	f7fc f9cd 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 800473e:	2100      	movs	r1, #0
 8004740:	2085      	movs	r0, #133	; 0x85
 8004742:	f7fc f9c9 	bl	8000ad8 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0010);
 8004746:	2110      	movs	r1, #16
 8004748:	2090      	movs	r0, #144	; 0x90
 800474a:	f7fc f9c5 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 800474e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004752:	2092      	movs	r0, #146	; 0x92
 8004754:	f7fc f9c0 	bl	8000ad8 <LCD_WriteReg>
		//开启显示设置
		LCD_WriteReg(0x0007, 0x0133);
 8004758:	f240 1133 	movw	r1, #307	; 0x133
 800475c:	2007      	movs	r0, #7
 800475e:	f7fc f9bb 	bl	8000ad8 <LCD_WriteReg>
 8004762:	f001 bb3f 	b.w	8005de4 <LCD_Init+0x3e34>
 8004766:	bf00      	nop
 8004768:	200000f4 	.word	0x200000f4
	} else if (lcddev.id == 0x9320) //测试OK.
 800476c:	4bce      	ldr	r3, [pc, #824]	; (8004aa8 <LCD_Init+0x2af8>)
 800476e:	889b      	ldrh	r3, [r3, #4]
 8004770:	f249 3220 	movw	r2, #37664	; 0x9320
 8004774:	4293      	cmp	r3, r2
 8004776:	f040 80ad 	bne.w	80048d4 <LCD_Init+0x2924>
			{
		LCD_WriteReg(0x00, 0x0000);
 800477a:	2100      	movs	r1, #0
 800477c:	2000      	movs	r0, #0
 800477e:	f7fc f9ab 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x01, 0x0100);	//Driver Output Contral.
 8004782:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004786:	2001      	movs	r0, #1
 8004788:	f7fc f9a6 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700);	//LCD Driver Waveform Contral.
 800478c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004790:	2002      	movs	r0, #2
 8004792:	f7fc f9a1 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030);	//Entry Mode Set.
 8004796:	f241 0130 	movw	r1, #4144	; 0x1030
 800479a:	2003      	movs	r0, #3
 800479c:	f7fc f99c 	bl	8000ad8 <LCD_WriteReg>
		//LCD_WriteReg(0x03,0x1018);	//Entry Mode Set.

		LCD_WriteReg(0x04, 0x0000);	//Scalling Contral.
 80047a0:	2100      	movs	r1, #0
 80047a2:	2004      	movs	r0, #4
 80047a4:	f7fc f998 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0202);	//Display Contral 2.(0x0207)
 80047a8:	f240 2102 	movw	r1, #514	; 0x202
 80047ac:	2008      	movs	r0, #8
 80047ae:	f7fc f993 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000);	//Display Contral 3.(0x0000)
 80047b2:	2100      	movs	r1, #0
 80047b4:	2009      	movs	r0, #9
 80047b6:	f7fc f98f 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0a, 0x0000);	//Frame Cycle Contal.(0x0000)
 80047ba:	2100      	movs	r1, #0
 80047bc:	200a      	movs	r0, #10
 80047be:	f7fc f98b 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0c, (1 << 0));	//Extern Display Interface Contral 1.(0x0000)
 80047c2:	2101      	movs	r1, #1
 80047c4:	200c      	movs	r0, #12
 80047c6:	f7fc f987 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0d, 0x0000);	//Frame Maker Position.
 80047ca:	2100      	movs	r1, #0
 80047cc:	200d      	movs	r0, #13
 80047ce:	f7fc f983 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0f, 0x0000);	//Extern Display Interface Contral 2.
 80047d2:	2100      	movs	r1, #0
 80047d4:	200f      	movs	r0, #15
 80047d6:	f7fc f97f 	bl	8000ad8 <LCD_WriteReg>
		HAL_Delay(50);
 80047da:	2032      	movs	r0, #50	; 0x32
 80047dc:	f003 f814 	bl	8007808 <HAL_Delay>
		LCD_WriteReg(0x07, 0x0101);	//Display Contral.
 80047e0:	f240 1101 	movw	r1, #257	; 0x101
 80047e4:	2007      	movs	r0, #7
 80047e6:	f7fc f977 	bl	8000ad8 <LCD_WriteReg>
		HAL_Delay(50);
 80047ea:	2032      	movs	r0, #50	; 0x32
 80047ec:	f003 f80c 	bl	8007808 <HAL_Delay>
		LCD_WriteReg(0x10, (1 << 12) | (0 << 8) | (1 << 7) | (1 << 6) | (0 << 4));//Power Control 1.(0x16b0)
 80047f0:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 80047f4:	2010      	movs	r0, #16
 80047f6:	f7fc f96f 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0007);								//Power Control 2.(0x0001)
 80047fa:	2107      	movs	r1, #7
 80047fc:	2011      	movs	r0, #17
 80047fe:	f7fc f96b 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x12, (1 << 8) | (1 << 4) | (0 << 0));	//Power Control 3.(0x0138)
 8004802:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004806:	2012      	movs	r0, #18
 8004808:	f7fc f966 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0b00);								//Power Control 4.
 800480c:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 8004810:	2013      	movs	r0, #19
 8004812:	f7fc f961 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0000);								//Power Control 7.
 8004816:	2100      	movs	r1, #0
 8004818:	2029      	movs	r0, #41	; 0x29
 800481a:	f7fc f95d 	bl	8000ad8 <LCD_WriteReg>

		LCD_WriteReg(0x2b, (1 << 14) | (1 << 4));
 800481e:	f244 0110 	movw	r1, #16400	; 0x4010
 8004822:	202b      	movs	r0, #43	; 0x2b
 8004824:	f7fc f958 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x50, 0);	//Set X Star
 8004828:	2100      	movs	r1, #0
 800482a:	2050      	movs	r0, #80	; 0x50
 800482c:	f7fc f954 	bl	8000ad8 <LCD_WriteReg>
		//水平GRAM终止位置Set X End.
		LCD_WriteReg(0x51, 239);	//Set Y Star
 8004830:	21ef      	movs	r1, #239	; 0xef
 8004832:	2051      	movs	r0, #81	; 0x51
 8004834:	f7fc f950 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x52, 0);	//Set Y End.t.
 8004838:	2100      	movs	r1, #0
 800483a:	2052      	movs	r0, #82	; 0x52
 800483c:	f7fc f94c 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x53, 319);	//
 8004840:	f240 113f 	movw	r1, #319	; 0x13f
 8004844:	2053      	movs	r0, #83	; 0x53
 8004846:	f7fc f947 	bl	8000ad8 <LCD_WriteReg>

		LCD_WriteReg(0x60, 0x2700);	//Driver Output Control.
 800484a:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 800484e:	2060      	movs	r0, #96	; 0x60
 8004850:	f7fc f942 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x61, 0x0001);	//Driver Output Control.
 8004854:	2101      	movs	r1, #1
 8004856:	2061      	movs	r0, #97	; 0x61
 8004858:	f7fc f93e 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x6a, 0x0000);	//Vertical Srcoll Control.
 800485c:	2100      	movs	r1, #0
 800485e:	206a      	movs	r0, #106	; 0x6a
 8004860:	f7fc f93a 	bl	8000ad8 <LCD_WriteReg>

		LCD_WriteReg(0x80, 0x0000);	//Display Position? Partial Display 1.
 8004864:	2100      	movs	r1, #0
 8004866:	2080      	movs	r0, #128	; 0x80
 8004868:	f7fc f936 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000);	//RAM Address Start? Partial Display 1.
 800486c:	2100      	movs	r1, #0
 800486e:	2081      	movs	r0, #129	; 0x81
 8004870:	f7fc f932 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000);	//RAM Address End-Partial Display 1.
 8004874:	2100      	movs	r1, #0
 8004876:	2082      	movs	r0, #130	; 0x82
 8004878:	f7fc f92e 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000);	//Displsy Position? Partial Display 2.
 800487c:	2100      	movs	r1, #0
 800487e:	2083      	movs	r0, #131	; 0x83
 8004880:	f7fc f92a 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000);	//RAM Address Start? Partial Display 2.
 8004884:	2100      	movs	r1, #0
 8004886:	2084      	movs	r0, #132	; 0x84
 8004888:	f7fc f926 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000);	//RAM Address End? Partial Display 2.
 800488c:	2100      	movs	r1, #0
 800488e:	2085      	movs	r0, #133	; 0x85
 8004890:	f7fc f922 	bl	8000ad8 <LCD_WriteReg>

		LCD_WriteReg(0x90, (0 << 7) | (16 << 0));	//Frame Cycle Contral.(0x0013)
 8004894:	2110      	movs	r1, #16
 8004896:	2090      	movs	r0, #144	; 0x90
 8004898:	f7fc f91e 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);	//Panel Interface Contral 2.(0x0000)
 800489c:	2100      	movs	r1, #0
 800489e:	2092      	movs	r0, #146	; 0x92
 80048a0:	f7fc f91a 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0001);	//Panel Interface Contral 3.
 80048a4:	2101      	movs	r1, #1
 80048a6:	2093      	movs	r0, #147	; 0x93
 80048a8:	f7fc f916 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);	//Frame Cycle Contral.(0x0110)
 80048ac:	f44f 7188 	mov.w	r1, #272	; 0x110
 80048b0:	2095      	movs	r0, #149	; 0x95
 80048b2:	f7fc f911 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x97, (0 << 8));	//
 80048b6:	2100      	movs	r1, #0
 80048b8:	2097      	movs	r0, #151	; 0x97
 80048ba:	f7fc f90d 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x98, 0x0000);	//Frame Cycle Contral.
 80048be:	2100      	movs	r1, #0
 80048c0:	2098      	movs	r0, #152	; 0x98
 80048c2:	f7fc f909 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);	//(0x0173)
 80048c6:	f240 1173 	movw	r1, #371	; 0x173
 80048ca:	2007      	movs	r0, #7
 80048cc:	f7fc f904 	bl	8000ad8 <LCD_WriteReg>
 80048d0:	f001 ba88 	b.w	8005de4 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0X9331)	//OK |/|/|
 80048d4:	4b74      	ldr	r3, [pc, #464]	; (8004aa8 <LCD_Init+0x2af8>)
 80048d6:	889b      	ldrh	r3, [r3, #4]
 80048d8:	f249 3231 	movw	r2, #37681	; 0x9331
 80048dc:	4293      	cmp	r3, r2
 80048de:	f040 80e5 	bne.w	8004aac <LCD_Init+0x2afc>
			{
		LCD_WriteReg(0x00E7, 0x1014);
 80048e2:	f241 0114 	movw	r1, #4116	; 0x1014
 80048e6:	20e7      	movs	r0, #231	; 0xe7
 80048e8:	f7fc f8f6 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100); // set SS and SM bit
 80048ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80048f0:	2001      	movs	r0, #1
 80048f2:	f7fc f8f1 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200); // set 1 line inversion
 80048f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80048fa:	2002      	movs	r0, #2
 80048fc:	f7fc f8ec 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (1 << 3)); //65K
 8004900:	f241 0138 	movw	r1, #4152	; 0x1038
 8004904:	2003      	movs	r0, #3
 8004906:	f7fc f8e7 	bl	8000ad8 <LCD_WriteReg>
		//LCD_WriteReg(0x0003, 0x1030); // set GRAM write direction and BGR=1.
		LCD_WriteReg(0x0008, 0x0202); // set the back porch and front porch
 800490a:	f240 2102 	movw	r1, #514	; 0x202
 800490e:	2008      	movs	r0, #8
 8004910:	f7fc f8e2 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000); // set non-display area refresh cycle ISC[3:0]
 8004914:	2100      	movs	r1, #0
 8004916:	2009      	movs	r0, #9
 8004918:	f7fc f8de 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000); // FMARK function
 800491c:	2100      	movs	r1, #0
 800491e:	200a      	movs	r0, #10
 8004920:	f7fc f8da 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000); // RGB interface setting
 8004924:	2100      	movs	r1, #0
 8004926:	200c      	movs	r0, #12
 8004928:	f7fc f8d6 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000); // Frame marker Position
 800492c:	2100      	movs	r1, #0
 800492e:	200d      	movs	r0, #13
 8004930:	f7fc f8d2 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); // RGB interface polarity
 8004934:	2100      	movs	r1, #0
 8004936:	200f      	movs	r0, #15
 8004938:	f7fc f8ce 	bl	8000ad8 <LCD_WriteReg>
		//*************Power On sequence ****************//
		LCD_WriteReg(0x0010, 0x0000); // SAP, BT[3:0], AP, DSTB, SLP, STB
 800493c:	2100      	movs	r1, #0
 800493e:	2010      	movs	r0, #16
 8004940:	f7fc f8ca 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007); // DC1[2:0], DC0[2:0], VC[2:0]
 8004944:	2107      	movs	r1, #7
 8004946:	2011      	movs	r0, #17
 8004948:	f7fc f8c6 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000); // VREG1OUT voltage
 800494c:	2100      	movs	r1, #0
 800494e:	2012      	movs	r0, #18
 8004950:	f7fc f8c2 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000); // VDV[4:0] for VCOM amplitude
 8004954:	2100      	movs	r1, #0
 8004956:	2013      	movs	r0, #19
 8004958:	f7fc f8be 	bl	8000ad8 <LCD_WriteReg>
		HAL_Delay(200); // Dis-charge capacitor power voltage
 800495c:	20c8      	movs	r0, #200	; 0xc8
 800495e:	f002 ff53 	bl	8007808 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1690); // SAP, BT[3:0], AP, DSTB, SLP, STB
 8004962:	f241 6190 	movw	r1, #5776	; 0x1690
 8004966:	2010      	movs	r0, #16
 8004968:	f7fc f8b6 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227); // DC1[2:0], DC0[2:0], VC[2:0]
 800496c:	f240 2127 	movw	r1, #551	; 0x227
 8004970:	2011      	movs	r0, #17
 8004972:	f7fc f8b1 	bl	8000ad8 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8004976:	2032      	movs	r0, #50	; 0x32
 8004978:	f002 ff46 	bl	8007808 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x000C); // Internal reference voltage= Vci;
 800497c:	210c      	movs	r1, #12
 800497e:	2012      	movs	r0, #18
 8004980:	f7fc f8aa 	bl	8000ad8 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8004984:	2032      	movs	r0, #50	; 0x32
 8004986:	f002 ff3f 	bl	8007808 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x0800); // Set VDV[4:0] for VCOM amplitude
 800498a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800498e:	2013      	movs	r0, #19
 8004990:	f7fc f8a2 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0011); // Set VCM[5:0] for VCOMH
 8004994:	2111      	movs	r1, #17
 8004996:	2029      	movs	r0, #41	; 0x29
 8004998:	f7fc f89e 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000B); // Set Frame Rate
 800499c:	210b      	movs	r1, #11
 800499e:	202b      	movs	r0, #43	; 0x2b
 80049a0:	f7fc f89a 	bl	8000ad8 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 80049a4:	2032      	movs	r0, #50	; 0x32
 80049a6:	f002 ff2f 	bl	8007808 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000); // GRAM horizontal Address
 80049aa:	2100      	movs	r1, #0
 80049ac:	2020      	movs	r0, #32
 80049ae:	f7fc f893 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x013f); // GRAM Vertical Address
 80049b2:	f240 113f 	movw	r1, #319	; 0x13f
 80049b6:	2021      	movs	r0, #33	; 0x21
 80049b8:	f7fc f88e 	bl	8000ad8 <LCD_WriteReg>
		// ----------- Adjust the Gamma Curve ----------//
		LCD_WriteReg(0x0030, 0x0000);
 80049bc:	2100      	movs	r1, #0
 80049be:	2030      	movs	r0, #48	; 0x30
 80049c0:	f7fc f88a 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0106);
 80049c4:	f44f 7183 	mov.w	r1, #262	; 0x106
 80049c8:	2031      	movs	r0, #49	; 0x31
 80049ca:	f7fc f885 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0000);
 80049ce:	2100      	movs	r1, #0
 80049d0:	2032      	movs	r0, #50	; 0x32
 80049d2:	f7fc f881 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 80049d6:	f44f 7101 	mov.w	r1, #516	; 0x204
 80049da:	2035      	movs	r0, #53	; 0x35
 80049dc:	f7fc f87c 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x160A);
 80049e0:	f241 610a 	movw	r1, #5642	; 0x160a
 80049e4:	2036      	movs	r0, #54	; 0x36
 80049e6:	f7fc f877 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707);
 80049ea:	f240 7107 	movw	r1, #1799	; 0x707
 80049ee:	2037      	movs	r0, #55	; 0x37
 80049f0:	f7fc f872 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0106);
 80049f4:	f44f 7183 	mov.w	r1, #262	; 0x106
 80049f8:	2038      	movs	r0, #56	; 0x38
 80049fa:	f7fc f86d 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 80049fe:	f240 7107 	movw	r1, #1799	; 0x707
 8004a02:	2039      	movs	r0, #57	; 0x39
 8004a04:	f7fc f868 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0402);
 8004a08:	f240 4102 	movw	r1, #1026	; 0x402
 8004a0c:	203c      	movs	r0, #60	; 0x3c
 8004a0e:	f7fc f863 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0C0F);
 8004a12:	f640 410f 	movw	r1, #3087	; 0xc0f
 8004a16:	203d      	movs	r0, #61	; 0x3d
 8004a18:	f7fc f85e 	bl	8000ad8 <LCD_WriteReg>
		//------------------ Set GRAM area ---------------//
		LCD_WriteReg(0x0050, 0x0000); // Horizontal GRAM Start Address
 8004a1c:	2100      	movs	r1, #0
 8004a1e:	2050      	movs	r0, #80	; 0x50
 8004a20:	f7fc f85a 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF); // Horizontal GRAM End Address
 8004a24:	21ef      	movs	r1, #239	; 0xef
 8004a26:	2051      	movs	r0, #81	; 0x51
 8004a28:	f7fc f856 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); // Vertical GRAM Start Address
 8004a2c:	2100      	movs	r1, #0
 8004a2e:	2052      	movs	r0, #82	; 0x52
 8004a30:	f7fc f852 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F); // Vertical GRAM Start Address
 8004a34:	f240 113f 	movw	r1, #319	; 0x13f
 8004a38:	2053      	movs	r0, #83	; 0x53
 8004a3a:	f7fc f84d 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700); // Gate Scan Line
 8004a3e:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004a42:	2060      	movs	r0, #96	; 0x60
 8004a44:	f7fc f848 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001); // NDL,VLE, REV 
 8004a48:	2101      	movs	r1, #1
 8004a4a:	2061      	movs	r0, #97	; 0x61
 8004a4c:	f7fc f844 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000); // set scrolling line
 8004a50:	2100      	movs	r1, #0
 8004a52:	206a      	movs	r0, #106	; 0x6a
 8004a54:	f7fc f840 	bl	8000ad8 <LCD_WriteReg>
		//-------------- Partial Display Control ---------//
		LCD_WriteReg(0x0080, 0x0000);
 8004a58:	2100      	movs	r1, #0
 8004a5a:	2080      	movs	r0, #128	; 0x80
 8004a5c:	f7fc f83c 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8004a60:	2100      	movs	r1, #0
 8004a62:	2081      	movs	r0, #129	; 0x81
 8004a64:	f7fc f838 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004a68:	2100      	movs	r1, #0
 8004a6a:	2082      	movs	r0, #130	; 0x82
 8004a6c:	f7fc f834 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004a70:	2100      	movs	r1, #0
 8004a72:	2083      	movs	r0, #131	; 0x83
 8004a74:	f7fc f830 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004a78:	2100      	movs	r1, #0
 8004a7a:	2084      	movs	r0, #132	; 0x84
 8004a7c:	f7fc f82c 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004a80:	2100      	movs	r1, #0
 8004a82:	2085      	movs	r0, #133	; 0x85
 8004a84:	f7fc f828 	bl	8000ad8 <LCD_WriteReg>
		//-------------- Panel Control -------------------//
		LCD_WriteReg(0x0090, 0x0010);
 8004a88:	2110      	movs	r1, #16
 8004a8a:	2090      	movs	r0, #144	; 0x90
 8004a8c:	f7fc f824 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004a90:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004a94:	2092      	movs	r0, #146	; 0x92
 8004a96:	f7fc f81f 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0133); // 262K color and display ON
 8004a9a:	f240 1133 	movw	r1, #307	; 0x133
 8004a9e:	2007      	movs	r0, #7
 8004aa0:	f7fc f81a 	bl	8000ad8 <LCD_WriteReg>
 8004aa4:	f001 b99e 	b.w	8005de4 <LCD_Init+0x3e34>
 8004aa8:	200000f4 	.word	0x200000f4
	} else if (lcddev.id == 0x5408) {
 8004aac:	4be2      	ldr	r3, [pc, #904]	; (8004e38 <LCD_Init+0x2e88>)
 8004aae:	889b      	ldrh	r3, [r3, #4]
 8004ab0:	f245 4208 	movw	r2, #21512	; 0x5408
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	f040 80a3 	bne.w	8004c00 <LCD_Init+0x2c50>
		LCD_WriteReg(0x01, 0x0100);
 8004aba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004abe:	2001      	movs	r0, #1
 8004ac0:	f7fc f80a 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700); //LCD Driving Waveform Contral
 8004ac4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004ac8:	2002      	movs	r0, #2
 8004aca:	f7fc f805 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030); //Entry Mode设置
 8004ace:	f241 0130 	movw	r1, #4144	; 0x1030
 8004ad2:	2003      	movs	r0, #3
 8004ad4:	f7fc f800 	bl	8000ad8 <LCD_WriteReg>
		//指针从左至右自上而下的自动增模式
		//Normal Mode(Window Mode disable)
		//RGB格式
		//16位数据2次传输的8总线设置
		LCD_WriteReg(0x04, 0x0000); //Scalling Control register
 8004ad8:	2100      	movs	r1, #0
 8004ada:	2004      	movs	r0, #4
 8004adc:	f7fb fffc 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0207); //Display Control 2
 8004ae0:	f240 2107 	movw	r1, #519	; 0x207
 8004ae4:	2008      	movs	r0, #8
 8004ae6:	f7fb fff7 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000); //Display Control 3
 8004aea:	2100      	movs	r1, #0
 8004aec:	2009      	movs	r0, #9
 8004aee:	f7fb fff3 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0A, 0x0000); //Frame Cycle Control
 8004af2:	2100      	movs	r1, #0
 8004af4:	200a      	movs	r0, #10
 8004af6:	f7fb ffef 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0C, 0x0000); //External Display Interface Control 1
 8004afa:	2100      	movs	r1, #0
 8004afc:	200c      	movs	r0, #12
 8004afe:	f7fb ffeb 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0D, 0x0000); //Frame Maker Position
 8004b02:	2100      	movs	r1, #0
 8004b04:	200d      	movs	r0, #13
 8004b06:	f7fb ffe7 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0F, 0x0000); //External Display Interface Control 2
 8004b0a:	2100      	movs	r1, #0
 8004b0c:	200f      	movs	r0, #15
 8004b0e:	f7fb ffe3 	bl	8000ad8 <LCD_WriteReg>
		HAL_Delay(20);
 8004b12:	2014      	movs	r0, #20
 8004b14:	f002 fe78 	bl	8007808 <HAL_Delay>
		//TFT 液晶彩色图像显示方法14
		LCD_WriteReg(0x10, 0x16B0); //0x14B0 //Power Control 1
 8004b18:	f241 61b0 	movw	r1, #5808	; 0x16b0
 8004b1c:	2010      	movs	r0, #16
 8004b1e:	f7fb ffdb 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0001); //0x0007 //Power Control 2
 8004b22:	2101      	movs	r1, #1
 8004b24:	2011      	movs	r0, #17
 8004b26:	f7fb ffd7 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x17, 0x0001); //0x0000 //Power Control 3
 8004b2a:	2101      	movs	r1, #1
 8004b2c:	2017      	movs	r0, #23
 8004b2e:	f7fb ffd3 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x12, 0x0138); //0x013B //Power Control 4
 8004b32:	f44f 719c 	mov.w	r1, #312	; 0x138
 8004b36:	2012      	movs	r0, #18
 8004b38:	f7fb ffce 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0800); //0x0800 //Power Control 5
 8004b3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004b40:	2013      	movs	r0, #19
 8004b42:	f7fb ffc9 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0009); //NVM read data 2
 8004b46:	2109      	movs	r1, #9
 8004b48:	2029      	movs	r0, #41	; 0x29
 8004b4a:	f7fb ffc5 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x2a, 0x0009); //NVM read data 3
 8004b4e:	2109      	movs	r1, #9
 8004b50:	202a      	movs	r0, #42	; 0x2a
 8004b52:	f7fb ffc1 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0xa4, 0x0000);
 8004b56:	2100      	movs	r1, #0
 8004b58:	20a4      	movs	r0, #164	; 0xa4
 8004b5a:	f7fb ffbd 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x50, 0x0000); //设置操作窗口的X轴开始列
 8004b5e:	2100      	movs	r1, #0
 8004b60:	2050      	movs	r0, #80	; 0x50
 8004b62:	f7fb ffb9 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x51, 0x00EF); //设置操作窗口的X轴结束列
 8004b66:	21ef      	movs	r1, #239	; 0xef
 8004b68:	2051      	movs	r0, #81	; 0x51
 8004b6a:	f7fb ffb5 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x52, 0x0000); //设置操作窗口的Y轴开始行
 8004b6e:	2100      	movs	r1, #0
 8004b70:	2052      	movs	r0, #82	; 0x52
 8004b72:	f7fb ffb1 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x53, 0x013F); //设置操作窗口的Y轴结束行
 8004b76:	f240 113f 	movw	r1, #319	; 0x13f
 8004b7a:	2053      	movs	r0, #83	; 0x53
 8004b7c:	f7fb ffac 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x60, 0x2700); //Driver Output Control
 8004b80:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004b84:	2060      	movs	r0, #96	; 0x60
 8004b86:	f7fb ffa7 	bl	8000ad8 <LCD_WriteReg>
		//设置屏幕的点数以及扫描的起始行
		LCD_WriteReg(0x61, 0x0001); //Driver Output Control
 8004b8a:	2101      	movs	r1, #1
 8004b8c:	2061      	movs	r0, #97	; 0x61
 8004b8e:	f7fb ffa3 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x6A, 0x0000); //Vertical Scroll Control
 8004b92:	2100      	movs	r1, #0
 8004b94:	206a      	movs	r0, #106	; 0x6a
 8004b96:	f7fb ff9f 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x80, 0x0000); //Display Position – Partial Display 1
 8004b9a:	2100      	movs	r1, #0
 8004b9c:	2080      	movs	r0, #128	; 0x80
 8004b9e:	f7fb ff9b 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000); //RAM Address Start – Partial Display 1
 8004ba2:	2100      	movs	r1, #0
 8004ba4:	2081      	movs	r0, #129	; 0x81
 8004ba6:	f7fb ff97 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000); //RAM address End - Partial Display 1
 8004baa:	2100      	movs	r1, #0
 8004bac:	2082      	movs	r0, #130	; 0x82
 8004bae:	f7fb ff93 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000); //Display Position – Partial Display 2
 8004bb2:	2100      	movs	r1, #0
 8004bb4:	2083      	movs	r0, #131	; 0x83
 8004bb6:	f7fb ff8f 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000); //RAM Address Start – Partial Display 2
 8004bba:	2100      	movs	r1, #0
 8004bbc:	2084      	movs	r0, #132	; 0x84
 8004bbe:	f7fb ff8b 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000); //RAM address End – Partail Display2
 8004bc2:	2100      	movs	r1, #0
 8004bc4:	2085      	movs	r0, #133	; 0x85
 8004bc6:	f7fb ff87 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x90, 0x0013); //Frame Cycle Control
 8004bca:	2113      	movs	r1, #19
 8004bcc:	2090      	movs	r0, #144	; 0x90
 8004bce:	f7fb ff83 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);  //Panel Interface Control 2
 8004bd2:	2100      	movs	r1, #0
 8004bd4:	2092      	movs	r0, #146	; 0x92
 8004bd6:	f7fb ff7f 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0003); //Panel Interface control 3
 8004bda:	2103      	movs	r1, #3
 8004bdc:	2093      	movs	r0, #147	; 0x93
 8004bde:	f7fb ff7b 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);  //Frame Cycle Control
 8004be2:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004be6:	2095      	movs	r0, #149	; 0x95
 8004be8:	f7fb ff76 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);
 8004bec:	f240 1173 	movw	r1, #371	; 0x173
 8004bf0:	2007      	movs	r0, #7
 8004bf2:	f7fb ff71 	bl	8000ad8 <LCD_WriteReg>
		HAL_Delay(50);
 8004bf6:	2032      	movs	r0, #50	; 0x32
 8004bf8:	f002 fe06 	bl	8007808 <HAL_Delay>
 8004bfc:	f001 b8f2 	b.w	8005de4 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x1505)  //OK
 8004c00:	4b8d      	ldr	r3, [pc, #564]	; (8004e38 <LCD_Init+0x2e88>)
 8004c02:	889b      	ldrh	r3, [r3, #4]
 8004c04:	f241 5205 	movw	r2, #5381	; 0x1505
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	f040 8117 	bne.w	8004e3c <LCD_Init+0x2e8c>
			{
		// second release on 3/5  ,luminance is acceptable,water wave appear during camera preview
		LCD_WriteReg(0x0007, 0x0000);
 8004c0e:	2100      	movs	r1, #0
 8004c10:	2007      	movs	r0, #7
 8004c12:	f7fb ff61 	bl	8000ad8 <LCD_WriteReg>
		HAL_Delay(50);
 8004c16:	2032      	movs	r0, #50	; 0x32
 8004c18:	f002 fdf6 	bl	8007808 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x011C);  //0x011A   why need to set several times?
 8004c1c:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8004c20:	2012      	movs	r0, #18
 8004c22:	f7fb ff59 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x00A4, 0x0001);  //NVM
 8004c26:	2101      	movs	r1, #1
 8004c28:	20a4      	movs	r0, #164	; 0xa4
 8004c2a:	f7fb ff55 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x000F);
 8004c2e:	210f      	movs	r1, #15
 8004c30:	2008      	movs	r0, #8
 8004c32:	f7fb ff51 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0008);
 8004c36:	2108      	movs	r1, #8
 8004c38:	200a      	movs	r0, #10
 8004c3a:	f7fb ff4d 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0008);
 8004c3e:	2108      	movs	r1, #8
 8004c40:	200d      	movs	r0, #13
 8004c42:	f7fb ff49 	bl	8000ad8 <LCD_WriteReg>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0707);
 8004c46:	f240 7107 	movw	r1, #1799	; 0x707
 8004c4a:	2030      	movs	r0, #48	; 0x30
 8004c4c:	f7fb ff44 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0007); //0x0707
 8004c50:	2107      	movs	r1, #7
 8004c52:	2031      	movs	r0, #49	; 0x31
 8004c54:	f7fb ff40 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0603);
 8004c58:	f240 6103 	movw	r1, #1539	; 0x603
 8004c5c:	2032      	movs	r0, #50	; 0x32
 8004c5e:	f7fb ff3b 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0700);
 8004c62:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004c66:	2033      	movs	r0, #51	; 0x33
 8004c68:	f7fb ff36 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0202);
 8004c6c:	f240 2102 	movw	r1, #514	; 0x202
 8004c70:	2034      	movs	r0, #52	; 0x34
 8004c72:	f7fb ff31 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0002); //?0x0606
 8004c76:	2102      	movs	r1, #2
 8004c78:	2035      	movs	r0, #53	; 0x35
 8004c7a:	f7fb ff2d 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x1F0F);
 8004c7e:	f641 710f 	movw	r1, #7951	; 0x1f0f
 8004c82:	2036      	movs	r0, #54	; 0x36
 8004c84:	f7fb ff28 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707); //0x0f0f  0x0105
 8004c88:	f240 7107 	movw	r1, #1799	; 0x707
 8004c8c:	2037      	movs	r0, #55	; 0x37
 8004c8e:	f7fb ff23 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0000);
 8004c92:	2100      	movs	r1, #0
 8004c94:	2038      	movs	r0, #56	; 0x38
 8004c96:	f7fb ff1f 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0000);
 8004c9a:	2100      	movs	r1, #0
 8004c9c:	2039      	movs	r0, #57	; 0x39
 8004c9e:	f7fb ff1b 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0707);
 8004ca2:	f240 7107 	movw	r1, #1799	; 0x707
 8004ca6:	203a      	movs	r0, #58	; 0x3a
 8004ca8:	f7fb ff16 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0000); //0x0303
 8004cac:	2100      	movs	r1, #0
 8004cae:	203b      	movs	r0, #59	; 0x3b
 8004cb0:	f7fb ff12 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0007); //?0x0707
 8004cb4:	2107      	movs	r1, #7
 8004cb6:	203c      	movs	r0, #60	; 0x3c
 8004cb8:	f7fb ff0e 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0000); //0x1313//0x1f08
 8004cbc:	2100      	movs	r1, #0
 8004cbe:	203d      	movs	r0, #61	; 0x3d
 8004cc0:	f7fb ff0a 	bl	8000ad8 <LCD_WriteReg>
		HAL_Delay(50);
 8004cc4:	2032      	movs	r0, #50	; 0x32
 8004cc6:	f002 fd9f 	bl	8007808 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0001);
 8004cca:	2101      	movs	r1, #1
 8004ccc:	2007      	movs	r0, #7
 8004cce:	f7fb ff03 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0001); //开启电源
 8004cd2:	2101      	movs	r1, #1
 8004cd4:	2017      	movs	r0, #23
 8004cd6:	f7fb feff 	bl	8000ad8 <LCD_WriteReg>
		HAL_Delay(50);
 8004cda:	2032      	movs	r0, #50	; 0x32
 8004cdc:	f002 fd94 	bl	8007808 <HAL_Delay>
		//电源配置
		LCD_WriteReg(0x0010, 0x17A0);
 8004ce0:	f44f 51bd 	mov.w	r1, #6048	; 0x17a0
 8004ce4:	2010      	movs	r0, #16
 8004ce6:	f7fb fef7 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0217); //reference voltage VC[2:0]   Vciout = 1.00*Vcivl
 8004cea:	f240 2117 	movw	r1, #535	; 0x217
 8004cee:	2011      	movs	r0, #17
 8004cf0:	f7fb fef2 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x011E); //0x011c  //Vreg1out = Vcilvl*1.80   is it the same as Vgama1out ?
 8004cf4:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8004cf8:	2012      	movs	r0, #18
 8004cfa:	f7fb feed 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0F00); //VDV[4:0]-->VCOM Amplitude VcomL = VcomH - Vcom Ampl
 8004cfe:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8004d02:	2013      	movs	r0, #19
 8004d04:	f7fb fee8 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x0000);
 8004d08:	2100      	movs	r1, #0
 8004d0a:	202a      	movs	r0, #42	; 0x2a
 8004d0c:	f7fb fee4 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x000A); //0x0001F  Vcomh = VCM1[4:0]*Vreg1out    gate source voltage??
 8004d10:	210a      	movs	r1, #10
 8004d12:	2029      	movs	r0, #41	; 0x29
 8004d14:	f7fb fee0 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x013E); // 0x013C  power supply on
 8004d18:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8004d1c:	2012      	movs	r0, #18
 8004d1e:	f7fb fedb 	bl	8000ad8 <LCD_WriteReg>
		//Coordinates Control//
		LCD_WriteReg(0x0050, 0x0000);        //0x0e00
 8004d22:	2100      	movs	r1, #0
 8004d24:	2050      	movs	r0, #80	; 0x50
 8004d26:	f7fb fed7 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 8004d2a:	21ef      	movs	r1, #239	; 0xef
 8004d2c:	2051      	movs	r0, #81	; 0x51
 8004d2e:	f7fb fed3 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8004d32:	2100      	movs	r1, #0
 8004d34:	2052      	movs	r0, #82	; 0x52
 8004d36:	f7fb fecf 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8004d3a:	f240 113f 	movw	r1, #319	; 0x13f
 8004d3e:	2053      	movs	r0, #83	; 0x53
 8004d40:	f7fb feca 	bl	8000ad8 <LCD_WriteReg>
		//Pannel Image Control//
		LCD_WriteReg(0x0060, 0x2700);
 8004d44:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004d48:	2060      	movs	r0, #96	; 0x60
 8004d4a:	f7fb fec5 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8004d4e:	2101      	movs	r1, #1
 8004d50:	2061      	movs	r0, #97	; 0x61
 8004d52:	f7fb fec1 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8004d56:	2100      	movs	r1, #0
 8004d58:	206a      	movs	r0, #106	; 0x6a
 8004d5a:	f7fb febd 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 8004d5e:	2100      	movs	r1, #0
 8004d60:	2080      	movs	r0, #128	; 0x80
 8004d62:	f7fb feb9 	bl	8000ad8 <LCD_WriteReg>
		//Partial Image Control//
		LCD_WriteReg(0x0081, 0x0000);
 8004d66:	2100      	movs	r1, #0
 8004d68:	2081      	movs	r0, #129	; 0x81
 8004d6a:	f7fb feb5 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004d6e:	2100      	movs	r1, #0
 8004d70:	2082      	movs	r0, #130	; 0x82
 8004d72:	f7fb feb1 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004d76:	2100      	movs	r1, #0
 8004d78:	2083      	movs	r0, #131	; 0x83
 8004d7a:	f7fb fead 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004d7e:	2100      	movs	r1, #0
 8004d80:	2084      	movs	r0, #132	; 0x84
 8004d82:	f7fb fea9 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004d86:	2100      	movs	r1, #0
 8004d88:	2085      	movs	r0, #133	; 0x85
 8004d8a:	f7fb fea5 	bl	8000ad8 <LCD_WriteReg>
		//Panel Interface Control//
		LCD_WriteReg(0x0090, 0x0013);        //0x0010 frenqucy
 8004d8e:	2113      	movs	r1, #19
 8004d90:	2090      	movs	r0, #144	; 0x90
 8004d92:	f7fb fea1 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 8004d96:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004d9a:	2092      	movs	r0, #146	; 0x92
 8004d9c:	f7fb fe9c 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0005);
 8004da0:	2105      	movs	r1, #5
 8004da2:	2093      	movs	r0, #147	; 0x93
 8004da4:	f7fb fe98 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0095, 0x0000);
 8004da8:	2100      	movs	r1, #0
 8004daa:	2095      	movs	r0, #149	; 0x95
 8004dac:	f7fb fe94 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0097, 0x0000);
 8004db0:	2100      	movs	r1, #0
 8004db2:	2097      	movs	r0, #151	; 0x97
 8004db4:	f7fb fe90 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0098, 0x0000);
 8004db8:	2100      	movs	r1, #0
 8004dba:	2098      	movs	r0, #152	; 0x98
 8004dbc:	f7fb fe8c 	bl	8000ad8 <LCD_WriteReg>

		LCD_WriteReg(0x0001, 0x0100);
 8004dc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004dc4:	2001      	movs	r0, #1
 8004dc6:	f7fb fe87 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8004dca:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004dce:	2002      	movs	r0, #2
 8004dd0:	f7fb fe82 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 8004dd4:	f241 0138 	movw	r1, #4152	; 0x1038
 8004dd8:	2003      	movs	r0, #3
 8004dda:	f7fb fe7d 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8004dde:	2100      	movs	r1, #0
 8004de0:	2004      	movs	r0, #4
 8004de2:	f7fb fe79 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8004de6:	2100      	movs	r1, #0
 8004de8:	200c      	movs	r0, #12
 8004dea:	f7fb fe75 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8004dee:	2100      	movs	r1, #0
 8004df0:	200f      	movs	r0, #15
 8004df2:	f7fb fe71 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);
 8004df6:	2100      	movs	r1, #0
 8004df8:	2020      	movs	r0, #32
 8004dfa:	f7fb fe6d 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8004dfe:	2100      	movs	r1, #0
 8004e00:	2021      	movs	r0, #33	; 0x21
 8004e02:	f7fb fe69 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0021);
 8004e06:	2121      	movs	r1, #33	; 0x21
 8004e08:	2007      	movs	r0, #7
 8004e0a:	f7fb fe65 	bl	8000ad8 <LCD_WriteReg>
		HAL_Delay(20);
 8004e0e:	2014      	movs	r0, #20
 8004e10:	f002 fcfa 	bl	8007808 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 8004e14:	2161      	movs	r1, #97	; 0x61
 8004e16:	2007      	movs	r0, #7
 8004e18:	f7fb fe5e 	bl	8000ad8 <LCD_WriteReg>
		HAL_Delay(20);
 8004e1c:	2014      	movs	r0, #20
 8004e1e:	f002 fcf3 	bl	8007808 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0173);
 8004e22:	f240 1173 	movw	r1, #371	; 0x173
 8004e26:	2007      	movs	r0, #7
 8004e28:	f7fb fe56 	bl	8000ad8 <LCD_WriteReg>
		HAL_Delay(20);
 8004e2c:	2014      	movs	r0, #20
 8004e2e:	f002 fceb 	bl	8007808 <HAL_Delay>
 8004e32:	f000 bfd7 	b.w	8005de4 <LCD_Init+0x3e34>
 8004e36:	bf00      	nop
 8004e38:	200000f4 	.word	0x200000f4
	} else if (lcddev.id == 0xB505) {
 8004e3c:	4bf0      	ldr	r3, [pc, #960]	; (8005200 <LCD_Init+0x3250>)
 8004e3e:	889b      	ldrh	r3, [r3, #4]
 8004e40:	f24b 5205 	movw	r2, #46341	; 0xb505
 8004e44:	4293      	cmp	r3, r2
 8004e46:	f040 8103 	bne.w	8005050 <LCD_Init+0x30a0>
		LCD_WriteReg(0x0000, 0x0000);
 8004e4a:	2100      	movs	r1, #0
 8004e4c:	2000      	movs	r0, #0
 8004e4e:	f7fb fe43 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004e52:	2100      	movs	r1, #0
 8004e54:	2000      	movs	r0, #0
 8004e56:	f7fb fe3f 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004e5a:	2100      	movs	r1, #0
 8004e5c:	2000      	movs	r0, #0
 8004e5e:	f7fb fe3b 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004e62:	2100      	movs	r1, #0
 8004e64:	2000      	movs	r0, #0
 8004e66:	f7fb fe37 	bl	8000ad8 <LCD_WriteReg>

		LCD_WriteReg(0x00a4, 0x0001);
 8004e6a:	2101      	movs	r1, #1
 8004e6c:	20a4      	movs	r0, #164	; 0xa4
 8004e6e:	f7fb fe33 	bl	8000ad8 <LCD_WriteReg>
		HAL_Delay(20);
 8004e72:	2014      	movs	r0, #20
 8004e74:	f002 fcc8 	bl	8007808 <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 8004e78:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004e7c:	2060      	movs	r0, #96	; 0x60
 8004e7e:	f7fb fe2b 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8004e82:	f240 2102 	movw	r1, #514	; 0x202
 8004e86:	2008      	movs	r0, #8
 8004e88:	f7fb fe26 	bl	8000ad8 <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0214);
 8004e8c:	f44f 7105 	mov.w	r1, #532	; 0x214
 8004e90:	2030      	movs	r0, #48	; 0x30
 8004e92:	f7fb fe21 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x3715);
 8004e96:	f243 7115 	movw	r1, #14101	; 0x3715
 8004e9a:	2031      	movs	r0, #49	; 0x31
 8004e9c:	f7fb fe1c 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0604);
 8004ea0:	f240 6104 	movw	r1, #1540	; 0x604
 8004ea4:	2032      	movs	r0, #50	; 0x32
 8004ea6:	f7fb fe17 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0e16);
 8004eaa:	f640 6116 	movw	r1, #3606	; 0xe16
 8004eae:	2033      	movs	r0, #51	; 0x33
 8004eb0:	f7fb fe12 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x2211);
 8004eb4:	f242 2111 	movw	r1, #8721	; 0x2211
 8004eb8:	2034      	movs	r0, #52	; 0x34
 8004eba:	f7fb fe0d 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x1500);
 8004ebe:	f44f 51a8 	mov.w	r1, #5376	; 0x1500
 8004ec2:	2035      	movs	r0, #53	; 0x35
 8004ec4:	f7fb fe08 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x8507);
 8004ec8:	f248 5107 	movw	r1, #34055	; 0x8507
 8004ecc:	2036      	movs	r0, #54	; 0x36
 8004ece:	f7fb fe03 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x1407);
 8004ed2:	f241 4107 	movw	r1, #5127	; 0x1407
 8004ed6:	2037      	movs	r0, #55	; 0x37
 8004ed8:	f7fb fdfe 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x1403);
 8004edc:	f241 4103 	movw	r1, #5123	; 0x1403
 8004ee0:	2038      	movs	r0, #56	; 0x38
 8004ee2:	f7fb fdf9 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0020);
 8004ee6:	2120      	movs	r1, #32
 8004ee8:	2039      	movs	r0, #57	; 0x39
 8004eea:	f7fb fdf5 	bl	8000ad8 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x001a);
 8004eee:	211a      	movs	r1, #26
 8004ef0:	2090      	movs	r0, #144	; 0x90
 8004ef2:	f7fb fdf1 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 8004ef6:	2100      	movs	r1, #0
 8004ef8:	2010      	movs	r0, #16
 8004efa:	f7fb fded 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 8004efe:	2107      	movs	r1, #7
 8004f00:	2011      	movs	r0, #17
 8004f02:	f7fb fde9 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 8004f06:	2100      	movs	r1, #0
 8004f08:	2012      	movs	r0, #18
 8004f0a:	f7fb fde5 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 8004f0e:	2100      	movs	r1, #0
 8004f10:	2013      	movs	r0, #19
 8004f12:	f7fb fde1 	bl	8000ad8 <LCD_WriteReg>
		HAL_Delay(20);
 8004f16:	2014      	movs	r0, #20
 8004f18:	f002 fc76 	bl	8007808 <HAL_Delay>

		LCD_WriteReg(0x0010, 0x0730);
 8004f1c:	f44f 61e6 	mov.w	r1, #1840	; 0x730
 8004f20:	2010      	movs	r0, #16
 8004f22:	f7fb fdd9 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0137);
 8004f26:	f240 1137 	movw	r1, #311	; 0x137
 8004f2a:	2011      	movs	r0, #17
 8004f2c:	f7fb fdd4 	bl	8000ad8 <LCD_WriteReg>
		HAL_Delay(20);
 8004f30:	2014      	movs	r0, #20
 8004f32:	f002 fc69 	bl	8007808 <HAL_Delay>

		LCD_WriteReg(0x0012, 0x01b8);
 8004f36:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8004f3a:	2012      	movs	r0, #18
 8004f3c:	f7fb fdcc 	bl	8000ad8 <LCD_WriteReg>
		HAL_Delay(20);
 8004f40:	2014      	movs	r0, #20
 8004f42:	f002 fc61 	bl	8007808 <HAL_Delay>

		LCD_WriteReg(0x0013, 0x0f00);
 8004f46:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8004f4a:	2013      	movs	r0, #19
 8004f4c:	f7fb fdc4 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x002a, 0x0080);
 8004f50:	2180      	movs	r1, #128	; 0x80
 8004f52:	202a      	movs	r0, #42	; 0x2a
 8004f54:	f7fb fdc0 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0048);
 8004f58:	2148      	movs	r1, #72	; 0x48
 8004f5a:	2029      	movs	r0, #41	; 0x29
 8004f5c:	f7fb fdbc 	bl	8000ad8 <LCD_WriteReg>
		HAL_Delay(20);
 8004f60:	2014      	movs	r0, #20
 8004f62:	f002 fc51 	bl	8007808 <HAL_Delay>

		LCD_WriteReg(0x0001, 0x0100);
 8004f66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004f6a:	2001      	movs	r0, #1
 8004f6c:	f7fb fdb4 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8004f70:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004f74:	2002      	movs	r0, #2
 8004f76:	f7fb fdaf 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 8004f7a:	f241 0138 	movw	r1, #4152	; 0x1038
 8004f7e:	2003      	movs	r0, #3
 8004f80:	f7fb fdaa 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8004f84:	f240 2102 	movw	r1, #514	; 0x202
 8004f88:	2008      	movs	r0, #8
 8004f8a:	f7fb fda5 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);
 8004f8e:	2100      	movs	r1, #0
 8004f90:	200a      	movs	r0, #10
 8004f92:	f7fb fda1 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0000);
 8004f96:	2100      	movs	r1, #0
 8004f98:	200c      	movs	r0, #12
 8004f9a:	f7fb fd9d 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);
 8004f9e:	2100      	movs	r1, #0
 8004fa0:	200d      	movs	r0, #13
 8004fa2:	f7fb fd99 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x000e, 0x0030);
 8004fa6:	2130      	movs	r1, #48	; 0x30
 8004fa8:	200e      	movs	r0, #14
 8004faa:	f7fb fd95 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 8004fae:	2100      	movs	r1, #0
 8004fb0:	2050      	movs	r0, #80	; 0x50
 8004fb2:	f7fb fd91 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef);
 8004fb6:	21ef      	movs	r1, #239	; 0xef
 8004fb8:	2051      	movs	r0, #81	; 0x51
 8004fba:	f7fb fd8d 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8004fbe:	2100      	movs	r1, #0
 8004fc0:	2052      	movs	r0, #82	; 0x52
 8004fc2:	f7fb fd89 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f);
 8004fc6:	f240 113f 	movw	r1, #319	; 0x13f
 8004fca:	2053      	movs	r0, #83	; 0x53
 8004fcc:	f7fb fd84 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700);
 8004fd0:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004fd4:	2060      	movs	r0, #96	; 0x60
 8004fd6:	f7fb fd7f 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8004fda:	2101      	movs	r1, #1
 8004fdc:	2061      	movs	r0, #97	; 0x61
 8004fde:	f7fb fd7b 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 8004fe2:	2100      	movs	r1, #0
 8004fe4:	206a      	movs	r0, #106	; 0x6a
 8004fe6:	f7fb fd77 	bl	8000ad8 <LCD_WriteReg>
		//LCD_WriteReg(0x0080,0x0000);
		//LCD_WriteReg(0x0081,0x0000);
		LCD_WriteReg(0x0090, 0X0011);
 8004fea:	2111      	movs	r1, #17
 8004fec:	2090      	movs	r0, #144	; 0x90
 8004fee:	f7fb fd73 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004ff2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004ff6:	2092      	movs	r0, #146	; 0x92
 8004ff8:	f7fb fd6e 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0402);
 8004ffc:	f240 4102 	movw	r1, #1026	; 0x402
 8005000:	2093      	movs	r0, #147	; 0x93
 8005002:	f7fb fd69 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0094, 0x0002);
 8005006:	2102      	movs	r1, #2
 8005008:	2094      	movs	r0, #148	; 0x94
 800500a:	f7fb fd65 	bl	8000ad8 <LCD_WriteReg>
		HAL_Delay(20);
 800500e:	2014      	movs	r0, #20
 8005010:	f002 fbfa 	bl	8007808 <HAL_Delay>

		LCD_WriteReg(0x0007, 0x0001);
 8005014:	2101      	movs	r1, #1
 8005016:	2007      	movs	r0, #7
 8005018:	f7fb fd5e 	bl	8000ad8 <LCD_WriteReg>
		HAL_Delay(20);
 800501c:	2014      	movs	r0, #20
 800501e:	f002 fbf3 	bl	8007808 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 8005022:	2161      	movs	r1, #97	; 0x61
 8005024:	2007      	movs	r0, #7
 8005026:	f7fb fd57 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0173);
 800502a:	f240 1173 	movw	r1, #371	; 0x173
 800502e:	2007      	movs	r0, #7
 8005030:	f7fb fd52 	bl	8000ad8 <LCD_WriteReg>

		LCD_WriteReg(0x0020, 0x0000);
 8005034:	2100      	movs	r1, #0
 8005036:	2020      	movs	r0, #32
 8005038:	f7fb fd4e 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 800503c:	2100      	movs	r1, #0
 800503e:	2021      	movs	r0, #33	; 0x21
 8005040:	f7fb fd4a 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x22);
 8005044:	2122      	movs	r1, #34	; 0x22
 8005046:	2000      	movs	r0, #0
 8005048:	f7fb fd46 	bl	8000ad8 <LCD_WriteReg>
 800504c:	f000 beca 	b.w	8005de4 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0xC505) {
 8005050:	4b6b      	ldr	r3, [pc, #428]	; (8005200 <LCD_Init+0x3250>)
 8005052:	889b      	ldrh	r3, [r3, #4]
 8005054:	f24c 5205 	movw	r2, #50437	; 0xc505
 8005058:	4293      	cmp	r3, r2
 800505a:	f040 80d3 	bne.w	8005204 <LCD_Init+0x3254>
		LCD_WriteReg(0x0000, 0x0000);
 800505e:	2100      	movs	r1, #0
 8005060:	2000      	movs	r0, #0
 8005062:	f7fb fd39 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8005066:	2100      	movs	r1, #0
 8005068:	2000      	movs	r0, #0
 800506a:	f7fb fd35 	bl	8000ad8 <LCD_WriteReg>
		HAL_Delay(20);
 800506e:	2014      	movs	r0, #20
 8005070:	f002 fbca 	bl	8007808 <HAL_Delay>
		LCD_WriteReg(0x0000, 0x0000);
 8005074:	2100      	movs	r1, #0
 8005076:	2000      	movs	r0, #0
 8005078:	f7fb fd2e 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 800507c:	2100      	movs	r1, #0
 800507e:	2000      	movs	r0, #0
 8005080:	f7fb fd2a 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8005084:	2100      	movs	r1, #0
 8005086:	2000      	movs	r0, #0
 8005088:	f7fb fd26 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 800508c:	2100      	movs	r1, #0
 800508e:	2000      	movs	r0, #0
 8005090:	f7fb fd22 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x00a4, 0x0001);
 8005094:	2101      	movs	r1, #1
 8005096:	20a4      	movs	r0, #164	; 0xa4
 8005098:	f7fb fd1e 	bl	8000ad8 <LCD_WriteReg>
		HAL_Delay(20);
 800509c:	2014      	movs	r0, #20
 800509e:	f002 fbb3 	bl	8007808 <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 80050a2:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80050a6:	2060      	movs	r0, #96	; 0x60
 80050a8:	f7fb fd16 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0806);
 80050ac:	f640 0106 	movw	r1, #2054	; 0x806
 80050b0:	2008      	movs	r0, #8
 80050b2:	f7fb fd11 	bl	8000ad8 <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0703);		//gamma setting
 80050b6:	f240 7103 	movw	r1, #1795	; 0x703
 80050ba:	2030      	movs	r0, #48	; 0x30
 80050bc:	f7fb fd0c 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0001);
 80050c0:	2101      	movs	r1, #1
 80050c2:	2031      	movs	r0, #49	; 0x31
 80050c4:	f7fb fd08 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0004);
 80050c8:	2104      	movs	r1, #4
 80050ca:	2032      	movs	r0, #50	; 0x32
 80050cc:	f7fb fd04 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0102);
 80050d0:	f44f 7181 	mov.w	r1, #258	; 0x102
 80050d4:	2033      	movs	r0, #51	; 0x33
 80050d6:	f7fb fcff 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0300);
 80050da:	f44f 7140 	mov.w	r1, #768	; 0x300
 80050de:	2034      	movs	r0, #52	; 0x34
 80050e0:	f7fb fcfa 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0103);
 80050e4:	f240 1103 	movw	r1, #259	; 0x103
 80050e8:	2035      	movs	r0, #53	; 0x35
 80050ea:	f7fb fcf5 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x001F);
 80050ee:	211f      	movs	r1, #31
 80050f0:	2036      	movs	r0, #54	; 0x36
 80050f2:	f7fb fcf1 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0703);
 80050f6:	f240 7103 	movw	r1, #1795	; 0x703
 80050fa:	2037      	movs	r0, #55	; 0x37
 80050fc:	f7fb fcec 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0001);
 8005100:	2101      	movs	r1, #1
 8005102:	2038      	movs	r0, #56	; 0x38
 8005104:	f7fb fce8 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0004);
 8005108:	2104      	movs	r1, #4
 800510a:	2039      	movs	r0, #57	; 0x39
 800510c:	f7fb fce4 	bl	8000ad8 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0015);	//80Hz
 8005110:	2115      	movs	r1, #21
 8005112:	2090      	movs	r0, #144	; 0x90
 8005114:	f7fb fce0 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0X0410);	//BT,AP
 8005118:	f44f 6182 	mov.w	r1, #1040	; 0x410
 800511c:	2010      	movs	r0, #16
 800511e:	f7fb fcdb 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0247);	//DC1,DC0,VC
 8005122:	f240 2147 	movw	r1, #583	; 0x247
 8005126:	2011      	movs	r0, #17
 8005128:	f7fb fcd6 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x01BC);
 800512c:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8005130:	2012      	movs	r0, #18
 8005132:	f7fb fcd1 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0e00);
 8005136:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 800513a:	2013      	movs	r0, #19
 800513c:	f7fb fccc 	bl	8000ad8 <LCD_WriteReg>
		HAL_Delay(120);
 8005140:	2078      	movs	r0, #120	; 0x78
 8005142:	f002 fb61 	bl	8007808 <HAL_Delay>
		LCD_WriteReg(0x0001, 0x0100);
 8005146:	f44f 7180 	mov.w	r1, #256	; 0x100
 800514a:	2001      	movs	r0, #1
 800514c:	f7fb fcc4 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200);
 8005150:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005154:	2002      	movs	r0, #2
 8005156:	f7fb fcbf 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 800515a:	f241 0130 	movw	r1, #4144	; 0x1030
 800515e:	2003      	movs	r0, #3
 8005160:	f7fb fcba 	bl	8000ad8 <LCD_WriteReg>

		LCD_WriteReg(0x000A, 0x0008);
 8005164:	2108      	movs	r1, #8
 8005166:	200a      	movs	r0, #10
 8005168:	f7fb fcb6 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 800516c:	2100      	movs	r1, #0
 800516e:	200c      	movs	r0, #12
 8005170:	f7fb fcb2 	bl	8000ad8 <LCD_WriteReg>

		LCD_WriteReg(0x000E, 0x0020);
 8005174:	2120      	movs	r1, #32
 8005176:	200e      	movs	r0, #14
 8005178:	f7fb fcae 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 800517c:	2100      	movs	r1, #0
 800517e:	200f      	movs	r0, #15
 8005180:	f7fb fcaa 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);	//H Start
 8005184:	2100      	movs	r1, #0
 8005186:	2020      	movs	r0, #32
 8005188:	f7fb fca6 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);	//V Start
 800518c:	2100      	movs	r1, #0
 800518e:	2021      	movs	r0, #33	; 0x21
 8005190:	f7fb fca2 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x003D);	//vcom2
 8005194:	213d      	movs	r1, #61	; 0x3d
 8005196:	202a      	movs	r0, #42	; 0x2a
 8005198:	f7fb fc9e 	bl	8000ad8 <LCD_WriteReg>
		HAL_Delay(20);
 800519c:	2014      	movs	r0, #20
 800519e:	f002 fb33 	bl	8007808 <HAL_Delay>
		LCD_WriteReg(0x0029, 0x002d);
 80051a2:	212d      	movs	r1, #45	; 0x2d
 80051a4:	2029      	movs	r0, #41	; 0x29
 80051a6:	f7fb fc97 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 80051aa:	2100      	movs	r1, #0
 80051ac:	2050      	movs	r0, #80	; 0x50
 80051ae:	f7fb fc93 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0xD0EF);
 80051b2:	f24d 01ef 	movw	r1, #53487	; 0xd0ef
 80051b6:	2051      	movs	r0, #81	; 0x51
 80051b8:	f7fb fc8e 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 80051bc:	2100      	movs	r1, #0
 80051be:	2052      	movs	r0, #82	; 0x52
 80051c0:	f7fb fc8a 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 80051c4:	f240 113f 	movw	r1, #319	; 0x13f
 80051c8:	2053      	movs	r0, #83	; 0x53
 80051ca:	f7fb fc85 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0000);
 80051ce:	2100      	movs	r1, #0
 80051d0:	2061      	movs	r0, #97	; 0x61
 80051d2:	f7fb fc81 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 80051d6:	2100      	movs	r1, #0
 80051d8:	206a      	movs	r0, #106	; 0x6a
 80051da:	f7fb fc7d 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 80051de:	f44f 7140 	mov.w	r1, #768	; 0x300
 80051e2:	2092      	movs	r0, #146	; 0x92
 80051e4:	f7fb fc78 	bl	8000ad8 <LCD_WriteReg>

		LCD_WriteReg(0x0093, 0x0005);
 80051e8:	2105      	movs	r1, #5
 80051ea:	2093      	movs	r0, #147	; 0x93
 80051ec:	f7fb fc74 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0100);
 80051f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80051f4:	2007      	movs	r0, #7
 80051f6:	f7fb fc6f 	bl	8000ad8 <LCD_WriteReg>
 80051fa:	f000 bdf3 	b.w	8005de4 <LCD_Init+0x3e34>
 80051fe:	bf00      	nop
 8005200:	200000f4 	.word	0x200000f4
	} else if (lcddev.id == 0x8989)	//OK |/|/|
 8005204:	4bc2      	ldr	r3, [pc, #776]	; (8005510 <LCD_Init+0x3560>)
 8005206:	889b      	ldrh	r3, [r3, #4]
 8005208:	f648 1289 	movw	r2, #35209	; 0x8989
 800520c:	4293      	cmp	r3, r2
 800520e:	f040 80bc 	bne.w	800538a <LCD_Init+0x33da>
			{
		LCD_WriteReg(0x0000, 0x0001);	//打开晶振
 8005212:	2101      	movs	r1, #1
 8005214:	2000      	movs	r0, #0
 8005216:	f7fb fc5f 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0xA8A4);	//0xA8A4
 800521a:	f64a 01a4 	movw	r1, #43172	; 0xa8a4
 800521e:	2003      	movs	r0, #3
 8005220:	f7fb fc5a 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8005224:	2100      	movs	r1, #0
 8005226:	200c      	movs	r0, #12
 8005228:	f7fb fc56 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x080C);
 800522c:	f640 010c 	movw	r1, #2060	; 0x80c
 8005230:	200d      	movs	r0, #13
 8005232:	f7fb fc51 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x000E, 0x2B00);
 8005236:	f44f 512c 	mov.w	r1, #11008	; 0x2b00
 800523a:	200e      	movs	r0, #14
 800523c:	f7fb fc4c 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x001E, 0x00B0);
 8005240:	21b0      	movs	r1, #176	; 0xb0
 8005242:	201e      	movs	r0, #30
 8005244:	f7fb fc48 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x2B3F);	//驱动输出控制320*240  0x6B3F
 8005248:	f642 313f 	movw	r1, #11071	; 0x2b3f
 800524c:	2001      	movs	r0, #1
 800524e:	f7fb fc43 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0600);
 8005252:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005256:	2002      	movs	r0, #2
 8005258:	f7fb fc3e 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 800525c:	2100      	movs	r1, #0
 800525e:	2010      	movs	r0, #16
 8005260:	f7fb fc3a 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x6078); //定义数据格式  16位色 		横屏 0x6058
 8005264:	f246 0178 	movw	r1, #24696	; 0x6078
 8005268:	2011      	movs	r0, #17
 800526a:	f7fb fc35 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0005, 0x0000);
 800526e:	2100      	movs	r1, #0
 8005270:	2005      	movs	r0, #5
 8005272:	f7fb fc31 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0006, 0x0000);
 8005276:	2100      	movs	r1, #0
 8005278:	2006      	movs	r0, #6
 800527a:	f7fb fc2d 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0016, 0xEF1C);
 800527e:	f64e 711c 	movw	r1, #61212	; 0xef1c
 8005282:	2016      	movs	r0, #22
 8005284:	f7fb fc28 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0003);
 8005288:	2103      	movs	r1, #3
 800528a:	2017      	movs	r0, #23
 800528c:	f7fb fc24 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0233); //0x0233
 8005290:	f240 2133 	movw	r1, #563	; 0x233
 8005294:	2007      	movs	r0, #7
 8005296:	f7fb fc1f 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x000B, 0x0000);
 800529a:	2100      	movs	r1, #0
 800529c:	200b      	movs	r0, #11
 800529e:	f7fb fc1b 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); //扫描开始地址
 80052a2:	2100      	movs	r1, #0
 80052a4:	200f      	movs	r0, #15
 80052a6:	f7fb fc17 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0041, 0x0000);
 80052aa:	2100      	movs	r1, #0
 80052ac:	2041      	movs	r0, #65	; 0x41
 80052ae:	f7fb fc13 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0042, 0x0000);
 80052b2:	2100      	movs	r1, #0
 80052b4:	2042      	movs	r0, #66	; 0x42
 80052b6:	f7fb fc0f 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0048, 0x0000);
 80052ba:	2100      	movs	r1, #0
 80052bc:	2048      	movs	r0, #72	; 0x48
 80052be:	f7fb fc0b 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0049, 0x013F);
 80052c2:	f240 113f 	movw	r1, #319	; 0x13f
 80052c6:	2049      	movs	r0, #73	; 0x49
 80052c8:	f7fb fc06 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x004A, 0x0000);
 80052cc:	2100      	movs	r1, #0
 80052ce:	204a      	movs	r0, #74	; 0x4a
 80052d0:	f7fb fc02 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x004B, 0x0000);
 80052d4:	2100      	movs	r1, #0
 80052d6:	204b      	movs	r0, #75	; 0x4b
 80052d8:	f7fb fbfe 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0044, 0xEF00);
 80052dc:	f44f 416f 	mov.w	r1, #61184	; 0xef00
 80052e0:	2044      	movs	r0, #68	; 0x44
 80052e2:	f7fb fbf9 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0045, 0x0000);
 80052e6:	2100      	movs	r1, #0
 80052e8:	2045      	movs	r0, #69	; 0x45
 80052ea:	f7fb fbf5 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0046, 0x013F);
 80052ee:	f240 113f 	movw	r1, #319	; 0x13f
 80052f2:	2046      	movs	r0, #70	; 0x46
 80052f4:	f7fb fbf0 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0030, 0x0707);
 80052f8:	f240 7107 	movw	r1, #1799	; 0x707
 80052fc:	2030      	movs	r0, #48	; 0x30
 80052fe:	f7fb fbeb 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0204);
 8005302:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005306:	2031      	movs	r0, #49	; 0x31
 8005308:	f7fb fbe6 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0204);
 800530c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005310:	2032      	movs	r0, #50	; 0x32
 8005312:	f7fb fbe1 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0502);
 8005316:	f240 5102 	movw	r1, #1282	; 0x502
 800531a:	2033      	movs	r0, #51	; 0x33
 800531c:	f7fb fbdc 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0507);
 8005320:	f240 5107 	movw	r1, #1287	; 0x507
 8005324:	2034      	movs	r0, #52	; 0x34
 8005326:	f7fb fbd7 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 800532a:	f44f 7101 	mov.w	r1, #516	; 0x204
 800532e:	2035      	movs	r0, #53	; 0x35
 8005330:	f7fb fbd2 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0204);
 8005334:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005338:	2036      	movs	r0, #54	; 0x36
 800533a:	f7fb fbcd 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0502);
 800533e:	f240 5102 	movw	r1, #1282	; 0x502
 8005342:	2037      	movs	r0, #55	; 0x37
 8005344:	f7fb fbc8 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0302);
 8005348:	f240 3102 	movw	r1, #770	; 0x302
 800534c:	203a      	movs	r0, #58	; 0x3a
 800534e:	f7fb fbc3 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0302);
 8005352:	f240 3102 	movw	r1, #770	; 0x302
 8005356:	203b      	movs	r0, #59	; 0x3b
 8005358:	f7fb fbbe 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0023, 0x0000);
 800535c:	2100      	movs	r1, #0
 800535e:	2023      	movs	r0, #35	; 0x23
 8005360:	f7fb fbba 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0024, 0x0000);
 8005364:	2100      	movs	r1, #0
 8005366:	2024      	movs	r0, #36	; 0x24
 8005368:	f7fb fbb6 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x0025, 0x8000);
 800536c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005370:	2025      	movs	r0, #37	; 0x25
 8005372:	f7fb fbb1 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x004f, 0);        //行首址0
 8005376:	2100      	movs	r1, #0
 8005378:	204f      	movs	r0, #79	; 0x4f
 800537a:	f7fb fbad 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0x004e, 0);        //列首址0
 800537e:	2100      	movs	r1, #0
 8005380:	204e      	movs	r0, #78	; 0x4e
 8005382:	f7fb fba9 	bl	8000ad8 <LCD_WriteReg>
 8005386:	f000 bd2d 	b.w	8005de4 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x4531)        //OK |/|/|
 800538a:	4b61      	ldr	r3, [pc, #388]	; (8005510 <LCD_Init+0x3560>)
 800538c:	889b      	ldrh	r3, [r3, #4]
 800538e:	f244 5231 	movw	r2, #17713	; 0x4531
 8005392:	4293      	cmp	r3, r2
 8005394:	f040 80be 	bne.w	8005514 <LCD_Init+0x3564>
			{
		LCD_WriteReg(0X00, 0X0001);
 8005398:	2101      	movs	r1, #1
 800539a:	2000      	movs	r0, #0
 800539c:	f7fb fb9c 	bl	8000ad8 <LCD_WriteReg>
		HAL_Delay(10);
 80053a0:	200a      	movs	r0, #10
 80053a2:	f002 fa31 	bl	8007808 <HAL_Delay>
		LCD_WriteReg(0X10, 0X1628);
 80053a6:	f241 6128 	movw	r1, #5672	; 0x1628
 80053aa:	2010      	movs	r0, #16
 80053ac:	f7fb fb94 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X000e);        //0x0006
 80053b0:	210e      	movs	r1, #14
 80053b2:	2012      	movs	r0, #18
 80053b4:	f7fb fb90 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X0A39);
 80053b8:	f640 2139 	movw	r1, #2617	; 0xa39
 80053bc:	2013      	movs	r0, #19
 80053be:	f7fb fb8b 	bl	8000ad8 <LCD_WriteReg>
		HAL_Delay(10);
 80053c2:	200a      	movs	r0, #10
 80053c4:	f002 fa20 	bl	8007808 <HAL_Delay>
		LCD_WriteReg(0X11, 0X0040);
 80053c8:	2140      	movs	r1, #64	; 0x40
 80053ca:	2011      	movs	r0, #17
 80053cc:	f7fb fb84 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0X15, 0X0050);
 80053d0:	2150      	movs	r1, #80	; 0x50
 80053d2:	2015      	movs	r0, #21
 80053d4:	f7fb fb80 	bl	8000ad8 <LCD_WriteReg>
		HAL_Delay(10);
 80053d8:	200a      	movs	r0, #10
 80053da:	f002 fa15 	bl	8007808 <HAL_Delay>
		LCD_WriteReg(0X12, 0X001e);        //16
 80053de:	211e      	movs	r1, #30
 80053e0:	2012      	movs	r0, #18
 80053e2:	f7fb fb79 	bl	8000ad8 <LCD_WriteReg>
		HAL_Delay(10);
 80053e6:	200a      	movs	r0, #10
 80053e8:	f002 fa0e 	bl	8007808 <HAL_Delay>
		LCD_WriteReg(0X10, 0X1620);
 80053ec:	f44f 51b1 	mov.w	r1, #5664	; 0x1620
 80053f0:	2010      	movs	r0, #16
 80053f2:	f7fb fb71 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X2A39);
 80053f6:	f642 2139 	movw	r1, #10809	; 0x2a39
 80053fa:	2013      	movs	r0, #19
 80053fc:	f7fb fb6c 	bl	8000ad8 <LCD_WriteReg>
		HAL_Delay(10);
 8005400:	200a      	movs	r0, #10
 8005402:	f002 fa01 	bl	8007808 <HAL_Delay>
		LCD_WriteReg(0X01, 0X0100);
 8005406:	f44f 7180 	mov.w	r1, #256	; 0x100
 800540a:	2001      	movs	r0, #1
 800540c:	f7fb fb64 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 8005410:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005414:	2002      	movs	r0, #2
 8005416:	f7fb fb5f 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1038);        //改变方向的
 800541a:	f241 0138 	movw	r1, #4152	; 0x1038
 800541e:	2003      	movs	r0, #3
 8005420:	f7fb fb5a 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0202);
 8005424:	f240 2102 	movw	r1, #514	; 0x202
 8005428:	2008      	movs	r0, #8
 800542a:	f7fb fb55 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 800542e:	2108      	movs	r1, #8
 8005430:	200a      	movs	r0, #10
 8005432:	f7fb fb51 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0X30, 0X0000);
 8005436:	2100      	movs	r1, #0
 8005438:	2030      	movs	r0, #48	; 0x30
 800543a:	f7fb fb4d 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 800543e:	f240 4102 	movw	r1, #1026	; 0x402
 8005442:	2031      	movs	r0, #49	; 0x31
 8005444:	f7fb fb48 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0106);
 8005448:	f44f 7183 	mov.w	r1, #262	; 0x106
 800544c:	2032      	movs	r0, #50	; 0x32
 800544e:	f7fb fb43 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0503);
 8005452:	f240 5103 	movw	r1, #1283	; 0x503
 8005456:	2033      	movs	r0, #51	; 0x33
 8005458:	f7fb fb3e 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0104);
 800545c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8005460:	2034      	movs	r0, #52	; 0x34
 8005462:	f7fb fb39 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0301);
 8005466:	f240 3101 	movw	r1, #769	; 0x301
 800546a:	2035      	movs	r0, #53	; 0x35
 800546c:	f7fb fb34 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 8005470:	f240 7107 	movw	r1, #1799	; 0x707
 8005474:	2036      	movs	r0, #54	; 0x36
 8005476:	f7fb fb2f 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 800547a:	f240 3105 	movw	r1, #773	; 0x305
 800547e:	2037      	movs	r0, #55	; 0x37
 8005480:	f7fb fb2a 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0208);
 8005484:	f44f 7102 	mov.w	r1, #520	; 0x208
 8005488:	2038      	movs	r0, #56	; 0x38
 800548a:	f7fb fb25 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0F0B);
 800548e:	f640 710b 	movw	r1, #3851	; 0xf0b
 8005492:	2039      	movs	r0, #57	; 0x39
 8005494:	f7fb fb20 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0X41, 0X0002);
 8005498:	2102      	movs	r1, #2
 800549a:	2041      	movs	r0, #65	; 0x41
 800549c:	f7fb fb1c 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 80054a0:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80054a4:	2060      	movs	r0, #96	; 0x60
 80054a6:	f7fb fb17 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 80054aa:	2101      	movs	r1, #1
 80054ac:	2061      	movs	r0, #97	; 0x61
 80054ae:	f7fb fb13 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X0210);
 80054b2:	f44f 7104 	mov.w	r1, #528	; 0x210
 80054b6:	2090      	movs	r0, #144	; 0x90
 80054b8:	f7fb fb0e 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X010A);
 80054bc:	f44f 7185 	mov.w	r1, #266	; 0x10a
 80054c0:	2092      	movs	r0, #146	; 0x92
 80054c2:	f7fb fb09 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0004);
 80054c6:	2104      	movs	r1, #4
 80054c8:	2093      	movs	r0, #147	; 0x93
 80054ca:	f7fb fb05 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0100);
 80054ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80054d2:	20a0      	movs	r0, #160	; 0xa0
 80054d4:	f7fb fb00 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 80054d8:	2101      	movs	r1, #1
 80054da:	2007      	movs	r0, #7
 80054dc:	f7fb fafc 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 80054e0:	2121      	movs	r1, #33	; 0x21
 80054e2:	2007      	movs	r0, #7
 80054e4:	f7fb faf8 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 80054e8:	2123      	movs	r1, #35	; 0x23
 80054ea:	2007      	movs	r0, #7
 80054ec:	f7fb faf4 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 80054f0:	2133      	movs	r1, #51	; 0x33
 80054f2:	2007      	movs	r0, #7
 80054f4:	f7fb faf0 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 80054f8:	f240 1133 	movw	r1, #307	; 0x133
 80054fc:	2007      	movs	r0, #7
 80054fe:	f7fb faeb 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0000);
 8005502:	2100      	movs	r1, #0
 8005504:	20a0      	movs	r0, #160	; 0xa0
 8005506:	f7fb fae7 	bl	8000ad8 <LCD_WriteReg>
 800550a:	f000 bc6b 	b.w	8005de4 <LCD_Init+0x3e34>
 800550e:	bf00      	nop
 8005510:	200000f4 	.word	0x200000f4
	} else if (lcddev.id == 0x4535) {
 8005514:	4b5b      	ldr	r3, [pc, #364]	; (8005684 <LCD_Init+0x36d4>)
 8005516:	889b      	ldrh	r3, [r3, #4]
 8005518:	f244 5235 	movw	r2, #17717	; 0x4535
 800551c:	4293      	cmp	r3, r2
 800551e:	f040 80b3 	bne.w	8005688 <LCD_Init+0x36d8>
		LCD_WriteReg(0X15, 0X0030);
 8005522:	2130      	movs	r1, #48	; 0x30
 8005524:	2015      	movs	r0, #21
 8005526:	f7fb fad7 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0X9A, 0X0010);
 800552a:	2110      	movs	r1, #16
 800552c:	209a      	movs	r0, #154	; 0x9a
 800552e:	f7fb fad3 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0X11, 0X0020);
 8005532:	2120      	movs	r1, #32
 8005534:	2011      	movs	r0, #17
 8005536:	f7fb facf 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0X10, 0X3428);
 800553a:	f243 4128 	movw	r1, #13352	; 0x3428
 800553e:	2010      	movs	r0, #16
 8005540:	f7fb faca 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X0002);        //16
 8005544:	2102      	movs	r1, #2
 8005546:	2012      	movs	r0, #18
 8005548:	f7fb fac6 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X1038);
 800554c:	f241 0138 	movw	r1, #4152	; 0x1038
 8005550:	2013      	movs	r0, #19
 8005552:	f7fb fac1 	bl	8000ad8 <LCD_WriteReg>
		HAL_Delay(40);
 8005556:	2028      	movs	r0, #40	; 0x28
 8005558:	f002 f956 	bl	8007808 <HAL_Delay>
		LCD_WriteReg(0X12, 0X0012);        //16
 800555c:	2112      	movs	r1, #18
 800555e:	2012      	movs	r0, #18
 8005560:	f7fb faba 	bl	8000ad8 <LCD_WriteReg>
		HAL_Delay(40);
 8005564:	2028      	movs	r0, #40	; 0x28
 8005566:	f002 f94f 	bl	8007808 <HAL_Delay>
		LCD_WriteReg(0X10, 0X3420);
 800556a:	f243 4120 	movw	r1, #13344	; 0x3420
 800556e:	2010      	movs	r0, #16
 8005570:	f7fb fab2 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X3038);
 8005574:	f243 0138 	movw	r1, #12344	; 0x3038
 8005578:	2013      	movs	r0, #19
 800557a:	f7fb faad 	bl	8000ad8 <LCD_WriteReg>
		HAL_Delay(70);
 800557e:	2046      	movs	r0, #70	; 0x46
 8005580:	f002 f942 	bl	8007808 <HAL_Delay>
		LCD_WriteReg(0X30, 0X0000);
 8005584:	2100      	movs	r1, #0
 8005586:	2030      	movs	r0, #48	; 0x30
 8005588:	f7fb faa6 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 800558c:	f240 4102 	movw	r1, #1026	; 0x402
 8005590:	2031      	movs	r0, #49	; 0x31
 8005592:	f7fb faa1 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0307);
 8005596:	f240 3107 	movw	r1, #775	; 0x307
 800559a:	2032      	movs	r0, #50	; 0x32
 800559c:	f7fb fa9c 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0304);
 80055a0:	f44f 7141 	mov.w	r1, #772	; 0x304
 80055a4:	2033      	movs	r0, #51	; 0x33
 80055a6:	f7fb fa97 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0004);
 80055aa:	2104      	movs	r1, #4
 80055ac:	2034      	movs	r0, #52	; 0x34
 80055ae:	f7fb fa93 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0401);
 80055b2:	f240 4101 	movw	r1, #1025	; 0x401
 80055b6:	2035      	movs	r0, #53	; 0x35
 80055b8:	f7fb fa8e 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 80055bc:	f240 7107 	movw	r1, #1799	; 0x707
 80055c0:	2036      	movs	r0, #54	; 0x36
 80055c2:	f7fb fa89 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 80055c6:	f240 3105 	movw	r1, #773	; 0x305
 80055ca:	2037      	movs	r0, #55	; 0x37
 80055cc:	f7fb fa84 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0610);
 80055d0:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 80055d4:	2038      	movs	r0, #56	; 0x38
 80055d6:	f7fb fa7f 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0610);
 80055da:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 80055de:	2039      	movs	r0, #57	; 0x39
 80055e0:	f7fb fa7a 	bl	8000ad8 <LCD_WriteReg>

		LCD_WriteReg(0X01, 0X0100);
 80055e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80055e8:	2001      	movs	r0, #1
 80055ea:	f7fb fa75 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 80055ee:	f44f 7140 	mov.w	r1, #768	; 0x300
 80055f2:	2002      	movs	r0, #2
 80055f4:	f7fb fa70 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1030);        //改变方向的
 80055f8:	f241 0130 	movw	r1, #4144	; 0x1030
 80055fc:	2003      	movs	r0, #3
 80055fe:	f7fb fa6b 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0808);
 8005602:	f640 0108 	movw	r1, #2056	; 0x808
 8005606:	2008      	movs	r0, #8
 8005608:	f7fb fa66 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 800560c:	2108      	movs	r1, #8
 800560e:	200a      	movs	r0, #10
 8005610:	f7fb fa62 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 8005614:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005618:	2060      	movs	r0, #96	; 0x60
 800561a:	f7fb fa5d 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 800561e:	2101      	movs	r1, #1
 8005620:	2061      	movs	r0, #97	; 0x61
 8005622:	f7fb fa59 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X013E);
 8005626:	f44f 719f 	mov.w	r1, #318	; 0x13e
 800562a:	2090      	movs	r0, #144	; 0x90
 800562c:	f7fb fa54 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X0100);
 8005630:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005634:	2092      	movs	r0, #146	; 0x92
 8005636:	f7fb fa4f 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0100);
 800563a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800563e:	2093      	movs	r0, #147	; 0x93
 8005640:	f7fb fa4a 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X3000);
 8005644:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005648:	20a0      	movs	r0, #160	; 0xa0
 800564a:	f7fb fa45 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0XA3, 0X0010);
 800564e:	2110      	movs	r1, #16
 8005650:	20a3      	movs	r0, #163	; 0xa3
 8005652:	f7fb fa41 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 8005656:	2101      	movs	r1, #1
 8005658:	2007      	movs	r0, #7
 800565a:	f7fb fa3d 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 800565e:	2121      	movs	r1, #33	; 0x21
 8005660:	2007      	movs	r0, #7
 8005662:	f7fb fa39 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 8005666:	2123      	movs	r1, #35	; 0x23
 8005668:	2007      	movs	r0, #7
 800566a:	f7fb fa35 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 800566e:	2133      	movs	r1, #51	; 0x33
 8005670:	2007      	movs	r0, #7
 8005672:	f7fb fa31 	bl	8000ad8 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 8005676:	f240 1133 	movw	r1, #307	; 0x133
 800567a:	2007      	movs	r0, #7
 800567c:	f7fb fa2c 	bl	8000ad8 <LCD_WriteReg>
 8005680:	e3b0      	b.n	8005de4 <LCD_Init+0x3e34>
 8005682:	bf00      	nop
 8005684:	200000f4 	.word	0x200000f4
	} else if (lcddev.id == 0X1963) {
 8005688:	4ba8      	ldr	r3, [pc, #672]	; (800592c <LCD_Init+0x397c>)
 800568a:	889b      	ldrh	r3, [r3, #4]
 800568c:	f641 1263 	movw	r2, #6499	; 0x1963
 8005690:	4293      	cmp	r3, r2
 8005692:	f040 83a7 	bne.w	8005de4 <LCD_Init+0x3e34>
		LCD_WR_REG(0xE2);	//Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz
 8005696:	20e2      	movs	r0, #226	; 0xe2
 8005698:	f7fb f992 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATA(0x1D);		//参数1 
 800569c:	4ba4      	ldr	r3, [pc, #656]	; (8005930 <LCD_Init+0x3980>)
 800569e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056a2:	611a      	str	r2, [r3, #16]
 80056a4:	4ba2      	ldr	r3, [pc, #648]	; (8005930 <LCD_Init+0x3980>)
 80056a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056aa:	615a      	str	r2, [r3, #20]
 80056ac:	4ba1      	ldr	r3, [pc, #644]	; (8005934 <LCD_Init+0x3984>)
 80056ae:	221d      	movs	r2, #29
 80056b0:	60da      	str	r2, [r3, #12]
 80056b2:	4b9f      	ldr	r3, [pc, #636]	; (8005930 <LCD_Init+0x3980>)
 80056b4:	2280      	movs	r2, #128	; 0x80
 80056b6:	615a      	str	r2, [r3, #20]
 80056b8:	4b9d      	ldr	r3, [pc, #628]	; (8005930 <LCD_Init+0x3980>)
 80056ba:	2280      	movs	r2, #128	; 0x80
 80056bc:	611a      	str	r2, [r3, #16]
 80056be:	4b9c      	ldr	r3, [pc, #624]	; (8005930 <LCD_Init+0x3980>)
 80056c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056c4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x02);		//参数2 Divider M = 2, PLL = 300/(M+1) = 100MHz
 80056c6:	4b9a      	ldr	r3, [pc, #616]	; (8005930 <LCD_Init+0x3980>)
 80056c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056cc:	611a      	str	r2, [r3, #16]
 80056ce:	4b98      	ldr	r3, [pc, #608]	; (8005930 <LCD_Init+0x3980>)
 80056d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056d4:	615a      	str	r2, [r3, #20]
 80056d6:	4b97      	ldr	r3, [pc, #604]	; (8005934 <LCD_Init+0x3984>)
 80056d8:	2202      	movs	r2, #2
 80056da:	60da      	str	r2, [r3, #12]
 80056dc:	4b94      	ldr	r3, [pc, #592]	; (8005930 <LCD_Init+0x3980>)
 80056de:	2280      	movs	r2, #128	; 0x80
 80056e0:	615a      	str	r2, [r3, #20]
 80056e2:	4b93      	ldr	r3, [pc, #588]	; (8005930 <LCD_Init+0x3980>)
 80056e4:	2280      	movs	r2, #128	; 0x80
 80056e6:	611a      	str	r2, [r3, #16]
 80056e8:	4b91      	ldr	r3, [pc, #580]	; (8005930 <LCD_Init+0x3980>)
 80056ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056ee:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x04);		//参数3 Validate M and N values   
 80056f0:	4b8f      	ldr	r3, [pc, #572]	; (8005930 <LCD_Init+0x3980>)
 80056f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056f6:	611a      	str	r2, [r3, #16]
 80056f8:	4b8d      	ldr	r3, [pc, #564]	; (8005930 <LCD_Init+0x3980>)
 80056fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056fe:	615a      	str	r2, [r3, #20]
 8005700:	4b8c      	ldr	r3, [pc, #560]	; (8005934 <LCD_Init+0x3984>)
 8005702:	2204      	movs	r2, #4
 8005704:	60da      	str	r2, [r3, #12]
 8005706:	4b8a      	ldr	r3, [pc, #552]	; (8005930 <LCD_Init+0x3980>)
 8005708:	2280      	movs	r2, #128	; 0x80
 800570a:	615a      	str	r2, [r3, #20]
 800570c:	4b88      	ldr	r3, [pc, #544]	; (8005930 <LCD_Init+0x3980>)
 800570e:	2280      	movs	r2, #128	; 0x80
 8005710:	611a      	str	r2, [r3, #16]
 8005712:	4b87      	ldr	r3, [pc, #540]	; (8005930 <LCD_Init+0x3980>)
 8005714:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005718:	611a      	str	r2, [r3, #16]
//		delay_us(100);
		HAL_Delay(1);
 800571a:	2001      	movs	r0, #1
 800571c:	f002 f874 	bl	8007808 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command
 8005720:	20e0      	movs	r0, #224	; 0xe0
 8005722:	f7fb f94d 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATA(0x01);		// enable PLL
 8005726:	4b82      	ldr	r3, [pc, #520]	; (8005930 <LCD_Init+0x3980>)
 8005728:	f44f 7280 	mov.w	r2, #256	; 0x100
 800572c:	611a      	str	r2, [r3, #16]
 800572e:	4b80      	ldr	r3, [pc, #512]	; (8005930 <LCD_Init+0x3980>)
 8005730:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005734:	615a      	str	r2, [r3, #20]
 8005736:	4b7f      	ldr	r3, [pc, #508]	; (8005934 <LCD_Init+0x3984>)
 8005738:	2201      	movs	r2, #1
 800573a:	60da      	str	r2, [r3, #12]
 800573c:	4b7c      	ldr	r3, [pc, #496]	; (8005930 <LCD_Init+0x3980>)
 800573e:	2280      	movs	r2, #128	; 0x80
 8005740:	615a      	str	r2, [r3, #20]
 8005742:	4b7b      	ldr	r3, [pc, #492]	; (8005930 <LCD_Init+0x3980>)
 8005744:	2280      	movs	r2, #128	; 0x80
 8005746:	611a      	str	r2, [r3, #16]
 8005748:	4b79      	ldr	r3, [pc, #484]	; (8005930 <LCD_Init+0x3980>)
 800574a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800574e:	611a      	str	r2, [r3, #16]
		HAL_Delay(10);
 8005750:	200a      	movs	r0, #10
 8005752:	f002 f859 	bl	8007808 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command again
 8005756:	20e0      	movs	r0, #224	; 0xe0
 8005758:	f7fb f932 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATA(0x03);		// now, use PLL output as system clock	
 800575c:	4b74      	ldr	r3, [pc, #464]	; (8005930 <LCD_Init+0x3980>)
 800575e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005762:	611a      	str	r2, [r3, #16]
 8005764:	4b72      	ldr	r3, [pc, #456]	; (8005930 <LCD_Init+0x3980>)
 8005766:	f44f 7200 	mov.w	r2, #512	; 0x200
 800576a:	615a      	str	r2, [r3, #20]
 800576c:	4b71      	ldr	r3, [pc, #452]	; (8005934 <LCD_Init+0x3984>)
 800576e:	2203      	movs	r2, #3
 8005770:	60da      	str	r2, [r3, #12]
 8005772:	4b6f      	ldr	r3, [pc, #444]	; (8005930 <LCD_Init+0x3980>)
 8005774:	2280      	movs	r2, #128	; 0x80
 8005776:	615a      	str	r2, [r3, #20]
 8005778:	4b6d      	ldr	r3, [pc, #436]	; (8005930 <LCD_Init+0x3980>)
 800577a:	2280      	movs	r2, #128	; 0x80
 800577c:	611a      	str	r2, [r3, #16]
 800577e:	4b6c      	ldr	r3, [pc, #432]	; (8005930 <LCD_Init+0x3980>)
 8005780:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005784:	611a      	str	r2, [r3, #16]
		HAL_Delay(12);
 8005786:	200c      	movs	r0, #12
 8005788:	f002 f83e 	bl	8007808 <HAL_Delay>
		LCD_WR_REG(0x01);		//软复位
 800578c:	2001      	movs	r0, #1
 800578e:	f7fb f917 	bl	80009c0 <LCD_WR_REG>
		HAL_Delay(10);
 8005792:	200a      	movs	r0, #10
 8005794:	f002 f838 	bl	8007808 <HAL_Delay>

		LCD_WR_REG(0xE6);		//设置像素频率,33Mhz
 8005798:	20e6      	movs	r0, #230	; 0xe6
 800579a:	f7fb f911 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATA(0x2F);
 800579e:	4b64      	ldr	r3, [pc, #400]	; (8005930 <LCD_Init+0x3980>)
 80057a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057a4:	611a      	str	r2, [r3, #16]
 80057a6:	4b62      	ldr	r3, [pc, #392]	; (8005930 <LCD_Init+0x3980>)
 80057a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057ac:	615a      	str	r2, [r3, #20]
 80057ae:	4b61      	ldr	r3, [pc, #388]	; (8005934 <LCD_Init+0x3984>)
 80057b0:	222f      	movs	r2, #47	; 0x2f
 80057b2:	60da      	str	r2, [r3, #12]
 80057b4:	4b5e      	ldr	r3, [pc, #376]	; (8005930 <LCD_Init+0x3980>)
 80057b6:	2280      	movs	r2, #128	; 0x80
 80057b8:	615a      	str	r2, [r3, #20]
 80057ba:	4b5d      	ldr	r3, [pc, #372]	; (8005930 <LCD_Init+0x3980>)
 80057bc:	2280      	movs	r2, #128	; 0x80
 80057be:	611a      	str	r2, [r3, #16]
 80057c0:	4b5b      	ldr	r3, [pc, #364]	; (8005930 <LCD_Init+0x3980>)
 80057c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057c6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 80057c8:	4b59      	ldr	r3, [pc, #356]	; (8005930 <LCD_Init+0x3980>)
 80057ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057ce:	611a      	str	r2, [r3, #16]
 80057d0:	4b57      	ldr	r3, [pc, #348]	; (8005930 <LCD_Init+0x3980>)
 80057d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057d6:	615a      	str	r2, [r3, #20]
 80057d8:	4b56      	ldr	r3, [pc, #344]	; (8005934 <LCD_Init+0x3984>)
 80057da:	22ff      	movs	r2, #255	; 0xff
 80057dc:	60da      	str	r2, [r3, #12]
 80057de:	4b54      	ldr	r3, [pc, #336]	; (8005930 <LCD_Init+0x3980>)
 80057e0:	2280      	movs	r2, #128	; 0x80
 80057e2:	615a      	str	r2, [r3, #20]
 80057e4:	4b52      	ldr	r3, [pc, #328]	; (8005930 <LCD_Init+0x3980>)
 80057e6:	2280      	movs	r2, #128	; 0x80
 80057e8:	611a      	str	r2, [r3, #16]
 80057ea:	4b51      	ldr	r3, [pc, #324]	; (8005930 <LCD_Init+0x3980>)
 80057ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057f0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 80057f2:	4b4f      	ldr	r3, [pc, #316]	; (8005930 <LCD_Init+0x3980>)
 80057f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057f8:	611a      	str	r2, [r3, #16]
 80057fa:	4b4d      	ldr	r3, [pc, #308]	; (8005930 <LCD_Init+0x3980>)
 80057fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005800:	615a      	str	r2, [r3, #20]
 8005802:	4b4c      	ldr	r3, [pc, #304]	; (8005934 <LCD_Init+0x3984>)
 8005804:	22ff      	movs	r2, #255	; 0xff
 8005806:	60da      	str	r2, [r3, #12]
 8005808:	4b49      	ldr	r3, [pc, #292]	; (8005930 <LCD_Init+0x3980>)
 800580a:	2280      	movs	r2, #128	; 0x80
 800580c:	615a      	str	r2, [r3, #20]
 800580e:	4b48      	ldr	r3, [pc, #288]	; (8005930 <LCD_Init+0x3980>)
 8005810:	2280      	movs	r2, #128	; 0x80
 8005812:	611a      	str	r2, [r3, #16]
 8005814:	4b46      	ldr	r3, [pc, #280]	; (8005930 <LCD_Init+0x3980>)
 8005816:	f44f 7200 	mov.w	r2, #512	; 0x200
 800581a:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB0);		//设置LCD模式
 800581c:	20b0      	movs	r0, #176	; 0xb0
 800581e:	f7fb f8cf 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATA(0x20);		//24位模式
 8005822:	4b43      	ldr	r3, [pc, #268]	; (8005930 <LCD_Init+0x3980>)
 8005824:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005828:	611a      	str	r2, [r3, #16]
 800582a:	4b41      	ldr	r3, [pc, #260]	; (8005930 <LCD_Init+0x3980>)
 800582c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005830:	615a      	str	r2, [r3, #20]
 8005832:	4b40      	ldr	r3, [pc, #256]	; (8005934 <LCD_Init+0x3984>)
 8005834:	2220      	movs	r2, #32
 8005836:	60da      	str	r2, [r3, #12]
 8005838:	4b3d      	ldr	r3, [pc, #244]	; (8005930 <LCD_Init+0x3980>)
 800583a:	2280      	movs	r2, #128	; 0x80
 800583c:	615a      	str	r2, [r3, #20]
 800583e:	4b3c      	ldr	r3, [pc, #240]	; (8005930 <LCD_Init+0x3980>)
 8005840:	2280      	movs	r2, #128	; 0x80
 8005842:	611a      	str	r2, [r3, #16]
 8005844:	4b3a      	ldr	r3, [pc, #232]	; (8005930 <LCD_Init+0x3980>)
 8005846:	f44f 7200 	mov.w	r2, #512	; 0x200
 800584a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//TFT 模式 
 800584c:	4b38      	ldr	r3, [pc, #224]	; (8005930 <LCD_Init+0x3980>)
 800584e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005852:	611a      	str	r2, [r3, #16]
 8005854:	4b36      	ldr	r3, [pc, #216]	; (8005930 <LCD_Init+0x3980>)
 8005856:	f44f 7200 	mov.w	r2, #512	; 0x200
 800585a:	615a      	str	r2, [r3, #20]
 800585c:	4b35      	ldr	r3, [pc, #212]	; (8005934 <LCD_Init+0x3984>)
 800585e:	2200      	movs	r2, #0
 8005860:	60da      	str	r2, [r3, #12]
 8005862:	4b33      	ldr	r3, [pc, #204]	; (8005930 <LCD_Init+0x3980>)
 8005864:	2280      	movs	r2, #128	; 0x80
 8005866:	615a      	str	r2, [r3, #20]
 8005868:	4b31      	ldr	r3, [pc, #196]	; (8005930 <LCD_Init+0x3980>)
 800586a:	2280      	movs	r2, #128	; 0x80
 800586c:	611a      	str	r2, [r3, #16]
 800586e:	4b30      	ldr	r3, [pc, #192]	; (8005930 <LCD_Init+0x3980>)
 8005870:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005874:	611a      	str	r2, [r3, #16]

		LCD_WR_DATA((SSD_HOR_RESOLUTION-1)>>8);		//设置LCD水平像素
 8005876:	4b2e      	ldr	r3, [pc, #184]	; (8005930 <LCD_Init+0x3980>)
 8005878:	f44f 7280 	mov.w	r2, #256	; 0x100
 800587c:	611a      	str	r2, [r3, #16]
 800587e:	4b2c      	ldr	r3, [pc, #176]	; (8005930 <LCD_Init+0x3980>)
 8005880:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005884:	615a      	str	r2, [r3, #20]
 8005886:	4b2b      	ldr	r3, [pc, #172]	; (8005934 <LCD_Init+0x3984>)
 8005888:	2203      	movs	r2, #3
 800588a:	60da      	str	r2, [r3, #12]
 800588c:	4b28      	ldr	r3, [pc, #160]	; (8005930 <LCD_Init+0x3980>)
 800588e:	2280      	movs	r2, #128	; 0x80
 8005890:	615a      	str	r2, [r3, #20]
 8005892:	4b27      	ldr	r3, [pc, #156]	; (8005930 <LCD_Init+0x3980>)
 8005894:	2280      	movs	r2, #128	; 0x80
 8005896:	611a      	str	r2, [r3, #16]
 8005898:	4b25      	ldr	r3, [pc, #148]	; (8005930 <LCD_Init+0x3980>)
 800589a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800589e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_RESOLUTION-1);
 80058a0:	4b23      	ldr	r3, [pc, #140]	; (8005930 <LCD_Init+0x3980>)
 80058a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058a6:	611a      	str	r2, [r3, #16]
 80058a8:	4b21      	ldr	r3, [pc, #132]	; (8005930 <LCD_Init+0x3980>)
 80058aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058ae:	615a      	str	r2, [r3, #20]
 80058b0:	4b20      	ldr	r3, [pc, #128]	; (8005934 <LCD_Init+0x3984>)
 80058b2:	f240 321f 	movw	r2, #799	; 0x31f
 80058b6:	60da      	str	r2, [r3, #12]
 80058b8:	4b1d      	ldr	r3, [pc, #116]	; (8005930 <LCD_Init+0x3980>)
 80058ba:	2280      	movs	r2, #128	; 0x80
 80058bc:	615a      	str	r2, [r3, #20]
 80058be:	4b1c      	ldr	r3, [pc, #112]	; (8005930 <LCD_Init+0x3980>)
 80058c0:	2280      	movs	r2, #128	; 0x80
 80058c2:	611a      	str	r2, [r3, #16]
 80058c4:	4b1a      	ldr	r3, [pc, #104]	; (8005930 <LCD_Init+0x3980>)
 80058c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058ca:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((SSD_VER_RESOLUTION-1)>>8);		//设置LCD垂直像素
 80058cc:	4b18      	ldr	r3, [pc, #96]	; (8005930 <LCD_Init+0x3980>)
 80058ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058d2:	611a      	str	r2, [r3, #16]
 80058d4:	4b16      	ldr	r3, [pc, #88]	; (8005930 <LCD_Init+0x3980>)
 80058d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058da:	615a      	str	r2, [r3, #20]
 80058dc:	4b15      	ldr	r3, [pc, #84]	; (8005934 <LCD_Init+0x3984>)
 80058de:	2201      	movs	r2, #1
 80058e0:	60da      	str	r2, [r3, #12]
 80058e2:	4b13      	ldr	r3, [pc, #76]	; (8005930 <LCD_Init+0x3980>)
 80058e4:	2280      	movs	r2, #128	; 0x80
 80058e6:	615a      	str	r2, [r3, #20]
 80058e8:	4b11      	ldr	r3, [pc, #68]	; (8005930 <LCD_Init+0x3980>)
 80058ea:	2280      	movs	r2, #128	; 0x80
 80058ec:	611a      	str	r2, [r3, #16]
 80058ee:	4b10      	ldr	r3, [pc, #64]	; (8005930 <LCD_Init+0x3980>)
 80058f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058f4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_RESOLUTION-1);
 80058f6:	4b0e      	ldr	r3, [pc, #56]	; (8005930 <LCD_Init+0x3980>)
 80058f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058fc:	611a      	str	r2, [r3, #16]
 80058fe:	4b0c      	ldr	r3, [pc, #48]	; (8005930 <LCD_Init+0x3980>)
 8005900:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005904:	615a      	str	r2, [r3, #20]
 8005906:	4b0b      	ldr	r3, [pc, #44]	; (8005934 <LCD_Init+0x3984>)
 8005908:	f240 12df 	movw	r2, #479	; 0x1df
 800590c:	60da      	str	r2, [r3, #12]
 800590e:	4b08      	ldr	r3, [pc, #32]	; (8005930 <LCD_Init+0x3980>)
 8005910:	2280      	movs	r2, #128	; 0x80
 8005912:	615a      	str	r2, [r3, #20]
 8005914:	4b06      	ldr	r3, [pc, #24]	; (8005930 <LCD_Init+0x3980>)
 8005916:	2280      	movs	r2, #128	; 0x80
 8005918:	611a      	str	r2, [r3, #16]
 800591a:	4b05      	ldr	r3, [pc, #20]	; (8005930 <LCD_Init+0x3980>)
 800591c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005920:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//RGB序列 
 8005922:	4b03      	ldr	r3, [pc, #12]	; (8005930 <LCD_Init+0x3980>)
 8005924:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005928:	e006      	b.n	8005938 <LCD_Init+0x3988>
 800592a:	bf00      	nop
 800592c:	200000f4 	.word	0x200000f4
 8005930:	40011000 	.word	0x40011000
 8005934:	40010c00 	.word	0x40010c00
 8005938:	611a      	str	r2, [r3, #16]
 800593a:	4ba3      	ldr	r3, [pc, #652]	; (8005bc8 <LCD_Init+0x3c18>)
 800593c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005940:	615a      	str	r2, [r3, #20]
 8005942:	4ba2      	ldr	r3, [pc, #648]	; (8005bcc <LCD_Init+0x3c1c>)
 8005944:	2200      	movs	r2, #0
 8005946:	60da      	str	r2, [r3, #12]
 8005948:	4b9f      	ldr	r3, [pc, #636]	; (8005bc8 <LCD_Init+0x3c18>)
 800594a:	2280      	movs	r2, #128	; 0x80
 800594c:	615a      	str	r2, [r3, #20]
 800594e:	4b9e      	ldr	r3, [pc, #632]	; (8005bc8 <LCD_Init+0x3c18>)
 8005950:	2280      	movs	r2, #128	; 0x80
 8005952:	611a      	str	r2, [r3, #16]
 8005954:	4b9c      	ldr	r3, [pc, #624]	; (8005bc8 <LCD_Init+0x3c18>)
 8005956:	f44f 7200 	mov.w	r2, #512	; 0x200
 800595a:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB4);		//Set horizontal period
 800595c:	20b4      	movs	r0, #180	; 0xb4
 800595e:	f7fb f82f 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATA((SSD_HT-1)>>8);
 8005962:	4b99      	ldr	r3, [pc, #612]	; (8005bc8 <LCD_Init+0x3c18>)
 8005964:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005968:	611a      	str	r2, [r3, #16]
 800596a:	4b97      	ldr	r3, [pc, #604]	; (8005bc8 <LCD_Init+0x3c18>)
 800596c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005970:	615a      	str	r2, [r3, #20]
 8005972:	4b96      	ldr	r3, [pc, #600]	; (8005bcc <LCD_Init+0x3c1c>)
 8005974:	2204      	movs	r2, #4
 8005976:	60da      	str	r2, [r3, #12]
 8005978:	4b93      	ldr	r3, [pc, #588]	; (8005bc8 <LCD_Init+0x3c18>)
 800597a:	2280      	movs	r2, #128	; 0x80
 800597c:	615a      	str	r2, [r3, #20]
 800597e:	4b92      	ldr	r3, [pc, #584]	; (8005bc8 <LCD_Init+0x3c18>)
 8005980:	2280      	movs	r2, #128	; 0x80
 8005982:	611a      	str	r2, [r3, #16]
 8005984:	4b90      	ldr	r3, [pc, #576]	; (8005bc8 <LCD_Init+0x3c18>)
 8005986:	f44f 7200 	mov.w	r2, #512	; 0x200
 800598a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HT-1);
 800598c:	4b8e      	ldr	r3, [pc, #568]	; (8005bc8 <LCD_Init+0x3c18>)
 800598e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005992:	611a      	str	r2, [r3, #16]
 8005994:	4b8c      	ldr	r3, [pc, #560]	; (8005bc8 <LCD_Init+0x3c18>)
 8005996:	f44f 7200 	mov.w	r2, #512	; 0x200
 800599a:	615a      	str	r2, [r3, #20]
 800599c:	4b8b      	ldr	r3, [pc, #556]	; (8005bcc <LCD_Init+0x3c1c>)
 800599e:	f240 421f 	movw	r2, #1055	; 0x41f
 80059a2:	60da      	str	r2, [r3, #12]
 80059a4:	4b88      	ldr	r3, [pc, #544]	; (8005bc8 <LCD_Init+0x3c18>)
 80059a6:	2280      	movs	r2, #128	; 0x80
 80059a8:	615a      	str	r2, [r3, #20]
 80059aa:	4b87      	ldr	r3, [pc, #540]	; (8005bc8 <LCD_Init+0x3c18>)
 80059ac:	2280      	movs	r2, #128	; 0x80
 80059ae:	611a      	str	r2, [r3, #16]
 80059b0:	4b85      	ldr	r3, [pc, #532]	; (8005bc8 <LCD_Init+0x3c18>)
 80059b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059b6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS>>8);
 80059b8:	4b83      	ldr	r3, [pc, #524]	; (8005bc8 <LCD_Init+0x3c18>)
 80059ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059be:	611a      	str	r2, [r3, #16]
 80059c0:	4b81      	ldr	r3, [pc, #516]	; (8005bc8 <LCD_Init+0x3c18>)
 80059c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059c6:	615a      	str	r2, [r3, #20]
 80059c8:	4b80      	ldr	r3, [pc, #512]	; (8005bcc <LCD_Init+0x3c1c>)
 80059ca:	2200      	movs	r2, #0
 80059cc:	60da      	str	r2, [r3, #12]
 80059ce:	4b7e      	ldr	r3, [pc, #504]	; (8005bc8 <LCD_Init+0x3c18>)
 80059d0:	2280      	movs	r2, #128	; 0x80
 80059d2:	615a      	str	r2, [r3, #20]
 80059d4:	4b7c      	ldr	r3, [pc, #496]	; (8005bc8 <LCD_Init+0x3c18>)
 80059d6:	2280      	movs	r2, #128	; 0x80
 80059d8:	611a      	str	r2, [r3, #16]
 80059da:	4b7b      	ldr	r3, [pc, #492]	; (8005bc8 <LCD_Init+0x3c18>)
 80059dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059e0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS);
 80059e2:	4b79      	ldr	r3, [pc, #484]	; (8005bc8 <LCD_Init+0x3c18>)
 80059e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059e8:	611a      	str	r2, [r3, #16]
 80059ea:	4b77      	ldr	r3, [pc, #476]	; (8005bc8 <LCD_Init+0x3c18>)
 80059ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059f0:	615a      	str	r2, [r3, #20]
 80059f2:	4b76      	ldr	r3, [pc, #472]	; (8005bcc <LCD_Init+0x3c1c>)
 80059f4:	222e      	movs	r2, #46	; 0x2e
 80059f6:	60da      	str	r2, [r3, #12]
 80059f8:	4b73      	ldr	r3, [pc, #460]	; (8005bc8 <LCD_Init+0x3c18>)
 80059fa:	2280      	movs	r2, #128	; 0x80
 80059fc:	615a      	str	r2, [r3, #20]
 80059fe:	4b72      	ldr	r3, [pc, #456]	; (8005bc8 <LCD_Init+0x3c18>)
 8005a00:	2280      	movs	r2, #128	; 0x80
 8005a02:	611a      	str	r2, [r3, #16]
 8005a04:	4b70      	ldr	r3, [pc, #448]	; (8005bc8 <LCD_Init+0x3c18>)
 8005a06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a0a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_PULSE_WIDTH-1);
 8005a0c:	4b6e      	ldr	r3, [pc, #440]	; (8005bc8 <LCD_Init+0x3c18>)
 8005a0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a12:	611a      	str	r2, [r3, #16]
 8005a14:	4b6c      	ldr	r3, [pc, #432]	; (8005bc8 <LCD_Init+0x3c18>)
 8005a16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a1a:	615a      	str	r2, [r3, #20]
 8005a1c:	4b6b      	ldr	r3, [pc, #428]	; (8005bcc <LCD_Init+0x3c1c>)
 8005a1e:	2200      	movs	r2, #0
 8005a20:	60da      	str	r2, [r3, #12]
 8005a22:	4b69      	ldr	r3, [pc, #420]	; (8005bc8 <LCD_Init+0x3c18>)
 8005a24:	2280      	movs	r2, #128	; 0x80
 8005a26:	615a      	str	r2, [r3, #20]
 8005a28:	4b67      	ldr	r3, [pc, #412]	; (8005bc8 <LCD_Init+0x3c18>)
 8005a2a:	2280      	movs	r2, #128	; 0x80
 8005a2c:	611a      	str	r2, [r3, #16]
 8005a2e:	4b66      	ldr	r3, [pc, #408]	; (8005bc8 <LCD_Init+0x3c18>)
 8005a30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a34:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005a36:	4b64      	ldr	r3, [pc, #400]	; (8005bc8 <LCD_Init+0x3c18>)
 8005a38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a3c:	611a      	str	r2, [r3, #16]
 8005a3e:	4b62      	ldr	r3, [pc, #392]	; (8005bc8 <LCD_Init+0x3c18>)
 8005a40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a44:	615a      	str	r2, [r3, #20]
 8005a46:	4b61      	ldr	r3, [pc, #388]	; (8005bcc <LCD_Init+0x3c1c>)
 8005a48:	2200      	movs	r2, #0
 8005a4a:	60da      	str	r2, [r3, #12]
 8005a4c:	4b5e      	ldr	r3, [pc, #376]	; (8005bc8 <LCD_Init+0x3c18>)
 8005a4e:	2280      	movs	r2, #128	; 0x80
 8005a50:	615a      	str	r2, [r3, #20]
 8005a52:	4b5d      	ldr	r3, [pc, #372]	; (8005bc8 <LCD_Init+0x3c18>)
 8005a54:	2280      	movs	r2, #128	; 0x80
 8005a56:	611a      	str	r2, [r3, #16]
 8005a58:	4b5b      	ldr	r3, [pc, #364]	; (8005bc8 <LCD_Init+0x3c18>)
 8005a5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a5e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005a60:	4b59      	ldr	r3, [pc, #356]	; (8005bc8 <LCD_Init+0x3c18>)
 8005a62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a66:	611a      	str	r2, [r3, #16]
 8005a68:	4b57      	ldr	r3, [pc, #348]	; (8005bc8 <LCD_Init+0x3c18>)
 8005a6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a6e:	615a      	str	r2, [r3, #20]
 8005a70:	4b56      	ldr	r3, [pc, #344]	; (8005bcc <LCD_Init+0x3c1c>)
 8005a72:	2200      	movs	r2, #0
 8005a74:	60da      	str	r2, [r3, #12]
 8005a76:	4b54      	ldr	r3, [pc, #336]	; (8005bc8 <LCD_Init+0x3c18>)
 8005a78:	2280      	movs	r2, #128	; 0x80
 8005a7a:	615a      	str	r2, [r3, #20]
 8005a7c:	4b52      	ldr	r3, [pc, #328]	; (8005bc8 <LCD_Init+0x3c18>)
 8005a7e:	2280      	movs	r2, #128	; 0x80
 8005a80:	611a      	str	r2, [r3, #16]
 8005a82:	4b51      	ldr	r3, [pc, #324]	; (8005bc8 <LCD_Init+0x3c18>)
 8005a84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a88:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005a8a:	4b4f      	ldr	r3, [pc, #316]	; (8005bc8 <LCD_Init+0x3c18>)
 8005a8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a90:	611a      	str	r2, [r3, #16]
 8005a92:	4b4d      	ldr	r3, [pc, #308]	; (8005bc8 <LCD_Init+0x3c18>)
 8005a94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a98:	615a      	str	r2, [r3, #20]
 8005a9a:	4b4c      	ldr	r3, [pc, #304]	; (8005bcc <LCD_Init+0x3c1c>)
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	60da      	str	r2, [r3, #12]
 8005aa0:	4b49      	ldr	r3, [pc, #292]	; (8005bc8 <LCD_Init+0x3c18>)
 8005aa2:	2280      	movs	r2, #128	; 0x80
 8005aa4:	615a      	str	r2, [r3, #20]
 8005aa6:	4b48      	ldr	r3, [pc, #288]	; (8005bc8 <LCD_Init+0x3c18>)
 8005aa8:	2280      	movs	r2, #128	; 0x80
 8005aaa:	611a      	str	r2, [r3, #16]
 8005aac:	4b46      	ldr	r3, [pc, #280]	; (8005bc8 <LCD_Init+0x3c18>)
 8005aae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ab2:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xB6);		//Set vertical period
 8005ab4:	20b6      	movs	r0, #182	; 0xb6
 8005ab6:	f7fa ff83 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATA((SSD_VT-1)>>8);
 8005aba:	4b43      	ldr	r3, [pc, #268]	; (8005bc8 <LCD_Init+0x3c18>)
 8005abc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ac0:	611a      	str	r2, [r3, #16]
 8005ac2:	4b41      	ldr	r3, [pc, #260]	; (8005bc8 <LCD_Init+0x3c18>)
 8005ac4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ac8:	615a      	str	r2, [r3, #20]
 8005aca:	4b40      	ldr	r3, [pc, #256]	; (8005bcc <LCD_Init+0x3c1c>)
 8005acc:	2202      	movs	r2, #2
 8005ace:	60da      	str	r2, [r3, #12]
 8005ad0:	4b3d      	ldr	r3, [pc, #244]	; (8005bc8 <LCD_Init+0x3c18>)
 8005ad2:	2280      	movs	r2, #128	; 0x80
 8005ad4:	615a      	str	r2, [r3, #20]
 8005ad6:	4b3c      	ldr	r3, [pc, #240]	; (8005bc8 <LCD_Init+0x3c18>)
 8005ad8:	2280      	movs	r2, #128	; 0x80
 8005ada:	611a      	str	r2, [r3, #16]
 8005adc:	4b3a      	ldr	r3, [pc, #232]	; (8005bc8 <LCD_Init+0x3c18>)
 8005ade:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ae2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VT-1);
 8005ae4:	4b38      	ldr	r3, [pc, #224]	; (8005bc8 <LCD_Init+0x3c18>)
 8005ae6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005aea:	611a      	str	r2, [r3, #16]
 8005aec:	4b36      	ldr	r3, [pc, #216]	; (8005bc8 <LCD_Init+0x3c18>)
 8005aee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005af2:	615a      	str	r2, [r3, #20]
 8005af4:	4b35      	ldr	r3, [pc, #212]	; (8005bcc <LCD_Init+0x3c1c>)
 8005af6:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8005afa:	60da      	str	r2, [r3, #12]
 8005afc:	4b32      	ldr	r3, [pc, #200]	; (8005bc8 <LCD_Init+0x3c18>)
 8005afe:	2280      	movs	r2, #128	; 0x80
 8005b00:	615a      	str	r2, [r3, #20]
 8005b02:	4b31      	ldr	r3, [pc, #196]	; (8005bc8 <LCD_Init+0x3c18>)
 8005b04:	2280      	movs	r2, #128	; 0x80
 8005b06:	611a      	str	r2, [r3, #16]
 8005b08:	4b2f      	ldr	r3, [pc, #188]	; (8005bc8 <LCD_Init+0x3c18>)
 8005b0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b0e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS>>8);
 8005b10:	4b2d      	ldr	r3, [pc, #180]	; (8005bc8 <LCD_Init+0x3c18>)
 8005b12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b16:	611a      	str	r2, [r3, #16]
 8005b18:	4b2b      	ldr	r3, [pc, #172]	; (8005bc8 <LCD_Init+0x3c18>)
 8005b1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b1e:	615a      	str	r2, [r3, #20]
 8005b20:	4b2a      	ldr	r3, [pc, #168]	; (8005bcc <LCD_Init+0x3c1c>)
 8005b22:	2200      	movs	r2, #0
 8005b24:	60da      	str	r2, [r3, #12]
 8005b26:	4b28      	ldr	r3, [pc, #160]	; (8005bc8 <LCD_Init+0x3c18>)
 8005b28:	2280      	movs	r2, #128	; 0x80
 8005b2a:	615a      	str	r2, [r3, #20]
 8005b2c:	4b26      	ldr	r3, [pc, #152]	; (8005bc8 <LCD_Init+0x3c18>)
 8005b2e:	2280      	movs	r2, #128	; 0x80
 8005b30:	611a      	str	r2, [r3, #16]
 8005b32:	4b25      	ldr	r3, [pc, #148]	; (8005bc8 <LCD_Init+0x3c18>)
 8005b34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b38:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS);
 8005b3a:	4b23      	ldr	r3, [pc, #140]	; (8005bc8 <LCD_Init+0x3c18>)
 8005b3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b40:	611a      	str	r2, [r3, #16]
 8005b42:	4b21      	ldr	r3, [pc, #132]	; (8005bc8 <LCD_Init+0x3c18>)
 8005b44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b48:	615a      	str	r2, [r3, #20]
 8005b4a:	4b20      	ldr	r3, [pc, #128]	; (8005bcc <LCD_Init+0x3c1c>)
 8005b4c:	2217      	movs	r2, #23
 8005b4e:	60da      	str	r2, [r3, #12]
 8005b50:	4b1d      	ldr	r3, [pc, #116]	; (8005bc8 <LCD_Init+0x3c18>)
 8005b52:	2280      	movs	r2, #128	; 0x80
 8005b54:	615a      	str	r2, [r3, #20]
 8005b56:	4b1c      	ldr	r3, [pc, #112]	; (8005bc8 <LCD_Init+0x3c18>)
 8005b58:	2280      	movs	r2, #128	; 0x80
 8005b5a:	611a      	str	r2, [r3, #16]
 8005b5c:	4b1a      	ldr	r3, [pc, #104]	; (8005bc8 <LCD_Init+0x3c18>)
 8005b5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b62:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_FRONT_PORCH-1);
 8005b64:	4b18      	ldr	r3, [pc, #96]	; (8005bc8 <LCD_Init+0x3c18>)
 8005b66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b6a:	611a      	str	r2, [r3, #16]
 8005b6c:	4b16      	ldr	r3, [pc, #88]	; (8005bc8 <LCD_Init+0x3c18>)
 8005b6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b72:	615a      	str	r2, [r3, #20]
 8005b74:	4b15      	ldr	r3, [pc, #84]	; (8005bcc <LCD_Init+0x3c1c>)
 8005b76:	2215      	movs	r2, #21
 8005b78:	60da      	str	r2, [r3, #12]
 8005b7a:	4b13      	ldr	r3, [pc, #76]	; (8005bc8 <LCD_Init+0x3c18>)
 8005b7c:	2280      	movs	r2, #128	; 0x80
 8005b7e:	615a      	str	r2, [r3, #20]
 8005b80:	4b11      	ldr	r3, [pc, #68]	; (8005bc8 <LCD_Init+0x3c18>)
 8005b82:	2280      	movs	r2, #128	; 0x80
 8005b84:	611a      	str	r2, [r3, #16]
 8005b86:	4b10      	ldr	r3, [pc, #64]	; (8005bc8 <LCD_Init+0x3c18>)
 8005b88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b8c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005b8e:	4b0e      	ldr	r3, [pc, #56]	; (8005bc8 <LCD_Init+0x3c18>)
 8005b90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b94:	611a      	str	r2, [r3, #16]
 8005b96:	4b0c      	ldr	r3, [pc, #48]	; (8005bc8 <LCD_Init+0x3c18>)
 8005b98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b9c:	615a      	str	r2, [r3, #20]
 8005b9e:	4b0b      	ldr	r3, [pc, #44]	; (8005bcc <LCD_Init+0x3c1c>)
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	60da      	str	r2, [r3, #12]
 8005ba4:	4b08      	ldr	r3, [pc, #32]	; (8005bc8 <LCD_Init+0x3c18>)
 8005ba6:	2280      	movs	r2, #128	; 0x80
 8005ba8:	615a      	str	r2, [r3, #20]
 8005baa:	4b07      	ldr	r3, [pc, #28]	; (8005bc8 <LCD_Init+0x3c18>)
 8005bac:	2280      	movs	r2, #128	; 0x80
 8005bae:	611a      	str	r2, [r3, #16]
 8005bb0:	4b05      	ldr	r3, [pc, #20]	; (8005bc8 <LCD_Init+0x3c18>)
 8005bb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bb6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005bb8:	4b03      	ldr	r3, [pc, #12]	; (8005bc8 <LCD_Init+0x3c18>)
 8005bba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bbe:	611a      	str	r2, [r3, #16]
 8005bc0:	4b01      	ldr	r3, [pc, #4]	; (8005bc8 <LCD_Init+0x3c18>)
 8005bc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bc6:	e003      	b.n	8005bd0 <LCD_Init+0x3c20>
 8005bc8:	40011000 	.word	0x40011000
 8005bcc:	40010c00 	.word	0x40010c00
 8005bd0:	615a      	str	r2, [r3, #20]
 8005bd2:	4b8b      	ldr	r3, [pc, #556]	; (8005e00 <LCD_Init+0x3e50>)
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	60da      	str	r2, [r3, #12]
 8005bd8:	4b8a      	ldr	r3, [pc, #552]	; (8005e04 <LCD_Init+0x3e54>)
 8005bda:	2280      	movs	r2, #128	; 0x80
 8005bdc:	615a      	str	r2, [r3, #20]
 8005bde:	4b89      	ldr	r3, [pc, #548]	; (8005e04 <LCD_Init+0x3e54>)
 8005be0:	2280      	movs	r2, #128	; 0x80
 8005be2:	611a      	str	r2, [r3, #16]
 8005be4:	4b87      	ldr	r3, [pc, #540]	; (8005e04 <LCD_Init+0x3e54>)
 8005be6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bea:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xF0);	//设置SSD1963与CPU接口为16bit  
 8005bec:	20f0      	movs	r0, #240	; 0xf0
 8005bee:	f7fa fee7 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//16-bit(565 format) data for 16bpp 
 8005bf2:	4b84      	ldr	r3, [pc, #528]	; (8005e04 <LCD_Init+0x3e54>)
 8005bf4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bf8:	611a      	str	r2, [r3, #16]
 8005bfa:	4b82      	ldr	r3, [pc, #520]	; (8005e04 <LCD_Init+0x3e54>)
 8005bfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c00:	615a      	str	r2, [r3, #20]
 8005c02:	4b7f      	ldr	r3, [pc, #508]	; (8005e00 <LCD_Init+0x3e50>)
 8005c04:	2203      	movs	r2, #3
 8005c06:	60da      	str	r2, [r3, #12]
 8005c08:	4b7e      	ldr	r3, [pc, #504]	; (8005e04 <LCD_Init+0x3e54>)
 8005c0a:	2280      	movs	r2, #128	; 0x80
 8005c0c:	615a      	str	r2, [r3, #20]
 8005c0e:	4b7d      	ldr	r3, [pc, #500]	; (8005e04 <LCD_Init+0x3e54>)
 8005c10:	2280      	movs	r2, #128	; 0x80
 8005c12:	611a      	str	r2, [r3, #16]
 8005c14:	4b7b      	ldr	r3, [pc, #492]	; (8005e04 <LCD_Init+0x3e54>)
 8005c16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c1a:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0x29);	//开启显示
 8005c1c:	2029      	movs	r0, #41	; 0x29
 8005c1e:	f7fa fecf 	bl	80009c0 <LCD_WR_REG>
		//设置PWM输出  背光通过占空比可调 
		LCD_WR_REG(0xD0);	//设置自动白平衡DBC
 8005c22:	20d0      	movs	r0, #208	; 0xd0
 8005c24:	f7fa fecc 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATA(0x00);	//disable
 8005c28:	4b76      	ldr	r3, [pc, #472]	; (8005e04 <LCD_Init+0x3e54>)
 8005c2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c2e:	611a      	str	r2, [r3, #16]
 8005c30:	4b74      	ldr	r3, [pc, #464]	; (8005e04 <LCD_Init+0x3e54>)
 8005c32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c36:	615a      	str	r2, [r3, #20]
 8005c38:	4b71      	ldr	r3, [pc, #452]	; (8005e00 <LCD_Init+0x3e50>)
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	60da      	str	r2, [r3, #12]
 8005c3e:	4b71      	ldr	r3, [pc, #452]	; (8005e04 <LCD_Init+0x3e54>)
 8005c40:	2280      	movs	r2, #128	; 0x80
 8005c42:	615a      	str	r2, [r3, #20]
 8005c44:	4b6f      	ldr	r3, [pc, #444]	; (8005e04 <LCD_Init+0x3e54>)
 8005c46:	2280      	movs	r2, #128	; 0x80
 8005c48:	611a      	str	r2, [r3, #16]
 8005c4a:	4b6e      	ldr	r3, [pc, #440]	; (8005e04 <LCD_Init+0x3e54>)
 8005c4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c50:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xBE);	//配置PWM输出
 8005c52:	20be      	movs	r0, #190	; 0xbe
 8005c54:	f7fa feb4 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATA(0x05);	//1设置PWM频率
 8005c58:	4b6a      	ldr	r3, [pc, #424]	; (8005e04 <LCD_Init+0x3e54>)
 8005c5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c5e:	611a      	str	r2, [r3, #16]
 8005c60:	4b68      	ldr	r3, [pc, #416]	; (8005e04 <LCD_Init+0x3e54>)
 8005c62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c66:	615a      	str	r2, [r3, #20]
 8005c68:	4b65      	ldr	r3, [pc, #404]	; (8005e00 <LCD_Init+0x3e50>)
 8005c6a:	2205      	movs	r2, #5
 8005c6c:	60da      	str	r2, [r3, #12]
 8005c6e:	4b65      	ldr	r3, [pc, #404]	; (8005e04 <LCD_Init+0x3e54>)
 8005c70:	2280      	movs	r2, #128	; 0x80
 8005c72:	615a      	str	r2, [r3, #20]
 8005c74:	4b63      	ldr	r3, [pc, #396]	; (8005e04 <LCD_Init+0x3e54>)
 8005c76:	2280      	movs	r2, #128	; 0x80
 8005c78:	611a      	str	r2, [r3, #16]
 8005c7a:	4b62      	ldr	r3, [pc, #392]	; (8005e04 <LCD_Init+0x3e54>)
 8005c7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c80:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFE);	//2设置PWM占空比
 8005c82:	4b60      	ldr	r3, [pc, #384]	; (8005e04 <LCD_Init+0x3e54>)
 8005c84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c88:	611a      	str	r2, [r3, #16]
 8005c8a:	4b5e      	ldr	r3, [pc, #376]	; (8005e04 <LCD_Init+0x3e54>)
 8005c8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c90:	615a      	str	r2, [r3, #20]
 8005c92:	4b5b      	ldr	r3, [pc, #364]	; (8005e00 <LCD_Init+0x3e50>)
 8005c94:	22fe      	movs	r2, #254	; 0xfe
 8005c96:	60da      	str	r2, [r3, #12]
 8005c98:	4b5a      	ldr	r3, [pc, #360]	; (8005e04 <LCD_Init+0x3e54>)
 8005c9a:	2280      	movs	r2, #128	; 0x80
 8005c9c:	615a      	str	r2, [r3, #20]
 8005c9e:	4b59      	ldr	r3, [pc, #356]	; (8005e04 <LCD_Init+0x3e54>)
 8005ca0:	2280      	movs	r2, #128	; 0x80
 8005ca2:	611a      	str	r2, [r3, #16]
 8005ca4:	4b57      	ldr	r3, [pc, #348]	; (8005e04 <LCD_Init+0x3e54>)
 8005ca6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005caa:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//3设置C
 8005cac:	4b55      	ldr	r3, [pc, #340]	; (8005e04 <LCD_Init+0x3e54>)
 8005cae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005cb2:	611a      	str	r2, [r3, #16]
 8005cb4:	4b53      	ldr	r3, [pc, #332]	; (8005e04 <LCD_Init+0x3e54>)
 8005cb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cba:	615a      	str	r2, [r3, #20]
 8005cbc:	4b50      	ldr	r3, [pc, #320]	; (8005e00 <LCD_Init+0x3e50>)
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	60da      	str	r2, [r3, #12]
 8005cc2:	4b50      	ldr	r3, [pc, #320]	; (8005e04 <LCD_Init+0x3e54>)
 8005cc4:	2280      	movs	r2, #128	; 0x80
 8005cc6:	615a      	str	r2, [r3, #20]
 8005cc8:	4b4e      	ldr	r3, [pc, #312]	; (8005e04 <LCD_Init+0x3e54>)
 8005cca:	2280      	movs	r2, #128	; 0x80
 8005ccc:	611a      	str	r2, [r3, #16]
 8005cce:	4b4d      	ldr	r3, [pc, #308]	; (8005e04 <LCD_Init+0x3e54>)
 8005cd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cd4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//4设置D
 8005cd6:	4b4b      	ldr	r3, [pc, #300]	; (8005e04 <LCD_Init+0x3e54>)
 8005cd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005cdc:	611a      	str	r2, [r3, #16]
 8005cde:	4b49      	ldr	r3, [pc, #292]	; (8005e04 <LCD_Init+0x3e54>)
 8005ce0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ce4:	615a      	str	r2, [r3, #20]
 8005ce6:	4b46      	ldr	r3, [pc, #280]	; (8005e00 <LCD_Init+0x3e50>)
 8005ce8:	2200      	movs	r2, #0
 8005cea:	60da      	str	r2, [r3, #12]
 8005cec:	4b45      	ldr	r3, [pc, #276]	; (8005e04 <LCD_Init+0x3e54>)
 8005cee:	2280      	movs	r2, #128	; 0x80
 8005cf0:	615a      	str	r2, [r3, #20]
 8005cf2:	4b44      	ldr	r3, [pc, #272]	; (8005e04 <LCD_Init+0x3e54>)
 8005cf4:	2280      	movs	r2, #128	; 0x80
 8005cf6:	611a      	str	r2, [r3, #16]
 8005cf8:	4b42      	ldr	r3, [pc, #264]	; (8005e04 <LCD_Init+0x3e54>)
 8005cfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cfe:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//5设置E 
 8005d00:	4b40      	ldr	r3, [pc, #256]	; (8005e04 <LCD_Init+0x3e54>)
 8005d02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d06:	611a      	str	r2, [r3, #16]
 8005d08:	4b3e      	ldr	r3, [pc, #248]	; (8005e04 <LCD_Init+0x3e54>)
 8005d0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d0e:	615a      	str	r2, [r3, #20]
 8005d10:	4b3b      	ldr	r3, [pc, #236]	; (8005e00 <LCD_Init+0x3e50>)
 8005d12:	2200      	movs	r2, #0
 8005d14:	60da      	str	r2, [r3, #12]
 8005d16:	4b3b      	ldr	r3, [pc, #236]	; (8005e04 <LCD_Init+0x3e54>)
 8005d18:	2280      	movs	r2, #128	; 0x80
 8005d1a:	615a      	str	r2, [r3, #20]
 8005d1c:	4b39      	ldr	r3, [pc, #228]	; (8005e04 <LCD_Init+0x3e54>)
 8005d1e:	2280      	movs	r2, #128	; 0x80
 8005d20:	611a      	str	r2, [r3, #16]
 8005d22:	4b38      	ldr	r3, [pc, #224]	; (8005e04 <LCD_Init+0x3e54>)
 8005d24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d28:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//6设置F 
 8005d2a:	4b36      	ldr	r3, [pc, #216]	; (8005e04 <LCD_Init+0x3e54>)
 8005d2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d30:	611a      	str	r2, [r3, #16]
 8005d32:	4b34      	ldr	r3, [pc, #208]	; (8005e04 <LCD_Init+0x3e54>)
 8005d34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d38:	615a      	str	r2, [r3, #20]
 8005d3a:	4b31      	ldr	r3, [pc, #196]	; (8005e00 <LCD_Init+0x3e50>)
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	60da      	str	r2, [r3, #12]
 8005d40:	4b30      	ldr	r3, [pc, #192]	; (8005e04 <LCD_Init+0x3e54>)
 8005d42:	2280      	movs	r2, #128	; 0x80
 8005d44:	615a      	str	r2, [r3, #20]
 8005d46:	4b2f      	ldr	r3, [pc, #188]	; (8005e04 <LCD_Init+0x3e54>)
 8005d48:	2280      	movs	r2, #128	; 0x80
 8005d4a:	611a      	str	r2, [r3, #16]
 8005d4c:	4b2d      	ldr	r3, [pc, #180]	; (8005e04 <LCD_Init+0x3e54>)
 8005d4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d52:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB8);	//设置GPIO配置
 8005d54:	20b8      	movs	r0, #184	; 0xb8
 8005d56:	f7fa fe33 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//2个IO口设置成输出
 8005d5a:	4b2a      	ldr	r3, [pc, #168]	; (8005e04 <LCD_Init+0x3e54>)
 8005d5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d60:	611a      	str	r2, [r3, #16]
 8005d62:	4b28      	ldr	r3, [pc, #160]	; (8005e04 <LCD_Init+0x3e54>)
 8005d64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d68:	615a      	str	r2, [r3, #20]
 8005d6a:	4b25      	ldr	r3, [pc, #148]	; (8005e00 <LCD_Init+0x3e50>)
 8005d6c:	2203      	movs	r2, #3
 8005d6e:	60da      	str	r2, [r3, #12]
 8005d70:	4b24      	ldr	r3, [pc, #144]	; (8005e04 <LCD_Init+0x3e54>)
 8005d72:	2280      	movs	r2, #128	; 0x80
 8005d74:	615a      	str	r2, [r3, #20]
 8005d76:	4b23      	ldr	r3, [pc, #140]	; (8005e04 <LCD_Init+0x3e54>)
 8005d78:	2280      	movs	r2, #128	; 0x80
 8005d7a:	611a      	str	r2, [r3, #16]
 8005d7c:	4b21      	ldr	r3, [pc, #132]	; (8005e04 <LCD_Init+0x3e54>)
 8005d7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d82:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//GPIO使用正常的IO功能 
 8005d84:	4b1f      	ldr	r3, [pc, #124]	; (8005e04 <LCD_Init+0x3e54>)
 8005d86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d8a:	611a      	str	r2, [r3, #16]
 8005d8c:	4b1d      	ldr	r3, [pc, #116]	; (8005e04 <LCD_Init+0x3e54>)
 8005d8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d92:	615a      	str	r2, [r3, #20]
 8005d94:	4b1a      	ldr	r3, [pc, #104]	; (8005e00 <LCD_Init+0x3e50>)
 8005d96:	2201      	movs	r2, #1
 8005d98:	60da      	str	r2, [r3, #12]
 8005d9a:	4b1a      	ldr	r3, [pc, #104]	; (8005e04 <LCD_Init+0x3e54>)
 8005d9c:	2280      	movs	r2, #128	; 0x80
 8005d9e:	615a      	str	r2, [r3, #20]
 8005da0:	4b18      	ldr	r3, [pc, #96]	; (8005e04 <LCD_Init+0x3e54>)
 8005da2:	2280      	movs	r2, #128	; 0x80
 8005da4:	611a      	str	r2, [r3, #16]
 8005da6:	4b17      	ldr	r3, [pc, #92]	; (8005e04 <LCD_Init+0x3e54>)
 8005da8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dac:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xBA);
 8005dae:	20ba      	movs	r0, #186	; 0xba
 8005db0:	f7fa fe06 	bl	80009c0 <LCD_WR_REG>
		LCD_WR_DATA(0X01);	//GPIO[1:0]=01,控制LCD方向
 8005db4:	4b13      	ldr	r3, [pc, #76]	; (8005e04 <LCD_Init+0x3e54>)
 8005db6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005dba:	611a      	str	r2, [r3, #16]
 8005dbc:	4b11      	ldr	r3, [pc, #68]	; (8005e04 <LCD_Init+0x3e54>)
 8005dbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dc2:	615a      	str	r2, [r3, #20]
 8005dc4:	4b0e      	ldr	r3, [pc, #56]	; (8005e00 <LCD_Init+0x3e50>)
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	60da      	str	r2, [r3, #12]
 8005dca:	4b0e      	ldr	r3, [pc, #56]	; (8005e04 <LCD_Init+0x3e54>)
 8005dcc:	2280      	movs	r2, #128	; 0x80
 8005dce:	615a      	str	r2, [r3, #20]
 8005dd0:	4b0c      	ldr	r3, [pc, #48]	; (8005e04 <LCD_Init+0x3e54>)
 8005dd2:	2280      	movs	r2, #128	; 0x80
 8005dd4:	611a      	str	r2, [r3, #16]
 8005dd6:	4b0b      	ldr	r3, [pc, #44]	; (8005e04 <LCD_Init+0x3e54>)
 8005dd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ddc:	611a      	str	r2, [r3, #16]

		LCD_SSD_BackLightSet(100);	//背光设置为最亮
 8005dde:	2064      	movs	r0, #100	; 0x64
 8005de0:	f7fb ff36 	bl	8001c50 <LCD_SSD_BackLightSet>
	}
	LCD_Display_Dir(0);		 	//默认为竖屏
 8005de4:	2000      	movs	r0, #0
 8005de6:	f7fb ffd7 	bl	8001d98 <LCD_Display_Dir>
	LCD_LED = 1;					//点亮背光
 8005dea:	4b07      	ldr	r3, [pc, #28]	; (8005e08 <LCD_Init+0x3e58>)
 8005dec:	2201      	movs	r2, #1
 8005dee:	601a      	str	r2, [r3, #0]
	LCD_Clear(WHITE);
 8005df0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005df4:	f000 f80a 	bl	8005e0c <LCD_Clear>
}
 8005df8:	bf00      	nop
 8005dfa:	3718      	adds	r7, #24
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	40010c00 	.word	0x40010c00
 8005e04:	40011000 	.word	0x40011000
 8005e08:	422201a8 	.word	0x422201a8

08005e0c <LCD_Clear>:

// Clear the screen with specific color
void LCD_Clear(uint16_t color) {
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	4603      	mov	r3, r0
 8005e14:	80fb      	strh	r3, [r7, #6]
	uint32_t index = 0;
 8005e16:	2300      	movs	r3, #0
 8005e18:	60fb      	str	r3, [r7, #12]
	uint32_t totalpoint = lcddev.width;
 8005e1a:	4b2a      	ldr	r3, [pc, #168]	; (8005ec4 <LCD_Clear+0xb8>)
 8005e1c:	881b      	ldrh	r3, [r3, #0]
 8005e1e:	60bb      	str	r3, [r7, #8]
	totalpoint *= lcddev.height; 			//得到总点数
 8005e20:	4b28      	ldr	r3, [pc, #160]	; (8005ec4 <LCD_Clear+0xb8>)
 8005e22:	885b      	ldrh	r3, [r3, #2]
 8005e24:	461a      	mov	r2, r3
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	fb02 f303 	mul.w	r3, r2, r3
 8005e2c:	60bb      	str	r3, [r7, #8]
	if ((lcddev.id == 0X6804) && (lcddev.dir == 1)) 			//6804横屏的时候特殊处理
 8005e2e:	4b25      	ldr	r3, [pc, #148]	; (8005ec4 <LCD_Clear+0xb8>)
 8005e30:	889b      	ldrh	r3, [r3, #4]
 8005e32:	f646 0204 	movw	r2, #26628	; 0x6804
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d11a      	bne.n	8005e70 <LCD_Clear+0x64>
 8005e3a:	4b22      	ldr	r3, [pc, #136]	; (8005ec4 <LCD_Clear+0xb8>)
 8005e3c:	799b      	ldrb	r3, [r3, #6]
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d116      	bne.n	8005e70 <LCD_Clear+0x64>
			{
		lcddev.dir = 0;
 8005e42:	4b20      	ldr	r3, [pc, #128]	; (8005ec4 <LCD_Clear+0xb8>)
 8005e44:	2200      	movs	r2, #0
 8005e46:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2A;
 8005e48:	4b1e      	ldr	r3, [pc, #120]	; (8005ec4 <LCD_Clear+0xb8>)
 8005e4a:	222a      	movs	r2, #42	; 0x2a
 8005e4c:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2B;
 8005e4e:	4b1d      	ldr	r3, [pc, #116]	; (8005ec4 <LCD_Clear+0xb8>)
 8005e50:	222b      	movs	r2, #43	; 0x2b
 8005e52:	819a      	strh	r2, [r3, #12]
		LCD_SetCursor(0x00, 0x0000);		//设置光标位置
 8005e54:	2100      	movs	r1, #0
 8005e56:	2000      	movs	r0, #0
 8005e58:	f7fa fe84 	bl	8000b64 <LCD_SetCursor>
		lcddev.dir = 1;
 8005e5c:	4b19      	ldr	r3, [pc, #100]	; (8005ec4 <LCD_Clear+0xb8>)
 8005e5e:	2201      	movs	r2, #1
 8005e60:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2B;
 8005e62:	4b18      	ldr	r3, [pc, #96]	; (8005ec4 <LCD_Clear+0xb8>)
 8005e64:	222b      	movs	r2, #43	; 0x2b
 8005e66:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2A;
 8005e68:	4b16      	ldr	r3, [pc, #88]	; (8005ec4 <LCD_Clear+0xb8>)
 8005e6a:	222a      	movs	r2, #42	; 0x2a
 8005e6c:	819a      	strh	r2, [r3, #12]
 8005e6e:	e003      	b.n	8005e78 <LCD_Clear+0x6c>
	} else
		LCD_SetCursor(0x00, 0x0000);	//设置光标位置
 8005e70:	2100      	movs	r1, #0
 8005e72:	2000      	movs	r0, #0
 8005e74:	f7fa fe76 	bl	8000b64 <LCD_SetCursor>
	LCD_WriteRAM_Prepare();     		//开始写入GRAM	  	  
 8005e78:	f7fa fe68 	bl	8000b4c <LCD_WriteRAM_Prepare>
	for (index = 0; index < totalpoint; index++)
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	60fb      	str	r3, [r7, #12]
 8005e80:	e017      	b.n	8005eb2 <LCD_Clear+0xa6>
		LCD_WR_DATA(color);
 8005e82:	4b11      	ldr	r3, [pc, #68]	; (8005ec8 <LCD_Clear+0xbc>)
 8005e84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e88:	611a      	str	r2, [r3, #16]
 8005e8a:	4b0f      	ldr	r3, [pc, #60]	; (8005ec8 <LCD_Clear+0xbc>)
 8005e8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e90:	615a      	str	r2, [r3, #20]
 8005e92:	4a0e      	ldr	r2, [pc, #56]	; (8005ecc <LCD_Clear+0xc0>)
 8005e94:	88fb      	ldrh	r3, [r7, #6]
 8005e96:	60d3      	str	r3, [r2, #12]
 8005e98:	4b0b      	ldr	r3, [pc, #44]	; (8005ec8 <LCD_Clear+0xbc>)
 8005e9a:	2280      	movs	r2, #128	; 0x80
 8005e9c:	615a      	str	r2, [r3, #20]
 8005e9e:	4b0a      	ldr	r3, [pc, #40]	; (8005ec8 <LCD_Clear+0xbc>)
 8005ea0:	2280      	movs	r2, #128	; 0x80
 8005ea2:	611a      	str	r2, [r3, #16]
 8005ea4:	4b08      	ldr	r3, [pc, #32]	; (8005ec8 <LCD_Clear+0xbc>)
 8005ea6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005eaa:	611a      	str	r2, [r3, #16]
	for (index = 0; index < totalpoint; index++)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	3301      	adds	r3, #1
 8005eb0:	60fb      	str	r3, [r7, #12]
 8005eb2:	68fa      	ldr	r2, [r7, #12]
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d3e3      	bcc.n	8005e82 <LCD_Clear+0x76>
}
 8005eba:	bf00      	nop
 8005ebc:	bf00      	nop
 8005ebe:	3710      	adds	r7, #16
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	200000f4 	.word	0x200000f4
 8005ec8:	40011000 	.word	0x40011000
 8005ecc:	40010c00 	.word	0x40010c00

08005ed0 <LCD_ShowChar>:
// num: char to be displayed
// size: font size 12/16/24
// mode: display characters on the displayed content and do not wipe away the displayed content(1)
//       display characters on the displayed content and wipe away the displayed content(0)
void LCD_ShowChar(uint16_t x, uint16_t y, uint8_t num, uint8_t size,
		uint8_t mode) {
 8005ed0:	b590      	push	{r4, r7, lr}
 8005ed2:	b085      	sub	sp, #20
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	4604      	mov	r4, r0
 8005ed8:	4608      	mov	r0, r1
 8005eda:	4611      	mov	r1, r2
 8005edc:	461a      	mov	r2, r3
 8005ede:	4623      	mov	r3, r4
 8005ee0:	80fb      	strh	r3, [r7, #6]
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	80bb      	strh	r3, [r7, #4]
 8005ee6:	460b      	mov	r3, r1
 8005ee8:	70fb      	strb	r3, [r7, #3]
 8005eea:	4613      	mov	r3, r2
 8005eec:	70bb      	strb	r3, [r7, #2]
	uint8_t temp, t1, t;
	uint16_t y0 = y;
 8005eee:	88bb      	ldrh	r3, [r7, #4]
 8005ef0:	817b      	strh	r3, [r7, #10]
	uint8_t csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2);	//得到字体一个字符对应点阵集所占的字节数
 8005ef2:	78bb      	ldrb	r3, [r7, #2]
 8005ef4:	08db      	lsrs	r3, r3, #3
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	461a      	mov	r2, r3
 8005efa:	78bb      	ldrb	r3, [r7, #2]
 8005efc:	f003 0307 	and.w	r3, r3, #7
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	bf14      	ite	ne
 8005f06:	2301      	movne	r3, #1
 8005f08:	2300      	moveq	r3, #0
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	4413      	add	r3, r2
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	78ba      	ldrb	r2, [r7, #2]
 8005f12:	0852      	lsrs	r2, r2, #1
 8005f14:	b2d2      	uxtb	r2, r2
 8005f16:	fb02 f303 	mul.w	r3, r2, r3
 8005f1a:	727b      	strb	r3, [r7, #9]
	num = num - ' ';		//得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库）
 8005f1c:	78fb      	ldrb	r3, [r7, #3]
 8005f1e:	3b20      	subs	r3, #32
 8005f20:	70fb      	strb	r3, [r7, #3]
	for (t = 0; t < csize; t++) {
 8005f22:	2300      	movs	r3, #0
 8005f24:	737b      	strb	r3, [r7, #13]
 8005f26:	e069      	b.n	8005ffc <LCD_ShowChar+0x12c>
		if (size == 12)
 8005f28:	78bb      	ldrb	r3, [r7, #2]
 8005f2a:	2b0c      	cmp	r3, #12
 8005f2c:	d10b      	bne.n	8005f46 <LCD_ShowChar+0x76>
			temp = asc2_1206[num][t]; 	 	//调用1206字体
 8005f2e:	78fa      	ldrb	r2, [r7, #3]
 8005f30:	7b79      	ldrb	r1, [r7, #13]
 8005f32:	4838      	ldr	r0, [pc, #224]	; (8006014 <LCD_ShowChar+0x144>)
 8005f34:	4613      	mov	r3, r2
 8005f36:	005b      	lsls	r3, r3, #1
 8005f38:	4413      	add	r3, r2
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	4403      	add	r3, r0
 8005f3e:	440b      	add	r3, r1
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	73fb      	strb	r3, [r7, #15]
 8005f44:	e019      	b.n	8005f7a <LCD_ShowChar+0xaa>
		else if (size == 16)
 8005f46:	78bb      	ldrb	r3, [r7, #2]
 8005f48:	2b10      	cmp	r3, #16
 8005f4a:	d108      	bne.n	8005f5e <LCD_ShowChar+0x8e>
			temp = asc2_1608[num][t];	//调用1608字体
 8005f4c:	78fa      	ldrb	r2, [r7, #3]
 8005f4e:	7b7b      	ldrb	r3, [r7, #13]
 8005f50:	4931      	ldr	r1, [pc, #196]	; (8006018 <LCD_ShowChar+0x148>)
 8005f52:	0112      	lsls	r2, r2, #4
 8005f54:	440a      	add	r2, r1
 8005f56:	4413      	add	r3, r2
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	73fb      	strb	r3, [r7, #15]
 8005f5c:	e00d      	b.n	8005f7a <LCD_ShowChar+0xaa>
		else if (size == 24)
 8005f5e:	78bb      	ldrb	r3, [r7, #2]
 8005f60:	2b18      	cmp	r3, #24
 8005f62:	d150      	bne.n	8006006 <LCD_ShowChar+0x136>
			temp = asc2_2412[num][t];	//调用2412字体
 8005f64:	78fa      	ldrb	r2, [r7, #3]
 8005f66:	7b79      	ldrb	r1, [r7, #13]
 8005f68:	482c      	ldr	r0, [pc, #176]	; (800601c <LCD_ShowChar+0x14c>)
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	00db      	lsls	r3, r3, #3
 8005f6e:	4413      	add	r3, r2
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	4403      	add	r3, r0
 8005f74:	440b      	add	r3, r1
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	73fb      	strb	r3, [r7, #15]
		else
			return;								//没有的字库
		for (t1 = 0; t1 < 8; t1++) {
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	73bb      	strb	r3, [r7, #14]
 8005f7e:	e035      	b.n	8005fec <LCD_ShowChar+0x11c>
			if (temp & 0x80)
 8005f80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	da07      	bge.n	8005f98 <LCD_ShowChar+0xc8>
				LCD_Fast_DrawPoint(x, y, POINT_COLOR);
 8005f88:	4b25      	ldr	r3, [pc, #148]	; (8006020 <LCD_ShowChar+0x150>)
 8005f8a:	881a      	ldrh	r2, [r3, #0]
 8005f8c:	88b9      	ldrh	r1, [r7, #4]
 8005f8e:	88fb      	ldrh	r3, [r7, #6]
 8005f90:	4618      	mov	r0, r3
 8005f92:	f7fb fbc5 	bl	8001720 <LCD_Fast_DrawPoint>
 8005f96:	e00a      	b.n	8005fae <LCD_ShowChar+0xde>
			else if (mode == 0)
 8005f98:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d106      	bne.n	8005fae <LCD_ShowChar+0xde>
				LCD_Fast_DrawPoint(x, y, BACK_COLOR);
 8005fa0:	4b20      	ldr	r3, [pc, #128]	; (8006024 <LCD_ShowChar+0x154>)
 8005fa2:	881a      	ldrh	r2, [r3, #0]
 8005fa4:	88b9      	ldrh	r1, [r7, #4]
 8005fa6:	88fb      	ldrh	r3, [r7, #6]
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f7fb fbb9 	bl	8001720 <LCD_Fast_DrawPoint>
			temp <<= 1;
 8005fae:	7bfb      	ldrb	r3, [r7, #15]
 8005fb0:	005b      	lsls	r3, r3, #1
 8005fb2:	73fb      	strb	r3, [r7, #15]
			y++;
 8005fb4:	88bb      	ldrh	r3, [r7, #4]
 8005fb6:	3301      	adds	r3, #1
 8005fb8:	80bb      	strh	r3, [r7, #4]
			if (y >= lcddev.height)
 8005fba:	4b1b      	ldr	r3, [pc, #108]	; (8006028 <LCD_ShowChar+0x158>)
 8005fbc:	885b      	ldrh	r3, [r3, #2]
 8005fbe:	88ba      	ldrh	r2, [r7, #4]
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d222      	bcs.n	800600a <LCD_ShowChar+0x13a>
				return;		//超区域了
			if ((y - y0) == size) {
 8005fc4:	88ba      	ldrh	r2, [r7, #4]
 8005fc6:	897b      	ldrh	r3, [r7, #10]
 8005fc8:	1ad2      	subs	r2, r2, r3
 8005fca:	78bb      	ldrb	r3, [r7, #2]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d10a      	bne.n	8005fe6 <LCD_ShowChar+0x116>
				y = y0;
 8005fd0:	897b      	ldrh	r3, [r7, #10]
 8005fd2:	80bb      	strh	r3, [r7, #4]
				x++;
 8005fd4:	88fb      	ldrh	r3, [r7, #6]
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	80fb      	strh	r3, [r7, #6]
				if (x >= lcddev.width)
 8005fda:	4b13      	ldr	r3, [pc, #76]	; (8006028 <LCD_ShowChar+0x158>)
 8005fdc:	881b      	ldrh	r3, [r3, #0]
 8005fde:	88fa      	ldrh	r2, [r7, #6]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d307      	bcc.n	8005ff4 <LCD_ShowChar+0x124>
					return;	//超区域了
 8005fe4:	e012      	b.n	800600c <LCD_ShowChar+0x13c>
		for (t1 = 0; t1 < 8; t1++) {
 8005fe6:	7bbb      	ldrb	r3, [r7, #14]
 8005fe8:	3301      	adds	r3, #1
 8005fea:	73bb      	strb	r3, [r7, #14]
 8005fec:	7bbb      	ldrb	r3, [r7, #14]
 8005fee:	2b07      	cmp	r3, #7
 8005ff0:	d9c6      	bls.n	8005f80 <LCD_ShowChar+0xb0>
 8005ff2:	e000      	b.n	8005ff6 <LCD_ShowChar+0x126>
				break;
 8005ff4:	bf00      	nop
	for (t = 0; t < csize; t++) {
 8005ff6:	7b7b      	ldrb	r3, [r7, #13]
 8005ff8:	3301      	adds	r3, #1
 8005ffa:	737b      	strb	r3, [r7, #13]
 8005ffc:	7b7a      	ldrb	r2, [r7, #13]
 8005ffe:	7a7b      	ldrb	r3, [r7, #9]
 8006000:	429a      	cmp	r2, r3
 8006002:	d391      	bcc.n	8005f28 <LCD_ShowChar+0x58>
 8006004:	e002      	b.n	800600c <LCD_ShowChar+0x13c>
			return;								//没有的字库
 8006006:	bf00      	nop
 8006008:	e000      	b.n	800600c <LCD_ShowChar+0x13c>
				return;		//超区域了
 800600a:	bf00      	nop
			}
		}
	}
}
 800600c:	3714      	adds	r7, #20
 800600e:	46bd      	mov	sp, r7
 8006010:	bd90      	pop	{r4, r7, pc}
 8006012:	bf00      	nop
 8006014:	0800b580 	.word	0x0800b580
 8006018:	0800b9f4 	.word	0x0800b9f4
 800601c:	0800bfe4 	.word	0x0800bfe4
 8006020:	200000c8 	.word	0x200000c8
 8006024:	20000000 	.word	0x20000000
 8006028:	200000f4 	.word	0x200000f4

0800602c <LCD_ShowString>:
// x,y: starting coordinate
// width, height: display area size
// size: font size // x,y: starting coordinate
// *p: string
void LCD_ShowString(uint16_t x, uint16_t y, uint16_t width, uint16_t height,
		uint8_t size, uint8_t *p) {
 800602c:	b590      	push	{r4, r7, lr}
 800602e:	b087      	sub	sp, #28
 8006030:	af02      	add	r7, sp, #8
 8006032:	4604      	mov	r4, r0
 8006034:	4608      	mov	r0, r1
 8006036:	4611      	mov	r1, r2
 8006038:	461a      	mov	r2, r3
 800603a:	4623      	mov	r3, r4
 800603c:	80fb      	strh	r3, [r7, #6]
 800603e:	4603      	mov	r3, r0
 8006040:	80bb      	strh	r3, [r7, #4]
 8006042:	460b      	mov	r3, r1
 8006044:	807b      	strh	r3, [r7, #2]
 8006046:	4613      	mov	r3, r2
 8006048:	803b      	strh	r3, [r7, #0]
	uint8_t x0 = x;
 800604a:	88fb      	ldrh	r3, [r7, #6]
 800604c:	73fb      	strb	r3, [r7, #15]
	width += x;
 800604e:	887a      	ldrh	r2, [r7, #2]
 8006050:	88fb      	ldrh	r3, [r7, #6]
 8006052:	4413      	add	r3, r2
 8006054:	807b      	strh	r3, [r7, #2]
	height += y;
 8006056:	883a      	ldrh	r2, [r7, #0]
 8006058:	88bb      	ldrh	r3, [r7, #4]
 800605a:	4413      	add	r3, r2
 800605c:	803b      	strh	r3, [r7, #0]
	while ((*p <= '~') && (*p >= ' '))	//判断是不是非法字符!
 800605e:	e024      	b.n	80060aa <LCD_ShowString+0x7e>
	{
		if (x >= width) {
 8006060:	88fa      	ldrh	r2, [r7, #6]
 8006062:	887b      	ldrh	r3, [r7, #2]
 8006064:	429a      	cmp	r2, r3
 8006066:	d307      	bcc.n	8006078 <LCD_ShowString+0x4c>
			x = x0;
 8006068:	7bfb      	ldrb	r3, [r7, #15]
 800606a:	80fb      	strh	r3, [r7, #6]
			y += size;
 800606c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006070:	b29a      	uxth	r2, r3
 8006072:	88bb      	ldrh	r3, [r7, #4]
 8006074:	4413      	add	r3, r2
 8006076:	80bb      	strh	r3, [r7, #4]
		}
		if (y >= height)
 8006078:	88ba      	ldrh	r2, [r7, #4]
 800607a:	883b      	ldrh	r3, [r7, #0]
 800607c:	429a      	cmp	r2, r3
 800607e:	d21d      	bcs.n	80060bc <LCD_ShowString+0x90>
			break;	//退出
		LCD_ShowChar(x, y, *p, size, 0);
 8006080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006082:	781a      	ldrb	r2, [r3, #0]
 8006084:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006088:	88b9      	ldrh	r1, [r7, #4]
 800608a:	88f8      	ldrh	r0, [r7, #6]
 800608c:	2400      	movs	r4, #0
 800608e:	9400      	str	r4, [sp, #0]
 8006090:	f7ff ff1e 	bl	8005ed0 <LCD_ShowChar>
		x += size / 2;
 8006094:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006098:	085b      	lsrs	r3, r3, #1
 800609a:	b2db      	uxtb	r3, r3
 800609c:	b29a      	uxth	r2, r3
 800609e:	88fb      	ldrh	r3, [r7, #6]
 80060a0:	4413      	add	r3, r2
 80060a2:	80fb      	strh	r3, [r7, #6]
		p++;
 80060a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a6:	3301      	adds	r3, #1
 80060a8:	627b      	str	r3, [r7, #36]	; 0x24
	while ((*p <= '~') && (*p >= ' '))	//判断是不是非法字符!
 80060aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	2b7e      	cmp	r3, #126	; 0x7e
 80060b0:	d805      	bhi.n	80060be <LCD_ShowString+0x92>
 80060b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	2b1f      	cmp	r3, #31
 80060b8:	d8d2      	bhi.n	8006060 <LCD_ShowString+0x34>
	}
}
 80060ba:	e000      	b.n	80060be <LCD_ShowString+0x92>
			break;	//退出
 80060bc:	bf00      	nop
}
 80060be:	bf00      	nop
 80060c0:	3714      	adds	r7, #20
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd90      	pop	{r4, r7, pc}
	...

080060c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80060ce:	f001 fb39 	bl	8007744 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80060d2:	f000 f84f 	bl	8006174 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  LCD_Init();
 80060d6:	f7fb ff6b 	bl	8001fb0 <LCD_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80060da:	f7fa fbe3 	bl	80008a4 <MX_GPIO_Init>
  MX_DMA_Init();
 80060de:	f7fa fbbb 	bl	8000858 <MX_DMA_Init>
  MX_TIM2_Init();
 80060e2:	f001 f8f1 	bl	80072c8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80060e6:	f001 f93d 	bl	8007364 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80060ea:	f001 f9c9 	bl	8007480 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80060ee:	f001 f9f1 	bl	80074d4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
  // HAL_UART_Receive_DMA(&huart1, (uint8_t *)uart1_rx_buffer, 2048);
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 80060f2:	4b19      	ldr	r3, [pc, #100]	; (8006158 <main+0x90>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	68da      	ldr	r2, [r3, #12]
 80060f8:	4b17      	ldr	r3, [pc, #92]	; (8006158 <main+0x90>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f042 0210 	orr.w	r2, r2, #16
 8006100:	60da      	str	r2, [r3, #12]
  HAL_UART_Receive_DMA(&huart1, (uint8_t *)uart1_rx_buffer, 2048);
 8006102:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006106:	4915      	ldr	r1, [pc, #84]	; (800615c <main+0x94>)
 8006108:	4813      	ldr	r0, [pc, #76]	; (8006158 <main+0x90>)
 800610a:	f003 fc62 	bl	80099d2 <HAL_UART_Receive_DMA>

  __HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);
 800610e:	4b14      	ldr	r3, [pc, #80]	; (8006160 <main+0x98>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68da      	ldr	r2, [r3, #12]
 8006114:	4b12      	ldr	r3, [pc, #72]	; (8006160 <main+0x98>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f042 0210 	orr.w	r2, r2, #16
 800611c:	60da      	str	r2, [r3, #12]
  HAL_UART_Receive_DMA(&huart2, (uint8_t *)uart2_rx_buffer, 2048);
 800611e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006122:	4910      	ldr	r1, [pc, #64]	; (8006164 <main+0x9c>)
 8006124:	480e      	ldr	r0, [pc, #56]	; (8006160 <main+0x98>)
 8006126:	f003 fc54 	bl	80099d2 <HAL_UART_Receive_DMA>
  // HAL_UART_Receive_IT(&huart1, (uint8_t *)rxBuffer, 1);
  __HAL_TIM_CLEAR_FLAG(&htim2, TIM_SR_UIF); // lyu 清除tim 的flag�???? 否则刚开始start就会进入回调函数
 800612a:	4b0f      	ldr	r3, [pc, #60]	; (8006168 <main+0xa0>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f06f 0201 	mvn.w	r2, #1
 8006132:	611a      	str	r2, [r3, #16]
  __HAL_TIM_CLEAR_FLAG(&htim3, TIM_SR_UIF); // lyu 清除tim 的flag�???? 否则刚开始start就会进入回调函数
 8006134:	4b0d      	ldr	r3, [pc, #52]	; (800616c <main+0xa4>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f06f 0201 	mvn.w	r2, #1
 800613c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN WHILE */
  // esp8266_mode = 1;
  // send_msg_uart1((uint8_t *)"SET AS SERVER\r\n", 0);
  // send_cmd("AT+CWMODE=3\r\n", 1000);

  init_server();
 800613e:	f000 fd0f 	bl	8006b60 <init_server>
  LCD_ShowString(30, 40, 200, 24, 16, "Connecting...");
 8006142:	4b0b      	ldr	r3, [pc, #44]	; (8006170 <main+0xa8>)
 8006144:	9301      	str	r3, [sp, #4]
 8006146:	2310      	movs	r3, #16
 8006148:	9300      	str	r3, [sp, #0]
 800614a:	2318      	movs	r3, #24
 800614c:	22c8      	movs	r2, #200	; 0xc8
 800614e:	2128      	movs	r1, #40	; 0x28
 8006150:	201e      	movs	r0, #30
 8006152:	f7ff ff6b 	bl	800602c <LCD_ShowString>
  // send_msg_uart1((uint8_t *)"Init Server End\r\n", 0);
  // Question();
  while (1)
 8006156:	e7fe      	b.n	8006156 <main+0x8e>
 8006158:	200012a0 	.word	0x200012a0
 800615c:	2000016c 	.word	0x2000016c
 8006160:	200012e4 	.word	0x200012e4
 8006164:	20000970 	.word	0x20000970
 8006168:	200011d0 	.word	0x200011d0
 800616c:	20001188 	.word	0x20001188
 8006170:	0800afb0 	.word	0x0800afb0

08006174 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b090      	sub	sp, #64	; 0x40
 8006178:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800617a:	f107 0318 	add.w	r3, r7, #24
 800617e:	2228      	movs	r2, #40	; 0x28
 8006180:	2100      	movs	r1, #0
 8006182:	4618      	mov	r0, r3
 8006184:	f004 fa00 	bl	800a588 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006188:	1d3b      	adds	r3, r7, #4
 800618a:	2200      	movs	r2, #0
 800618c:	601a      	str	r2, [r3, #0]
 800618e:	605a      	str	r2, [r3, #4]
 8006190:	609a      	str	r2, [r3, #8]
 8006192:	60da      	str	r2, [r3, #12]
 8006194:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006196:	2301      	movs	r3, #1
 8006198:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800619a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800619e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80061a0:	2300      	movs	r3, #0
 80061a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80061a4:	2301      	movs	r3, #1
 80061a6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80061a8:	2302      	movs	r3, #2
 80061aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80061ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80061b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80061b2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80061b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80061b8:	f107 0318 	add.w	r3, r7, #24
 80061bc:	4618      	mov	r0, r3
 80061be:	f002 fab3 	bl	8008728 <HAL_RCC_OscConfig>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d001      	beq.n	80061cc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80061c8:	f000 face 	bl	8006768 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80061cc:	230f      	movs	r3, #15
 80061ce:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80061d0:	2302      	movs	r3, #2
 80061d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80061d4:	2300      	movs	r3, #0
 80061d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80061d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80061de:	2300      	movs	r3, #0
 80061e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80061e2:	1d3b      	adds	r3, r7, #4
 80061e4:	2102      	movs	r1, #2
 80061e6:	4618      	mov	r0, r3
 80061e8:	f002 fd1e 	bl	8008c28 <HAL_RCC_ClockConfig>
 80061ec:	4603      	mov	r3, r0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d001      	beq.n	80061f6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80061f2:	f000 fab9 	bl	8006768 <Error_Handler>
  }
}
 80061f6:	bf00      	nop
 80061f8:	3740      	adds	r7, #64	; 0x40
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
	...

08006200 <Question>:

char *answer;
unsigned char msg[100];

void Question()
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b088      	sub	sp, #32
 8006204:	af02      	add	r7, sp, #8
  state = QuestionState;
 8006206:	4b43      	ldr	r3, [pc, #268]	; (8006314 <Question+0x114>)
 8006208:	2200      	movs	r2, #0
 800620a:	701a      	strb	r2, [r3, #0]

  q = &questions[answerIndex];
 800620c:	4b42      	ldr	r3, [pc, #264]	; (8006318 <Question+0x118>)
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	4613      	mov	r3, r2
 8006212:	005b      	lsls	r3, r3, #1
 8006214:	4413      	add	r3, r2
 8006216:	00db      	lsls	r3, r3, #3
 8006218:	4a40      	ldr	r2, [pc, #256]	; (800631c <Question+0x11c>)
 800621a:	4413      	add	r3, r2
 800621c:	4a40      	ldr	r2, [pc, #256]	; (8006320 <Question+0x120>)
 800621e:	6013      	str	r3, [r2, #0]
  POINT_COLOR = RED;
 8006220:	4b40      	ldr	r3, [pc, #256]	; (8006324 <Question+0x124>)
 8006222:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8006226:	801a      	strh	r2, [r3, #0]
  LCD_Clear(WHITE);
 8006228:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800622c:	f7ff fdee 	bl	8005e0c <LCD_Clear>
  // LCD_Color_Fill(0,0,240, 320,WHITE);
  LCD_ShowString(30, 40, 200, 24, 16, "Question   Time:");
 8006230:	4b3d      	ldr	r3, [pc, #244]	; (8006328 <Question+0x128>)
 8006232:	9301      	str	r3, [sp, #4]
 8006234:	2310      	movs	r3, #16
 8006236:	9300      	str	r3, [sp, #0]
 8006238:	2318      	movs	r3, #24
 800623a:	22c8      	movs	r2, #200	; 0xc8
 800623c:	2128      	movs	r1, #40	; 0x28
 800623e:	201e      	movs	r0, #30
 8006240:	f7ff fef4 	bl	800602c <LCD_ShowString>
  char strs[20];
  sprintf(strs, "point: %d", q->pointAward);
 8006244:	4b36      	ldr	r3, [pc, #216]	; (8006320 <Question+0x120>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	691a      	ldr	r2, [r3, #16]
 800624a:	1d3b      	adds	r3, r7, #4
 800624c:	4937      	ldr	r1, [pc, #220]	; (800632c <Question+0x12c>)
 800624e:	4618      	mov	r0, r3
 8006250:	f004 f9a2 	bl	800a598 <siprintf>
  LCD_ShowString(30, 70, 200, 16, 12, strs);
 8006254:	1d3b      	adds	r3, r7, #4
 8006256:	9301      	str	r3, [sp, #4]
 8006258:	230c      	movs	r3, #12
 800625a:	9300      	str	r3, [sp, #0]
 800625c:	2310      	movs	r3, #16
 800625e:	22c8      	movs	r2, #200	; 0xc8
 8006260:	2146      	movs	r1, #70	; 0x46
 8006262:	201e      	movs	r0, #30
 8006264:	f7ff fee2 	bl	800602c <LCD_ShowString>
  LCD_ShowString(30, 110, 200, 16, 12, q->content);
 8006268:	4b2d      	ldr	r3, [pc, #180]	; (8006320 <Question+0x120>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	9301      	str	r3, [sp, #4]
 8006270:	230c      	movs	r3, #12
 8006272:	9300      	str	r3, [sp, #0]
 8006274:	2310      	movs	r3, #16
 8006276:	22c8      	movs	r2, #200	; 0xc8
 8006278:	216e      	movs	r1, #110	; 0x6e
 800627a:	201e      	movs	r0, #30
 800627c:	f7ff fed6 	bl	800602c <LCD_ShowString>
  LCD_ShowString(30, 150, 200, 16, 12, q->answerList);
 8006280:	4b27      	ldr	r3, [pc, #156]	; (8006320 <Question+0x120>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	9301      	str	r3, [sp, #4]
 8006288:	230c      	movs	r3, #12
 800628a:	9300      	str	r3, [sp, #0]
 800628c:	2310      	movs	r3, #16
 800628e:	22c8      	movs	r2, #200	; 0xc8
 8006290:	2196      	movs	r1, #150	; 0x96
 8006292:	201e      	movs	r0, #30
 8006294:	f7ff feca 	bl	800602c <LCD_ShowString>
  sprintf(strs, "answer: %d", q->answerIndex);
 8006298:	4b21      	ldr	r3, [pc, #132]	; (8006320 <Question+0x120>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	68da      	ldr	r2, [r3, #12]
 800629e:	1d3b      	adds	r3, r7, #4
 80062a0:	4923      	ldr	r1, [pc, #140]	; (8006330 <Question+0x130>)
 80062a2:	4618      	mov	r0, r3
 80062a4:	f004 f978 	bl	800a598 <siprintf>
  LCD_ShowString(30, 170, 200, 16, 12, strs);
 80062a8:	1d3b      	adds	r3, r7, #4
 80062aa:	9301      	str	r3, [sp, #4]
 80062ac:	230c      	movs	r3, #12
 80062ae:	9300      	str	r3, [sp, #0]
 80062b0:	2310      	movs	r3, #16
 80062b2:	22c8      	movs	r2, #200	; 0xc8
 80062b4:	21aa      	movs	r1, #170	; 0xaa
 80062b6:	201e      	movs	r0, #30
 80062b8:	f7ff feb8 	bl	800602c <LCD_ShowString>
  LCD_ShowString(30, 190, 200, 16, 12, "Click any key to send the question.");
 80062bc:	4b1d      	ldr	r3, [pc, #116]	; (8006334 <Question+0x134>)
 80062be:	9301      	str	r3, [sp, #4]
 80062c0:	230c      	movs	r3, #12
 80062c2:	9300      	str	r3, [sp, #0]
 80062c4:	2310      	movs	r3, #16
 80062c6:	22c8      	movs	r2, #200	; 0xc8
 80062c8:	21be      	movs	r1, #190	; 0xbe
 80062ca:	201e      	movs	r0, #30
 80062cc:	f7ff feae 	bl	800602c <LCD_ShowString>
  // LCD_ShowString(30, 70, 200, 16, 16, q->content);
  POINT_COLOR = BLACK;
 80062d0:	4b14      	ldr	r3, [pc, #80]	; (8006324 <Question+0x124>)
 80062d2:	2200      	movs	r2, #0
 80062d4:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit(&huart1, "\nEnter Question Mode\n", strlen("Enter Question Mode\n"), 0xffff);
 80062d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80062da:	2214      	movs	r2, #20
 80062dc:	4916      	ldr	r1, [pc, #88]	; (8006338 <Question+0x138>)
 80062de:	4817      	ldr	r0, [pc, #92]	; (800633c <Question+0x13c>)
 80062e0:	f003 fae5 	bl	80098ae <HAL_UART_Transmit>
  time_left=q->time;
 80062e4:	4b0e      	ldr	r3, [pc, #56]	; (8006320 <Question+0x120>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	695b      	ldr	r3, [r3, #20]
 80062ea:	4a15      	ldr	r2, [pc, #84]	; (8006340 <Question+0x140>)
 80062ec:	6013      	str	r3, [r2, #0]
  answerIndex++;
 80062ee:	4b0a      	ldr	r3, [pc, #40]	; (8006318 <Question+0x118>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	3301      	adds	r3, #1
 80062f4:	4a08      	ldr	r2, [pc, #32]	; (8006318 <Question+0x118>)
 80062f6:	6013      	str	r3, [r2, #0]
  answerIndex %= 2;
 80062f8:	4b07      	ldr	r3, [pc, #28]	; (8006318 <Question+0x118>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	f003 0301 	and.w	r3, r3, #1
 8006302:	bfb8      	it	lt
 8006304:	425b      	neglt	r3, r3
 8006306:	4a04      	ldr	r2, [pc, #16]	; (8006318 <Question+0x118>)
 8006308:	6013      	str	r3, [r2, #0]
}
 800630a:	bf00      	nop
 800630c:	3718      	adds	r7, #24
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}
 8006312:	bf00      	nop
 8006314:	20000168 	.word	0x20000168
 8006318:	200000cc 	.word	0x200000cc
 800631c:	20000004 	.word	0x20000004
 8006320:	20001184 	.word	0x20001184
 8006324:	200000c8 	.word	0x200000c8
 8006328:	0800b004 	.word	0x0800b004
 800632c:	0800b018 	.word	0x0800b018
 8006330:	0800b024 	.word	0x0800b024
 8006334:	0800b030 	.word	0x0800b030
 8006338:	0800b054 	.word	0x0800b054
 800633c:	200012a0 	.word	0x200012a0
 8006340:	200000d4 	.word	0x200000d4

08006344 <Answer>:

void Answer(uint8_t *ans)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b09e      	sub	sp, #120	; 0x78
 8006348:	af02      	add	r7, sp, #8
 800634a:	6078      	str	r0, [r7, #4]
  // switch (state)
  // {
  // case AnswerState:
  char a[100];
  sprintf(a,"Answer is: |%s|",ans);
 800634c:	f107 030c 	add.w	r3, r7, #12
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	493a      	ldr	r1, [pc, #232]	; (800643c <Answer+0xf8>)
 8006354:	4618      	mov	r0, r3
 8006356:	f004 f91f 	bl	800a598 <siprintf>
  transmit1(a);
 800635a:	f107 030c 	add.w	r3, r7, #12
 800635e:	4618      	mov	r0, r3
 8006360:	f000 fac2 	bl	80068e8 <transmit1>
  ans = strchr(ans,':') + 1;
 8006364:	213a      	movs	r1, #58	; 0x3a
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f004 f936 	bl	800a5d8 <strchr>
 800636c:	4603      	mov	r3, r0
 800636e:	3301      	adds	r3, #1
 8006370:	607b      	str	r3, [r7, #4]
  sprintf(a,"Answer is: |%s|",ans);
 8006372:	f107 030c 	add.w	r3, r7, #12
 8006376:	687a      	ldr	r2, [r7, #4]
 8006378:	4930      	ldr	r1, [pc, #192]	; (800643c <Answer+0xf8>)
 800637a:	4618      	mov	r0, r3
 800637c:	f004 f90c 	bl	800a598 <siprintf>
  transmit1(a);
 8006380:	f107 030c 	add.w	r3, r7, #12
 8006384:	4618      	mov	r0, r3
 8006386:	f000 faaf 	bl	80068e8 <transmit1>
  if (atoi(ans) == q->answerIndex)
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f004 f8ce 	bl	800a52c <atoi>
 8006390:	4602      	mov	r2, r0
 8006392:	4b2b      	ldr	r3, [pc, #172]	; (8006440 <Answer+0xfc>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	68db      	ldr	r3, [r3, #12]
 8006398:	429a      	cmp	r2, r3
 800639a:	d126      	bne.n	80063ea <Answer+0xa6>
  {
    sprintf(msg, "Check right: %d %d\n", atoi(ans), q->answerIndex);
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f004 f8c5 	bl	800a52c <atoi>
 80063a2:	4602      	mov	r2, r0
 80063a4:	4b26      	ldr	r3, [pc, #152]	; (8006440 <Answer+0xfc>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	4926      	ldr	r1, [pc, #152]	; (8006444 <Answer+0x100>)
 80063ac:	4826      	ldr	r0, [pc, #152]	; (8006448 <Answer+0x104>)
 80063ae:	f004 f8f3 	bl	800a598 <siprintf>
    // send_message(msg);
    HAL_UART_Transmit(&huart1, msg, strlen(msg), HAL_MAX_DELAY);
 80063b2:	4825      	ldr	r0, [pc, #148]	; (8006448 <Answer+0x104>)
 80063b4:	f7f9 ff42 	bl	800023c <strlen>
 80063b8:	4603      	mov	r3, r0
 80063ba:	b29a      	uxth	r2, r3
 80063bc:	f04f 33ff 	mov.w	r3, #4294967295
 80063c0:	4921      	ldr	r1, [pc, #132]	; (8006448 <Answer+0x104>)
 80063c2:	4822      	ldr	r0, [pc, #136]	; (800644c <Answer+0x108>)
 80063c4:	f003 fa73 	bl	80098ae <HAL_UART_Transmit>
    HAL_TIM_Base_Stop_IT(&htim2);
 80063c8:	4821      	ldr	r0, [pc, #132]	; (8006450 <Answer+0x10c>)
 80063ca:	f002 fe77 	bl	80090bc <HAL_TIM_Base_Stop_IT>
    HAL_TIM_Base_Stop_IT(&htim3); //lyu
 80063ce:	4821      	ldr	r0, [pc, #132]	; (8006454 <Answer+0x110>)
 80063d0:	f002 fe74 	bl	80090bc <HAL_TIM_Base_Stop_IT>
    // LCD_ShowString(30, 70, 200, 16, 12, "Check right!");
    point = point + q->pointAward;
 80063d4:	4b1a      	ldr	r3, [pc, #104]	; (8006440 <Answer+0xfc>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	691a      	ldr	r2, [r3, #16]
 80063da:	4b1f      	ldr	r3, [pc, #124]	; (8006458 <Answer+0x114>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4413      	add	r3, r2
 80063e0:	4a1d      	ldr	r2, [pc, #116]	; (8006458 <Answer+0x114>)
 80063e2:	6013      	str	r3, [r2, #0]
    // HAL_Delay(500);
    Judge();
 80063e4:	f000 f83e 	bl	8006464 <Judge>
  //   break;

  // default:
  //   break;
  // }
}
 80063e8:	e023      	b.n	8006432 <Answer+0xee>
    sprintf(msg, "Check wrong: %d %d\n", atoi(ans), q->answerIndex);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f004 f89e 	bl	800a52c <atoi>
 80063f0:	4602      	mov	r2, r0
 80063f2:	4b13      	ldr	r3, [pc, #76]	; (8006440 <Answer+0xfc>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	4918      	ldr	r1, [pc, #96]	; (800645c <Answer+0x118>)
 80063fa:	4813      	ldr	r0, [pc, #76]	; (8006448 <Answer+0x104>)
 80063fc:	f004 f8cc 	bl	800a598 <siprintf>
    HAL_UART_Transmit(&huart1, msg, strlen(msg), HAL_MAX_DELAY);
 8006400:	4811      	ldr	r0, [pc, #68]	; (8006448 <Answer+0x104>)
 8006402:	f7f9 ff1b 	bl	800023c <strlen>
 8006406:	4603      	mov	r3, r0
 8006408:	b29a      	uxth	r2, r3
 800640a:	f04f 33ff 	mov.w	r3, #4294967295
 800640e:	490e      	ldr	r1, [pc, #56]	; (8006448 <Answer+0x104>)
 8006410:	480e      	ldr	r0, [pc, #56]	; (800644c <Answer+0x108>)
 8006412:	f003 fa4c 	bl	80098ae <HAL_UART_Transmit>
    LCD_Clear(RED);
 8006416:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800641a:	f7ff fcf7 	bl	8005e0c <LCD_Clear>
    LCD_ShowString(30, 70, 200, 16, 12, "Check wrong!");
 800641e:	4b10      	ldr	r3, [pc, #64]	; (8006460 <Answer+0x11c>)
 8006420:	9301      	str	r3, [sp, #4]
 8006422:	230c      	movs	r3, #12
 8006424:	9300      	str	r3, [sp, #0]
 8006426:	2310      	movs	r3, #16
 8006428:	22c8      	movs	r2, #200	; 0xc8
 800642a:	2146      	movs	r1, #70	; 0x46
 800642c:	201e      	movs	r0, #30
 800642e:	f7ff fdfd 	bl	800602c <LCD_ShowString>
}
 8006432:	bf00      	nop
 8006434:	3770      	adds	r7, #112	; 0x70
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
 800643a:	bf00      	nop
 800643c:	0800b06c 	.word	0x0800b06c
 8006440:	20001184 	.word	0x20001184
 8006444:	0800b07c 	.word	0x0800b07c
 8006448:	20000104 	.word	0x20000104
 800644c:	200012a0 	.word	0x200012a0
 8006450:	200011d0 	.word	0x200011d0
 8006454:	20001188 	.word	0x20001188
 8006458:	200000d0 	.word	0x200000d0
 800645c:	0800b090 	.word	0x0800b090
 8006460:	0800b0a4 	.word	0x0800b0a4

08006464 <Judge>:

void Judge()
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b092      	sub	sp, #72	; 0x48
 8006468:	af02      	add	r7, sp, #8
  HAL_TIM_Base_Stop_IT(&htim2); // lyu
 800646a:	481b      	ldr	r0, [pc, #108]	; (80064d8 <Judge+0x74>)
 800646c:	f002 fe26 	bl	80090bc <HAL_TIM_Base_Stop_IT>
  HAL_TIM_Base_Stop_IT(&htim3); // lyu
 8006470:	481a      	ldr	r0, [pc, #104]	; (80064dc <Judge+0x78>)
 8006472:	f002 fe23 	bl	80090bc <HAL_TIM_Base_Stop_IT>
  HAL_UART_Transmit(&huart1, "Enter Judge\n", strlen("Enter Judge\n"), HAL_MAX_DELAY);
 8006476:	f04f 33ff 	mov.w	r3, #4294967295
 800647a:	220c      	movs	r2, #12
 800647c:	4918      	ldr	r1, [pc, #96]	; (80064e0 <Judge+0x7c>)
 800647e:	4819      	ldr	r0, [pc, #100]	; (80064e4 <Judge+0x80>)
 8006480:	f003 fa15 	bl	80098ae <HAL_UART_Transmit>
  state = JudgeState;
 8006484:	4b18      	ldr	r3, [pc, #96]	; (80064e8 <Judge+0x84>)
 8006486:	2202      	movs	r2, #2
 8006488:	701a      	strb	r2, [r3, #0]
  char strs[64];
  sprintf(strs, "You get point:|%d|", point);
 800648a:	4b18      	ldr	r3, [pc, #96]	; (80064ec <Judge+0x88>)
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	463b      	mov	r3, r7
 8006490:	4917      	ldr	r1, [pc, #92]	; (80064f0 <Judge+0x8c>)
 8006492:	4618      	mov	r0, r3
 8006494:	f004 f880 	bl	800a598 <siprintf>
  send_message_without_delay(strs);
 8006498:	463b      	mov	r3, r7
 800649a:	4618      	mov	r0, r3
 800649c:	f000 faa0 	bl	80069e0 <send_message_without_delay>
  LCD_Clear(WHITE);
 80064a0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80064a4:	f7ff fcb2 	bl	8005e0c <LCD_Clear>
  // LCD_Color_Fill(0,0,240, 320,WHITE);
  LCD_ShowString(30, 70, 200, 16, 12, strs);
 80064a8:	463b      	mov	r3, r7
 80064aa:	9301      	str	r3, [sp, #4]
 80064ac:	230c      	movs	r3, #12
 80064ae:	9300      	str	r3, [sp, #0]
 80064b0:	2310      	movs	r3, #16
 80064b2:	22c8      	movs	r2, #200	; 0xc8
 80064b4:	2146      	movs	r1, #70	; 0x46
 80064b6:	201e      	movs	r0, #30
 80064b8:	f7ff fdb8 	bl	800602c <LCD_ShowString>
  LCD_ShowString(30, 200, 200, 16, 12, "Click 1 to play and 0 to reset.");
 80064bc:	4b0d      	ldr	r3, [pc, #52]	; (80064f4 <Judge+0x90>)
 80064be:	9301      	str	r3, [sp, #4]
 80064c0:	230c      	movs	r3, #12
 80064c2:	9300      	str	r3, [sp, #0]
 80064c4:	2310      	movs	r3, #16
 80064c6:	22c8      	movs	r2, #200	; 0xc8
 80064c8:	21c8      	movs	r1, #200	; 0xc8
 80064ca:	201e      	movs	r0, #30
 80064cc:	f7ff fdae 	bl	800602c <LCD_ShowString>
}
 80064d0:	bf00      	nop
 80064d2:	3740      	adds	r7, #64	; 0x40
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}
 80064d8:	200011d0 	.word	0x200011d0
 80064dc:	20001188 	.word	0x20001188
 80064e0:	0800b0b4 	.word	0x0800b0b4
 80064e4:	200012a0 	.word	0x200012a0
 80064e8:	20000168 	.word	0x20000168
 80064ec:	200000d0 	.word	0x200000d0
 80064f0:	0800b0c4 	.word	0x0800b0c4
 80064f4:	0800b0d8 	.word	0x0800b0d8

080064f8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80064f8:	b590      	push	{r4, r7, lr}
 80064fa:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
 80064fe:	af02      	add	r7, sp, #8
 8006500:	4602      	mov	r2, r0
 8006502:	1dbb      	adds	r3, r7, #6
 8006504:	801a      	strh	r2, [r3, #0]
      char messages_send[1024];
  switch (GPIO_Pin)
 8006506:	1dbb      	adds	r3, r7, #6
 8006508:	881b      	ldrh	r3, [r3, #0]
 800650a:	2b20      	cmp	r3, #32
 800650c:	d003      	beq.n	8006516 <HAL_GPIO_EXTI_Callback+0x1e>
 800650e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006512:	d062      	beq.n	80065da <HAL_GPIO_EXTI_Callback+0xe2>

    default:
      break;
    }
  }
}
 8006514:	e0b7      	b.n	8006686 <HAL_GPIO_EXTI_Callback+0x18e>
    if (HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin) == GPIO_PIN_RESET)
 8006516:	2120      	movs	r1, #32
 8006518:	485d      	ldr	r0, [pc, #372]	; (8006690 <HAL_GPIO_EXTI_Callback+0x198>)
 800651a:	f002 f8bd 	bl	8008698 <HAL_GPIO_ReadPin>
 800651e:	4603      	mov	r3, r0
 8006520:	2b00      	cmp	r3, #0
 8006522:	d158      	bne.n	80065d6 <HAL_GPIO_EXTI_Callback+0xde>
      HAL_UART_Transmit(&huart1, (uint8_t *)"Key 0 pressed\n", 20, HAL_MAX_DELAY);
 8006524:	f04f 33ff 	mov.w	r3, #4294967295
 8006528:	2214      	movs	r2, #20
 800652a:	495a      	ldr	r1, [pc, #360]	; (8006694 <HAL_GPIO_EXTI_Callback+0x19c>)
 800652c:	485a      	ldr	r0, [pc, #360]	; (8006698 <HAL_GPIO_EXTI_Callback+0x1a0>)
 800652e:	f003 f9be 	bl	80098ae <HAL_UART_Transmit>
      switch (state)
 8006532:	4b5a      	ldr	r3, [pc, #360]	; (800669c <HAL_GPIO_EXTI_Callback+0x1a4>)
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d002      	beq.n	8006540 <HAL_GPIO_EXTI_Callback+0x48>
 800653a:	2b02      	cmp	r3, #2
 800653c:	d042      	beq.n	80065c4 <HAL_GPIO_EXTI_Callback+0xcc>
        break;
 800653e:	e04b      	b.n	80065d8 <HAL_GPIO_EXTI_Callback+0xe0>
        sprintf(messages_send, "%s|%s|%d|%d|",  q->content, q->answerList, q->pointAward, q->time);
 8006540:	4b57      	ldr	r3, [pc, #348]	; (80066a0 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	6859      	ldr	r1, [r3, #4]
 8006546:	4b56      	ldr	r3, [pc, #344]	; (80066a0 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	689c      	ldr	r4, [r3, #8]
 800654c:	4b54      	ldr	r3, [pc, #336]	; (80066a0 <HAL_GPIO_EXTI_Callback+0x1a8>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	4a53      	ldr	r2, [pc, #332]	; (80066a0 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8006554:	6812      	ldr	r2, [r2, #0]
 8006556:	6952      	ldr	r2, [r2, #20]
 8006558:	f107 0008 	add.w	r0, r7, #8
 800655c:	9201      	str	r2, [sp, #4]
 800655e:	9300      	str	r3, [sp, #0]
 8006560:	4623      	mov	r3, r4
 8006562:	460a      	mov	r2, r1
 8006564:	494f      	ldr	r1, [pc, #316]	; (80066a4 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8006566:	f004 f817 	bl	800a598 <siprintf>
        send_message(messages_send);
 800656a:	f107 0308 	add.w	r3, r7, #8
 800656e:	4618      	mov	r0, r3
 8006570:	f000 fa64 	bl	8006a3c <send_message>
        send_msg_uart1(messages_send, 0);
 8006574:	f107 0308 	add.w	r3, r7, #8
 8006578:	2100      	movs	r1, #0
 800657a:	4618      	mov	r0, r3
 800657c:	f000 f9ca 	bl	8006914 <send_msg_uart1>
        LCD_Clear(GREEN);
 8006580:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8006584:	f7ff fc42 	bl	8005e0c <LCD_Clear>
        LCD_ShowString(30, 40, 200, 24, 16, "Question   Time:");
 8006588:	4b47      	ldr	r3, [pc, #284]	; (80066a8 <HAL_GPIO_EXTI_Callback+0x1b0>)
 800658a:	9301      	str	r3, [sp, #4]
 800658c:	2310      	movs	r3, #16
 800658e:	9300      	str	r3, [sp, #0]
 8006590:	2318      	movs	r3, #24
 8006592:	22c8      	movs	r2, #200	; 0xc8
 8006594:	2128      	movs	r1, #40	; 0x28
 8006596:	201e      	movs	r0, #30
 8006598:	f7ff fd48 	bl	800602c <LCD_ShowString>
        LCD_ShowString(30, 70, 200, 16, 12, msg);
 800659c:	4b43      	ldr	r3, [pc, #268]	; (80066ac <HAL_GPIO_EXTI_Callback+0x1b4>)
 800659e:	9301      	str	r3, [sp, #4]
 80065a0:	230c      	movs	r3, #12
 80065a2:	9300      	str	r3, [sp, #0]
 80065a4:	2310      	movs	r3, #16
 80065a6:	22c8      	movs	r2, #200	; 0xc8
 80065a8:	2146      	movs	r1, #70	; 0x46
 80065aa:	201e      	movs	r0, #30
 80065ac:	f7ff fd3e 	bl	800602c <LCD_ShowString>
        HAL_TIM_Base_Start_IT(&htim2);
 80065b0:	483f      	ldr	r0, [pc, #252]	; (80066b0 <HAL_GPIO_EXTI_Callback+0x1b8>)
 80065b2:	f002 fd23 	bl	8008ffc <HAL_TIM_Base_Start_IT>
        HAL_TIM_Base_Start_IT(&htim3); // lyu
 80065b6:	483f      	ldr	r0, [pc, #252]	; (80066b4 <HAL_GPIO_EXTI_Callback+0x1bc>)
 80065b8:	f002 fd20 	bl	8008ffc <HAL_TIM_Base_Start_IT>
        state = AnswerState;
 80065bc:	4b37      	ldr	r3, [pc, #220]	; (800669c <HAL_GPIO_EXTI_Callback+0x1a4>)
 80065be:	2201      	movs	r2, #1
 80065c0:	701a      	strb	r2, [r3, #0]
        break;
 80065c2:	e009      	b.n	80065d8 <HAL_GPIO_EXTI_Callback+0xe0>
        answerIndex = 0;
 80065c4:	4b3c      	ldr	r3, [pc, #240]	; (80066b8 <HAL_GPIO_EXTI_Callback+0x1c0>)
 80065c6:	2200      	movs	r2, #0
 80065c8:	601a      	str	r2, [r3, #0]
        state = QuestionState;
 80065ca:	4b34      	ldr	r3, [pc, #208]	; (800669c <HAL_GPIO_EXTI_Callback+0x1a4>)
 80065cc:	2200      	movs	r2, #0
 80065ce:	701a      	strb	r2, [r3, #0]
        Question();
 80065d0:	f7ff fe16 	bl	8006200 <Question>
        break;
 80065d4:	e000      	b.n	80065d8 <HAL_GPIO_EXTI_Callback+0xe0>
    }
 80065d6:	bf00      	nop
    break;
 80065d8:	e055      	b.n	8006686 <HAL_GPIO_EXTI_Callback+0x18e>
    HAL_UART_Transmit(&huart1, (uint8_t *)"Key 1 pressed\n", 20, HAL_MAX_DELAY);
 80065da:	f04f 33ff 	mov.w	r3, #4294967295
 80065de:	2214      	movs	r2, #20
 80065e0:	4936      	ldr	r1, [pc, #216]	; (80066bc <HAL_GPIO_EXTI_Callback+0x1c4>)
 80065e2:	482d      	ldr	r0, [pc, #180]	; (8006698 <HAL_GPIO_EXTI_Callback+0x1a0>)
 80065e4:	f003 f963 	bl	80098ae <HAL_UART_Transmit>
    switch (state)
 80065e8:	4b2c      	ldr	r3, [pc, #176]	; (800669c <HAL_GPIO_EXTI_Callback+0x1a4>)
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d002      	beq.n	80065f6 <HAL_GPIO_EXTI_Callback+0xfe>
 80065f0:	2b02      	cmp	r3, #2
 80065f2:	d042      	beq.n	800667a <HAL_GPIO_EXTI_Callback+0x182>
      break;
 80065f4:	e047      	b.n	8006686 <HAL_GPIO_EXTI_Callback+0x18e>
        sprintf(messages_send, "%s|%s|%d|%d|",  q->content, q->answerList, q->pointAward, q->time);
 80065f6:	4b2a      	ldr	r3, [pc, #168]	; (80066a0 <HAL_GPIO_EXTI_Callback+0x1a8>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	6859      	ldr	r1, [r3, #4]
 80065fc:	4b28      	ldr	r3, [pc, #160]	; (80066a0 <HAL_GPIO_EXTI_Callback+0x1a8>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	689c      	ldr	r4, [r3, #8]
 8006602:	4b27      	ldr	r3, [pc, #156]	; (80066a0 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	691b      	ldr	r3, [r3, #16]
 8006608:	4a25      	ldr	r2, [pc, #148]	; (80066a0 <HAL_GPIO_EXTI_Callback+0x1a8>)
 800660a:	6812      	ldr	r2, [r2, #0]
 800660c:	6952      	ldr	r2, [r2, #20]
 800660e:	f107 0008 	add.w	r0, r7, #8
 8006612:	9201      	str	r2, [sp, #4]
 8006614:	9300      	str	r3, [sp, #0]
 8006616:	4623      	mov	r3, r4
 8006618:	460a      	mov	r2, r1
 800661a:	4922      	ldr	r1, [pc, #136]	; (80066a4 <HAL_GPIO_EXTI_Callback+0x1ac>)
 800661c:	f003 ffbc 	bl	800a598 <siprintf>
        send_message(messages_send);
 8006620:	f107 0308 	add.w	r3, r7, #8
 8006624:	4618      	mov	r0, r3
 8006626:	f000 fa09 	bl	8006a3c <send_message>
        send_msg_uart1(messages_send, 0);
 800662a:	f107 0308 	add.w	r3, r7, #8
 800662e:	2100      	movs	r1, #0
 8006630:	4618      	mov	r0, r3
 8006632:	f000 f96f 	bl	8006914 <send_msg_uart1>
        LCD_Clear(GREEN);
 8006636:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 800663a:	f7ff fbe7 	bl	8005e0c <LCD_Clear>
        LCD_ShowString(30, 40, 200, 24, 16, "Question   Time:");
 800663e:	4b1a      	ldr	r3, [pc, #104]	; (80066a8 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8006640:	9301      	str	r3, [sp, #4]
 8006642:	2310      	movs	r3, #16
 8006644:	9300      	str	r3, [sp, #0]
 8006646:	2318      	movs	r3, #24
 8006648:	22c8      	movs	r2, #200	; 0xc8
 800664a:	2128      	movs	r1, #40	; 0x28
 800664c:	201e      	movs	r0, #30
 800664e:	f7ff fced 	bl	800602c <LCD_ShowString>
        LCD_ShowString(30, 70, 200, 16, 12, msg);
 8006652:	4b16      	ldr	r3, [pc, #88]	; (80066ac <HAL_GPIO_EXTI_Callback+0x1b4>)
 8006654:	9301      	str	r3, [sp, #4]
 8006656:	230c      	movs	r3, #12
 8006658:	9300      	str	r3, [sp, #0]
 800665a:	2310      	movs	r3, #16
 800665c:	22c8      	movs	r2, #200	; 0xc8
 800665e:	2146      	movs	r1, #70	; 0x46
 8006660:	201e      	movs	r0, #30
 8006662:	f7ff fce3 	bl	800602c <LCD_ShowString>
        HAL_TIM_Base_Start_IT(&htim2);
 8006666:	4812      	ldr	r0, [pc, #72]	; (80066b0 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8006668:	f002 fcc8 	bl	8008ffc <HAL_TIM_Base_Start_IT>
        HAL_TIM_Base_Start_IT(&htim3); // lyu
 800666c:	4811      	ldr	r0, [pc, #68]	; (80066b4 <HAL_GPIO_EXTI_Callback+0x1bc>)
 800666e:	f002 fcc5 	bl	8008ffc <HAL_TIM_Base_Start_IT>
        state = AnswerState;
 8006672:	4b0a      	ldr	r3, [pc, #40]	; (800669c <HAL_GPIO_EXTI_Callback+0x1a4>)
 8006674:	2201      	movs	r2, #1
 8006676:	701a      	strb	r2, [r3, #0]
        break;
 8006678:	e005      	b.n	8006686 <HAL_GPIO_EXTI_Callback+0x18e>
      state = QuestionState;
 800667a:	4b08      	ldr	r3, [pc, #32]	; (800669c <HAL_GPIO_EXTI_Callback+0x1a4>)
 800667c:	2200      	movs	r2, #0
 800667e:	701a      	strb	r2, [r3, #0]
      Question();
 8006680:	f7ff fdbe 	bl	8006200 <Question>
      break;
 8006684:	bf00      	nop
}
 8006686:	bf00      	nop
 8006688:	f207 470c 	addw	r7, r7, #1036	; 0x40c
 800668c:	46bd      	mov	sp, r7
 800668e:	bd90      	pop	{r4, r7, pc}
 8006690:	40011000 	.word	0x40011000
 8006694:	0800b0f8 	.word	0x0800b0f8
 8006698:	200012a0 	.word	0x200012a0
 800669c:	20000168 	.word	0x20000168
 80066a0:	20001184 	.word	0x20001184
 80066a4:	0800b108 	.word	0x0800b108
 80066a8:	0800b004 	.word	0x0800b004
 80066ac:	20000104 	.word	0x20000104
 80066b0:	200011d0 	.word	0x200011d0
 80066b4:	20001188 	.word	0x20001188
 80066b8:	200000cc 	.word	0x200000cc
 80066bc:	0800b118 	.word	0x0800b118

080066c0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b08a      	sub	sp, #40	; 0x28
 80066c4:	af02      	add	r7, sp, #8
 80066c6:	6078      	str	r0, [r7, #4]
  // lyu test
  if (htim->Instance == htim3.Instance)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	4b1f      	ldr	r3, [pc, #124]	; (800674c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d136      	bne.n	8006742 <HAL_TIM_PeriodElapsedCallback+0x82>
  {
    time_left--;
 80066d4:	4b1e      	ldr	r3, [pc, #120]	; (8006750 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	3b01      	subs	r3, #1
 80066da:	4a1d      	ldr	r2, [pc, #116]	; (8006750 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80066dc:	6013      	str	r3, [r2, #0]
    sprintf(time_l, "%d\n", time_left);
 80066de:	4b1c      	ldr	r3, [pc, #112]	; (8006750 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	461a      	mov	r2, r3
 80066e4:	491b      	ldr	r1, [pc, #108]	; (8006754 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80066e6:	481c      	ldr	r0, [pc, #112]	; (8006758 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80066e8:	f003 ff56 	bl	800a598 <siprintf>
    char strs[20];
    sprintf(strs, "Question   Time:%d s", time_left);
 80066ec:	4b18      	ldr	r3, [pc, #96]	; (8006750 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	f107 030c 	add.w	r3, r7, #12
 80066f4:	4919      	ldr	r1, [pc, #100]	; (800675c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80066f6:	4618      	mov	r0, r3
 80066f8:	f003 ff4e 	bl	800a598 <siprintf>
    LCD_ShowString(30, 40, 200, 24, 16, strs);
 80066fc:	f107 030c 	add.w	r3, r7, #12
 8006700:	9301      	str	r3, [sp, #4]
 8006702:	2310      	movs	r3, #16
 8006704:	9300      	str	r3, [sp, #0]
 8006706:	2318      	movs	r3, #24
 8006708:	22c8      	movs	r2, #200	; 0xc8
 800670a:	2128      	movs	r1, #40	; 0x28
 800670c:	201e      	movs	r0, #30
 800670e:	f7ff fc8d 	bl	800602c <LCD_ShowString>
    HAL_UART_Transmit(&huart1, (uint8_t *)time_l, strlen(time_l), HAL_MAX_DELAY);
 8006712:	4811      	ldr	r0, [pc, #68]	; (8006758 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8006714:	f7f9 fd92 	bl	800023c <strlen>
 8006718:	4603      	mov	r3, r0
 800671a:	b29a      	uxth	r2, r3
 800671c:	f04f 33ff 	mov.w	r3, #4294967295
 8006720:	490d      	ldr	r1, [pc, #52]	; (8006758 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8006722:	480f      	ldr	r0, [pc, #60]	; (8006760 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8006724:	f003 f8c3 	bl	80098ae <HAL_UART_Transmit>
    if(time_left==0){
 8006728:	4b09      	ldr	r3, [pc, #36]	; (8006750 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d108      	bne.n	8006742 <HAL_TIM_PeriodElapsedCallback+0x82>
      HAL_UART_Transmit(&huart1, "timer\n", strlen("timer\n"), HAL_MAX_DELAY);
 8006730:	f04f 33ff 	mov.w	r3, #4294967295
 8006734:	2206      	movs	r2, #6
 8006736:	490b      	ldr	r1, [pc, #44]	; (8006764 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8006738:	4809      	ldr	r0, [pc, #36]	; (8006760 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800673a:	f003 f8b8 	bl	80098ae <HAL_UART_Transmit>
      Judge();
 800673e:	f7ff fe91 	bl	8006464 <Judge>
  // {
  //   HAL_UART_Transmit(&huart1, "timer\n", strlen("timer\n"), HAL_MAX_DELAY);
  //   // send_message("timer\n");
  //   Judge();
  // }
}
 8006742:	bf00      	nop
 8006744:	3720      	adds	r7, #32
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
 800674a:	bf00      	nop
 800674c:	20001188 	.word	0x20001188
 8006750:	200000d4 	.word	0x200000d4
 8006754:	0800b128 	.word	0x0800b128
 8006758:	20001170 	.word	0x20001170
 800675c:	0800b12c 	.word	0x0800b12c
 8006760:	200012a0 	.word	0x200012a0
 8006764:	0800b144 	.word	0x0800b144

08006768 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006768:	b480      	push	{r7}
 800676a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800676c:	b672      	cpsid	i
}
 800676e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006770:	e7fe      	b.n	8006770 <Error_Handler+0x8>
	...

08006774 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006774:	b480      	push	{r7}
 8006776:	b085      	sub	sp, #20
 8006778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800677a:	4b15      	ldr	r3, [pc, #84]	; (80067d0 <HAL_MspInit+0x5c>)
 800677c:	699b      	ldr	r3, [r3, #24]
 800677e:	4a14      	ldr	r2, [pc, #80]	; (80067d0 <HAL_MspInit+0x5c>)
 8006780:	f043 0301 	orr.w	r3, r3, #1
 8006784:	6193      	str	r3, [r2, #24]
 8006786:	4b12      	ldr	r3, [pc, #72]	; (80067d0 <HAL_MspInit+0x5c>)
 8006788:	699b      	ldr	r3, [r3, #24]
 800678a:	f003 0301 	and.w	r3, r3, #1
 800678e:	60bb      	str	r3, [r7, #8]
 8006790:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006792:	4b0f      	ldr	r3, [pc, #60]	; (80067d0 <HAL_MspInit+0x5c>)
 8006794:	69db      	ldr	r3, [r3, #28]
 8006796:	4a0e      	ldr	r2, [pc, #56]	; (80067d0 <HAL_MspInit+0x5c>)
 8006798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800679c:	61d3      	str	r3, [r2, #28]
 800679e:	4b0c      	ldr	r3, [pc, #48]	; (80067d0 <HAL_MspInit+0x5c>)
 80067a0:	69db      	ldr	r3, [r3, #28]
 80067a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067a6:	607b      	str	r3, [r7, #4]
 80067a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80067aa:	4b0a      	ldr	r3, [pc, #40]	; (80067d4 <HAL_MspInit+0x60>)
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	60fb      	str	r3, [r7, #12]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80067b6:	60fb      	str	r3, [r7, #12]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80067be:	60fb      	str	r3, [r7, #12]
 80067c0:	4a04      	ldr	r2, [pc, #16]	; (80067d4 <HAL_MspInit+0x60>)
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80067c6:	bf00      	nop
 80067c8:	3714      	adds	r7, #20
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bc80      	pop	{r7}
 80067ce:	4770      	bx	lr
 80067d0:	40021000 	.word	0x40021000
 80067d4:	40010000 	.word	0x40010000

080067d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80067d8:	b480      	push	{r7}
 80067da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80067dc:	e7fe      	b.n	80067dc <NMI_Handler+0x4>

080067de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80067de:	b480      	push	{r7}
 80067e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80067e2:	e7fe      	b.n	80067e2 <HardFault_Handler+0x4>

080067e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80067e4:	b480      	push	{r7}
 80067e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80067e8:	e7fe      	b.n	80067e8 <MemManage_Handler+0x4>

080067ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80067ea:	b480      	push	{r7}
 80067ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80067ee:	e7fe      	b.n	80067ee <BusFault_Handler+0x4>

080067f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80067f0:	b480      	push	{r7}
 80067f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80067f4:	e7fe      	b.n	80067f4 <UsageFault_Handler+0x4>

080067f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80067f6:	b480      	push	{r7}
 80067f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80067fa:	bf00      	nop
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bc80      	pop	{r7}
 8006800:	4770      	bx	lr

08006802 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006802:	b480      	push	{r7}
 8006804:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006806:	bf00      	nop
 8006808:	46bd      	mov	sp, r7
 800680a:	bc80      	pop	{r7}
 800680c:	4770      	bx	lr

0800680e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800680e:	b480      	push	{r7}
 8006810:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006812:	bf00      	nop
 8006814:	46bd      	mov	sp, r7
 8006816:	bc80      	pop	{r7}
 8006818:	4770      	bx	lr

0800681a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800681a:	b580      	push	{r7, lr}
 800681c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800681e:	f000 ffd7 	bl	80077d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006822:	bf00      	nop
 8006824:	bd80      	pop	{r7, pc}
	...

08006828 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800682c:	4802      	ldr	r0, [pc, #8]	; (8006838 <DMA1_Channel5_IRQHandler+0x10>)
 800682e:	f001 fb35 	bl	8007e9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8006832:	bf00      	nop
 8006834:	bd80      	pop	{r7, pc}
 8006836:	bf00      	nop
 8006838:	2000125c 	.word	0x2000125c

0800683c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8006840:	4802      	ldr	r0, [pc, #8]	; (800684c <DMA1_Channel6_IRQHandler+0x10>)
 8006842:	f001 fb2b 	bl	8007e9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8006846:	bf00      	nop
 8006848:	bd80      	pop	{r7, pc}
 800684a:	bf00      	nop
 800684c:	20001218 	.word	0x20001218

08006850 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8006854:	2020      	movs	r0, #32
 8006856:	f001 ff4f 	bl	80086f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800685a:	bf00      	nop
 800685c:	bd80      	pop	{r7, pc}
	...

08006860 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006864:	4802      	ldr	r0, [pc, #8]	; (8006870 <TIM2_IRQHandler+0x10>)
 8006866:	f002 fc57 	bl	8009118 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800686a:	bf00      	nop
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	200011d0 	.word	0x200011d0

08006874 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006878:	4802      	ldr	r0, [pc, #8]	; (8006884 <TIM3_IRQHandler+0x10>)
 800687a:	f002 fc4d 	bl	8009118 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800687e:	bf00      	nop
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	20001188 	.word	0x20001188

08006888 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800688c:	4806      	ldr	r0, [pc, #24]	; (80068a8 <USART1_IRQHandler+0x20>)
 800688e:	f003 f92b 	bl	8009ae8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  HAL_UART_RxCpltCallback(&huart1);
 8006892:	4805      	ldr	r0, [pc, #20]	; (80068a8 <USART1_IRQHandler+0x20>)
 8006894:	f000 f99a 	bl	8006bcc <HAL_UART_RxCpltCallback>
	HAL_UART_Receive_DMA(&huart1, (uint8_t*) uart1_rx_buffer, 2048);
 8006898:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800689c:	4903      	ldr	r1, [pc, #12]	; (80068ac <USART1_IRQHandler+0x24>)
 800689e:	4802      	ldr	r0, [pc, #8]	; (80068a8 <USART1_IRQHandler+0x20>)
 80068a0:	f003 f897 	bl	80099d2 <HAL_UART_Receive_DMA>
  // HAL_UART_Receive_IT(&huart1,(uint8_t*)rxBuffer,1);
  /* USER CODE END USART1_IRQn 1 */
}
 80068a4:	bf00      	nop
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	200012a0 	.word	0x200012a0
 80068ac:	2000016c 	.word	0x2000016c

080068b0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80068b4:	4806      	ldr	r0, [pc, #24]	; (80068d0 <USART2_IRQHandler+0x20>)
 80068b6:	f003 f917 	bl	8009ae8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  HAL_UART_RxCpltCallback(&huart2);
 80068ba:	4805      	ldr	r0, [pc, #20]	; (80068d0 <USART2_IRQHandler+0x20>)
 80068bc:	f000 f986 	bl	8006bcc <HAL_UART_RxCpltCallback>
	HAL_UART_Receive_DMA(&huart2, (uint8_t*) uart2_rx_buffer, 2048);
 80068c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80068c4:	4903      	ldr	r1, [pc, #12]	; (80068d4 <USART2_IRQHandler+0x24>)
 80068c6:	4802      	ldr	r0, [pc, #8]	; (80068d0 <USART2_IRQHandler+0x20>)
 80068c8:	f003 f883 	bl	80099d2 <HAL_UART_Receive_DMA>
  /* USER CODE END USART2_IRQn 1 */
}
 80068cc:	bf00      	nop
 80068ce:	bd80      	pop	{r7, pc}
 80068d0:	200012e4 	.word	0x200012e4
 80068d4:	20000970 	.word	0x20000970

080068d8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80068dc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80068e0:	f001 ff0a 	bl	80086f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80068e4:	bf00      	nop
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <transmit1>:

/* USER CODE BEGIN 1 */

void transmit1(uint8_t* msg){
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b082      	sub	sp, #8
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), 0xffff);
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f7f9 fca3 	bl	800023c <strlen>
 80068f6:	4603      	mov	r3, r0
 80068f8:	b29a      	uxth	r2, r3
 80068fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80068fe:	6879      	ldr	r1, [r7, #4]
 8006900:	4803      	ldr	r0, [pc, #12]	; (8006910 <transmit1+0x28>)
 8006902:	f002 ffd4 	bl	80098ae <HAL_UART_Transmit>
}
 8006906:	bf00      	nop
 8006908:	3708      	adds	r7, #8
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop
 8006910:	200012a0 	.word	0x200012a0

08006914 <send_msg_uart1>:

void send_msg_uart1(uint8_t *msg, int delay_time)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b082      	sub	sp, #8
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	6039      	str	r1, [r7, #0]
  HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), 0xffff);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f7f9 fc8c 	bl	800023c <strlen>
 8006924:	4603      	mov	r3, r0
 8006926:	b29a      	uxth	r2, r3
 8006928:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800692c:	6879      	ldr	r1, [r7, #4]
 800692e:	4805      	ldr	r0, [pc, #20]	; (8006944 <send_msg_uart1+0x30>)
 8006930:	f002 ffbd 	bl	80098ae <HAL_UART_Transmit>
  HAL_Delay(delay_time);
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	4618      	mov	r0, r3
 8006938:	f000 ff66 	bl	8007808 <HAL_Delay>
}
 800693c:	bf00      	nop
 800693e:	3708      	adds	r7, #8
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}
 8006944:	200012a0 	.word	0x200012a0

08006948 <send_cmd>:

void send_cmd(uint8_t *cmd, int delay_time)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b09c      	sub	sp, #112	; 0x70
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]
  char command[100];
  sprintf(command,"Start send command:%s\n",cmd);
 8006952:	f107 030c 	add.w	r3, r7, #12
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	490b      	ldr	r1, [pc, #44]	; (8006988 <send_cmd+0x40>)
 800695a:	4618      	mov	r0, r3
 800695c:	f003 fe1c 	bl	800a598 <siprintf>
  // send_msg_uart1(command,20);
  HAL_UART_Transmit(&huart2, (uint8_t *)cmd, strlen(cmd), 0xffff);
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f7f9 fc6b 	bl	800023c <strlen>
 8006966:	4603      	mov	r3, r0
 8006968:	b29a      	uxth	r2, r3
 800696a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800696e:	6879      	ldr	r1, [r7, #4]
 8006970:	4806      	ldr	r0, [pc, #24]	; (800698c <send_cmd+0x44>)
 8006972:	f002 ff9c 	bl	80098ae <HAL_UART_Transmit>
  // send_msg_uart1("Start send command END\n",20);
  // HAL_UART_Transmit(&huart1, (uint8_t *)cmd, strlen(cmd), 0xffff);
  HAL_Delay(delay_time);
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	4618      	mov	r0, r3
 800697a:	f000 ff45 	bl	8007808 <HAL_Delay>
}
 800697e:	bf00      	nop
 8006980:	3770      	adds	r7, #112	; 0x70
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop
 8006988:	0800b14c 	.word	0x0800b14c
 800698c:	200012e4 	.word	0x200012e4

08006990 <send_cmd_without_delay>:

void send_cmd_without_delay(uint8_t *cmd)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b09c      	sub	sp, #112	; 0x70
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  char command[100];
  sprintf(command,"Start send command:%s\n",cmd);
 8006998:	f107 030c 	add.w	r3, r7, #12
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	490d      	ldr	r1, [pc, #52]	; (80069d4 <send_cmd_without_delay+0x44>)
 80069a0:	4618      	mov	r0, r3
 80069a2:	f003 fdf9 	bl	800a598 <siprintf>
  transmit1(command);
 80069a6:	f107 030c 	add.w	r3, r7, #12
 80069aa:	4618      	mov	r0, r3
 80069ac:	f7ff ff9c 	bl	80068e8 <transmit1>
  HAL_UART_Transmit(&huart2, (uint8_t *)cmd, strlen(cmd), 0xffff);
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f7f9 fc43 	bl	800023c <strlen>
 80069b6:	4603      	mov	r3, r0
 80069b8:	b29a      	uxth	r2, r3
 80069ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80069be:	6879      	ldr	r1, [r7, #4]
 80069c0:	4805      	ldr	r0, [pc, #20]	; (80069d8 <send_cmd_without_delay+0x48>)
 80069c2:	f002 ff74 	bl	80098ae <HAL_UART_Transmit>
  transmit1("Start send command END\n");
 80069c6:	4805      	ldr	r0, [pc, #20]	; (80069dc <send_cmd_without_delay+0x4c>)
 80069c8:	f7ff ff8e 	bl	80068e8 <transmit1>
  // HAL_UART_Transmit(&huart1, (uint8_t *)cmd, strlen(cmd), 0xffff);
}
 80069cc:	bf00      	nop
 80069ce:	3770      	adds	r7, #112	; 0x70
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}
 80069d4:	0800b14c 	.word	0x0800b14c
 80069d8:	200012e4 	.word	0x200012e4
 80069dc:	0800b164 	.word	0x0800b164

080069e0 <send_message_without_delay>:


void send_message_without_delay(uint8_t* msg){
 80069e0:	b590      	push	{r4, r7, lr}
 80069e2:	b09d      	sub	sp, #116	; 0x74
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  uint8_t activate[100];
  sprintf(activate, "AT+CIPSEND=%d,%d\r\n", link_number, strlen(msg));
 80069e8:	4b10      	ldr	r3, [pc, #64]	; (8006a2c <send_message_without_delay+0x4c>)
 80069ea:	681c      	ldr	r4, [r3, #0]
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f7f9 fc25 	bl	800023c <strlen>
 80069f2:	4603      	mov	r3, r0
 80069f4:	f107 000c 	add.w	r0, r7, #12
 80069f8:	4622      	mov	r2, r4
 80069fa:	490d      	ldr	r1, [pc, #52]	; (8006a30 <send_message_without_delay+0x50>)
 80069fc:	f003 fdcc 	bl	800a598 <siprintf>
  // send_cmd((uint8_t *)activate, 0);
  send_cmd_without_delay((uint8_t *)activate);
 8006a00:	f107 030c 	add.w	r3, r7, #12
 8006a04:	4618      	mov	r0, r3
 8006a06:	f7ff ffc3 	bl	8006990 <send_cmd_without_delay>
  transmit1("\n>>>>>SENDING<<<<<\n");
 8006a0a:	480a      	ldr	r0, [pc, #40]	; (8006a34 <send_message_without_delay+0x54>)
 8006a0c:	f7ff ff6c 	bl	80068e8 <transmit1>
  transmit1(msg);
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f7ff ff69 	bl	80068e8 <transmit1>
  transmit1("\n>>>>>SENDING END<<<<<\n");
 8006a16:	4808      	ldr	r0, [pc, #32]	; (8006a38 <send_message_without_delay+0x58>)
 8006a18:	f7ff ff66 	bl	80068e8 <transmit1>
  // send_cmd(msg, 0);
  send_cmd_without_delay(msg);
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f7ff ffb7 	bl	8006990 <send_cmd_without_delay>
}
 8006a22:	bf00      	nop
 8006a24:	3774      	adds	r7, #116	; 0x74
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd90      	pop	{r4, r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	20000038 	.word	0x20000038
 8006a30:	0800b17c 	.word	0x0800b17c
 8006a34:	0800b190 	.word	0x0800b190
 8006a38:	0800b1a4 	.word	0x0800b1a4

08006a3c <send_message>:

void send_message(uint8_t *msg)
{
 8006a3c:	b590      	push	{r4, r7, lr}
 8006a3e:	b09d      	sub	sp, #116	; 0x74
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  HAL_Delay(400);
 8006a44:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8006a48:	f000 fede 	bl	8007808 <HAL_Delay>
  uint8_t activate[100];
  sprintf(activate, "AT+CIPSEND=%d,%d\r\n", link_number, strlen(msg));
 8006a4c:	4b10      	ldr	r3, [pc, #64]	; (8006a90 <send_message+0x54>)
 8006a4e:	681c      	ldr	r4, [r3, #0]
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f7f9 fbf3 	bl	800023c <strlen>
 8006a56:	4603      	mov	r3, r0
 8006a58:	f107 000c 	add.w	r0, r7, #12
 8006a5c:	4622      	mov	r2, r4
 8006a5e:	490d      	ldr	r1, [pc, #52]	; (8006a94 <send_message+0x58>)
 8006a60:	f003 fd9a 	bl	800a598 <siprintf>
  send_cmd((uint8_t *)activate, 2000);
 8006a64:	f107 030c 	add.w	r3, r7, #12
 8006a68:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f7ff ff6b 	bl	8006948 <send_cmd>
  send_msg_uart1(msg, 500);
 8006a72:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f7ff ff4c 	bl	8006914 <send_msg_uart1>
  // printOut(msg, strlen(msg), 1, connect_flag);
  send_cmd(msg, 1000);
 8006a7c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f7ff ff61 	bl	8006948 <send_cmd>
}
 8006a86:	bf00      	nop
 8006a88:	3774      	adds	r7, #116	; 0x74
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd90      	pop	{r4, r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	20000038 	.word	0x20000038
 8006a94:	0800b17c 	.word	0x0800b17c

08006a98 <connect_to_wifi>:

void connect_to_wifi() {
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	af00      	add	r7, sp, #0
	init_var();
 8006a9c:	f000 f832 	bl	8006b04 <init_var>
	send_msg_uart1((uint8_t*) "start connect to wifi\r\n", 2000);
 8006aa0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006aa4:	4811      	ldr	r0, [pc, #68]	; (8006aec <connect_to_wifi+0x54>)
 8006aa6:	f7ff ff35 	bl	8006914 <send_msg_uart1>
	send_cmd("AT+RST\r\n", 5000);
 8006aaa:	f241 3188 	movw	r1, #5000	; 0x1388
 8006aae:	4810      	ldr	r0, [pc, #64]	; (8006af0 <connect_to_wifi+0x58>)
 8006ab0:	f7ff ff4a 	bl	8006948 <send_cmd>
	send_cmd("AT+CWMODE=1\r\n", 2000);
 8006ab4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006ab8:	480e      	ldr	r0, [pc, #56]	; (8006af4 <connect_to_wifi+0x5c>)
 8006aba:	f7ff ff45 	bl	8006948 <send_cmd>
	send_cmd("AT+RST\r\n", 5000);
 8006abe:	f241 3188 	movw	r1, #5000	; 0x1388
 8006ac2:	480b      	ldr	r0, [pc, #44]	; (8006af0 <connect_to_wifi+0x58>)
 8006ac4:	f7ff ff40 	bl	8006948 <send_cmd>
	send_cmd("AT+CWJAP=\"SUSTC-WIFI-FAKE\",\"987654321\"\r\n", 10000);
 8006ac8:	f242 7110 	movw	r1, #10000	; 0x2710
 8006acc:	480a      	ldr	r0, [pc, #40]	; (8006af8 <connect_to_wifi+0x60>)
 8006ace:	f7ff ff3b 	bl	8006948 <send_cmd>
	send_cmd("AT+CIPMUX=1\r\n", 5000);
 8006ad2:	f241 3188 	movw	r1, #5000	; 0x1388
 8006ad6:	4809      	ldr	r0, [pc, #36]	; (8006afc <connect_to_wifi+0x64>)
 8006ad8:	f7ff ff36 	bl	8006948 <send_cmd>
	send_cmd("AT+CIPSERVER=1\r\n", 5000);
 8006adc:	f241 3188 	movw	r1, #5000	; 0x1388
 8006ae0:	4807      	ldr	r0, [pc, #28]	; (8006b00 <connect_to_wifi+0x68>)
 8006ae2:	f7ff ff31 	bl	8006948 <send_cmd>
}
 8006ae6:	bf00      	nop
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	bf00      	nop
 8006aec:	0800b1bc 	.word	0x0800b1bc
 8006af0:	0800b1d4 	.word	0x0800b1d4
 8006af4:	0800b1e0 	.word	0x0800b1e0
 8006af8:	0800b1f0 	.word	0x0800b1f0
 8006afc:	0800b21c 	.word	0x0800b21c
 8006b00:	0800b22c 	.word	0x0800b22c

08006b04 <init_var>:

void init_var()
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	af00      	add	r7, sp, #0
  connect_flag = 0;
 8006b08:	4b0e      	ldr	r3, [pc, #56]	; (8006b44 <init_var+0x40>)
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	601a      	str	r2, [r3, #0]
  sending_flag = 0;
 8006b0e:	4b0e      	ldr	r3, [pc, #56]	; (8006b48 <init_var+0x44>)
 8006b10:	2200      	movs	r2, #0
 8006b12:	601a      	str	r2, [r3, #0]
  link_number = -1;
 8006b14:	4b0d      	ldr	r3, [pc, #52]	; (8006b4c <init_var+0x48>)
 8006b16:	f04f 32ff 	mov.w	r2, #4294967295
 8006b1a:	601a      	str	r2, [r3, #0]
  connection_counter = 0;
 8006b1c:	4b0c      	ldr	r3, [pc, #48]	; (8006b50 <init_var+0x4c>)
 8006b1e:	2200      	movs	r2, #0
 8006b20:	601a      	str	r2, [r3, #0]
  timer_count = 0;
 8006b22:	4b0c      	ldr	r3, [pc, #48]	; (8006b54 <init_var+0x50>)
 8006b24:	2200      	movs	r2, #0
 8006b26:	601a      	str	r2, [r3, #0]
  // StateChange(connect_flag);
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8006b28:	2201      	movs	r2, #1
 8006b2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006b2e:	480a      	ldr	r0, [pc, #40]	; (8006b58 <init_var+0x54>)
 8006b30:	f001 fdc9 	bl	80086c6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8006b34:	2201      	movs	r2, #1
 8006b36:	2104      	movs	r1, #4
 8006b38:	4808      	ldr	r0, [pc, #32]	; (8006b5c <init_var+0x58>)
 8006b3a:	f001 fdc4 	bl	80086c6 <HAL_GPIO_WritePin>
}
 8006b3e:	bf00      	nop
 8006b40:	bd80      	pop	{r7, pc}
 8006b42:	bf00      	nop
 8006b44:	200000d8 	.word	0x200000d8
 8006b48:	200000dc 	.word	0x200000dc
 8006b4c:	20000038 	.word	0x20000038
 8006b50:	200000e4 	.word	0x200000e4
 8006b54:	200000e0 	.word	0x200000e0
 8006b58:	40010800 	.word	0x40010800
 8006b5c:	40011400 	.word	0x40011400

08006b60 <init_server>:

void init_server()
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	af00      	add	r7, sp, #0
  init_var();
 8006b64:	f7ff ffce 	bl	8006b04 <init_var>
  send_msg_uart1((uint8_t *)"start initialize server\r\n", 0);
 8006b68:	2100      	movs	r1, #0
 8006b6a:	4811      	ldr	r0, [pc, #68]	; (8006bb0 <init_server+0x50>)
 8006b6c:	f7ff fed2 	bl	8006914 <send_msg_uart1>
  send_cmd("AT+CWMODE=3\r\n", 2000);
 8006b70:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006b74:	480f      	ldr	r0, [pc, #60]	; (8006bb4 <init_server+0x54>)
 8006b76:	f7ff fee7 	bl	8006948 <send_cmd>
  send_cmd("AT+RST\r\n", 5000);
 8006b7a:	f241 3188 	movw	r1, #5000	; 0x1388
 8006b7e:	480e      	ldr	r0, [pc, #56]	; (8006bb8 <init_server+0x58>)
 8006b80:	f7ff fee2 	bl	8006948 <send_cmd>
  send_cmd("AT+CWSAP=\"SUSTC-WIFI-FAKE\",\"987654321\",1,0,4,0\r\n", 2000);
 8006b84:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006b88:	480c      	ldr	r0, [pc, #48]	; (8006bbc <init_server+0x5c>)
 8006b8a:	f7ff fedd 	bl	8006948 <send_cmd>
  
  // send_cmd("AT+CWSAP=\"SUSTC-WIFI-FAKE\",\"987654321\",5,3,4,0\r\n", 2000);
  send_cmd("AT+CIPMUX=1\r\n", 2000);
 8006b8e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006b92:	480b      	ldr	r0, [pc, #44]	; (8006bc0 <init_server+0x60>)
 8006b94:	f7ff fed8 	bl	8006948 <send_cmd>
  send_cmd("AT+CIPSERVER=1,8089\r\n", 2000);
 8006b98:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006b9c:	4809      	ldr	r0, [pc, #36]	; (8006bc4 <init_server+0x64>)
 8006b9e:	f7ff fed3 	bl	8006948 <send_cmd>
  send_msg_uart1((uint8_t *)"end initialize server\r\n", 0);
 8006ba2:	2100      	movs	r1, #0
 8006ba4:	4808      	ldr	r0, [pc, #32]	; (8006bc8 <init_server+0x68>)
 8006ba6:	f7ff feb5 	bl	8006914 <send_msg_uart1>
}
 8006baa:	bf00      	nop
 8006bac:	bd80      	pop	{r7, pc}
 8006bae:	bf00      	nop
 8006bb0:	0800b240 	.word	0x0800b240
 8006bb4:	0800b25c 	.word	0x0800b25c
 8006bb8:	0800b1d4 	.word	0x0800b1d4
 8006bbc:	0800b26c 	.word	0x0800b26c
 8006bc0:	0800b21c 	.word	0x0800b21c
 8006bc4:	0800b2a0 	.word	0x0800b2a0
 8006bc8:	0800b2b8 	.word	0x0800b2b8

08006bcc <HAL_UART_RxCpltCallback>:
// 	printOut(msg, strlen(msg), 1, connect_flag);
// 	send_cmd(msg, 1000);
// }

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b08a      	sub	sp, #40	; 0x28
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  // send_msg_uart1("MSG RECIEVED\n", 1);
  if (huart->Instance == USART1)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4aaa      	ldr	r2, [pc, #680]	; (8006e84 <HAL_UART_RxCpltCallback+0x2b8>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	f040 8111 	bne.w	8006e02 <HAL_UART_RxCpltCallback+0x236>
  {

    if (RESET != __HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE)) {
 8006be0:	4ba9      	ldr	r3, [pc, #676]	; (8006e88 <HAL_UART_RxCpltCallback+0x2bc>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 0310 	and.w	r3, r3, #16
 8006bea:	2b10      	cmp	r3, #16
 8006bec:	f040 82ef 	bne.w	80071ce <HAL_UART_RxCpltCallback+0x602>
			__HAL_UART_CLEAR_IDLEFLAG(&huart1);
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	623b      	str	r3, [r7, #32]
 8006bf4:	4ba4      	ldr	r3, [pc, #656]	; (8006e88 <HAL_UART_RxCpltCallback+0x2bc>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	623b      	str	r3, [r7, #32]
 8006bfc:	4ba2      	ldr	r3, [pc, #648]	; (8006e88 <HAL_UART_RxCpltCallback+0x2bc>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	623b      	str	r3, [r7, #32]
 8006c04:	6a3b      	ldr	r3, [r7, #32]
			HAL_UART_DMAStop(&huart1);
 8006c06:	48a0      	ldr	r0, [pc, #640]	; (8006e88 <HAL_UART_RxCpltCallback+0x2bc>)
 8006c08:	f002 ff13 	bl	8009a32 <HAL_UART_DMAStop>
			uint8_t data_length = 2048 - __HAL_DMA_GET_COUNTER(&hdma_usart1_rx);
 8006c0c:	4b9f      	ldr	r3, [pc, #636]	; (8006e8c <HAL_UART_RxCpltCallback+0x2c0>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	425b      	negs	r3, r3
 8006c16:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			send_msg_uart1((uint8_t*) "enter usart receive function\n", 0);
 8006c1a:	2100      	movs	r1, #0
 8006c1c:	489c      	ldr	r0, [pc, #624]	; (8006e90 <HAL_UART_RxCpltCallback+0x2c4>)
 8006c1e:	f7ff fe79 	bl	8006914 <send_msg_uart1>
			if (link_number != -1 && uart1_rx_buffer[0] == '>'
 8006c22:	4b9c      	ldr	r3, [pc, #624]	; (8006e94 <HAL_UART_RxCpltCallback+0x2c8>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c2a:	d028      	beq.n	8006c7e <HAL_UART_RxCpltCallback+0xb2>
 8006c2c:	4b9a      	ldr	r3, [pc, #616]	; (8006e98 <HAL_UART_RxCpltCallback+0x2cc>)
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	2b3e      	cmp	r3, #62	; 0x3e
 8006c32:	d124      	bne.n	8006c7e <HAL_UART_RxCpltCallback+0xb2>
					&& connect_flag == 2) {
 8006c34:	4b99      	ldr	r3, [pc, #612]	; (8006e9c <HAL_UART_RxCpltCallback+0x2d0>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	2b02      	cmp	r3, #2
 8006c3a:	d120      	bne.n	8006c7e <HAL_UART_RxCpltCallback+0xb2>
				sending_flag = 1;
 8006c3c:	4b98      	ldr	r3, [pc, #608]	; (8006ea0 <HAL_UART_RxCpltCallback+0x2d4>)
 8006c3e:	2201      	movs	r2, #1
 8006c40:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET); //1
 8006c42:	2200      	movs	r2, #0
 8006c44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006c48:	4896      	ldr	r0, [pc, #600]	; (8006ea4 <HAL_UART_RxCpltCallback+0x2d8>)
 8006c4a:	f001 fd3c 	bl	80086c6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); //1
 8006c4e:	2200      	movs	r2, #0
 8006c50:	2104      	movs	r1, #4
 8006c52:	4895      	ldr	r0, [pc, #596]	; (8006ea8 <HAL_UART_RxCpltCallback+0x2dc>)
 8006c54:	f001 fd37 	bl	80086c6 <HAL_GPIO_WritePin>
				send_message(uart1_rx_buffer + 1);
 8006c58:	4b94      	ldr	r3, [pc, #592]	; (8006eac <HAL_UART_RxCpltCallback+0x2e0>)
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f7ff feee 	bl	8006a3c <send_message>
				sending_flag = 0;
 8006c60:	4b8f      	ldr	r3, [pc, #572]	; (8006ea0 <HAL_UART_RxCpltCallback+0x2d4>)
 8006c62:	2200      	movs	r2, #0
 8006c64:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET); //0
 8006c66:	2201      	movs	r2, #1
 8006c68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006c6c:	488d      	ldr	r0, [pc, #564]	; (8006ea4 <HAL_UART_RxCpltCallback+0x2d8>)
 8006c6e:	f001 fd2a 	bl	80086c6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); //1
 8006c72:	2200      	movs	r2, #0
 8006c74:	2104      	movs	r1, #4
 8006c76:	488c      	ldr	r0, [pc, #560]	; (8006ea8 <HAL_UART_RxCpltCallback+0x2dc>)
 8006c78:	f001 fd25 	bl	80086c6 <HAL_GPIO_WritePin>
 8006c7c:	e0b0      	b.n	8006de0 <HAL_UART_RxCpltCallback+0x214>
			} else if (strcmp(uart1_rx_buffer, "server\r\n") == 0) {
 8006c7e:	498c      	ldr	r1, [pc, #560]	; (8006eb0 <HAL_UART_RxCpltCallback+0x2e4>)
 8006c80:	4885      	ldr	r0, [pc, #532]	; (8006e98 <HAL_UART_RxCpltCallback+0x2cc>)
 8006c82:	f7f9 fad1 	bl	8000228 <strcmp>
 8006c86:	4603      	mov	r3, r0
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d10c      	bne.n	8006ca6 <HAL_UART_RxCpltCallback+0xda>
				esp8266_mode = 1;
 8006c8c:	4b89      	ldr	r3, [pc, #548]	; (8006eb4 <HAL_UART_RxCpltCallback+0x2e8>)
 8006c8e:	2201      	movs	r2, #1
 8006c90:	601a      	str	r2, [r3, #0]
				send_msg_uart1((uint8_t*) "SET AS SERVER\r\n", 0);
 8006c92:	2100      	movs	r1, #0
 8006c94:	4888      	ldr	r0, [pc, #544]	; (8006eb8 <HAL_UART_RxCpltCallback+0x2ec>)
 8006c96:	f7ff fe3d 	bl	8006914 <send_msg_uart1>
				send_cmd("AT+CWMODE=3\r\n", 1000);
 8006c9a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006c9e:	4887      	ldr	r0, [pc, #540]	; (8006ebc <HAL_UART_RxCpltCallback+0x2f0>)
 8006ca0:	f7ff fe52 	bl	8006948 <send_cmd>
 8006ca4:	e09c      	b.n	8006de0 <HAL_UART_RxCpltCallback+0x214>
			} else if (strcmp(uart1_rx_buffer, "client\r\n") == 0) {
 8006ca6:	4986      	ldr	r1, [pc, #536]	; (8006ec0 <HAL_UART_RxCpltCallback+0x2f4>)
 8006ca8:	487b      	ldr	r0, [pc, #492]	; (8006e98 <HAL_UART_RxCpltCallback+0x2cc>)
 8006caa:	f7f9 fabd 	bl	8000228 <strcmp>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d111      	bne.n	8006cd8 <HAL_UART_RxCpltCallback+0x10c>
				esp8266_mode = 0;
 8006cb4:	4b7f      	ldr	r3, [pc, #508]	; (8006eb4 <HAL_UART_RxCpltCallback+0x2e8>)
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	601a      	str	r2, [r3, #0]
				send_msg_uart1((uint8_t*) "SET AS CLIENT\r\n", 0);
 8006cba:	2100      	movs	r1, #0
 8006cbc:	4881      	ldr	r0, [pc, #516]	; (8006ec4 <HAL_UART_RxCpltCallback+0x2f8>)
 8006cbe:	f7ff fe29 	bl	8006914 <send_msg_uart1>
				send_cmd("AT+CWJAP?\r\n", 1000);
 8006cc2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006cc6:	4880      	ldr	r0, [pc, #512]	; (8006ec8 <HAL_UART_RxCpltCallback+0x2fc>)
 8006cc8:	f7ff fe3e 	bl	8006948 <send_cmd>
				send_cmd("AT+CIFSR\r\n", 1000);
 8006ccc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006cd0:	487e      	ldr	r0, [pc, #504]	; (8006ecc <HAL_UART_RxCpltCallback+0x300>)
 8006cd2:	f7ff fe39 	bl	8006948 <send_cmd>
 8006cd6:	e083      	b.n	8006de0 <HAL_UART_RxCpltCallback+0x214>
			} else if (strcmp(uart1_rx_buffer, "start\r\n") == 0
 8006cd8:	497d      	ldr	r1, [pc, #500]	; (8006ed0 <HAL_UART_RxCpltCallback+0x304>)
 8006cda:	486f      	ldr	r0, [pc, #444]	; (8006e98 <HAL_UART_RxCpltCallback+0x2cc>)
 8006cdc:	f7f9 faa4 	bl	8000228 <strcmp>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d106      	bne.n	8006cf4 <HAL_UART_RxCpltCallback+0x128>
					&& esp8266_mode == 1) {
 8006ce6:	4b73      	ldr	r3, [pc, #460]	; (8006eb4 <HAL_UART_RxCpltCallback+0x2e8>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d102      	bne.n	8006cf4 <HAL_UART_RxCpltCallback+0x128>
				// reset();
				init_server();
 8006cee:	f7ff ff37 	bl	8006b60 <init_server>
 8006cf2:	e075      	b.n	8006de0 <HAL_UART_RxCpltCallback+0x214>
			} else if (strcmp(uart1_rx_buffer, "connect to wifi\r\n") == 0
 8006cf4:	4977      	ldr	r1, [pc, #476]	; (8006ed4 <HAL_UART_RxCpltCallback+0x308>)
 8006cf6:	4868      	ldr	r0, [pc, #416]	; (8006e98 <HAL_UART_RxCpltCallback+0x2cc>)
 8006cf8:	f7f9 fa96 	bl	8000228 <strcmp>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d106      	bne.n	8006d10 <HAL_UART_RxCpltCallback+0x144>
					&& esp8266_mode == 0) {
 8006d02:	4b6c      	ldr	r3, [pc, #432]	; (8006eb4 <HAL_UART_RxCpltCallback+0x2e8>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d102      	bne.n	8006d10 <HAL_UART_RxCpltCallback+0x144>
				// reset();
				connect_to_wifi();
 8006d0a:	f7ff fec5 	bl	8006a98 <connect_to_wifi>
 8006d0e:	e067      	b.n	8006de0 <HAL_UART_RxCpltCallback+0x214>
			} else if (strcmp(uart1_rx_buffer, "connect to server\r\n") == 0
 8006d10:	4971      	ldr	r1, [pc, #452]	; (8006ed8 <HAL_UART_RxCpltCallback+0x30c>)
 8006d12:	4861      	ldr	r0, [pc, #388]	; (8006e98 <HAL_UART_RxCpltCallback+0x2cc>)
 8006d14:	f7f9 fa88 	bl	8000228 <strcmp>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d108      	bne.n	8006d30 <HAL_UART_RxCpltCallback+0x164>
					&& esp8266_mode == 0) {
 8006d1e:	4b65      	ldr	r3, [pc, #404]	; (8006eb4 <HAL_UART_RxCpltCallback+0x2e8>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d104      	bne.n	8006d30 <HAL_UART_RxCpltCallback+0x164>
				send_cmd((uint8_t*) "AT+CIPSTART=0,\"TCP\",\"192.168.4.1\",8089\r\n", 0);
 8006d26:	2100      	movs	r1, #0
 8006d28:	486c      	ldr	r0, [pc, #432]	; (8006edc <HAL_UART_RxCpltCallback+0x310>)
 8006d2a:	f7ff fe0d 	bl	8006948 <send_cmd>
 8006d2e:	e057      	b.n	8006de0 <HAL_UART_RxCpltCallback+0x214>
			} else if (strcmp(uart1_rx_buffer, "close connection\r\n") == 0) {
 8006d30:	496b      	ldr	r1, [pc, #428]	; (8006ee0 <HAL_UART_RxCpltCallback+0x314>)
 8006d32:	4859      	ldr	r0, [pc, #356]	; (8006e98 <HAL_UART_RxCpltCallback+0x2cc>)
 8006d34:	f7f9 fa78 	bl	8000228 <strcmp>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d107      	bne.n	8006d4e <HAL_UART_RxCpltCallback+0x182>
				send_cmd((uint8_t*) "AT+CIPCLOSE=0\r\n", 2000);
 8006d3e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006d42:	4868      	ldr	r0, [pc, #416]	; (8006ee4 <HAL_UART_RxCpltCallback+0x318>)
 8006d44:	f7ff fe00 	bl	8006948 <send_cmd>
				init_var();
 8006d48:	f7ff fedc 	bl	8006b04 <init_var>
 8006d4c:	e048      	b.n	8006de0 <HAL_UART_RxCpltCallback+0x214>
			} else if (strncmp(uart1_rx_buffer, "quit wifi\r\n") == 0
 8006d4e:	4966      	ldr	r1, [pc, #408]	; (8006ee8 <HAL_UART_RxCpltCallback+0x31c>)
 8006d50:	4851      	ldr	r0, [pc, #324]	; (8006e98 <HAL_UART_RxCpltCallback+0x2cc>)
 8006d52:	f003 fc4e 	bl	800a5f2 <strncmp>
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d10b      	bne.n	8006d74 <HAL_UART_RxCpltCallback+0x1a8>
					&& esp8266_mode == 0) {
 8006d5c:	4b55      	ldr	r3, [pc, #340]	; (8006eb4 <HAL_UART_RxCpltCallback+0x2e8>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d107      	bne.n	8006d74 <HAL_UART_RxCpltCallback+0x1a8>
				send_cmd("AT+CWQAP\r\n", 1000);
 8006d64:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006d68:	4860      	ldr	r0, [pc, #384]	; (8006eec <HAL_UART_RxCpltCallback+0x320>)
 8006d6a:	f7ff fded 	bl	8006948 <send_cmd>
				init_var();
 8006d6e:	f7ff fec9 	bl	8006b04 <init_var>
 8006d72:	e035      	b.n	8006de0 <HAL_UART_RxCpltCallback+0x214>
			} else if (strncmp(uart1_rx_buffer, "ip status\r\n") == 0) {
 8006d74:	495e      	ldr	r1, [pc, #376]	; (8006ef0 <HAL_UART_RxCpltCallback+0x324>)
 8006d76:	4848      	ldr	r0, [pc, #288]	; (8006e98 <HAL_UART_RxCpltCallback+0x2cc>)
 8006d78:	f003 fc3b 	bl	800a5f2 <strncmp>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d10a      	bne.n	8006d98 <HAL_UART_RxCpltCallback+0x1cc>
				send_cmd("AT+CIPSTATUS\r\n", 1000);
 8006d82:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006d86:	485b      	ldr	r0, [pc, #364]	; (8006ef4 <HAL_UART_RxCpltCallback+0x328>)
 8006d88:	f7ff fdde 	bl	8006948 <send_cmd>
				send_cmd("AT+CIFSR\r\n", 1000);
 8006d8c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006d90:	484e      	ldr	r0, [pc, #312]	; (8006ecc <HAL_UART_RxCpltCallback+0x300>)
 8006d92:	f7ff fdd9 	bl	8006948 <send_cmd>
 8006d96:	e023      	b.n	8006de0 <HAL_UART_RxCpltCallback+0x214>
			} else if (strncmp(uart1_rx_buffer, "wifi status\r\n") == 0) {
 8006d98:	4957      	ldr	r1, [pc, #348]	; (8006ef8 <HAL_UART_RxCpltCallback+0x32c>)
 8006d9a:	483f      	ldr	r0, [pc, #252]	; (8006e98 <HAL_UART_RxCpltCallback+0x2cc>)
 8006d9c:	f003 fc29 	bl	800a5f2 <strncmp>
 8006da0:	4603      	mov	r3, r0
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d10a      	bne.n	8006dbc <HAL_UART_RxCpltCallback+0x1f0>
//				send_cmd("AT+CWSAP?\r\n", 1000);
				send_cmd("AT+CWLIF\r\n", 1000);
 8006da6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006daa:	4854      	ldr	r0, [pc, #336]	; (8006efc <HAL_UART_RxCpltCallback+0x330>)
 8006dac:	f7ff fdcc 	bl	8006948 <send_cmd>
				send_cmd("AT+CIPSTATUS\r\n", 1000);
 8006db0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006db4:	484f      	ldr	r0, [pc, #316]	; (8006ef4 <HAL_UART_RxCpltCallback+0x328>)
 8006db6:	f7ff fdc7 	bl	8006948 <send_cmd>
 8006dba:	e011      	b.n	8006de0 <HAL_UART_RxCpltCallback+0x214>
			} else {
				HAL_UART_Transmit(&huart2, (uint8_t*) uart1_rx_buffer,
 8006dbc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006dc0:	b29a      	uxth	r2, r3
 8006dc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006dc6:	4934      	ldr	r1, [pc, #208]	; (8006e98 <HAL_UART_RxCpltCallback+0x2cc>)
 8006dc8:	484d      	ldr	r0, [pc, #308]	; (8006f00 <HAL_UART_RxCpltCallback+0x334>)
 8006dca:	f002 fd70 	bl	80098ae <HAL_UART_Transmit>
						data_length, 0xffff);
            HAL_UART_Transmit(&huart1, (uint8_t*) uart1_rx_buffer,
 8006dce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006dd2:	b29a      	uxth	r2, r3
 8006dd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006dd8:	492f      	ldr	r1, [pc, #188]	; (8006e98 <HAL_UART_RxCpltCallback+0x2cc>)
 8006dda:	482b      	ldr	r0, [pc, #172]	; (8006e88 <HAL_UART_RxCpltCallback+0x2bc>)
 8006ddc:	f002 fd67 	bl	80098ae <HAL_UART_Transmit>
						data_length, 0xffff);
			}
			memset(uart1_rx_buffer, 0, data_length);
 8006de0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006de4:	461a      	mov	r2, r3
 8006de6:	2100      	movs	r1, #0
 8006de8:	482b      	ldr	r0, [pc, #172]	; (8006e98 <HAL_UART_RxCpltCallback+0x2cc>)
 8006dea:	f003 fbcd 	bl	800a588 <memset>
			data_length = 0;
 8006dee:	2300      	movs	r3, #0
 8006df0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			HAL_UART_Receive_DMA(&huart1, (uint8_t*) uart1_rx_buffer, 2048);
 8006df4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006df8:	4927      	ldr	r1, [pc, #156]	; (8006e98 <HAL_UART_RxCpltCallback+0x2cc>)
 8006dfa:	4823      	ldr	r0, [pc, #140]	; (8006e88 <HAL_UART_RxCpltCallback+0x2bc>)
 8006dfc:	f002 fde9 	bl	80099d2 <HAL_UART_Receive_DMA>
		}
	
  }else{
    send_msg_uart1("USART UNKNOWN RECIEVED\n", 1);
  }
}
 8006e00:	e1e5      	b.n	80071ce <HAL_UART_RxCpltCallback+0x602>
  else if (huart->Instance == USART2)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a3f      	ldr	r2, [pc, #252]	; (8006f04 <HAL_UART_RxCpltCallback+0x338>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	f040 81dc 	bne.w	80071c6 <HAL_UART_RxCpltCallback+0x5fa>
    if (RESET != __HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE)) {
 8006e0e:	4b3c      	ldr	r3, [pc, #240]	; (8006f00 <HAL_UART_RxCpltCallback+0x334>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f003 0310 	and.w	r3, r3, #16
 8006e18:	2b10      	cmp	r3, #16
 8006e1a:	f040 81d8 	bne.w	80071ce <HAL_UART_RxCpltCallback+0x602>
			__HAL_UART_CLEAR_IDLEFLAG(&huart2);
 8006e1e:	2300      	movs	r3, #0
 8006e20:	61fb      	str	r3, [r7, #28]
 8006e22:	4b37      	ldr	r3, [pc, #220]	; (8006f00 <HAL_UART_RxCpltCallback+0x334>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	61fb      	str	r3, [r7, #28]
 8006e2a:	4b35      	ldr	r3, [pc, #212]	; (8006f00 <HAL_UART_RxCpltCallback+0x334>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	61fb      	str	r3, [r7, #28]
 8006e32:	69fb      	ldr	r3, [r7, #28]
			HAL_UART_DMAStop(&huart2);
 8006e34:	4832      	ldr	r0, [pc, #200]	; (8006f00 <HAL_UART_RxCpltCallback+0x334>)
 8006e36:	f002 fdfc 	bl	8009a32 <HAL_UART_DMAStop>
			uint8_t data_length = 2048 - __HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 8006e3a:	4b33      	ldr	r3, [pc, #204]	; (8006f08 <HAL_UART_RxCpltCallback+0x33c>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	425b      	negs	r3, r3
 8006e44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (strncmp(uart2_rx_buffer, "WIFI CONNECTED\r\n", 16) == 0
 8006e48:	2210      	movs	r2, #16
 8006e4a:	4930      	ldr	r1, [pc, #192]	; (8006f0c <HAL_UART_RxCpltCallback+0x340>)
 8006e4c:	4830      	ldr	r0, [pc, #192]	; (8006f10 <HAL_UART_RxCpltCallback+0x344>)
 8006e4e:	f003 fbd0 	bl	800a5f2 <strncmp>
 8006e52:	4603      	mov	r3, r0
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d15d      	bne.n	8006f14 <HAL_UART_RxCpltCallback+0x348>
					&& connect_flag == 0) {
 8006e58:	4b10      	ldr	r3, [pc, #64]	; (8006e9c <HAL_UART_RxCpltCallback+0x2d0>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d159      	bne.n	8006f14 <HAL_UART_RxCpltCallback+0x348>
				connect_flag = 1;
 8006e60:	4b0e      	ldr	r3, [pc, #56]	; (8006e9c <HAL_UART_RxCpltCallback+0x2d0>)
 8006e62:	2201      	movs	r2, #1
 8006e64:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET); //0
 8006e66:	2201      	movs	r2, #1
 8006e68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006e6c:	480d      	ldr	r0, [pc, #52]	; (8006ea4 <HAL_UART_RxCpltCallback+0x2d8>)
 8006e6e:	f001 fc2a 	bl	80086c6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); //1
 8006e72:	2200      	movs	r2, #0
 8006e74:	2104      	movs	r1, #4
 8006e76:	480c      	ldr	r0, [pc, #48]	; (8006ea8 <HAL_UART_RxCpltCallback+0x2dc>)
 8006e78:	f001 fc25 	bl	80086c6 <HAL_GPIO_WritePin>
				link_number = 0;
 8006e7c:	4b05      	ldr	r3, [pc, #20]	; (8006e94 <HAL_UART_RxCpltCallback+0x2c8>)
 8006e7e:	2200      	movs	r2, #0
 8006e80:	601a      	str	r2, [r3, #0]
 8006e82:	e18f      	b.n	80071a4 <HAL_UART_RxCpltCallback+0x5d8>
 8006e84:	40013800 	.word	0x40013800
 8006e88:	200012a0 	.word	0x200012a0
 8006e8c:	2000125c 	.word	0x2000125c
 8006e90:	0800b2d0 	.word	0x0800b2d0
 8006e94:	20000038 	.word	0x20000038
 8006e98:	2000016c 	.word	0x2000016c
 8006e9c:	200000d8 	.word	0x200000d8
 8006ea0:	200000dc 	.word	0x200000dc
 8006ea4:	40010800 	.word	0x40010800
 8006ea8:	40011400 	.word	0x40011400
 8006eac:	2000016d 	.word	0x2000016d
 8006eb0:	0800b2f0 	.word	0x0800b2f0
 8006eb4:	20000034 	.word	0x20000034
 8006eb8:	0800b2fc 	.word	0x0800b2fc
 8006ebc:	0800b25c 	.word	0x0800b25c
 8006ec0:	0800b30c 	.word	0x0800b30c
 8006ec4:	0800b318 	.word	0x0800b318
 8006ec8:	0800b328 	.word	0x0800b328
 8006ecc:	0800b334 	.word	0x0800b334
 8006ed0:	0800b340 	.word	0x0800b340
 8006ed4:	0800b348 	.word	0x0800b348
 8006ed8:	0800b35c 	.word	0x0800b35c
 8006edc:	0800b370 	.word	0x0800b370
 8006ee0:	0800b39c 	.word	0x0800b39c
 8006ee4:	0800b3b0 	.word	0x0800b3b0
 8006ee8:	0800b3c0 	.word	0x0800b3c0
 8006eec:	0800b3cc 	.word	0x0800b3cc
 8006ef0:	0800b3d8 	.word	0x0800b3d8
 8006ef4:	0800b3e4 	.word	0x0800b3e4
 8006ef8:	0800b3f4 	.word	0x0800b3f4
 8006efc:	0800b404 	.word	0x0800b404
 8006f00:	200012e4 	.word	0x200012e4
 8006f04:	40004400 	.word	0x40004400
 8006f08:	20001218 	.word	0x20001218
 8006f0c:	0800b410 	.word	0x0800b410
 8006f10:	20000970 	.word	0x20000970
			} else if (strncmp(uart2_rx_buffer, "WIFI GOT IP\r\n", 13) == 0) { // client 端会收到这个消息, 这里变成连接状态
 8006f14:	220d      	movs	r2, #13
 8006f16:	49b0      	ldr	r1, [pc, #704]	; (80071d8 <HAL_UART_RxCpltCallback+0x60c>)
 8006f18:	48b0      	ldr	r0, [pc, #704]	; (80071dc <HAL_UART_RxCpltCallback+0x610>)
 8006f1a:	f003 fb6a 	bl	800a5f2 <strncmp>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d111      	bne.n	8006f48 <HAL_UART_RxCpltCallback+0x37c>
				connect_flag = 1;
 8006f24:	4bae      	ldr	r3, [pc, #696]	; (80071e0 <HAL_UART_RxCpltCallback+0x614>)
 8006f26:	2201      	movs	r2, #1
 8006f28:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET); //0
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006f30:	48ac      	ldr	r0, [pc, #688]	; (80071e4 <HAL_UART_RxCpltCallback+0x618>)
 8006f32:	f001 fbc8 	bl	80086c6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); //1
 8006f36:	2200      	movs	r2, #0
 8006f38:	2104      	movs	r1, #4
 8006f3a:	48ab      	ldr	r0, [pc, #684]	; (80071e8 <HAL_UART_RxCpltCallback+0x61c>)
 8006f3c:	f001 fbc3 	bl	80086c6 <HAL_GPIO_WritePin>
				link_number = 0;
 8006f40:	4baa      	ldr	r3, [pc, #680]	; (80071ec <HAL_UART_RxCpltCallback+0x620>)
 8006f42:	2200      	movs	r2, #0
 8006f44:	601a      	str	r2, [r3, #0]
 8006f46:	e12d      	b.n	80071a4 <HAL_UART_RxCpltCallback+0x5d8>
			} else if (connect_flag == 1
 8006f48:	4ba5      	ldr	r3, [pc, #660]	; (80071e0 <HAL_UART_RxCpltCallback+0x614>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d12f      	bne.n	8006fb0 <HAL_UART_RxCpltCallback+0x3e4>
					&& strncmp(uart2_rx_buffer, (uint8_t*) "+", 1) == 0) {
 8006f50:	2201      	movs	r2, #1
 8006f52:	49a7      	ldr	r1, [pc, #668]	; (80071f0 <HAL_UART_RxCpltCallback+0x624>)
 8006f54:	48a1      	ldr	r0, [pc, #644]	; (80071dc <HAL_UART_RxCpltCallback+0x610>)
 8006f56:	f003 fb4c 	bl	800a5f2 <strncmp>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d127      	bne.n	8006fb0 <HAL_UART_RxCpltCallback+0x3e4>
				if (strstr(uart2_rx_buffer, "+timeout") != NULL) {
 8006f60:	49a4      	ldr	r1, [pc, #656]	; (80071f4 <HAL_UART_RxCpltCallback+0x628>)
 8006f62:	489e      	ldr	r0, [pc, #632]	; (80071dc <HAL_UART_RxCpltCallback+0x610>)
 8006f64:	f003 fb57 	bl	800a616 <strstr>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d01c      	beq.n	8006fa8 <HAL_UART_RxCpltCallback+0x3dc>
					if (connection_counter > 2) {
 8006f6e:	4ba2      	ldr	r3, [pc, #648]	; (80071f8 <HAL_UART_RxCpltCallback+0x62c>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	2b02      	cmp	r3, #2
 8006f74:	dd0e      	ble.n	8006f94 <HAL_UART_RxCpltCallback+0x3c8>
						send_msg_uart1((uint8_t*) "connection closed\r\n", 100);
 8006f76:	2164      	movs	r1, #100	; 0x64
 8006f78:	48a0      	ldr	r0, [pc, #640]	; (80071fc <HAL_UART_RxCpltCallback+0x630>)
 8006f7a:	f7ff fccb 	bl	8006914 <send_msg_uart1>
						send_cmd((uint8_t*) "AT+CWQAP\r\n", 2000);
 8006f7e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006f82:	489f      	ldr	r0, [pc, #636]	; (8007200 <HAL_UART_RxCpltCallback+0x634>)
 8006f84:	f7ff fce0 	bl	8006948 <send_cmd>
						init_var();
 8006f88:	f7ff fdbc 	bl	8006b04 <init_var>
						connection_counter = 0;
 8006f8c:	4b9a      	ldr	r3, [pc, #616]	; (80071f8 <HAL_UART_RxCpltCallback+0x62c>)
 8006f8e:	2200      	movs	r2, #0
 8006f90:	601a      	str	r2, [r3, #0]
				if (strstr(uart2_rx_buffer, "+timeout") != NULL) {
 8006f92:	e107      	b.n	80071a4 <HAL_UART_RxCpltCallback+0x5d8>
						send_msg_uart1((uint8_t*) "connection disturbance\r\n",
 8006f94:	2164      	movs	r1, #100	; 0x64
 8006f96:	489b      	ldr	r0, [pc, #620]	; (8007204 <HAL_UART_RxCpltCallback+0x638>)
 8006f98:	f7ff fcbc 	bl	8006914 <send_msg_uart1>
						++connection_counter;
 8006f9c:	4b96      	ldr	r3, [pc, #600]	; (80071f8 <HAL_UART_RxCpltCallback+0x62c>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	4a95      	ldr	r2, [pc, #596]	; (80071f8 <HAL_UART_RxCpltCallback+0x62c>)
 8006fa4:	6013      	str	r3, [r2, #0]
				if (strstr(uart2_rx_buffer, "+timeout") != NULL) {
 8006fa6:	e0fd      	b.n	80071a4 <HAL_UART_RxCpltCallback+0x5d8>
					connection_counter = 0;
 8006fa8:	4b93      	ldr	r3, [pc, #588]	; (80071f8 <HAL_UART_RxCpltCallback+0x62c>)
 8006faa:	2200      	movs	r2, #0
 8006fac:	601a      	str	r2, [r3, #0]
				if (strstr(uart2_rx_buffer, "+timeout") != NULL) {
 8006fae:	e0f9      	b.n	80071a4 <HAL_UART_RxCpltCallback+0x5d8>
			} else if (connect_flag == 2) {
 8006fb0:	4b8b      	ldr	r3, [pc, #556]	; (80071e0 <HAL_UART_RxCpltCallback+0x614>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	2b02      	cmp	r3, #2
 8006fb6:	d17a      	bne.n	80070ae <HAL_UART_RxCpltCallback+0x4e2>
				if (strcmp(uart2_rx_buffer, "WIFI DISCONNECT\r\n", 16) == 0) { //client 端会收到这个消息
 8006fb8:	2210      	movs	r2, #16
 8006fba:	4993      	ldr	r1, [pc, #588]	; (8007208 <HAL_UART_RxCpltCallback+0x63c>)
 8006fbc:	4887      	ldr	r0, [pc, #540]	; (80071dc <HAL_UART_RxCpltCallback+0x610>)
 8006fbe:	f7f9 f933 	bl	8000228 <strcmp>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d10b      	bne.n	8006fe0 <HAL_UART_RxCpltCallback+0x414>
					init_var();
 8006fc8:	f7ff fd9c 	bl	8006b04 <init_var>
					HAL_UART_Transmit(&huart1, (uint8_t*) uart2_rx_buffer,
 8006fcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fd0:	b29a      	uxth	r2, r3
 8006fd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006fd6:	4981      	ldr	r1, [pc, #516]	; (80071dc <HAL_UART_RxCpltCallback+0x610>)
 8006fd8:	488c      	ldr	r0, [pc, #560]	; (800720c <HAL_UART_RxCpltCallback+0x640>)
 8006fda:	f002 fc68 	bl	80098ae <HAL_UART_Transmit>
 8006fde:	e0e1      	b.n	80071a4 <HAL_UART_RxCpltCallback+0x5d8>
				} else if (strncmp(uart2_rx_buffer, "\r\n+IPD,", 7) == 0) {
 8006fe0:	2207      	movs	r2, #7
 8006fe2:	498b      	ldr	r1, [pc, #556]	; (8007210 <HAL_UART_RxCpltCallback+0x644>)
 8006fe4:	487d      	ldr	r0, [pc, #500]	; (80071dc <HAL_UART_RxCpltCallback+0x610>)
 8006fe6:	f003 fb04 	bl	800a5f2 <strncmp>
 8006fea:	4603      	mov	r3, r0
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d127      	bne.n	8007040 <HAL_UART_RxCpltCallback+0x474>
					HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET); //1
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006ff6:	487b      	ldr	r0, [pc, #492]	; (80071e4 <HAL_UART_RxCpltCallback+0x618>)
 8006ff8:	f001 fb65 	bl	80086c6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); //1
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	2104      	movs	r1, #4
 8007000:	4879      	ldr	r0, [pc, #484]	; (80071e8 <HAL_UART_RxCpltCallback+0x61c>)
 8007002:	f001 fb60 	bl	80086c6 <HAL_GPIO_WritePin>
          HAL_UART_Transmit(&huart1, (uint8_t *)"Start Recieve\n", strlen("Start Recieve\n"), 0xffff);
 8007006:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800700a:	220e      	movs	r2, #14
 800700c:	4981      	ldr	r1, [pc, #516]	; (8007214 <HAL_UART_RxCpltCallback+0x648>)
 800700e:	487f      	ldr	r0, [pc, #508]	; (800720c <HAL_UART_RxCpltCallback+0x640>)
 8007010:	f002 fc4d 	bl	80098ae <HAL_UART_Transmit>
          HAL_UART_Transmit(&huart1, (uint8_t *)uart2_rx_buffer, strlen(uart2_rx_buffer), 0xffff);
 8007014:	4871      	ldr	r0, [pc, #452]	; (80071dc <HAL_UART_RxCpltCallback+0x610>)
 8007016:	f7f9 f911 	bl	800023c <strlen>
 800701a:	4603      	mov	r3, r0
 800701c:	b29a      	uxth	r2, r3
 800701e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007022:	496e      	ldr	r1, [pc, #440]	; (80071dc <HAL_UART_RxCpltCallback+0x610>)
 8007024:	4879      	ldr	r0, [pc, #484]	; (800720c <HAL_UART_RxCpltCallback+0x640>)
 8007026:	f002 fc42 	bl	80098ae <HAL_UART_Transmit>
          HAL_UART_Transmit(&huart1, (uint8_t *)"END Recieve\n", strlen("END Recieve\n"), 0xffff);
 800702a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800702e:	220c      	movs	r2, #12
 8007030:	4979      	ldr	r1, [pc, #484]	; (8007218 <HAL_UART_RxCpltCallback+0x64c>)
 8007032:	4876      	ldr	r0, [pc, #472]	; (800720c <HAL_UART_RxCpltCallback+0x640>)
 8007034:	f002 fc3b 	bl	80098ae <HAL_UART_Transmit>
          Answer(uart2_rx_buffer);
 8007038:	4868      	ldr	r0, [pc, #416]	; (80071dc <HAL_UART_RxCpltCallback+0x610>)
 800703a:	f7ff f983 	bl	8006344 <Answer>
 800703e:	e0b1      	b.n	80071a4 <HAL_UART_RxCpltCallback+0x5d8>
				} else if (strncmp(uart2_rx_buffer, (uint8_t*) "SEND FAIL", 9)
 8007040:	2209      	movs	r2, #9
 8007042:	4976      	ldr	r1, [pc, #472]	; (800721c <HAL_UART_RxCpltCallback+0x650>)
 8007044:	4865      	ldr	r0, [pc, #404]	; (80071dc <HAL_UART_RxCpltCallback+0x610>)
 8007046:	f003 fad4 	bl	800a5f2 <strncmp>
 800704a:	4603      	mov	r3, r0
 800704c:	2b00      	cmp	r3, #0
 800704e:	d10b      	bne.n	8007068 <HAL_UART_RxCpltCallback+0x49c>
					init_var();
 8007050:	f7ff fd58 	bl	8006b04 <init_var>
					HAL_UART_Transmit(&huart1, (uint8_t*) uart2_rx_buffer,
 8007054:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007058:	b29a      	uxth	r2, r3
 800705a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800705e:	495f      	ldr	r1, [pc, #380]	; (80071dc <HAL_UART_RxCpltCallback+0x610>)
 8007060:	486a      	ldr	r0, [pc, #424]	; (800720c <HAL_UART_RxCpltCallback+0x640>)
 8007062:	f002 fc24 	bl	80098ae <HAL_UART_Transmit>
 8007066:	e09d      	b.n	80071a4 <HAL_UART_RxCpltCallback+0x5d8>
				} else if (strncmp(uart2_rx_buffer, (uint8_t*) "0,CLOSE OK", 10)
 8007068:	220a      	movs	r2, #10
 800706a:	496d      	ldr	r1, [pc, #436]	; (8007220 <HAL_UART_RxCpltCallback+0x654>)
 800706c:	485b      	ldr	r0, [pc, #364]	; (80071dc <HAL_UART_RxCpltCallback+0x610>)
 800706e:	f003 fac0 	bl	800a5f2 <strncmp>
 8007072:	4603      	mov	r3, r0
 8007074:	2b00      	cmp	r3, #0
 8007076:	f040 8095 	bne.w	80071a4 <HAL_UART_RxCpltCallback+0x5d8>
					connect_flag = 1;
 800707a:	4b59      	ldr	r3, [pc, #356]	; (80071e0 <HAL_UART_RxCpltCallback+0x614>)
 800707c:	2201      	movs	r2, #1
 800707e:	601a      	str	r2, [r3, #0]
					sending_flag = 0;
 8007080:	4b68      	ldr	r3, [pc, #416]	; (8007224 <HAL_UART_RxCpltCallback+0x658>)
 8007082:	2200      	movs	r2, #0
 8007084:	601a      	str	r2, [r3, #0]
					link_number = -1;
 8007086:	4b59      	ldr	r3, [pc, #356]	; (80071ec <HAL_UART_RxCpltCallback+0x620>)
 8007088:	f04f 32ff 	mov.w	r2, #4294967295
 800708c:	601a      	str	r2, [r3, #0]
					connection_counter = 0;
 800708e:	4b5a      	ldr	r3, [pc, #360]	; (80071f8 <HAL_UART_RxCpltCallback+0x62c>)
 8007090:	2200      	movs	r2, #0
 8007092:	601a      	str	r2, [r3, #0]
					timer_count = 0;
 8007094:	4b64      	ldr	r3, [pc, #400]	; (8007228 <HAL_UART_RxCpltCallback+0x65c>)
 8007096:	2200      	movs	r2, #0
 8007098:	601a      	str	r2, [r3, #0]
					HAL_UART_Transmit(&huart1, (uint8_t*) uart2_rx_buffer,
 800709a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800709e:	b29a      	uxth	r2, r3
 80070a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80070a4:	494d      	ldr	r1, [pc, #308]	; (80071dc <HAL_UART_RxCpltCallback+0x610>)
 80070a6:	4859      	ldr	r0, [pc, #356]	; (800720c <HAL_UART_RxCpltCallback+0x640>)
 80070a8:	f002 fc01 	bl	80098ae <HAL_UART_Transmit>
 80070ac:	e07a      	b.n	80071a4 <HAL_UART_RxCpltCallback+0x5d8>
			} else if (strncmp(uart2_rx_buffer, "0,CONNECT\r\n", 11) == 0) {
 80070ae:	220b      	movs	r2, #11
 80070b0:	495e      	ldr	r1, [pc, #376]	; (800722c <HAL_UART_RxCpltCallback+0x660>)
 80070b2:	484a      	ldr	r0, [pc, #296]	; (80071dc <HAL_UART_RxCpltCallback+0x610>)
 80070b4:	f003 fa9d 	bl	800a5f2 <strncmp>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d11a      	bne.n	80070f4 <HAL_UART_RxCpltCallback+0x528>
				link_number = 0;
 80070be:	4b4b      	ldr	r3, [pc, #300]	; (80071ec <HAL_UART_RxCpltCallback+0x620>)
 80070c0:	2200      	movs	r2, #0
 80070c2:	601a      	str	r2, [r3, #0]
				connect_flag = 2;
 80070c4:	4b46      	ldr	r3, [pc, #280]	; (80071e0 <HAL_UART_RxCpltCallback+0x614>)
 80070c6:	2202      	movs	r2, #2
 80070c8:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET); //0
 80070ca:	2201      	movs	r2, #1
 80070cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80070d0:	4844      	ldr	r0, [pc, #272]	; (80071e4 <HAL_UART_RxCpltCallback+0x618>)
 80070d2:	f001 faf8 	bl	80086c6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); //1
 80070d6:	2200      	movs	r2, #0
 80070d8:	2104      	movs	r1, #4
 80070da:	4843      	ldr	r0, [pc, #268]	; (80071e8 <HAL_UART_RxCpltCallback+0x61c>)
 80070dc:	f001 faf3 	bl	80086c6 <HAL_GPIO_WritePin>
				HAL_UART_Transmit(&huart1, (uint8_t*) "Connection on id 0\r\n",
 80070e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80070e4:	2214      	movs	r2, #20
 80070e6:	4952      	ldr	r1, [pc, #328]	; (8007230 <HAL_UART_RxCpltCallback+0x664>)
 80070e8:	4848      	ldr	r0, [pc, #288]	; (800720c <HAL_UART_RxCpltCallback+0x640>)
 80070ea:	f002 fbe0 	bl	80098ae <HAL_UART_Transmit>
        Question();
 80070ee:	f7ff f887 	bl	8006200 <Question>
 80070f2:	e057      	b.n	80071a4 <HAL_UART_RxCpltCallback+0x5d8>
			} else if (strncmp(uart2_rx_buffer, "0,CONNECT FAIL\r\n", 16) == 0 ||
 80070f4:	2210      	movs	r2, #16
 80070f6:	494f      	ldr	r1, [pc, #316]	; (8007234 <HAL_UART_RxCpltCallback+0x668>)
 80070f8:	4838      	ldr	r0, [pc, #224]	; (80071dc <HAL_UART_RxCpltCallback+0x610>)
 80070fa:	f003 fa7a 	bl	800a5f2 <strncmp>
 80070fe:	4603      	mov	r3, r0
 8007100:	2b00      	cmp	r3, #0
 8007102:	d006      	beq.n	8007112 <HAL_UART_RxCpltCallback+0x546>
			strstr(uart2_rx_buffer, "0,CLOSED\r\n") != NULL) {
 8007104:	494c      	ldr	r1, [pc, #304]	; (8007238 <HAL_UART_RxCpltCallback+0x66c>)
 8007106:	4835      	ldr	r0, [pc, #212]	; (80071dc <HAL_UART_RxCpltCallback+0x610>)
 8007108:	f003 fa85 	bl	800a616 <strstr>
 800710c:	4603      	mov	r3, r0
			} else if (strncmp(uart2_rx_buffer, "0,CONNECT FAIL\r\n", 16) == 0 ||
 800710e:	2b00      	cmp	r3, #0
 8007110:	d009      	beq.n	8007126 <HAL_UART_RxCpltCallback+0x55a>
				init_var();
 8007112:	f7ff fcf7 	bl	8006b04 <init_var>
				HAL_UART_Transmit(&huart1,
 8007116:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800711a:	221a      	movs	r2, #26
 800711c:	4947      	ldr	r1, [pc, #284]	; (800723c <HAL_UART_RxCpltCallback+0x670>)
 800711e:	483b      	ldr	r0, [pc, #236]	; (800720c <HAL_UART_RxCpltCallback+0x640>)
 8007120:	f002 fbc5 	bl	80098ae <HAL_UART_Transmit>
 8007124:	e03e      	b.n	80071a4 <HAL_UART_RxCpltCallback+0x5d8>
			} else if (strncmp(uart2_rx_buffer, "0,CLOSED\r\n", 10) == 0) {
 8007126:	220a      	movs	r2, #10
 8007128:	4943      	ldr	r1, [pc, #268]	; (8007238 <HAL_UART_RxCpltCallback+0x66c>)
 800712a:	482c      	ldr	r0, [pc, #176]	; (80071dc <HAL_UART_RxCpltCallback+0x610>)
 800712c:	f003 fa61 	bl	800a5f2 <strncmp>
 8007130:	4603      	mov	r3, r0
 8007132:	2b00      	cmp	r3, #0
 8007134:	d117      	bne.n	8007166 <HAL_UART_RxCpltCallback+0x59a>
				connect_flag = 1;
 8007136:	4b2a      	ldr	r3, [pc, #168]	; (80071e0 <HAL_UART_RxCpltCallback+0x614>)
 8007138:	2201      	movs	r2, #1
 800713a:	601a      	str	r2, [r3, #0]
				sending_flag = 0;
 800713c:	4b39      	ldr	r3, [pc, #228]	; (8007224 <HAL_UART_RxCpltCallback+0x658>)
 800713e:	2200      	movs	r2, #0
 8007140:	601a      	str	r2, [r3, #0]
				link_number = -1;
 8007142:	4b2a      	ldr	r3, [pc, #168]	; (80071ec <HAL_UART_RxCpltCallback+0x620>)
 8007144:	f04f 32ff 	mov.w	r2, #4294967295
 8007148:	601a      	str	r2, [r3, #0]
				connection_counter = 0;
 800714a:	4b2b      	ldr	r3, [pc, #172]	; (80071f8 <HAL_UART_RxCpltCallback+0x62c>)
 800714c:	2200      	movs	r2, #0
 800714e:	601a      	str	r2, [r3, #0]
				timer_count = 0;
 8007150:	4b35      	ldr	r3, [pc, #212]	; (8007228 <HAL_UART_RxCpltCallback+0x65c>)
 8007152:	2200      	movs	r2, #0
 8007154:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&huart1,
 8007156:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800715a:	221a      	movs	r2, #26
 800715c:	4938      	ldr	r1, [pc, #224]	; (8007240 <HAL_UART_RxCpltCallback+0x674>)
 800715e:	482b      	ldr	r0, [pc, #172]	; (800720c <HAL_UART_RxCpltCallback+0x640>)
 8007160:	f002 fba5 	bl	80098ae <HAL_UART_Transmit>
 8007164:	e01e      	b.n	80071a4 <HAL_UART_RxCpltCallback+0x5d8>
				sprintf(msg, "data length=%d\r\n", data_length);
 8007166:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800716a:	f107 030c 	add.w	r3, r7, #12
 800716e:	4935      	ldr	r1, [pc, #212]	; (8007244 <HAL_UART_RxCpltCallback+0x678>)
 8007170:	4618      	mov	r0, r3
 8007172:	f003 fa11 	bl	800a598 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t *) msg, strlen(msg), 0xffff);
 8007176:	f107 030c 	add.w	r3, r7, #12
 800717a:	4618      	mov	r0, r3
 800717c:	f7f9 f85e 	bl	800023c <strlen>
 8007180:	4603      	mov	r3, r0
 8007182:	b29a      	uxth	r2, r3
 8007184:	f107 010c 	add.w	r1, r7, #12
 8007188:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800718c:	481f      	ldr	r0, [pc, #124]	; (800720c <HAL_UART_RxCpltCallback+0x640>)
 800718e:	f002 fb8e 	bl	80098ae <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart1, (uint8_t*) uart2_rx_buffer,
 8007192:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007196:	b29a      	uxth	r2, r3
 8007198:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800719c:	490f      	ldr	r1, [pc, #60]	; (80071dc <HAL_UART_RxCpltCallback+0x610>)
 800719e:	481b      	ldr	r0, [pc, #108]	; (800720c <HAL_UART_RxCpltCallback+0x640>)
 80071a0:	f002 fb85 	bl	80098ae <HAL_UART_Transmit>
			memset(uart2_rx_buffer, 0, data_length);
 80071a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071a8:	461a      	mov	r2, r3
 80071aa:	2100      	movs	r1, #0
 80071ac:	480b      	ldr	r0, [pc, #44]	; (80071dc <HAL_UART_RxCpltCallback+0x610>)
 80071ae:	f003 f9eb 	bl	800a588 <memset>
			data_length = 0;
 80071b2:	2300      	movs	r3, #0
 80071b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			HAL_UART_Receive_DMA(&huart2, (uint8_t*) uart2_rx_buffer, 2048);
 80071b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80071bc:	4907      	ldr	r1, [pc, #28]	; (80071dc <HAL_UART_RxCpltCallback+0x610>)
 80071be:	4822      	ldr	r0, [pc, #136]	; (8007248 <HAL_UART_RxCpltCallback+0x67c>)
 80071c0:	f002 fc07 	bl	80099d2 <HAL_UART_Receive_DMA>
}
 80071c4:	e003      	b.n	80071ce <HAL_UART_RxCpltCallback+0x602>
    send_msg_uart1("USART UNKNOWN RECIEVED\n", 1);
 80071c6:	2101      	movs	r1, #1
 80071c8:	4820      	ldr	r0, [pc, #128]	; (800724c <HAL_UART_RxCpltCallback+0x680>)
 80071ca:	f7ff fba3 	bl	8006914 <send_msg_uart1>
}
 80071ce:	bf00      	nop
 80071d0:	3728      	adds	r7, #40	; 0x28
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	bf00      	nop
 80071d8:	0800b424 	.word	0x0800b424
 80071dc:	20000970 	.word	0x20000970
 80071e0:	200000d8 	.word	0x200000d8
 80071e4:	40010800 	.word	0x40010800
 80071e8:	40011400 	.word	0x40011400
 80071ec:	20000038 	.word	0x20000038
 80071f0:	0800b434 	.word	0x0800b434
 80071f4:	0800b438 	.word	0x0800b438
 80071f8:	200000e4 	.word	0x200000e4
 80071fc:	0800b444 	.word	0x0800b444
 8007200:	0800b3cc 	.word	0x0800b3cc
 8007204:	0800b458 	.word	0x0800b458
 8007208:	0800b474 	.word	0x0800b474
 800720c:	200012a0 	.word	0x200012a0
 8007210:	0800b488 	.word	0x0800b488
 8007214:	0800b490 	.word	0x0800b490
 8007218:	0800b4a0 	.word	0x0800b4a0
 800721c:	0800b4b0 	.word	0x0800b4b0
 8007220:	0800b4bc 	.word	0x0800b4bc
 8007224:	200000dc 	.word	0x200000dc
 8007228:	200000e0 	.word	0x200000e0
 800722c:	0800b4c8 	.word	0x0800b4c8
 8007230:	0800b4d4 	.word	0x0800b4d4
 8007234:	0800b4ec 	.word	0x0800b4ec
 8007238:	0800b500 	.word	0x0800b500
 800723c:	0800b50c 	.word	0x0800b50c
 8007240:	0800b528 	.word	0x0800b528
 8007244:	0800b544 	.word	0x0800b544
 8007248:	200012e4 	.word	0x200012e4
 800724c:	0800b558 	.word	0x0800b558

08007250 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b086      	sub	sp, #24
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007258:	4a14      	ldr	r2, [pc, #80]	; (80072ac <_sbrk+0x5c>)
 800725a:	4b15      	ldr	r3, [pc, #84]	; (80072b0 <_sbrk+0x60>)
 800725c:	1ad3      	subs	r3, r2, r3
 800725e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007264:	4b13      	ldr	r3, [pc, #76]	; (80072b4 <_sbrk+0x64>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d102      	bne.n	8007272 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800726c:	4b11      	ldr	r3, [pc, #68]	; (80072b4 <_sbrk+0x64>)
 800726e:	4a12      	ldr	r2, [pc, #72]	; (80072b8 <_sbrk+0x68>)
 8007270:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007272:	4b10      	ldr	r3, [pc, #64]	; (80072b4 <_sbrk+0x64>)
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	4413      	add	r3, r2
 800727a:	693a      	ldr	r2, [r7, #16]
 800727c:	429a      	cmp	r2, r3
 800727e:	d207      	bcs.n	8007290 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007280:	f003 f958 	bl	800a534 <__errno>
 8007284:	4603      	mov	r3, r0
 8007286:	220c      	movs	r2, #12
 8007288:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800728a:	f04f 33ff 	mov.w	r3, #4294967295
 800728e:	e009      	b.n	80072a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007290:	4b08      	ldr	r3, [pc, #32]	; (80072b4 <_sbrk+0x64>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007296:	4b07      	ldr	r3, [pc, #28]	; (80072b4 <_sbrk+0x64>)
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	4413      	add	r3, r2
 800729e:	4a05      	ldr	r2, [pc, #20]	; (80072b4 <_sbrk+0x64>)
 80072a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80072a2:	68fb      	ldr	r3, [r7, #12]
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3718      	adds	r7, #24
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}
 80072ac:	2000c000 	.word	0x2000c000
 80072b0:	00000400 	.word	0x00000400
 80072b4:	200000e8 	.word	0x200000e8
 80072b8:	20001340 	.word	0x20001340

080072bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80072bc:	b480      	push	{r7}
 80072be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80072c0:	bf00      	nop
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bc80      	pop	{r7}
 80072c6:	4770      	bx	lr

080072c8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b086      	sub	sp, #24
 80072cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80072ce:	f107 0308 	add.w	r3, r7, #8
 80072d2:	2200      	movs	r2, #0
 80072d4:	601a      	str	r2, [r3, #0]
 80072d6:	605a      	str	r2, [r3, #4]
 80072d8:	609a      	str	r2, [r3, #8]
 80072da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80072dc:	463b      	mov	r3, r7
 80072de:	2200      	movs	r2, #0
 80072e0:	601a      	str	r2, [r3, #0]
 80072e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80072e4:	4b1e      	ldr	r3, [pc, #120]	; (8007360 <MX_TIM2_Init+0x98>)
 80072e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80072ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35999;
 80072ec:	4b1c      	ldr	r3, [pc, #112]	; (8007360 <MX_TIM2_Init+0x98>)
 80072ee:	f648 429f 	movw	r2, #35999	; 0x8c9f
 80072f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80072f4:	4b1a      	ldr	r3, [pc, #104]	; (8007360 <MX_TIM2_Init+0x98>)
 80072f6:	2200      	movs	r2, #0
 80072f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 80072fa:	4b19      	ldr	r3, [pc, #100]	; (8007360 <MX_TIM2_Init+0x98>)
 80072fc:	f242 720f 	movw	r2, #9999	; 0x270f
 8007300:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007302:	4b17      	ldr	r3, [pc, #92]	; (8007360 <MX_TIM2_Init+0x98>)
 8007304:	2200      	movs	r2, #0
 8007306:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007308:	4b15      	ldr	r3, [pc, #84]	; (8007360 <MX_TIM2_Init+0x98>)
 800730a:	2200      	movs	r2, #0
 800730c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800730e:	4814      	ldr	r0, [pc, #80]	; (8007360 <MX_TIM2_Init+0x98>)
 8007310:	f001 fe24 	bl	8008f5c <HAL_TIM_Base_Init>
 8007314:	4603      	mov	r3, r0
 8007316:	2b00      	cmp	r3, #0
 8007318:	d001      	beq.n	800731e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800731a:	f7ff fa25 	bl	8006768 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800731e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007322:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8007324:	f107 0308 	add.w	r3, r7, #8
 8007328:	4619      	mov	r1, r3
 800732a:	480d      	ldr	r0, [pc, #52]	; (8007360 <MX_TIM2_Init+0x98>)
 800732c:	f001 fffc 	bl	8009328 <HAL_TIM_ConfigClockSource>
 8007330:	4603      	mov	r3, r0
 8007332:	2b00      	cmp	r3, #0
 8007334:	d001      	beq.n	800733a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8007336:	f7ff fa17 	bl	8006768 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800733a:	2300      	movs	r3, #0
 800733c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800733e:	2300      	movs	r3, #0
 8007340:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007342:	463b      	mov	r3, r7
 8007344:	4619      	mov	r1, r3
 8007346:	4806      	ldr	r0, [pc, #24]	; (8007360 <MX_TIM2_Init+0x98>)
 8007348:	f002 f9e6 	bl	8009718 <HAL_TIMEx_MasterConfigSynchronization>
 800734c:	4603      	mov	r3, r0
 800734e:	2b00      	cmp	r3, #0
 8007350:	d001      	beq.n	8007356 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8007352:	f7ff fa09 	bl	8006768 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8007356:	bf00      	nop
 8007358:	3718      	adds	r7, #24
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop
 8007360:	200011d0 	.word	0x200011d0

08007364 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b086      	sub	sp, #24
 8007368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800736a:	f107 0308 	add.w	r3, r7, #8
 800736e:	2200      	movs	r2, #0
 8007370:	601a      	str	r2, [r3, #0]
 8007372:	605a      	str	r2, [r3, #4]
 8007374:	609a      	str	r2, [r3, #8]
 8007376:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007378:	463b      	mov	r3, r7
 800737a:	2200      	movs	r2, #0
 800737c:	601a      	str	r2, [r3, #0]
 800737e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8007380:	4b1d      	ldr	r3, [pc, #116]	; (80073f8 <MX_TIM3_Init+0x94>)
 8007382:	4a1e      	ldr	r2, [pc, #120]	; (80073fc <MX_TIM3_Init+0x98>)
 8007384:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 8007386:	4b1c      	ldr	r3, [pc, #112]	; (80073f8 <MX_TIM3_Init+0x94>)
 8007388:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800738c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800738e:	4b1a      	ldr	r3, [pc, #104]	; (80073f8 <MX_TIM3_Init+0x94>)
 8007390:	2200      	movs	r2, #0
 8007392:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8007394:	4b18      	ldr	r3, [pc, #96]	; (80073f8 <MX_TIM3_Init+0x94>)
 8007396:	f242 720f 	movw	r2, #9999	; 0x270f
 800739a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800739c:	4b16      	ldr	r3, [pc, #88]	; (80073f8 <MX_TIM3_Init+0x94>)
 800739e:	2200      	movs	r2, #0
 80073a0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80073a2:	4b15      	ldr	r3, [pc, #84]	; (80073f8 <MX_TIM3_Init+0x94>)
 80073a4:	2200      	movs	r2, #0
 80073a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80073a8:	4813      	ldr	r0, [pc, #76]	; (80073f8 <MX_TIM3_Init+0x94>)
 80073aa:	f001 fdd7 	bl	8008f5c <HAL_TIM_Base_Init>
 80073ae:	4603      	mov	r3, r0
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d001      	beq.n	80073b8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80073b4:	f7ff f9d8 	bl	8006768 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80073b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80073bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80073be:	f107 0308 	add.w	r3, r7, #8
 80073c2:	4619      	mov	r1, r3
 80073c4:	480c      	ldr	r0, [pc, #48]	; (80073f8 <MX_TIM3_Init+0x94>)
 80073c6:	f001 ffaf 	bl	8009328 <HAL_TIM_ConfigClockSource>
 80073ca:	4603      	mov	r3, r0
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d001      	beq.n	80073d4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80073d0:	f7ff f9ca 	bl	8006768 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80073d4:	2300      	movs	r3, #0
 80073d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80073d8:	2300      	movs	r3, #0
 80073da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80073dc:	463b      	mov	r3, r7
 80073de:	4619      	mov	r1, r3
 80073e0:	4805      	ldr	r0, [pc, #20]	; (80073f8 <MX_TIM3_Init+0x94>)
 80073e2:	f002 f999 	bl	8009718 <HAL_TIMEx_MasterConfigSynchronization>
 80073e6:	4603      	mov	r3, r0
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d001      	beq.n	80073f0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80073ec:	f7ff f9bc 	bl	8006768 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80073f0:	bf00      	nop
 80073f2:	3718      	adds	r7, #24
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}
 80073f8:	20001188 	.word	0x20001188
 80073fc:	40000400 	.word	0x40000400

08007400 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b084      	sub	sp, #16
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007410:	d114      	bne.n	800743c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007412:	4b19      	ldr	r3, [pc, #100]	; (8007478 <HAL_TIM_Base_MspInit+0x78>)
 8007414:	69db      	ldr	r3, [r3, #28]
 8007416:	4a18      	ldr	r2, [pc, #96]	; (8007478 <HAL_TIM_Base_MspInit+0x78>)
 8007418:	f043 0301 	orr.w	r3, r3, #1
 800741c:	61d3      	str	r3, [r2, #28]
 800741e:	4b16      	ldr	r3, [pc, #88]	; (8007478 <HAL_TIM_Base_MspInit+0x78>)
 8007420:	69db      	ldr	r3, [r3, #28]
 8007422:	f003 0301 	and.w	r3, r3, #1
 8007426:	60fb      	str	r3, [r7, #12]
 8007428:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 800742a:	2200      	movs	r2, #0
 800742c:	2103      	movs	r1, #3
 800742e:	201c      	movs	r0, #28
 8007430:	f000 fae5 	bl	80079fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8007434:	201c      	movs	r0, #28
 8007436:	f000 fafe 	bl	8007a36 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800743a:	e018      	b.n	800746e <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM3)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a0e      	ldr	r2, [pc, #56]	; (800747c <HAL_TIM_Base_MspInit+0x7c>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d113      	bne.n	800746e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007446:	4b0c      	ldr	r3, [pc, #48]	; (8007478 <HAL_TIM_Base_MspInit+0x78>)
 8007448:	69db      	ldr	r3, [r3, #28]
 800744a:	4a0b      	ldr	r2, [pc, #44]	; (8007478 <HAL_TIM_Base_MspInit+0x78>)
 800744c:	f043 0302 	orr.w	r3, r3, #2
 8007450:	61d3      	str	r3, [r2, #28]
 8007452:	4b09      	ldr	r3, [pc, #36]	; (8007478 <HAL_TIM_Base_MspInit+0x78>)
 8007454:	69db      	ldr	r3, [r3, #28]
 8007456:	f003 0302 	and.w	r3, r3, #2
 800745a:	60bb      	str	r3, [r7, #8]
 800745c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 800745e:	2200      	movs	r2, #0
 8007460:	2103      	movs	r1, #3
 8007462:	201d      	movs	r0, #29
 8007464:	f000 facb 	bl	80079fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8007468:	201d      	movs	r0, #29
 800746a:	f000 fae4 	bl	8007a36 <HAL_NVIC_EnableIRQ>
}
 800746e:	bf00      	nop
 8007470:	3710      	adds	r7, #16
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}
 8007476:	bf00      	nop
 8007478:	40021000 	.word	0x40021000
 800747c:	40000400 	.word	0x40000400

08007480 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007484:	4b11      	ldr	r3, [pc, #68]	; (80074cc <MX_USART1_UART_Init+0x4c>)
 8007486:	4a12      	ldr	r2, [pc, #72]	; (80074d0 <MX_USART1_UART_Init+0x50>)
 8007488:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800748a:	4b10      	ldr	r3, [pc, #64]	; (80074cc <MX_USART1_UART_Init+0x4c>)
 800748c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007490:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007492:	4b0e      	ldr	r3, [pc, #56]	; (80074cc <MX_USART1_UART_Init+0x4c>)
 8007494:	2200      	movs	r2, #0
 8007496:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007498:	4b0c      	ldr	r3, [pc, #48]	; (80074cc <MX_USART1_UART_Init+0x4c>)
 800749a:	2200      	movs	r2, #0
 800749c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800749e:	4b0b      	ldr	r3, [pc, #44]	; (80074cc <MX_USART1_UART_Init+0x4c>)
 80074a0:	2200      	movs	r2, #0
 80074a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80074a4:	4b09      	ldr	r3, [pc, #36]	; (80074cc <MX_USART1_UART_Init+0x4c>)
 80074a6:	220c      	movs	r2, #12
 80074a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80074aa:	4b08      	ldr	r3, [pc, #32]	; (80074cc <MX_USART1_UART_Init+0x4c>)
 80074ac:	2200      	movs	r2, #0
 80074ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80074b0:	4b06      	ldr	r3, [pc, #24]	; (80074cc <MX_USART1_UART_Init+0x4c>)
 80074b2:	2200      	movs	r2, #0
 80074b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80074b6:	4805      	ldr	r0, [pc, #20]	; (80074cc <MX_USART1_UART_Init+0x4c>)
 80074b8:	f002 f9ac 	bl	8009814 <HAL_UART_Init>
 80074bc:	4603      	mov	r3, r0
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d001      	beq.n	80074c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80074c2:	f7ff f951 	bl	8006768 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80074c6:	bf00      	nop
 80074c8:	bd80      	pop	{r7, pc}
 80074ca:	bf00      	nop
 80074cc:	200012a0 	.word	0x200012a0
 80074d0:	40013800 	.word	0x40013800

080074d4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80074d8:	4b11      	ldr	r3, [pc, #68]	; (8007520 <MX_USART2_UART_Init+0x4c>)
 80074da:	4a12      	ldr	r2, [pc, #72]	; (8007524 <MX_USART2_UART_Init+0x50>)
 80074dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80074de:	4b10      	ldr	r3, [pc, #64]	; (8007520 <MX_USART2_UART_Init+0x4c>)
 80074e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80074e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80074e6:	4b0e      	ldr	r3, [pc, #56]	; (8007520 <MX_USART2_UART_Init+0x4c>)
 80074e8:	2200      	movs	r2, #0
 80074ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80074ec:	4b0c      	ldr	r3, [pc, #48]	; (8007520 <MX_USART2_UART_Init+0x4c>)
 80074ee:	2200      	movs	r2, #0
 80074f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80074f2:	4b0b      	ldr	r3, [pc, #44]	; (8007520 <MX_USART2_UART_Init+0x4c>)
 80074f4:	2200      	movs	r2, #0
 80074f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80074f8:	4b09      	ldr	r3, [pc, #36]	; (8007520 <MX_USART2_UART_Init+0x4c>)
 80074fa:	220c      	movs	r2, #12
 80074fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80074fe:	4b08      	ldr	r3, [pc, #32]	; (8007520 <MX_USART2_UART_Init+0x4c>)
 8007500:	2200      	movs	r2, #0
 8007502:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007504:	4b06      	ldr	r3, [pc, #24]	; (8007520 <MX_USART2_UART_Init+0x4c>)
 8007506:	2200      	movs	r2, #0
 8007508:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800750a:	4805      	ldr	r0, [pc, #20]	; (8007520 <MX_USART2_UART_Init+0x4c>)
 800750c:	f002 f982 	bl	8009814 <HAL_UART_Init>
 8007510:	4603      	mov	r3, r0
 8007512:	2b00      	cmp	r3, #0
 8007514:	d001      	beq.n	800751a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8007516:	f7ff f927 	bl	8006768 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800751a:	bf00      	nop
 800751c:	bd80      	pop	{r7, pc}
 800751e:	bf00      	nop
 8007520:	200012e4 	.word	0x200012e4
 8007524:	40004400 	.word	0x40004400

08007528 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b08a      	sub	sp, #40	; 0x28
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007530:	f107 0318 	add.w	r3, r7, #24
 8007534:	2200      	movs	r2, #0
 8007536:	601a      	str	r2, [r3, #0]
 8007538:	605a      	str	r2, [r3, #4]
 800753a:	609a      	str	r2, [r3, #8]
 800753c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a65      	ldr	r2, [pc, #404]	; (80076d8 <HAL_UART_MspInit+0x1b0>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d160      	bne.n	800760a <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007548:	4b64      	ldr	r3, [pc, #400]	; (80076dc <HAL_UART_MspInit+0x1b4>)
 800754a:	699b      	ldr	r3, [r3, #24]
 800754c:	4a63      	ldr	r2, [pc, #396]	; (80076dc <HAL_UART_MspInit+0x1b4>)
 800754e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007552:	6193      	str	r3, [r2, #24]
 8007554:	4b61      	ldr	r3, [pc, #388]	; (80076dc <HAL_UART_MspInit+0x1b4>)
 8007556:	699b      	ldr	r3, [r3, #24]
 8007558:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800755c:	617b      	str	r3, [r7, #20]
 800755e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007560:	4b5e      	ldr	r3, [pc, #376]	; (80076dc <HAL_UART_MspInit+0x1b4>)
 8007562:	699b      	ldr	r3, [r3, #24]
 8007564:	4a5d      	ldr	r2, [pc, #372]	; (80076dc <HAL_UART_MspInit+0x1b4>)
 8007566:	f043 0304 	orr.w	r3, r3, #4
 800756a:	6193      	str	r3, [r2, #24]
 800756c:	4b5b      	ldr	r3, [pc, #364]	; (80076dc <HAL_UART_MspInit+0x1b4>)
 800756e:	699b      	ldr	r3, [r3, #24]
 8007570:	f003 0304 	and.w	r3, r3, #4
 8007574:	613b      	str	r3, [r7, #16]
 8007576:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007578:	f44f 7300 	mov.w	r3, #512	; 0x200
 800757c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800757e:	2302      	movs	r3, #2
 8007580:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007582:	2303      	movs	r3, #3
 8007584:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007586:	f107 0318 	add.w	r3, r7, #24
 800758a:	4619      	mov	r1, r3
 800758c:	4854      	ldr	r0, [pc, #336]	; (80076e0 <HAL_UART_MspInit+0x1b8>)
 800758e:	f000 feef 	bl	8008370 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007592:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007596:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007598:	2300      	movs	r3, #0
 800759a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800759c:	2300      	movs	r3, #0
 800759e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80075a0:	f107 0318 	add.w	r3, r7, #24
 80075a4:	4619      	mov	r1, r3
 80075a6:	484e      	ldr	r0, [pc, #312]	; (80076e0 <HAL_UART_MspInit+0x1b8>)
 80075a8:	f000 fee2 	bl	8008370 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80075ac:	4b4d      	ldr	r3, [pc, #308]	; (80076e4 <HAL_UART_MspInit+0x1bc>)
 80075ae:	4a4e      	ldr	r2, [pc, #312]	; (80076e8 <HAL_UART_MspInit+0x1c0>)
 80075b0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80075b2:	4b4c      	ldr	r3, [pc, #304]	; (80076e4 <HAL_UART_MspInit+0x1bc>)
 80075b4:	2200      	movs	r2, #0
 80075b6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80075b8:	4b4a      	ldr	r3, [pc, #296]	; (80076e4 <HAL_UART_MspInit+0x1bc>)
 80075ba:	2200      	movs	r2, #0
 80075bc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80075be:	4b49      	ldr	r3, [pc, #292]	; (80076e4 <HAL_UART_MspInit+0x1bc>)
 80075c0:	2280      	movs	r2, #128	; 0x80
 80075c2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80075c4:	4b47      	ldr	r3, [pc, #284]	; (80076e4 <HAL_UART_MspInit+0x1bc>)
 80075c6:	2200      	movs	r2, #0
 80075c8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80075ca:	4b46      	ldr	r3, [pc, #280]	; (80076e4 <HAL_UART_MspInit+0x1bc>)
 80075cc:	2200      	movs	r2, #0
 80075ce:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80075d0:	4b44      	ldr	r3, [pc, #272]	; (80076e4 <HAL_UART_MspInit+0x1bc>)
 80075d2:	2220      	movs	r2, #32
 80075d4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80075d6:	4b43      	ldr	r3, [pc, #268]	; (80076e4 <HAL_UART_MspInit+0x1bc>)
 80075d8:	2200      	movs	r2, #0
 80075da:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80075dc:	4841      	ldr	r0, [pc, #260]	; (80076e4 <HAL_UART_MspInit+0x1bc>)
 80075de:	f000 fa45 	bl	8007a6c <HAL_DMA_Init>
 80075e2:	4603      	mov	r3, r0
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d001      	beq.n	80075ec <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80075e8:	f7ff f8be 	bl	8006768 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	4a3d      	ldr	r2, [pc, #244]	; (80076e4 <HAL_UART_MspInit+0x1bc>)
 80075f0:	639a      	str	r2, [r3, #56]	; 0x38
 80075f2:	4a3c      	ldr	r2, [pc, #240]	; (80076e4 <HAL_UART_MspInit+0x1bc>)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80075f8:	2200      	movs	r2, #0
 80075fa:	2101      	movs	r1, #1
 80075fc:	2025      	movs	r0, #37	; 0x25
 80075fe:	f000 f9fe 	bl	80079fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007602:	2025      	movs	r0, #37	; 0x25
 8007604:	f000 fa17 	bl	8007a36 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8007608:	e062      	b.n	80076d0 <HAL_UART_MspInit+0x1a8>
  else if(uartHandle->Instance==USART2)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a37      	ldr	r2, [pc, #220]	; (80076ec <HAL_UART_MspInit+0x1c4>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d15d      	bne.n	80076d0 <HAL_UART_MspInit+0x1a8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8007614:	4b31      	ldr	r3, [pc, #196]	; (80076dc <HAL_UART_MspInit+0x1b4>)
 8007616:	69db      	ldr	r3, [r3, #28]
 8007618:	4a30      	ldr	r2, [pc, #192]	; (80076dc <HAL_UART_MspInit+0x1b4>)
 800761a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800761e:	61d3      	str	r3, [r2, #28]
 8007620:	4b2e      	ldr	r3, [pc, #184]	; (80076dc <HAL_UART_MspInit+0x1b4>)
 8007622:	69db      	ldr	r3, [r3, #28]
 8007624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007628:	60fb      	str	r3, [r7, #12]
 800762a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800762c:	4b2b      	ldr	r3, [pc, #172]	; (80076dc <HAL_UART_MspInit+0x1b4>)
 800762e:	699b      	ldr	r3, [r3, #24]
 8007630:	4a2a      	ldr	r2, [pc, #168]	; (80076dc <HAL_UART_MspInit+0x1b4>)
 8007632:	f043 0304 	orr.w	r3, r3, #4
 8007636:	6193      	str	r3, [r2, #24]
 8007638:	4b28      	ldr	r3, [pc, #160]	; (80076dc <HAL_UART_MspInit+0x1b4>)
 800763a:	699b      	ldr	r3, [r3, #24]
 800763c:	f003 0304 	and.w	r3, r3, #4
 8007640:	60bb      	str	r3, [r7, #8]
 8007642:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007644:	2304      	movs	r3, #4
 8007646:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007648:	2302      	movs	r3, #2
 800764a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800764c:	2303      	movs	r3, #3
 800764e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007650:	f107 0318 	add.w	r3, r7, #24
 8007654:	4619      	mov	r1, r3
 8007656:	4822      	ldr	r0, [pc, #136]	; (80076e0 <HAL_UART_MspInit+0x1b8>)
 8007658:	f000 fe8a 	bl	8008370 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800765c:	2308      	movs	r3, #8
 800765e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007660:	2300      	movs	r3, #0
 8007662:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007664:	2300      	movs	r3, #0
 8007666:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007668:	f107 0318 	add.w	r3, r7, #24
 800766c:	4619      	mov	r1, r3
 800766e:	481c      	ldr	r0, [pc, #112]	; (80076e0 <HAL_UART_MspInit+0x1b8>)
 8007670:	f000 fe7e 	bl	8008370 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8007674:	4b1e      	ldr	r3, [pc, #120]	; (80076f0 <HAL_UART_MspInit+0x1c8>)
 8007676:	4a1f      	ldr	r2, [pc, #124]	; (80076f4 <HAL_UART_MspInit+0x1cc>)
 8007678:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800767a:	4b1d      	ldr	r3, [pc, #116]	; (80076f0 <HAL_UART_MspInit+0x1c8>)
 800767c:	2200      	movs	r2, #0
 800767e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007680:	4b1b      	ldr	r3, [pc, #108]	; (80076f0 <HAL_UART_MspInit+0x1c8>)
 8007682:	2200      	movs	r2, #0
 8007684:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007686:	4b1a      	ldr	r3, [pc, #104]	; (80076f0 <HAL_UART_MspInit+0x1c8>)
 8007688:	2280      	movs	r2, #128	; 0x80
 800768a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800768c:	4b18      	ldr	r3, [pc, #96]	; (80076f0 <HAL_UART_MspInit+0x1c8>)
 800768e:	2200      	movs	r2, #0
 8007690:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007692:	4b17      	ldr	r3, [pc, #92]	; (80076f0 <HAL_UART_MspInit+0x1c8>)
 8007694:	2200      	movs	r2, #0
 8007696:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8007698:	4b15      	ldr	r3, [pc, #84]	; (80076f0 <HAL_UART_MspInit+0x1c8>)
 800769a:	2220      	movs	r2, #32
 800769c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800769e:	4b14      	ldr	r3, [pc, #80]	; (80076f0 <HAL_UART_MspInit+0x1c8>)
 80076a0:	2200      	movs	r2, #0
 80076a2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80076a4:	4812      	ldr	r0, [pc, #72]	; (80076f0 <HAL_UART_MspInit+0x1c8>)
 80076a6:	f000 f9e1 	bl	8007a6c <HAL_DMA_Init>
 80076aa:	4603      	mov	r3, r0
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d001      	beq.n	80076b4 <HAL_UART_MspInit+0x18c>
      Error_Handler();
 80076b0:	f7ff f85a 	bl	8006768 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	4a0e      	ldr	r2, [pc, #56]	; (80076f0 <HAL_UART_MspInit+0x1c8>)
 80076b8:	639a      	str	r2, [r3, #56]	; 0x38
 80076ba:	4a0d      	ldr	r2, [pc, #52]	; (80076f0 <HAL_UART_MspInit+0x1c8>)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 80076c0:	2200      	movs	r2, #0
 80076c2:	2101      	movs	r1, #1
 80076c4:	2026      	movs	r0, #38	; 0x26
 80076c6:	f000 f99a 	bl	80079fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80076ca:	2026      	movs	r0, #38	; 0x26
 80076cc:	f000 f9b3 	bl	8007a36 <HAL_NVIC_EnableIRQ>
}
 80076d0:	bf00      	nop
 80076d2:	3728      	adds	r7, #40	; 0x28
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	40013800 	.word	0x40013800
 80076dc:	40021000 	.word	0x40021000
 80076e0:	40010800 	.word	0x40010800
 80076e4:	2000125c 	.word	0x2000125c
 80076e8:	40020058 	.word	0x40020058
 80076ec:	40004400 	.word	0x40004400
 80076f0:	20001218 	.word	0x20001218
 80076f4:	4002006c 	.word	0x4002006c

080076f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80076f8:	480c      	ldr	r0, [pc, #48]	; (800772c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80076fa:	490d      	ldr	r1, [pc, #52]	; (8007730 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80076fc:	4a0d      	ldr	r2, [pc, #52]	; (8007734 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80076fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007700:	e002      	b.n	8007708 <LoopCopyDataInit>

08007702 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007702:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007704:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007706:	3304      	adds	r3, #4

08007708 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007708:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800770a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800770c:	d3f9      	bcc.n	8007702 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800770e:	4a0a      	ldr	r2, [pc, #40]	; (8007738 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007710:	4c0a      	ldr	r4, [pc, #40]	; (800773c <LoopFillZerobss+0x22>)
  movs r3, #0
 8007712:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007714:	e001      	b.n	800771a <LoopFillZerobss>

08007716 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007716:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007718:	3204      	adds	r2, #4

0800771a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800771a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800771c:	d3fb      	bcc.n	8007716 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800771e:	f7ff fdcd 	bl	80072bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007722:	f002 ff0d 	bl	800a540 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8007726:	f7fe fccf 	bl	80060c8 <main>
  bx lr
 800772a:	4770      	bx	lr
  ldr r0, =_sdata
 800772c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007730:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8007734:	0800ce94 	.word	0x0800ce94
  ldr r2, =_sbss
 8007738:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 800773c:	2000133c 	.word	0x2000133c

08007740 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007740:	e7fe      	b.n	8007740 <ADC1_2_IRQHandler>
	...

08007744 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007748:	4b08      	ldr	r3, [pc, #32]	; (800776c <HAL_Init+0x28>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a07      	ldr	r2, [pc, #28]	; (800776c <HAL_Init+0x28>)
 800774e:	f043 0310 	orr.w	r3, r3, #16
 8007752:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007754:	2003      	movs	r0, #3
 8007756:	f000 f947 	bl	80079e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800775a:	2001      	movs	r0, #1
 800775c:	f000 f808 	bl	8007770 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007760:	f7ff f808 	bl	8006774 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007764:	2300      	movs	r3, #0
}
 8007766:	4618      	mov	r0, r3
 8007768:	bd80      	pop	{r7, pc}
 800776a:	bf00      	nop
 800776c:	40022000 	.word	0x40022000

08007770 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b082      	sub	sp, #8
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007778:	4b12      	ldr	r3, [pc, #72]	; (80077c4 <HAL_InitTick+0x54>)
 800777a:	681a      	ldr	r2, [r3, #0]
 800777c:	4b12      	ldr	r3, [pc, #72]	; (80077c8 <HAL_InitTick+0x58>)
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	4619      	mov	r1, r3
 8007782:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007786:	fbb3 f3f1 	udiv	r3, r3, r1
 800778a:	fbb2 f3f3 	udiv	r3, r2, r3
 800778e:	4618      	mov	r0, r3
 8007790:	f000 f95f 	bl	8007a52 <HAL_SYSTICK_Config>
 8007794:	4603      	mov	r3, r0
 8007796:	2b00      	cmp	r3, #0
 8007798:	d001      	beq.n	800779e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800779a:	2301      	movs	r3, #1
 800779c:	e00e      	b.n	80077bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2b0f      	cmp	r3, #15
 80077a2:	d80a      	bhi.n	80077ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80077a4:	2200      	movs	r2, #0
 80077a6:	6879      	ldr	r1, [r7, #4]
 80077a8:	f04f 30ff 	mov.w	r0, #4294967295
 80077ac:	f000 f927 	bl	80079fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80077b0:	4a06      	ldr	r2, [pc, #24]	; (80077cc <HAL_InitTick+0x5c>)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80077b6:	2300      	movs	r3, #0
 80077b8:	e000      	b.n	80077bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80077ba:	2301      	movs	r3, #1
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3708      	adds	r7, #8
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}
 80077c4:	2000003c 	.word	0x2000003c
 80077c8:	20000044 	.word	0x20000044
 80077cc:	20000040 	.word	0x20000040

080077d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80077d0:	b480      	push	{r7}
 80077d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80077d4:	4b05      	ldr	r3, [pc, #20]	; (80077ec <HAL_IncTick+0x1c>)
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	461a      	mov	r2, r3
 80077da:	4b05      	ldr	r3, [pc, #20]	; (80077f0 <HAL_IncTick+0x20>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4413      	add	r3, r2
 80077e0:	4a03      	ldr	r2, [pc, #12]	; (80077f0 <HAL_IncTick+0x20>)
 80077e2:	6013      	str	r3, [r2, #0]
}
 80077e4:	bf00      	nop
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bc80      	pop	{r7}
 80077ea:	4770      	bx	lr
 80077ec:	20000044 	.word	0x20000044
 80077f0:	20001328 	.word	0x20001328

080077f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80077f4:	b480      	push	{r7}
 80077f6:	af00      	add	r7, sp, #0
  return uwTick;
 80077f8:	4b02      	ldr	r3, [pc, #8]	; (8007804 <HAL_GetTick+0x10>)
 80077fa:	681b      	ldr	r3, [r3, #0]
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	46bd      	mov	sp, r7
 8007800:	bc80      	pop	{r7}
 8007802:	4770      	bx	lr
 8007804:	20001328 	.word	0x20001328

08007808 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b084      	sub	sp, #16
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007810:	f7ff fff0 	bl	80077f4 <HAL_GetTick>
 8007814:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007820:	d005      	beq.n	800782e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007822:	4b0a      	ldr	r3, [pc, #40]	; (800784c <HAL_Delay+0x44>)
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	461a      	mov	r2, r3
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	4413      	add	r3, r2
 800782c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800782e:	bf00      	nop
 8007830:	f7ff ffe0 	bl	80077f4 <HAL_GetTick>
 8007834:	4602      	mov	r2, r0
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	1ad3      	subs	r3, r2, r3
 800783a:	68fa      	ldr	r2, [r7, #12]
 800783c:	429a      	cmp	r2, r3
 800783e:	d8f7      	bhi.n	8007830 <HAL_Delay+0x28>
  {
  }
}
 8007840:	bf00      	nop
 8007842:	bf00      	nop
 8007844:	3710      	adds	r7, #16
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
 800784a:	bf00      	nop
 800784c:	20000044 	.word	0x20000044

08007850 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007850:	b480      	push	{r7}
 8007852:	b085      	sub	sp, #20
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f003 0307 	and.w	r3, r3, #7
 800785e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007860:	4b0c      	ldr	r3, [pc, #48]	; (8007894 <__NVIC_SetPriorityGrouping+0x44>)
 8007862:	68db      	ldr	r3, [r3, #12]
 8007864:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007866:	68ba      	ldr	r2, [r7, #8]
 8007868:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800786c:	4013      	ands	r3, r2
 800786e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007878:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800787c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007880:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007882:	4a04      	ldr	r2, [pc, #16]	; (8007894 <__NVIC_SetPriorityGrouping+0x44>)
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	60d3      	str	r3, [r2, #12]
}
 8007888:	bf00      	nop
 800788a:	3714      	adds	r7, #20
 800788c:	46bd      	mov	sp, r7
 800788e:	bc80      	pop	{r7}
 8007890:	4770      	bx	lr
 8007892:	bf00      	nop
 8007894:	e000ed00 	.word	0xe000ed00

08007898 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007898:	b480      	push	{r7}
 800789a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800789c:	4b04      	ldr	r3, [pc, #16]	; (80078b0 <__NVIC_GetPriorityGrouping+0x18>)
 800789e:	68db      	ldr	r3, [r3, #12]
 80078a0:	0a1b      	lsrs	r3, r3, #8
 80078a2:	f003 0307 	and.w	r3, r3, #7
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bc80      	pop	{r7}
 80078ac:	4770      	bx	lr
 80078ae:	bf00      	nop
 80078b0:	e000ed00 	.word	0xe000ed00

080078b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b083      	sub	sp, #12
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	4603      	mov	r3, r0
 80078bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80078be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	db0b      	blt.n	80078de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80078c6:	79fb      	ldrb	r3, [r7, #7]
 80078c8:	f003 021f 	and.w	r2, r3, #31
 80078cc:	4906      	ldr	r1, [pc, #24]	; (80078e8 <__NVIC_EnableIRQ+0x34>)
 80078ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078d2:	095b      	lsrs	r3, r3, #5
 80078d4:	2001      	movs	r0, #1
 80078d6:	fa00 f202 	lsl.w	r2, r0, r2
 80078da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80078de:	bf00      	nop
 80078e0:	370c      	adds	r7, #12
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bc80      	pop	{r7}
 80078e6:	4770      	bx	lr
 80078e8:	e000e100 	.word	0xe000e100

080078ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b083      	sub	sp, #12
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	4603      	mov	r3, r0
 80078f4:	6039      	str	r1, [r7, #0]
 80078f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80078f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	db0a      	blt.n	8007916 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	b2da      	uxtb	r2, r3
 8007904:	490c      	ldr	r1, [pc, #48]	; (8007938 <__NVIC_SetPriority+0x4c>)
 8007906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800790a:	0112      	lsls	r2, r2, #4
 800790c:	b2d2      	uxtb	r2, r2
 800790e:	440b      	add	r3, r1
 8007910:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007914:	e00a      	b.n	800792c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	b2da      	uxtb	r2, r3
 800791a:	4908      	ldr	r1, [pc, #32]	; (800793c <__NVIC_SetPriority+0x50>)
 800791c:	79fb      	ldrb	r3, [r7, #7]
 800791e:	f003 030f 	and.w	r3, r3, #15
 8007922:	3b04      	subs	r3, #4
 8007924:	0112      	lsls	r2, r2, #4
 8007926:	b2d2      	uxtb	r2, r2
 8007928:	440b      	add	r3, r1
 800792a:	761a      	strb	r2, [r3, #24]
}
 800792c:	bf00      	nop
 800792e:	370c      	adds	r7, #12
 8007930:	46bd      	mov	sp, r7
 8007932:	bc80      	pop	{r7}
 8007934:	4770      	bx	lr
 8007936:	bf00      	nop
 8007938:	e000e100 	.word	0xe000e100
 800793c:	e000ed00 	.word	0xe000ed00

08007940 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007940:	b480      	push	{r7}
 8007942:	b089      	sub	sp, #36	; 0x24
 8007944:	af00      	add	r7, sp, #0
 8007946:	60f8      	str	r0, [r7, #12]
 8007948:	60b9      	str	r1, [r7, #8]
 800794a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f003 0307 	and.w	r3, r3, #7
 8007952:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007954:	69fb      	ldr	r3, [r7, #28]
 8007956:	f1c3 0307 	rsb	r3, r3, #7
 800795a:	2b04      	cmp	r3, #4
 800795c:	bf28      	it	cs
 800795e:	2304      	movcs	r3, #4
 8007960:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007962:	69fb      	ldr	r3, [r7, #28]
 8007964:	3304      	adds	r3, #4
 8007966:	2b06      	cmp	r3, #6
 8007968:	d902      	bls.n	8007970 <NVIC_EncodePriority+0x30>
 800796a:	69fb      	ldr	r3, [r7, #28]
 800796c:	3b03      	subs	r3, #3
 800796e:	e000      	b.n	8007972 <NVIC_EncodePriority+0x32>
 8007970:	2300      	movs	r3, #0
 8007972:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007974:	f04f 32ff 	mov.w	r2, #4294967295
 8007978:	69bb      	ldr	r3, [r7, #24]
 800797a:	fa02 f303 	lsl.w	r3, r2, r3
 800797e:	43da      	mvns	r2, r3
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	401a      	ands	r2, r3
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007988:	f04f 31ff 	mov.w	r1, #4294967295
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	fa01 f303 	lsl.w	r3, r1, r3
 8007992:	43d9      	mvns	r1, r3
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007998:	4313      	orrs	r3, r2
         );
}
 800799a:	4618      	mov	r0, r3
 800799c:	3724      	adds	r7, #36	; 0x24
 800799e:	46bd      	mov	sp, r7
 80079a0:	bc80      	pop	{r7}
 80079a2:	4770      	bx	lr

080079a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b082      	sub	sp, #8
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	3b01      	subs	r3, #1
 80079b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80079b4:	d301      	bcc.n	80079ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80079b6:	2301      	movs	r3, #1
 80079b8:	e00f      	b.n	80079da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80079ba:	4a0a      	ldr	r2, [pc, #40]	; (80079e4 <SysTick_Config+0x40>)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	3b01      	subs	r3, #1
 80079c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80079c2:	210f      	movs	r1, #15
 80079c4:	f04f 30ff 	mov.w	r0, #4294967295
 80079c8:	f7ff ff90 	bl	80078ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80079cc:	4b05      	ldr	r3, [pc, #20]	; (80079e4 <SysTick_Config+0x40>)
 80079ce:	2200      	movs	r2, #0
 80079d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80079d2:	4b04      	ldr	r3, [pc, #16]	; (80079e4 <SysTick_Config+0x40>)
 80079d4:	2207      	movs	r2, #7
 80079d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80079d8:	2300      	movs	r3, #0
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3708      	adds	r7, #8
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}
 80079e2:	bf00      	nop
 80079e4:	e000e010 	.word	0xe000e010

080079e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b082      	sub	sp, #8
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f7ff ff2d 	bl	8007850 <__NVIC_SetPriorityGrouping>
}
 80079f6:	bf00      	nop
 80079f8:	3708      	adds	r7, #8
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}

080079fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80079fe:	b580      	push	{r7, lr}
 8007a00:	b086      	sub	sp, #24
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	4603      	mov	r3, r0
 8007a06:	60b9      	str	r1, [r7, #8]
 8007a08:	607a      	str	r2, [r7, #4]
 8007a0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007a10:	f7ff ff42 	bl	8007898 <__NVIC_GetPriorityGrouping>
 8007a14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007a16:	687a      	ldr	r2, [r7, #4]
 8007a18:	68b9      	ldr	r1, [r7, #8]
 8007a1a:	6978      	ldr	r0, [r7, #20]
 8007a1c:	f7ff ff90 	bl	8007940 <NVIC_EncodePriority>
 8007a20:	4602      	mov	r2, r0
 8007a22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a26:	4611      	mov	r1, r2
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f7ff ff5f 	bl	80078ec <__NVIC_SetPriority>
}
 8007a2e:	bf00      	nop
 8007a30:	3718      	adds	r7, #24
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}

08007a36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007a36:	b580      	push	{r7, lr}
 8007a38:	b082      	sub	sp, #8
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a44:	4618      	mov	r0, r3
 8007a46:	f7ff ff35 	bl	80078b4 <__NVIC_EnableIRQ>
}
 8007a4a:	bf00      	nop
 8007a4c:	3708      	adds	r7, #8
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}

08007a52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007a52:	b580      	push	{r7, lr}
 8007a54:	b082      	sub	sp, #8
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f7ff ffa2 	bl	80079a4 <SysTick_Config>
 8007a60:	4603      	mov	r3, r0
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3708      	adds	r7, #8
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
	...

08007a6c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b085      	sub	sp, #20
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007a74:	2300      	movs	r3, #0
 8007a76:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d101      	bne.n	8007a82 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	e059      	b.n	8007b36 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	461a      	mov	r2, r3
 8007a88:	4b2d      	ldr	r3, [pc, #180]	; (8007b40 <HAL_DMA_Init+0xd4>)
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	d80f      	bhi.n	8007aae <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	461a      	mov	r2, r3
 8007a94:	4b2b      	ldr	r3, [pc, #172]	; (8007b44 <HAL_DMA_Init+0xd8>)
 8007a96:	4413      	add	r3, r2
 8007a98:	4a2b      	ldr	r2, [pc, #172]	; (8007b48 <HAL_DMA_Init+0xdc>)
 8007a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8007a9e:	091b      	lsrs	r3, r3, #4
 8007aa0:	009a      	lsls	r2, r3, #2
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	4a28      	ldr	r2, [pc, #160]	; (8007b4c <HAL_DMA_Init+0xe0>)
 8007aaa:	63da      	str	r2, [r3, #60]	; 0x3c
 8007aac:	e00e      	b.n	8007acc <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	4b26      	ldr	r3, [pc, #152]	; (8007b50 <HAL_DMA_Init+0xe4>)
 8007ab6:	4413      	add	r3, r2
 8007ab8:	4a23      	ldr	r2, [pc, #140]	; (8007b48 <HAL_DMA_Init+0xdc>)
 8007aba:	fba2 2303 	umull	r2, r3, r2, r3
 8007abe:	091b      	lsrs	r3, r3, #4
 8007ac0:	009a      	lsls	r2, r3, #2
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	4a22      	ldr	r2, [pc, #136]	; (8007b54 <HAL_DMA_Init+0xe8>)
 8007aca:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2202      	movs	r2, #2
 8007ad0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8007ae2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8007ae6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8007af0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	68db      	ldr	r3, [r3, #12]
 8007af6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007afc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	695b      	ldr	r3, [r3, #20]
 8007b02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	69db      	ldr	r3, [r3, #28]
 8007b0e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007b10:	68fa      	ldr	r2, [r7, #12]
 8007b12:	4313      	orrs	r3, r2
 8007b14:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	68fa      	ldr	r2, [r7, #12]
 8007b1c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2200      	movs	r2, #0
 8007b22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2201      	movs	r2, #1
 8007b28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007b34:	2300      	movs	r3, #0
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3714      	adds	r7, #20
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bc80      	pop	{r7}
 8007b3e:	4770      	bx	lr
 8007b40:	40020407 	.word	0x40020407
 8007b44:	bffdfff8 	.word	0xbffdfff8
 8007b48:	cccccccd 	.word	0xcccccccd
 8007b4c:	40020000 	.word	0x40020000
 8007b50:	bffdfbf8 	.word	0xbffdfbf8
 8007b54:	40020400 	.word	0x40020400

08007b58 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b086      	sub	sp, #24
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	60f8      	str	r0, [r7, #12]
 8007b60:	60b9      	str	r1, [r7, #8]
 8007b62:	607a      	str	r2, [r7, #4]
 8007b64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b66:	2300      	movs	r3, #0
 8007b68:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d101      	bne.n	8007b78 <HAL_DMA_Start_IT+0x20>
 8007b74:	2302      	movs	r3, #2
 8007b76:	e04a      	b.n	8007c0e <HAL_DMA_Start_IT+0xb6>
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	d13a      	bne.n	8007c00 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2202      	movs	r2, #2
 8007b8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2200      	movs	r2, #0
 8007b96:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	681a      	ldr	r2, [r3, #0]
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f022 0201 	bic.w	r2, r2, #1
 8007ba6:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	687a      	ldr	r2, [r7, #4]
 8007bac:	68b9      	ldr	r1, [r7, #8]
 8007bae:	68f8      	ldr	r0, [r7, #12]
 8007bb0:	f000 fbb0 	bl	8008314 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d008      	beq.n	8007bce <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f042 020e 	orr.w	r2, r2, #14
 8007bca:	601a      	str	r2, [r3, #0]
 8007bcc:	e00f      	b.n	8007bee <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	681a      	ldr	r2, [r3, #0]
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f022 0204 	bic.w	r2, r2, #4
 8007bdc:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f042 020a 	orr.w	r2, r2, #10
 8007bec:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	681a      	ldr	r2, [r3, #0]
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f042 0201 	orr.w	r2, r2, #1
 8007bfc:	601a      	str	r2, [r3, #0]
 8007bfe:	e005      	b.n	8007c0c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2200      	movs	r2, #0
 8007c04:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8007c08:	2302      	movs	r3, #2
 8007c0a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8007c0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3718      	adds	r7, #24
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}

08007c16 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007c16:	b480      	push	{r7}
 8007c18:	b085      	sub	sp, #20
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007c28:	2b02      	cmp	r3, #2
 8007c2a:	d008      	beq.n	8007c3e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2204      	movs	r2, #4
 8007c30:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2200      	movs	r2, #0
 8007c36:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	e020      	b.n	8007c80 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f022 020e 	bic.w	r2, r2, #14
 8007c4c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f022 0201 	bic.w	r2, r2, #1
 8007c5c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c66:	2101      	movs	r1, #1
 8007c68:	fa01 f202 	lsl.w	r2, r1, r2
 8007c6c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2201      	movs	r2, #1
 8007c72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8007c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3714      	adds	r7, #20
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bc80      	pop	{r7}
 8007c88:	4770      	bx	lr
	...

08007c8c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b084      	sub	sp, #16
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c94:	2300      	movs	r3, #0
 8007c96:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007c9e:	2b02      	cmp	r3, #2
 8007ca0:	d005      	beq.n	8007cae <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2204      	movs	r2, #4
 8007ca6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8007ca8:	2301      	movs	r3, #1
 8007caa:	73fb      	strb	r3, [r7, #15]
 8007cac:	e0d6      	b.n	8007e5c <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	681a      	ldr	r2, [r3, #0]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f022 020e 	bic.w	r2, r2, #14
 8007cbc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	681a      	ldr	r2, [r3, #0]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f022 0201 	bic.w	r2, r2, #1
 8007ccc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	4b64      	ldr	r3, [pc, #400]	; (8007e68 <HAL_DMA_Abort_IT+0x1dc>)
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	d958      	bls.n	8007d8c <HAL_DMA_Abort_IT+0x100>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a63      	ldr	r2, [pc, #396]	; (8007e6c <HAL_DMA_Abort_IT+0x1e0>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d04f      	beq.n	8007d84 <HAL_DMA_Abort_IT+0xf8>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a61      	ldr	r2, [pc, #388]	; (8007e70 <HAL_DMA_Abort_IT+0x1e4>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d048      	beq.n	8007d80 <HAL_DMA_Abort_IT+0xf4>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a60      	ldr	r2, [pc, #384]	; (8007e74 <HAL_DMA_Abort_IT+0x1e8>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d040      	beq.n	8007d7a <HAL_DMA_Abort_IT+0xee>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a5e      	ldr	r2, [pc, #376]	; (8007e78 <HAL_DMA_Abort_IT+0x1ec>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d038      	beq.n	8007d74 <HAL_DMA_Abort_IT+0xe8>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a5d      	ldr	r2, [pc, #372]	; (8007e7c <HAL_DMA_Abort_IT+0x1f0>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d030      	beq.n	8007d6e <HAL_DMA_Abort_IT+0xe2>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a5b      	ldr	r2, [pc, #364]	; (8007e80 <HAL_DMA_Abort_IT+0x1f4>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d028      	beq.n	8007d68 <HAL_DMA_Abort_IT+0xdc>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a53      	ldr	r2, [pc, #332]	; (8007e68 <HAL_DMA_Abort_IT+0x1dc>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d020      	beq.n	8007d62 <HAL_DMA_Abort_IT+0xd6>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a57      	ldr	r2, [pc, #348]	; (8007e84 <HAL_DMA_Abort_IT+0x1f8>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d019      	beq.n	8007d5e <HAL_DMA_Abort_IT+0xd2>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a56      	ldr	r2, [pc, #344]	; (8007e88 <HAL_DMA_Abort_IT+0x1fc>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d012      	beq.n	8007d5a <HAL_DMA_Abort_IT+0xce>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a54      	ldr	r2, [pc, #336]	; (8007e8c <HAL_DMA_Abort_IT+0x200>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d00a      	beq.n	8007d54 <HAL_DMA_Abort_IT+0xc8>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a53      	ldr	r2, [pc, #332]	; (8007e90 <HAL_DMA_Abort_IT+0x204>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d102      	bne.n	8007d4e <HAL_DMA_Abort_IT+0xc2>
 8007d48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007d4c:	e01b      	b.n	8007d86 <HAL_DMA_Abort_IT+0xfa>
 8007d4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007d52:	e018      	b.n	8007d86 <HAL_DMA_Abort_IT+0xfa>
 8007d54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007d58:	e015      	b.n	8007d86 <HAL_DMA_Abort_IT+0xfa>
 8007d5a:	2310      	movs	r3, #16
 8007d5c:	e013      	b.n	8007d86 <HAL_DMA_Abort_IT+0xfa>
 8007d5e:	2301      	movs	r3, #1
 8007d60:	e011      	b.n	8007d86 <HAL_DMA_Abort_IT+0xfa>
 8007d62:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007d66:	e00e      	b.n	8007d86 <HAL_DMA_Abort_IT+0xfa>
 8007d68:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007d6c:	e00b      	b.n	8007d86 <HAL_DMA_Abort_IT+0xfa>
 8007d6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007d72:	e008      	b.n	8007d86 <HAL_DMA_Abort_IT+0xfa>
 8007d74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007d78:	e005      	b.n	8007d86 <HAL_DMA_Abort_IT+0xfa>
 8007d7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007d7e:	e002      	b.n	8007d86 <HAL_DMA_Abort_IT+0xfa>
 8007d80:	2310      	movs	r3, #16
 8007d82:	e000      	b.n	8007d86 <HAL_DMA_Abort_IT+0xfa>
 8007d84:	2301      	movs	r3, #1
 8007d86:	4a43      	ldr	r2, [pc, #268]	; (8007e94 <HAL_DMA_Abort_IT+0x208>)
 8007d88:	6053      	str	r3, [r2, #4]
 8007d8a:	e057      	b.n	8007e3c <HAL_DMA_Abort_IT+0x1b0>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a36      	ldr	r2, [pc, #216]	; (8007e6c <HAL_DMA_Abort_IT+0x1e0>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d04f      	beq.n	8007e36 <HAL_DMA_Abort_IT+0x1aa>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4a35      	ldr	r2, [pc, #212]	; (8007e70 <HAL_DMA_Abort_IT+0x1e4>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d048      	beq.n	8007e32 <HAL_DMA_Abort_IT+0x1a6>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a33      	ldr	r2, [pc, #204]	; (8007e74 <HAL_DMA_Abort_IT+0x1e8>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d040      	beq.n	8007e2c <HAL_DMA_Abort_IT+0x1a0>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4a32      	ldr	r2, [pc, #200]	; (8007e78 <HAL_DMA_Abort_IT+0x1ec>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d038      	beq.n	8007e26 <HAL_DMA_Abort_IT+0x19a>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a30      	ldr	r2, [pc, #192]	; (8007e7c <HAL_DMA_Abort_IT+0x1f0>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d030      	beq.n	8007e20 <HAL_DMA_Abort_IT+0x194>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4a2f      	ldr	r2, [pc, #188]	; (8007e80 <HAL_DMA_Abort_IT+0x1f4>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d028      	beq.n	8007e1a <HAL_DMA_Abort_IT+0x18e>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a26      	ldr	r2, [pc, #152]	; (8007e68 <HAL_DMA_Abort_IT+0x1dc>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d020      	beq.n	8007e14 <HAL_DMA_Abort_IT+0x188>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a2b      	ldr	r2, [pc, #172]	; (8007e84 <HAL_DMA_Abort_IT+0x1f8>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d019      	beq.n	8007e10 <HAL_DMA_Abort_IT+0x184>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a29      	ldr	r2, [pc, #164]	; (8007e88 <HAL_DMA_Abort_IT+0x1fc>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d012      	beq.n	8007e0c <HAL_DMA_Abort_IT+0x180>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a28      	ldr	r2, [pc, #160]	; (8007e8c <HAL_DMA_Abort_IT+0x200>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d00a      	beq.n	8007e06 <HAL_DMA_Abort_IT+0x17a>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a26      	ldr	r2, [pc, #152]	; (8007e90 <HAL_DMA_Abort_IT+0x204>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d102      	bne.n	8007e00 <HAL_DMA_Abort_IT+0x174>
 8007dfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007dfe:	e01b      	b.n	8007e38 <HAL_DMA_Abort_IT+0x1ac>
 8007e00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007e04:	e018      	b.n	8007e38 <HAL_DMA_Abort_IT+0x1ac>
 8007e06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e0a:	e015      	b.n	8007e38 <HAL_DMA_Abort_IT+0x1ac>
 8007e0c:	2310      	movs	r3, #16
 8007e0e:	e013      	b.n	8007e38 <HAL_DMA_Abort_IT+0x1ac>
 8007e10:	2301      	movs	r3, #1
 8007e12:	e011      	b.n	8007e38 <HAL_DMA_Abort_IT+0x1ac>
 8007e14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007e18:	e00e      	b.n	8007e38 <HAL_DMA_Abort_IT+0x1ac>
 8007e1a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007e1e:	e00b      	b.n	8007e38 <HAL_DMA_Abort_IT+0x1ac>
 8007e20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007e24:	e008      	b.n	8007e38 <HAL_DMA_Abort_IT+0x1ac>
 8007e26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007e2a:	e005      	b.n	8007e38 <HAL_DMA_Abort_IT+0x1ac>
 8007e2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e30:	e002      	b.n	8007e38 <HAL_DMA_Abort_IT+0x1ac>
 8007e32:	2310      	movs	r3, #16
 8007e34:	e000      	b.n	8007e38 <HAL_DMA_Abort_IT+0x1ac>
 8007e36:	2301      	movs	r3, #1
 8007e38:	4a17      	ldr	r2, [pc, #92]	; (8007e98 <HAL_DMA_Abort_IT+0x20c>)
 8007e3a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2201      	movs	r2, #1
 8007e40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2200      	movs	r2, #0
 8007e48:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d003      	beq.n	8007e5c <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	4798      	blx	r3
    } 
  }
  return status;
 8007e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3710      	adds	r7, #16
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}
 8007e66:	bf00      	nop
 8007e68:	40020080 	.word	0x40020080
 8007e6c:	40020008 	.word	0x40020008
 8007e70:	4002001c 	.word	0x4002001c
 8007e74:	40020030 	.word	0x40020030
 8007e78:	40020044 	.word	0x40020044
 8007e7c:	40020058 	.word	0x40020058
 8007e80:	4002006c 	.word	0x4002006c
 8007e84:	40020408 	.word	0x40020408
 8007e88:	4002041c 	.word	0x4002041c
 8007e8c:	40020430 	.word	0x40020430
 8007e90:	40020444 	.word	0x40020444
 8007e94:	40020400 	.word	0x40020400
 8007e98:	40020000 	.word	0x40020000

08007e9c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b084      	sub	sp, #16
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb8:	2204      	movs	r2, #4
 8007eba:	409a      	lsls	r2, r3
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	4013      	ands	r3, r2
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	f000 80d6 	beq.w	8008072 <HAL_DMA_IRQHandler+0x1d6>
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	f003 0304 	and.w	r3, r3, #4
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	f000 80d0 	beq.w	8008072 <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f003 0320 	and.w	r3, r3, #32
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d107      	bne.n	8007ef0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	681a      	ldr	r2, [r3, #0]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f022 0204 	bic.w	r2, r2, #4
 8007eee:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	4b9b      	ldr	r3, [pc, #620]	; (8008164 <HAL_DMA_IRQHandler+0x2c8>)
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d958      	bls.n	8007fae <HAL_DMA_IRQHandler+0x112>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4a99      	ldr	r2, [pc, #612]	; (8008168 <HAL_DMA_IRQHandler+0x2cc>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d04f      	beq.n	8007fa6 <HAL_DMA_IRQHandler+0x10a>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a98      	ldr	r2, [pc, #608]	; (800816c <HAL_DMA_IRQHandler+0x2d0>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d048      	beq.n	8007fa2 <HAL_DMA_IRQHandler+0x106>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a96      	ldr	r2, [pc, #600]	; (8008170 <HAL_DMA_IRQHandler+0x2d4>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d040      	beq.n	8007f9c <HAL_DMA_IRQHandler+0x100>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4a95      	ldr	r2, [pc, #596]	; (8008174 <HAL_DMA_IRQHandler+0x2d8>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d038      	beq.n	8007f96 <HAL_DMA_IRQHandler+0xfa>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4a93      	ldr	r2, [pc, #588]	; (8008178 <HAL_DMA_IRQHandler+0x2dc>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d030      	beq.n	8007f90 <HAL_DMA_IRQHandler+0xf4>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4a92      	ldr	r2, [pc, #584]	; (800817c <HAL_DMA_IRQHandler+0x2e0>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d028      	beq.n	8007f8a <HAL_DMA_IRQHandler+0xee>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a89      	ldr	r2, [pc, #548]	; (8008164 <HAL_DMA_IRQHandler+0x2c8>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d020      	beq.n	8007f84 <HAL_DMA_IRQHandler+0xe8>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a8e      	ldr	r2, [pc, #568]	; (8008180 <HAL_DMA_IRQHandler+0x2e4>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d019      	beq.n	8007f80 <HAL_DMA_IRQHandler+0xe4>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a8c      	ldr	r2, [pc, #560]	; (8008184 <HAL_DMA_IRQHandler+0x2e8>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d012      	beq.n	8007f7c <HAL_DMA_IRQHandler+0xe0>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a8b      	ldr	r2, [pc, #556]	; (8008188 <HAL_DMA_IRQHandler+0x2ec>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d00a      	beq.n	8007f76 <HAL_DMA_IRQHandler+0xda>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a89      	ldr	r2, [pc, #548]	; (800818c <HAL_DMA_IRQHandler+0x2f0>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d102      	bne.n	8007f70 <HAL_DMA_IRQHandler+0xd4>
 8007f6a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007f6e:	e01b      	b.n	8007fa8 <HAL_DMA_IRQHandler+0x10c>
 8007f70:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007f74:	e018      	b.n	8007fa8 <HAL_DMA_IRQHandler+0x10c>
 8007f76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f7a:	e015      	b.n	8007fa8 <HAL_DMA_IRQHandler+0x10c>
 8007f7c:	2340      	movs	r3, #64	; 0x40
 8007f7e:	e013      	b.n	8007fa8 <HAL_DMA_IRQHandler+0x10c>
 8007f80:	2304      	movs	r3, #4
 8007f82:	e011      	b.n	8007fa8 <HAL_DMA_IRQHandler+0x10c>
 8007f84:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007f88:	e00e      	b.n	8007fa8 <HAL_DMA_IRQHandler+0x10c>
 8007f8a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007f8e:	e00b      	b.n	8007fa8 <HAL_DMA_IRQHandler+0x10c>
 8007f90:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007f94:	e008      	b.n	8007fa8 <HAL_DMA_IRQHandler+0x10c>
 8007f96:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007f9a:	e005      	b.n	8007fa8 <HAL_DMA_IRQHandler+0x10c>
 8007f9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fa0:	e002      	b.n	8007fa8 <HAL_DMA_IRQHandler+0x10c>
 8007fa2:	2340      	movs	r3, #64	; 0x40
 8007fa4:	e000      	b.n	8007fa8 <HAL_DMA_IRQHandler+0x10c>
 8007fa6:	2304      	movs	r3, #4
 8007fa8:	4a79      	ldr	r2, [pc, #484]	; (8008190 <HAL_DMA_IRQHandler+0x2f4>)
 8007faa:	6053      	str	r3, [r2, #4]
 8007fac:	e057      	b.n	800805e <HAL_DMA_IRQHandler+0x1c2>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a6d      	ldr	r2, [pc, #436]	; (8008168 <HAL_DMA_IRQHandler+0x2cc>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d04f      	beq.n	8008058 <HAL_DMA_IRQHandler+0x1bc>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a6b      	ldr	r2, [pc, #428]	; (800816c <HAL_DMA_IRQHandler+0x2d0>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d048      	beq.n	8008054 <HAL_DMA_IRQHandler+0x1b8>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a6a      	ldr	r2, [pc, #424]	; (8008170 <HAL_DMA_IRQHandler+0x2d4>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d040      	beq.n	800804e <HAL_DMA_IRQHandler+0x1b2>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a68      	ldr	r2, [pc, #416]	; (8008174 <HAL_DMA_IRQHandler+0x2d8>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d038      	beq.n	8008048 <HAL_DMA_IRQHandler+0x1ac>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a67      	ldr	r2, [pc, #412]	; (8008178 <HAL_DMA_IRQHandler+0x2dc>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d030      	beq.n	8008042 <HAL_DMA_IRQHandler+0x1a6>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a65      	ldr	r2, [pc, #404]	; (800817c <HAL_DMA_IRQHandler+0x2e0>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d028      	beq.n	800803c <HAL_DMA_IRQHandler+0x1a0>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a5d      	ldr	r2, [pc, #372]	; (8008164 <HAL_DMA_IRQHandler+0x2c8>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d020      	beq.n	8008036 <HAL_DMA_IRQHandler+0x19a>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a61      	ldr	r2, [pc, #388]	; (8008180 <HAL_DMA_IRQHandler+0x2e4>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d019      	beq.n	8008032 <HAL_DMA_IRQHandler+0x196>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a60      	ldr	r2, [pc, #384]	; (8008184 <HAL_DMA_IRQHandler+0x2e8>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d012      	beq.n	800802e <HAL_DMA_IRQHandler+0x192>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a5e      	ldr	r2, [pc, #376]	; (8008188 <HAL_DMA_IRQHandler+0x2ec>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d00a      	beq.n	8008028 <HAL_DMA_IRQHandler+0x18c>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a5d      	ldr	r2, [pc, #372]	; (800818c <HAL_DMA_IRQHandler+0x2f0>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d102      	bne.n	8008022 <HAL_DMA_IRQHandler+0x186>
 800801c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008020:	e01b      	b.n	800805a <HAL_DMA_IRQHandler+0x1be>
 8008022:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008026:	e018      	b.n	800805a <HAL_DMA_IRQHandler+0x1be>
 8008028:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800802c:	e015      	b.n	800805a <HAL_DMA_IRQHandler+0x1be>
 800802e:	2340      	movs	r3, #64	; 0x40
 8008030:	e013      	b.n	800805a <HAL_DMA_IRQHandler+0x1be>
 8008032:	2304      	movs	r3, #4
 8008034:	e011      	b.n	800805a <HAL_DMA_IRQHandler+0x1be>
 8008036:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800803a:	e00e      	b.n	800805a <HAL_DMA_IRQHandler+0x1be>
 800803c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008040:	e00b      	b.n	800805a <HAL_DMA_IRQHandler+0x1be>
 8008042:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008046:	e008      	b.n	800805a <HAL_DMA_IRQHandler+0x1be>
 8008048:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800804c:	e005      	b.n	800805a <HAL_DMA_IRQHandler+0x1be>
 800804e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008052:	e002      	b.n	800805a <HAL_DMA_IRQHandler+0x1be>
 8008054:	2340      	movs	r3, #64	; 0x40
 8008056:	e000      	b.n	800805a <HAL_DMA_IRQHandler+0x1be>
 8008058:	2304      	movs	r3, #4
 800805a:	4a4e      	ldr	r2, [pc, #312]	; (8008194 <HAL_DMA_IRQHandler+0x2f8>)
 800805c:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008062:	2b00      	cmp	r3, #0
 8008064:	f000 8136 	beq.w	80082d4 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8008070:	e130      	b.n	80082d4 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008076:	2202      	movs	r2, #2
 8008078:	409a      	lsls	r2, r3
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	4013      	ands	r3, r2
 800807e:	2b00      	cmp	r3, #0
 8008080:	f000 80f8 	beq.w	8008274 <HAL_DMA_IRQHandler+0x3d8>
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	f003 0302 	and.w	r3, r3, #2
 800808a:	2b00      	cmp	r3, #0
 800808c:	f000 80f2 	beq.w	8008274 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f003 0320 	and.w	r3, r3, #32
 800809a:	2b00      	cmp	r3, #0
 800809c:	d10b      	bne.n	80080b6 <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	681a      	ldr	r2, [r3, #0]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f022 020a 	bic.w	r2, r2, #10
 80080ac:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2201      	movs	r2, #1
 80080b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	461a      	mov	r2, r3
 80080bc:	4b29      	ldr	r3, [pc, #164]	; (8008164 <HAL_DMA_IRQHandler+0x2c8>)
 80080be:	429a      	cmp	r2, r3
 80080c0:	d973      	bls.n	80081aa <HAL_DMA_IRQHandler+0x30e>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a28      	ldr	r2, [pc, #160]	; (8008168 <HAL_DMA_IRQHandler+0x2cc>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d06a      	beq.n	80081a2 <HAL_DMA_IRQHandler+0x306>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a26      	ldr	r2, [pc, #152]	; (800816c <HAL_DMA_IRQHandler+0x2d0>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d063      	beq.n	800819e <HAL_DMA_IRQHandler+0x302>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a25      	ldr	r2, [pc, #148]	; (8008170 <HAL_DMA_IRQHandler+0x2d4>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d05b      	beq.n	8008198 <HAL_DMA_IRQHandler+0x2fc>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a23      	ldr	r2, [pc, #140]	; (8008174 <HAL_DMA_IRQHandler+0x2d8>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d038      	beq.n	800815c <HAL_DMA_IRQHandler+0x2c0>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a22      	ldr	r2, [pc, #136]	; (8008178 <HAL_DMA_IRQHandler+0x2dc>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d030      	beq.n	8008156 <HAL_DMA_IRQHandler+0x2ba>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a20      	ldr	r2, [pc, #128]	; (800817c <HAL_DMA_IRQHandler+0x2e0>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d028      	beq.n	8008150 <HAL_DMA_IRQHandler+0x2b4>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a18      	ldr	r2, [pc, #96]	; (8008164 <HAL_DMA_IRQHandler+0x2c8>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d020      	beq.n	800814a <HAL_DMA_IRQHandler+0x2ae>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a1c      	ldr	r2, [pc, #112]	; (8008180 <HAL_DMA_IRQHandler+0x2e4>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d019      	beq.n	8008146 <HAL_DMA_IRQHandler+0x2aa>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a1b      	ldr	r2, [pc, #108]	; (8008184 <HAL_DMA_IRQHandler+0x2e8>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d012      	beq.n	8008142 <HAL_DMA_IRQHandler+0x2a6>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a19      	ldr	r2, [pc, #100]	; (8008188 <HAL_DMA_IRQHandler+0x2ec>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d00a      	beq.n	800813c <HAL_DMA_IRQHandler+0x2a0>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4a18      	ldr	r2, [pc, #96]	; (800818c <HAL_DMA_IRQHandler+0x2f0>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d102      	bne.n	8008136 <HAL_DMA_IRQHandler+0x29a>
 8008130:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008134:	e036      	b.n	80081a4 <HAL_DMA_IRQHandler+0x308>
 8008136:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800813a:	e033      	b.n	80081a4 <HAL_DMA_IRQHandler+0x308>
 800813c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008140:	e030      	b.n	80081a4 <HAL_DMA_IRQHandler+0x308>
 8008142:	2320      	movs	r3, #32
 8008144:	e02e      	b.n	80081a4 <HAL_DMA_IRQHandler+0x308>
 8008146:	2302      	movs	r3, #2
 8008148:	e02c      	b.n	80081a4 <HAL_DMA_IRQHandler+0x308>
 800814a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800814e:	e029      	b.n	80081a4 <HAL_DMA_IRQHandler+0x308>
 8008150:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008154:	e026      	b.n	80081a4 <HAL_DMA_IRQHandler+0x308>
 8008156:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800815a:	e023      	b.n	80081a4 <HAL_DMA_IRQHandler+0x308>
 800815c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008160:	e020      	b.n	80081a4 <HAL_DMA_IRQHandler+0x308>
 8008162:	bf00      	nop
 8008164:	40020080 	.word	0x40020080
 8008168:	40020008 	.word	0x40020008
 800816c:	4002001c 	.word	0x4002001c
 8008170:	40020030 	.word	0x40020030
 8008174:	40020044 	.word	0x40020044
 8008178:	40020058 	.word	0x40020058
 800817c:	4002006c 	.word	0x4002006c
 8008180:	40020408 	.word	0x40020408
 8008184:	4002041c 	.word	0x4002041c
 8008188:	40020430 	.word	0x40020430
 800818c:	40020444 	.word	0x40020444
 8008190:	40020400 	.word	0x40020400
 8008194:	40020000 	.word	0x40020000
 8008198:	f44f 7300 	mov.w	r3, #512	; 0x200
 800819c:	e002      	b.n	80081a4 <HAL_DMA_IRQHandler+0x308>
 800819e:	2320      	movs	r3, #32
 80081a0:	e000      	b.n	80081a4 <HAL_DMA_IRQHandler+0x308>
 80081a2:	2302      	movs	r3, #2
 80081a4:	4a4e      	ldr	r2, [pc, #312]	; (80082e0 <HAL_DMA_IRQHandler+0x444>)
 80081a6:	6053      	str	r3, [r2, #4]
 80081a8:	e057      	b.n	800825a <HAL_DMA_IRQHandler+0x3be>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a4d      	ldr	r2, [pc, #308]	; (80082e4 <HAL_DMA_IRQHandler+0x448>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d04f      	beq.n	8008254 <HAL_DMA_IRQHandler+0x3b8>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4a4b      	ldr	r2, [pc, #300]	; (80082e8 <HAL_DMA_IRQHandler+0x44c>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d048      	beq.n	8008250 <HAL_DMA_IRQHandler+0x3b4>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4a4a      	ldr	r2, [pc, #296]	; (80082ec <HAL_DMA_IRQHandler+0x450>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d040      	beq.n	800824a <HAL_DMA_IRQHandler+0x3ae>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a48      	ldr	r2, [pc, #288]	; (80082f0 <HAL_DMA_IRQHandler+0x454>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d038      	beq.n	8008244 <HAL_DMA_IRQHandler+0x3a8>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4a47      	ldr	r2, [pc, #284]	; (80082f4 <HAL_DMA_IRQHandler+0x458>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d030      	beq.n	800823e <HAL_DMA_IRQHandler+0x3a2>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a45      	ldr	r2, [pc, #276]	; (80082f8 <HAL_DMA_IRQHandler+0x45c>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d028      	beq.n	8008238 <HAL_DMA_IRQHandler+0x39c>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a44      	ldr	r2, [pc, #272]	; (80082fc <HAL_DMA_IRQHandler+0x460>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d020      	beq.n	8008232 <HAL_DMA_IRQHandler+0x396>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a42      	ldr	r2, [pc, #264]	; (8008300 <HAL_DMA_IRQHandler+0x464>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d019      	beq.n	800822e <HAL_DMA_IRQHandler+0x392>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4a41      	ldr	r2, [pc, #260]	; (8008304 <HAL_DMA_IRQHandler+0x468>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d012      	beq.n	800822a <HAL_DMA_IRQHandler+0x38e>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a3f      	ldr	r2, [pc, #252]	; (8008308 <HAL_DMA_IRQHandler+0x46c>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d00a      	beq.n	8008224 <HAL_DMA_IRQHandler+0x388>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4a3e      	ldr	r2, [pc, #248]	; (800830c <HAL_DMA_IRQHandler+0x470>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d102      	bne.n	800821e <HAL_DMA_IRQHandler+0x382>
 8008218:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800821c:	e01b      	b.n	8008256 <HAL_DMA_IRQHandler+0x3ba>
 800821e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008222:	e018      	b.n	8008256 <HAL_DMA_IRQHandler+0x3ba>
 8008224:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008228:	e015      	b.n	8008256 <HAL_DMA_IRQHandler+0x3ba>
 800822a:	2320      	movs	r3, #32
 800822c:	e013      	b.n	8008256 <HAL_DMA_IRQHandler+0x3ba>
 800822e:	2302      	movs	r3, #2
 8008230:	e011      	b.n	8008256 <HAL_DMA_IRQHandler+0x3ba>
 8008232:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008236:	e00e      	b.n	8008256 <HAL_DMA_IRQHandler+0x3ba>
 8008238:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800823c:	e00b      	b.n	8008256 <HAL_DMA_IRQHandler+0x3ba>
 800823e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008242:	e008      	b.n	8008256 <HAL_DMA_IRQHandler+0x3ba>
 8008244:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008248:	e005      	b.n	8008256 <HAL_DMA_IRQHandler+0x3ba>
 800824a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800824e:	e002      	b.n	8008256 <HAL_DMA_IRQHandler+0x3ba>
 8008250:	2320      	movs	r3, #32
 8008252:	e000      	b.n	8008256 <HAL_DMA_IRQHandler+0x3ba>
 8008254:	2302      	movs	r3, #2
 8008256:	4a2e      	ldr	r2, [pc, #184]	; (8008310 <HAL_DMA_IRQHandler+0x474>)
 8008258:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2200      	movs	r2, #0
 800825e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008266:	2b00      	cmp	r3, #0
 8008268:	d034      	beq.n	80082d4 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8008272:	e02f      	b.n	80082d4 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008278:	2208      	movs	r2, #8
 800827a:	409a      	lsls	r2, r3
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	4013      	ands	r3, r2
 8008280:	2b00      	cmp	r3, #0
 8008282:	d028      	beq.n	80082d6 <HAL_DMA_IRQHandler+0x43a>
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	f003 0308 	and.w	r3, r3, #8
 800828a:	2b00      	cmp	r3, #0
 800828c:	d023      	beq.n	80082d6 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	681a      	ldr	r2, [r3, #0]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f022 020e 	bic.w	r2, r2, #14
 800829c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082a6:	2101      	movs	r1, #1
 80082a8:	fa01 f202 	lsl.w	r2, r1, r2
 80082ac:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2201      	movs	r2, #1
 80082b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2201      	movs	r2, #1
 80082b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2200      	movs	r2, #0
 80082c0:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d004      	beq.n	80082d6 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	4798      	blx	r3
    }
  }
  return;
 80082d4:	bf00      	nop
 80082d6:	bf00      	nop
}
 80082d8:	3710      	adds	r7, #16
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}
 80082de:	bf00      	nop
 80082e0:	40020400 	.word	0x40020400
 80082e4:	40020008 	.word	0x40020008
 80082e8:	4002001c 	.word	0x4002001c
 80082ec:	40020030 	.word	0x40020030
 80082f0:	40020044 	.word	0x40020044
 80082f4:	40020058 	.word	0x40020058
 80082f8:	4002006c 	.word	0x4002006c
 80082fc:	40020080 	.word	0x40020080
 8008300:	40020408 	.word	0x40020408
 8008304:	4002041c 	.word	0x4002041c
 8008308:	40020430 	.word	0x40020430
 800830c:	40020444 	.word	0x40020444
 8008310:	40020000 	.word	0x40020000

08008314 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008314:	b480      	push	{r7}
 8008316:	b085      	sub	sp, #20
 8008318:	af00      	add	r7, sp, #0
 800831a:	60f8      	str	r0, [r7, #12]
 800831c:	60b9      	str	r1, [r7, #8]
 800831e:	607a      	str	r2, [r7, #4]
 8008320:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800832a:	2101      	movs	r1, #1
 800832c:	fa01 f202 	lsl.w	r2, r1, r2
 8008330:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	683a      	ldr	r2, [r7, #0]
 8008338:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	2b10      	cmp	r3, #16
 8008340:	d108      	bne.n	8008354 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	687a      	ldr	r2, [r7, #4]
 8008348:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	68ba      	ldr	r2, [r7, #8]
 8008350:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008352:	e007      	b.n	8008364 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	68ba      	ldr	r2, [r7, #8]
 800835a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	687a      	ldr	r2, [r7, #4]
 8008362:	60da      	str	r2, [r3, #12]
}
 8008364:	bf00      	nop
 8008366:	3714      	adds	r7, #20
 8008368:	46bd      	mov	sp, r7
 800836a:	bc80      	pop	{r7}
 800836c:	4770      	bx	lr
	...

08008370 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008370:	b480      	push	{r7}
 8008372:	b08b      	sub	sp, #44	; 0x2c
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
 8008378:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800837a:	2300      	movs	r3, #0
 800837c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800837e:	2300      	movs	r3, #0
 8008380:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008382:	e179      	b.n	8008678 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008384:	2201      	movs	r2, #1
 8008386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008388:	fa02 f303 	lsl.w	r3, r2, r3
 800838c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	69fa      	ldr	r2, [r7, #28]
 8008394:	4013      	ands	r3, r2
 8008396:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8008398:	69ba      	ldr	r2, [r7, #24]
 800839a:	69fb      	ldr	r3, [r7, #28]
 800839c:	429a      	cmp	r2, r3
 800839e:	f040 8168 	bne.w	8008672 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	4aa0      	ldr	r2, [pc, #640]	; (8008628 <HAL_GPIO_Init+0x2b8>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d05e      	beq.n	800846a <HAL_GPIO_Init+0xfa>
 80083ac:	4a9e      	ldr	r2, [pc, #632]	; (8008628 <HAL_GPIO_Init+0x2b8>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d875      	bhi.n	800849e <HAL_GPIO_Init+0x12e>
 80083b2:	4a9e      	ldr	r2, [pc, #632]	; (800862c <HAL_GPIO_Init+0x2bc>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d058      	beq.n	800846a <HAL_GPIO_Init+0xfa>
 80083b8:	4a9c      	ldr	r2, [pc, #624]	; (800862c <HAL_GPIO_Init+0x2bc>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d86f      	bhi.n	800849e <HAL_GPIO_Init+0x12e>
 80083be:	4a9c      	ldr	r2, [pc, #624]	; (8008630 <HAL_GPIO_Init+0x2c0>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d052      	beq.n	800846a <HAL_GPIO_Init+0xfa>
 80083c4:	4a9a      	ldr	r2, [pc, #616]	; (8008630 <HAL_GPIO_Init+0x2c0>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d869      	bhi.n	800849e <HAL_GPIO_Init+0x12e>
 80083ca:	4a9a      	ldr	r2, [pc, #616]	; (8008634 <HAL_GPIO_Init+0x2c4>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d04c      	beq.n	800846a <HAL_GPIO_Init+0xfa>
 80083d0:	4a98      	ldr	r2, [pc, #608]	; (8008634 <HAL_GPIO_Init+0x2c4>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d863      	bhi.n	800849e <HAL_GPIO_Init+0x12e>
 80083d6:	4a98      	ldr	r2, [pc, #608]	; (8008638 <HAL_GPIO_Init+0x2c8>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d046      	beq.n	800846a <HAL_GPIO_Init+0xfa>
 80083dc:	4a96      	ldr	r2, [pc, #600]	; (8008638 <HAL_GPIO_Init+0x2c8>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d85d      	bhi.n	800849e <HAL_GPIO_Init+0x12e>
 80083e2:	2b12      	cmp	r3, #18
 80083e4:	d82a      	bhi.n	800843c <HAL_GPIO_Init+0xcc>
 80083e6:	2b12      	cmp	r3, #18
 80083e8:	d859      	bhi.n	800849e <HAL_GPIO_Init+0x12e>
 80083ea:	a201      	add	r2, pc, #4	; (adr r2, 80083f0 <HAL_GPIO_Init+0x80>)
 80083ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083f0:	0800846b 	.word	0x0800846b
 80083f4:	08008445 	.word	0x08008445
 80083f8:	08008457 	.word	0x08008457
 80083fc:	08008499 	.word	0x08008499
 8008400:	0800849f 	.word	0x0800849f
 8008404:	0800849f 	.word	0x0800849f
 8008408:	0800849f 	.word	0x0800849f
 800840c:	0800849f 	.word	0x0800849f
 8008410:	0800849f 	.word	0x0800849f
 8008414:	0800849f 	.word	0x0800849f
 8008418:	0800849f 	.word	0x0800849f
 800841c:	0800849f 	.word	0x0800849f
 8008420:	0800849f 	.word	0x0800849f
 8008424:	0800849f 	.word	0x0800849f
 8008428:	0800849f 	.word	0x0800849f
 800842c:	0800849f 	.word	0x0800849f
 8008430:	0800849f 	.word	0x0800849f
 8008434:	0800844d 	.word	0x0800844d
 8008438:	08008461 	.word	0x08008461
 800843c:	4a7f      	ldr	r2, [pc, #508]	; (800863c <HAL_GPIO_Init+0x2cc>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d013      	beq.n	800846a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8008442:	e02c      	b.n	800849e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	68db      	ldr	r3, [r3, #12]
 8008448:	623b      	str	r3, [r7, #32]
          break;
 800844a:	e029      	b.n	80084a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	68db      	ldr	r3, [r3, #12]
 8008450:	3304      	adds	r3, #4
 8008452:	623b      	str	r3, [r7, #32]
          break;
 8008454:	e024      	b.n	80084a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	68db      	ldr	r3, [r3, #12]
 800845a:	3308      	adds	r3, #8
 800845c:	623b      	str	r3, [r7, #32]
          break;
 800845e:	e01f      	b.n	80084a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	68db      	ldr	r3, [r3, #12]
 8008464:	330c      	adds	r3, #12
 8008466:	623b      	str	r3, [r7, #32]
          break;
 8008468:	e01a      	b.n	80084a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	689b      	ldr	r3, [r3, #8]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d102      	bne.n	8008478 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008472:	2304      	movs	r3, #4
 8008474:	623b      	str	r3, [r7, #32]
          break;
 8008476:	e013      	b.n	80084a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	689b      	ldr	r3, [r3, #8]
 800847c:	2b01      	cmp	r3, #1
 800847e:	d105      	bne.n	800848c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008480:	2308      	movs	r3, #8
 8008482:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	69fa      	ldr	r2, [r7, #28]
 8008488:	611a      	str	r2, [r3, #16]
          break;
 800848a:	e009      	b.n	80084a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800848c:	2308      	movs	r3, #8
 800848e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	69fa      	ldr	r2, [r7, #28]
 8008494:	615a      	str	r2, [r3, #20]
          break;
 8008496:	e003      	b.n	80084a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8008498:	2300      	movs	r3, #0
 800849a:	623b      	str	r3, [r7, #32]
          break;
 800849c:	e000      	b.n	80084a0 <HAL_GPIO_Init+0x130>
          break;
 800849e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80084a0:	69bb      	ldr	r3, [r7, #24]
 80084a2:	2bff      	cmp	r3, #255	; 0xff
 80084a4:	d801      	bhi.n	80084aa <HAL_GPIO_Init+0x13a>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	e001      	b.n	80084ae <HAL_GPIO_Init+0x13e>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	3304      	adds	r3, #4
 80084ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80084b0:	69bb      	ldr	r3, [r7, #24]
 80084b2:	2bff      	cmp	r3, #255	; 0xff
 80084b4:	d802      	bhi.n	80084bc <HAL_GPIO_Init+0x14c>
 80084b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b8:	009b      	lsls	r3, r3, #2
 80084ba:	e002      	b.n	80084c2 <HAL_GPIO_Init+0x152>
 80084bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084be:	3b08      	subs	r3, #8
 80084c0:	009b      	lsls	r3, r3, #2
 80084c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	681a      	ldr	r2, [r3, #0]
 80084c8:	210f      	movs	r1, #15
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	fa01 f303 	lsl.w	r3, r1, r3
 80084d0:	43db      	mvns	r3, r3
 80084d2:	401a      	ands	r2, r3
 80084d4:	6a39      	ldr	r1, [r7, #32]
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	fa01 f303 	lsl.w	r3, r1, r3
 80084dc:	431a      	orrs	r2, r3
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	f000 80c1 	beq.w	8008672 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80084f0:	4b53      	ldr	r3, [pc, #332]	; (8008640 <HAL_GPIO_Init+0x2d0>)
 80084f2:	699b      	ldr	r3, [r3, #24]
 80084f4:	4a52      	ldr	r2, [pc, #328]	; (8008640 <HAL_GPIO_Init+0x2d0>)
 80084f6:	f043 0301 	orr.w	r3, r3, #1
 80084fa:	6193      	str	r3, [r2, #24]
 80084fc:	4b50      	ldr	r3, [pc, #320]	; (8008640 <HAL_GPIO_Init+0x2d0>)
 80084fe:	699b      	ldr	r3, [r3, #24]
 8008500:	f003 0301 	and.w	r3, r3, #1
 8008504:	60bb      	str	r3, [r7, #8]
 8008506:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8008508:	4a4e      	ldr	r2, [pc, #312]	; (8008644 <HAL_GPIO_Init+0x2d4>)
 800850a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800850c:	089b      	lsrs	r3, r3, #2
 800850e:	3302      	adds	r3, #2
 8008510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008514:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8008516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008518:	f003 0303 	and.w	r3, r3, #3
 800851c:	009b      	lsls	r3, r3, #2
 800851e:	220f      	movs	r2, #15
 8008520:	fa02 f303 	lsl.w	r3, r2, r3
 8008524:	43db      	mvns	r3, r3
 8008526:	68fa      	ldr	r2, [r7, #12]
 8008528:	4013      	ands	r3, r2
 800852a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	4a46      	ldr	r2, [pc, #280]	; (8008648 <HAL_GPIO_Init+0x2d8>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d01f      	beq.n	8008574 <HAL_GPIO_Init+0x204>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	4a45      	ldr	r2, [pc, #276]	; (800864c <HAL_GPIO_Init+0x2dc>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d019      	beq.n	8008570 <HAL_GPIO_Init+0x200>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	4a44      	ldr	r2, [pc, #272]	; (8008650 <HAL_GPIO_Init+0x2e0>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d013      	beq.n	800856c <HAL_GPIO_Init+0x1fc>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	4a43      	ldr	r2, [pc, #268]	; (8008654 <HAL_GPIO_Init+0x2e4>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d00d      	beq.n	8008568 <HAL_GPIO_Init+0x1f8>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	4a42      	ldr	r2, [pc, #264]	; (8008658 <HAL_GPIO_Init+0x2e8>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d007      	beq.n	8008564 <HAL_GPIO_Init+0x1f4>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	4a41      	ldr	r2, [pc, #260]	; (800865c <HAL_GPIO_Init+0x2ec>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d101      	bne.n	8008560 <HAL_GPIO_Init+0x1f0>
 800855c:	2305      	movs	r3, #5
 800855e:	e00a      	b.n	8008576 <HAL_GPIO_Init+0x206>
 8008560:	2306      	movs	r3, #6
 8008562:	e008      	b.n	8008576 <HAL_GPIO_Init+0x206>
 8008564:	2304      	movs	r3, #4
 8008566:	e006      	b.n	8008576 <HAL_GPIO_Init+0x206>
 8008568:	2303      	movs	r3, #3
 800856a:	e004      	b.n	8008576 <HAL_GPIO_Init+0x206>
 800856c:	2302      	movs	r3, #2
 800856e:	e002      	b.n	8008576 <HAL_GPIO_Init+0x206>
 8008570:	2301      	movs	r3, #1
 8008572:	e000      	b.n	8008576 <HAL_GPIO_Init+0x206>
 8008574:	2300      	movs	r3, #0
 8008576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008578:	f002 0203 	and.w	r2, r2, #3
 800857c:	0092      	lsls	r2, r2, #2
 800857e:	4093      	lsls	r3, r2
 8008580:	68fa      	ldr	r2, [r7, #12]
 8008582:	4313      	orrs	r3, r2
 8008584:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8008586:	492f      	ldr	r1, [pc, #188]	; (8008644 <HAL_GPIO_Init+0x2d4>)
 8008588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858a:	089b      	lsrs	r3, r3, #2
 800858c:	3302      	adds	r3, #2
 800858e:	68fa      	ldr	r2, [r7, #12]
 8008590:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800859c:	2b00      	cmp	r3, #0
 800859e:	d006      	beq.n	80085ae <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80085a0:	4b2f      	ldr	r3, [pc, #188]	; (8008660 <HAL_GPIO_Init+0x2f0>)
 80085a2:	681a      	ldr	r2, [r3, #0]
 80085a4:	492e      	ldr	r1, [pc, #184]	; (8008660 <HAL_GPIO_Init+0x2f0>)
 80085a6:	69bb      	ldr	r3, [r7, #24]
 80085a8:	4313      	orrs	r3, r2
 80085aa:	600b      	str	r3, [r1, #0]
 80085ac:	e006      	b.n	80085bc <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80085ae:	4b2c      	ldr	r3, [pc, #176]	; (8008660 <HAL_GPIO_Init+0x2f0>)
 80085b0:	681a      	ldr	r2, [r3, #0]
 80085b2:	69bb      	ldr	r3, [r7, #24]
 80085b4:	43db      	mvns	r3, r3
 80085b6:	492a      	ldr	r1, [pc, #168]	; (8008660 <HAL_GPIO_Init+0x2f0>)
 80085b8:	4013      	ands	r3, r2
 80085ba:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d006      	beq.n	80085d6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80085c8:	4b25      	ldr	r3, [pc, #148]	; (8008660 <HAL_GPIO_Init+0x2f0>)
 80085ca:	685a      	ldr	r2, [r3, #4]
 80085cc:	4924      	ldr	r1, [pc, #144]	; (8008660 <HAL_GPIO_Init+0x2f0>)
 80085ce:	69bb      	ldr	r3, [r7, #24]
 80085d0:	4313      	orrs	r3, r2
 80085d2:	604b      	str	r3, [r1, #4]
 80085d4:	e006      	b.n	80085e4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80085d6:	4b22      	ldr	r3, [pc, #136]	; (8008660 <HAL_GPIO_Init+0x2f0>)
 80085d8:	685a      	ldr	r2, [r3, #4]
 80085da:	69bb      	ldr	r3, [r7, #24]
 80085dc:	43db      	mvns	r3, r3
 80085de:	4920      	ldr	r1, [pc, #128]	; (8008660 <HAL_GPIO_Init+0x2f0>)
 80085e0:	4013      	ands	r3, r2
 80085e2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d006      	beq.n	80085fe <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80085f0:	4b1b      	ldr	r3, [pc, #108]	; (8008660 <HAL_GPIO_Init+0x2f0>)
 80085f2:	689a      	ldr	r2, [r3, #8]
 80085f4:	491a      	ldr	r1, [pc, #104]	; (8008660 <HAL_GPIO_Init+0x2f0>)
 80085f6:	69bb      	ldr	r3, [r7, #24]
 80085f8:	4313      	orrs	r3, r2
 80085fa:	608b      	str	r3, [r1, #8]
 80085fc:	e006      	b.n	800860c <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80085fe:	4b18      	ldr	r3, [pc, #96]	; (8008660 <HAL_GPIO_Init+0x2f0>)
 8008600:	689a      	ldr	r2, [r3, #8]
 8008602:	69bb      	ldr	r3, [r7, #24]
 8008604:	43db      	mvns	r3, r3
 8008606:	4916      	ldr	r1, [pc, #88]	; (8008660 <HAL_GPIO_Init+0x2f0>)
 8008608:	4013      	ands	r3, r2
 800860a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008614:	2b00      	cmp	r3, #0
 8008616:	d025      	beq.n	8008664 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8008618:	4b11      	ldr	r3, [pc, #68]	; (8008660 <HAL_GPIO_Init+0x2f0>)
 800861a:	68da      	ldr	r2, [r3, #12]
 800861c:	4910      	ldr	r1, [pc, #64]	; (8008660 <HAL_GPIO_Init+0x2f0>)
 800861e:	69bb      	ldr	r3, [r7, #24]
 8008620:	4313      	orrs	r3, r2
 8008622:	60cb      	str	r3, [r1, #12]
 8008624:	e025      	b.n	8008672 <HAL_GPIO_Init+0x302>
 8008626:	bf00      	nop
 8008628:	10320000 	.word	0x10320000
 800862c:	10310000 	.word	0x10310000
 8008630:	10220000 	.word	0x10220000
 8008634:	10210000 	.word	0x10210000
 8008638:	10120000 	.word	0x10120000
 800863c:	10110000 	.word	0x10110000
 8008640:	40021000 	.word	0x40021000
 8008644:	40010000 	.word	0x40010000
 8008648:	40010800 	.word	0x40010800
 800864c:	40010c00 	.word	0x40010c00
 8008650:	40011000 	.word	0x40011000
 8008654:	40011400 	.word	0x40011400
 8008658:	40011800 	.word	0x40011800
 800865c:	40011c00 	.word	0x40011c00
 8008660:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8008664:	4b0b      	ldr	r3, [pc, #44]	; (8008694 <HAL_GPIO_Init+0x324>)
 8008666:	68da      	ldr	r2, [r3, #12]
 8008668:	69bb      	ldr	r3, [r7, #24]
 800866a:	43db      	mvns	r3, r3
 800866c:	4909      	ldr	r1, [pc, #36]	; (8008694 <HAL_GPIO_Init+0x324>)
 800866e:	4013      	ands	r3, r2
 8008670:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8008672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008674:	3301      	adds	r3, #1
 8008676:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	681a      	ldr	r2, [r3, #0]
 800867c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867e:	fa22 f303 	lsr.w	r3, r2, r3
 8008682:	2b00      	cmp	r3, #0
 8008684:	f47f ae7e 	bne.w	8008384 <HAL_GPIO_Init+0x14>
  }
}
 8008688:	bf00      	nop
 800868a:	bf00      	nop
 800868c:	372c      	adds	r7, #44	; 0x2c
 800868e:	46bd      	mov	sp, r7
 8008690:	bc80      	pop	{r7}
 8008692:	4770      	bx	lr
 8008694:	40010400 	.word	0x40010400

08008698 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008698:	b480      	push	{r7}
 800869a:	b085      	sub	sp, #20
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
 80086a0:	460b      	mov	r3, r1
 80086a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	689a      	ldr	r2, [r3, #8]
 80086a8:	887b      	ldrh	r3, [r7, #2]
 80086aa:	4013      	ands	r3, r2
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d002      	beq.n	80086b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80086b0:	2301      	movs	r3, #1
 80086b2:	73fb      	strb	r3, [r7, #15]
 80086b4:	e001      	b.n	80086ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80086b6:	2300      	movs	r3, #0
 80086b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80086ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3714      	adds	r7, #20
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bc80      	pop	{r7}
 80086c4:	4770      	bx	lr

080086c6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80086c6:	b480      	push	{r7}
 80086c8:	b083      	sub	sp, #12
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	6078      	str	r0, [r7, #4]
 80086ce:	460b      	mov	r3, r1
 80086d0:	807b      	strh	r3, [r7, #2]
 80086d2:	4613      	mov	r3, r2
 80086d4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80086d6:	787b      	ldrb	r3, [r7, #1]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d003      	beq.n	80086e4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80086dc:	887a      	ldrh	r2, [r7, #2]
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80086e2:	e003      	b.n	80086ec <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80086e4:	887b      	ldrh	r3, [r7, #2]
 80086e6:	041a      	lsls	r2, r3, #16
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	611a      	str	r2, [r3, #16]
}
 80086ec:	bf00      	nop
 80086ee:	370c      	adds	r7, #12
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bc80      	pop	{r7}
 80086f4:	4770      	bx	lr
	...

080086f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b082      	sub	sp, #8
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	4603      	mov	r3, r0
 8008700:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8008702:	4b08      	ldr	r3, [pc, #32]	; (8008724 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008704:	695a      	ldr	r2, [r3, #20]
 8008706:	88fb      	ldrh	r3, [r7, #6]
 8008708:	4013      	ands	r3, r2
 800870a:	2b00      	cmp	r3, #0
 800870c:	d006      	beq.n	800871c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800870e:	4a05      	ldr	r2, [pc, #20]	; (8008724 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008710:	88fb      	ldrh	r3, [r7, #6]
 8008712:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008714:	88fb      	ldrh	r3, [r7, #6]
 8008716:	4618      	mov	r0, r3
 8008718:	f7fd feee 	bl	80064f8 <HAL_GPIO_EXTI_Callback>
  }
}
 800871c:	bf00      	nop
 800871e:	3708      	adds	r7, #8
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}
 8008724:	40010400 	.word	0x40010400

08008728 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b086      	sub	sp, #24
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d101      	bne.n	800873a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008736:	2301      	movs	r3, #1
 8008738:	e26c      	b.n	8008c14 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f003 0301 	and.w	r3, r3, #1
 8008742:	2b00      	cmp	r3, #0
 8008744:	f000 8087 	beq.w	8008856 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008748:	4b92      	ldr	r3, [pc, #584]	; (8008994 <HAL_RCC_OscConfig+0x26c>)
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	f003 030c 	and.w	r3, r3, #12
 8008750:	2b04      	cmp	r3, #4
 8008752:	d00c      	beq.n	800876e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008754:	4b8f      	ldr	r3, [pc, #572]	; (8008994 <HAL_RCC_OscConfig+0x26c>)
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	f003 030c 	and.w	r3, r3, #12
 800875c:	2b08      	cmp	r3, #8
 800875e:	d112      	bne.n	8008786 <HAL_RCC_OscConfig+0x5e>
 8008760:	4b8c      	ldr	r3, [pc, #560]	; (8008994 <HAL_RCC_OscConfig+0x26c>)
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008768:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800876c:	d10b      	bne.n	8008786 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800876e:	4b89      	ldr	r3, [pc, #548]	; (8008994 <HAL_RCC_OscConfig+0x26c>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008776:	2b00      	cmp	r3, #0
 8008778:	d06c      	beq.n	8008854 <HAL_RCC_OscConfig+0x12c>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d168      	bne.n	8008854 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008782:	2301      	movs	r3, #1
 8008784:	e246      	b.n	8008c14 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800878e:	d106      	bne.n	800879e <HAL_RCC_OscConfig+0x76>
 8008790:	4b80      	ldr	r3, [pc, #512]	; (8008994 <HAL_RCC_OscConfig+0x26c>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a7f      	ldr	r2, [pc, #508]	; (8008994 <HAL_RCC_OscConfig+0x26c>)
 8008796:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800879a:	6013      	str	r3, [r2, #0]
 800879c:	e02e      	b.n	80087fc <HAL_RCC_OscConfig+0xd4>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	685b      	ldr	r3, [r3, #4]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d10c      	bne.n	80087c0 <HAL_RCC_OscConfig+0x98>
 80087a6:	4b7b      	ldr	r3, [pc, #492]	; (8008994 <HAL_RCC_OscConfig+0x26c>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4a7a      	ldr	r2, [pc, #488]	; (8008994 <HAL_RCC_OscConfig+0x26c>)
 80087ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087b0:	6013      	str	r3, [r2, #0]
 80087b2:	4b78      	ldr	r3, [pc, #480]	; (8008994 <HAL_RCC_OscConfig+0x26c>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4a77      	ldr	r2, [pc, #476]	; (8008994 <HAL_RCC_OscConfig+0x26c>)
 80087b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80087bc:	6013      	str	r3, [r2, #0]
 80087be:	e01d      	b.n	80087fc <HAL_RCC_OscConfig+0xd4>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	685b      	ldr	r3, [r3, #4]
 80087c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80087c8:	d10c      	bne.n	80087e4 <HAL_RCC_OscConfig+0xbc>
 80087ca:	4b72      	ldr	r3, [pc, #456]	; (8008994 <HAL_RCC_OscConfig+0x26c>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4a71      	ldr	r2, [pc, #452]	; (8008994 <HAL_RCC_OscConfig+0x26c>)
 80087d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80087d4:	6013      	str	r3, [r2, #0]
 80087d6:	4b6f      	ldr	r3, [pc, #444]	; (8008994 <HAL_RCC_OscConfig+0x26c>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4a6e      	ldr	r2, [pc, #440]	; (8008994 <HAL_RCC_OscConfig+0x26c>)
 80087dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087e0:	6013      	str	r3, [r2, #0]
 80087e2:	e00b      	b.n	80087fc <HAL_RCC_OscConfig+0xd4>
 80087e4:	4b6b      	ldr	r3, [pc, #428]	; (8008994 <HAL_RCC_OscConfig+0x26c>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a6a      	ldr	r2, [pc, #424]	; (8008994 <HAL_RCC_OscConfig+0x26c>)
 80087ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087ee:	6013      	str	r3, [r2, #0]
 80087f0:	4b68      	ldr	r3, [pc, #416]	; (8008994 <HAL_RCC_OscConfig+0x26c>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4a67      	ldr	r2, [pc, #412]	; (8008994 <HAL_RCC_OscConfig+0x26c>)
 80087f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80087fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d013      	beq.n	800882c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008804:	f7fe fff6 	bl	80077f4 <HAL_GetTick>
 8008808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800880a:	e008      	b.n	800881e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800880c:	f7fe fff2 	bl	80077f4 <HAL_GetTick>
 8008810:	4602      	mov	r2, r0
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	1ad3      	subs	r3, r2, r3
 8008816:	2b64      	cmp	r3, #100	; 0x64
 8008818:	d901      	bls.n	800881e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800881a:	2303      	movs	r3, #3
 800881c:	e1fa      	b.n	8008c14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800881e:	4b5d      	ldr	r3, [pc, #372]	; (8008994 <HAL_RCC_OscConfig+0x26c>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008826:	2b00      	cmp	r3, #0
 8008828:	d0f0      	beq.n	800880c <HAL_RCC_OscConfig+0xe4>
 800882a:	e014      	b.n	8008856 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800882c:	f7fe ffe2 	bl	80077f4 <HAL_GetTick>
 8008830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008832:	e008      	b.n	8008846 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008834:	f7fe ffde 	bl	80077f4 <HAL_GetTick>
 8008838:	4602      	mov	r2, r0
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	1ad3      	subs	r3, r2, r3
 800883e:	2b64      	cmp	r3, #100	; 0x64
 8008840:	d901      	bls.n	8008846 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008842:	2303      	movs	r3, #3
 8008844:	e1e6      	b.n	8008c14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008846:	4b53      	ldr	r3, [pc, #332]	; (8008994 <HAL_RCC_OscConfig+0x26c>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800884e:	2b00      	cmp	r3, #0
 8008850:	d1f0      	bne.n	8008834 <HAL_RCC_OscConfig+0x10c>
 8008852:	e000      	b.n	8008856 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008854:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f003 0302 	and.w	r3, r3, #2
 800885e:	2b00      	cmp	r3, #0
 8008860:	d063      	beq.n	800892a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008862:	4b4c      	ldr	r3, [pc, #304]	; (8008994 <HAL_RCC_OscConfig+0x26c>)
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	f003 030c 	and.w	r3, r3, #12
 800886a:	2b00      	cmp	r3, #0
 800886c:	d00b      	beq.n	8008886 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800886e:	4b49      	ldr	r3, [pc, #292]	; (8008994 <HAL_RCC_OscConfig+0x26c>)
 8008870:	685b      	ldr	r3, [r3, #4]
 8008872:	f003 030c 	and.w	r3, r3, #12
 8008876:	2b08      	cmp	r3, #8
 8008878:	d11c      	bne.n	80088b4 <HAL_RCC_OscConfig+0x18c>
 800887a:	4b46      	ldr	r3, [pc, #280]	; (8008994 <HAL_RCC_OscConfig+0x26c>)
 800887c:	685b      	ldr	r3, [r3, #4]
 800887e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008882:	2b00      	cmp	r3, #0
 8008884:	d116      	bne.n	80088b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008886:	4b43      	ldr	r3, [pc, #268]	; (8008994 <HAL_RCC_OscConfig+0x26c>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f003 0302 	and.w	r3, r3, #2
 800888e:	2b00      	cmp	r3, #0
 8008890:	d005      	beq.n	800889e <HAL_RCC_OscConfig+0x176>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	691b      	ldr	r3, [r3, #16]
 8008896:	2b01      	cmp	r3, #1
 8008898:	d001      	beq.n	800889e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800889a:	2301      	movs	r3, #1
 800889c:	e1ba      	b.n	8008c14 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800889e:	4b3d      	ldr	r3, [pc, #244]	; (8008994 <HAL_RCC_OscConfig+0x26c>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	695b      	ldr	r3, [r3, #20]
 80088aa:	00db      	lsls	r3, r3, #3
 80088ac:	4939      	ldr	r1, [pc, #228]	; (8008994 <HAL_RCC_OscConfig+0x26c>)
 80088ae:	4313      	orrs	r3, r2
 80088b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80088b2:	e03a      	b.n	800892a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	691b      	ldr	r3, [r3, #16]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d020      	beq.n	80088fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80088bc:	4b36      	ldr	r3, [pc, #216]	; (8008998 <HAL_RCC_OscConfig+0x270>)
 80088be:	2201      	movs	r2, #1
 80088c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088c2:	f7fe ff97 	bl	80077f4 <HAL_GetTick>
 80088c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80088c8:	e008      	b.n	80088dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80088ca:	f7fe ff93 	bl	80077f4 <HAL_GetTick>
 80088ce:	4602      	mov	r2, r0
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	1ad3      	subs	r3, r2, r3
 80088d4:	2b02      	cmp	r3, #2
 80088d6:	d901      	bls.n	80088dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80088d8:	2303      	movs	r3, #3
 80088da:	e19b      	b.n	8008c14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80088dc:	4b2d      	ldr	r3, [pc, #180]	; (8008994 <HAL_RCC_OscConfig+0x26c>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f003 0302 	and.w	r3, r3, #2
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d0f0      	beq.n	80088ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088e8:	4b2a      	ldr	r3, [pc, #168]	; (8008994 <HAL_RCC_OscConfig+0x26c>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	695b      	ldr	r3, [r3, #20]
 80088f4:	00db      	lsls	r3, r3, #3
 80088f6:	4927      	ldr	r1, [pc, #156]	; (8008994 <HAL_RCC_OscConfig+0x26c>)
 80088f8:	4313      	orrs	r3, r2
 80088fa:	600b      	str	r3, [r1, #0]
 80088fc:	e015      	b.n	800892a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80088fe:	4b26      	ldr	r3, [pc, #152]	; (8008998 <HAL_RCC_OscConfig+0x270>)
 8008900:	2200      	movs	r2, #0
 8008902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008904:	f7fe ff76 	bl	80077f4 <HAL_GetTick>
 8008908:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800890a:	e008      	b.n	800891e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800890c:	f7fe ff72 	bl	80077f4 <HAL_GetTick>
 8008910:	4602      	mov	r2, r0
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	1ad3      	subs	r3, r2, r3
 8008916:	2b02      	cmp	r3, #2
 8008918:	d901      	bls.n	800891e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800891a:	2303      	movs	r3, #3
 800891c:	e17a      	b.n	8008c14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800891e:	4b1d      	ldr	r3, [pc, #116]	; (8008994 <HAL_RCC_OscConfig+0x26c>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f003 0302 	and.w	r3, r3, #2
 8008926:	2b00      	cmp	r3, #0
 8008928:	d1f0      	bne.n	800890c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f003 0308 	and.w	r3, r3, #8
 8008932:	2b00      	cmp	r3, #0
 8008934:	d03a      	beq.n	80089ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	699b      	ldr	r3, [r3, #24]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d019      	beq.n	8008972 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800893e:	4b17      	ldr	r3, [pc, #92]	; (800899c <HAL_RCC_OscConfig+0x274>)
 8008940:	2201      	movs	r2, #1
 8008942:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008944:	f7fe ff56 	bl	80077f4 <HAL_GetTick>
 8008948:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800894a:	e008      	b.n	800895e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800894c:	f7fe ff52 	bl	80077f4 <HAL_GetTick>
 8008950:	4602      	mov	r2, r0
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	1ad3      	subs	r3, r2, r3
 8008956:	2b02      	cmp	r3, #2
 8008958:	d901      	bls.n	800895e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800895a:	2303      	movs	r3, #3
 800895c:	e15a      	b.n	8008c14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800895e:	4b0d      	ldr	r3, [pc, #52]	; (8008994 <HAL_RCC_OscConfig+0x26c>)
 8008960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008962:	f003 0302 	and.w	r3, r3, #2
 8008966:	2b00      	cmp	r3, #0
 8008968:	d0f0      	beq.n	800894c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800896a:	2001      	movs	r0, #1
 800896c:	f000 fad8 	bl	8008f20 <RCC_Delay>
 8008970:	e01c      	b.n	80089ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008972:	4b0a      	ldr	r3, [pc, #40]	; (800899c <HAL_RCC_OscConfig+0x274>)
 8008974:	2200      	movs	r2, #0
 8008976:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008978:	f7fe ff3c 	bl	80077f4 <HAL_GetTick>
 800897c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800897e:	e00f      	b.n	80089a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008980:	f7fe ff38 	bl	80077f4 <HAL_GetTick>
 8008984:	4602      	mov	r2, r0
 8008986:	693b      	ldr	r3, [r7, #16]
 8008988:	1ad3      	subs	r3, r2, r3
 800898a:	2b02      	cmp	r3, #2
 800898c:	d908      	bls.n	80089a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800898e:	2303      	movs	r3, #3
 8008990:	e140      	b.n	8008c14 <HAL_RCC_OscConfig+0x4ec>
 8008992:	bf00      	nop
 8008994:	40021000 	.word	0x40021000
 8008998:	42420000 	.word	0x42420000
 800899c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80089a0:	4b9e      	ldr	r3, [pc, #632]	; (8008c1c <HAL_RCC_OscConfig+0x4f4>)
 80089a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a4:	f003 0302 	and.w	r3, r3, #2
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d1e9      	bne.n	8008980 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f003 0304 	and.w	r3, r3, #4
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	f000 80a6 	beq.w	8008b06 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80089ba:	2300      	movs	r3, #0
 80089bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80089be:	4b97      	ldr	r3, [pc, #604]	; (8008c1c <HAL_RCC_OscConfig+0x4f4>)
 80089c0:	69db      	ldr	r3, [r3, #28]
 80089c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d10d      	bne.n	80089e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80089ca:	4b94      	ldr	r3, [pc, #592]	; (8008c1c <HAL_RCC_OscConfig+0x4f4>)
 80089cc:	69db      	ldr	r3, [r3, #28]
 80089ce:	4a93      	ldr	r2, [pc, #588]	; (8008c1c <HAL_RCC_OscConfig+0x4f4>)
 80089d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089d4:	61d3      	str	r3, [r2, #28]
 80089d6:	4b91      	ldr	r3, [pc, #580]	; (8008c1c <HAL_RCC_OscConfig+0x4f4>)
 80089d8:	69db      	ldr	r3, [r3, #28]
 80089da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089de:	60bb      	str	r3, [r7, #8]
 80089e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80089e2:	2301      	movs	r3, #1
 80089e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089e6:	4b8e      	ldr	r3, [pc, #568]	; (8008c20 <HAL_RCC_OscConfig+0x4f8>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d118      	bne.n	8008a24 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80089f2:	4b8b      	ldr	r3, [pc, #556]	; (8008c20 <HAL_RCC_OscConfig+0x4f8>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4a8a      	ldr	r2, [pc, #552]	; (8008c20 <HAL_RCC_OscConfig+0x4f8>)
 80089f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80089fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80089fe:	f7fe fef9 	bl	80077f4 <HAL_GetTick>
 8008a02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a04:	e008      	b.n	8008a18 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a06:	f7fe fef5 	bl	80077f4 <HAL_GetTick>
 8008a0a:	4602      	mov	r2, r0
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	1ad3      	subs	r3, r2, r3
 8008a10:	2b64      	cmp	r3, #100	; 0x64
 8008a12:	d901      	bls.n	8008a18 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8008a14:	2303      	movs	r3, #3
 8008a16:	e0fd      	b.n	8008c14 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a18:	4b81      	ldr	r3, [pc, #516]	; (8008c20 <HAL_RCC_OscConfig+0x4f8>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d0f0      	beq.n	8008a06 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	68db      	ldr	r3, [r3, #12]
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	d106      	bne.n	8008a3a <HAL_RCC_OscConfig+0x312>
 8008a2c:	4b7b      	ldr	r3, [pc, #492]	; (8008c1c <HAL_RCC_OscConfig+0x4f4>)
 8008a2e:	6a1b      	ldr	r3, [r3, #32]
 8008a30:	4a7a      	ldr	r2, [pc, #488]	; (8008c1c <HAL_RCC_OscConfig+0x4f4>)
 8008a32:	f043 0301 	orr.w	r3, r3, #1
 8008a36:	6213      	str	r3, [r2, #32]
 8008a38:	e02d      	b.n	8008a96 <HAL_RCC_OscConfig+0x36e>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	68db      	ldr	r3, [r3, #12]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d10c      	bne.n	8008a5c <HAL_RCC_OscConfig+0x334>
 8008a42:	4b76      	ldr	r3, [pc, #472]	; (8008c1c <HAL_RCC_OscConfig+0x4f4>)
 8008a44:	6a1b      	ldr	r3, [r3, #32]
 8008a46:	4a75      	ldr	r2, [pc, #468]	; (8008c1c <HAL_RCC_OscConfig+0x4f4>)
 8008a48:	f023 0301 	bic.w	r3, r3, #1
 8008a4c:	6213      	str	r3, [r2, #32]
 8008a4e:	4b73      	ldr	r3, [pc, #460]	; (8008c1c <HAL_RCC_OscConfig+0x4f4>)
 8008a50:	6a1b      	ldr	r3, [r3, #32]
 8008a52:	4a72      	ldr	r2, [pc, #456]	; (8008c1c <HAL_RCC_OscConfig+0x4f4>)
 8008a54:	f023 0304 	bic.w	r3, r3, #4
 8008a58:	6213      	str	r3, [r2, #32]
 8008a5a:	e01c      	b.n	8008a96 <HAL_RCC_OscConfig+0x36e>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	68db      	ldr	r3, [r3, #12]
 8008a60:	2b05      	cmp	r3, #5
 8008a62:	d10c      	bne.n	8008a7e <HAL_RCC_OscConfig+0x356>
 8008a64:	4b6d      	ldr	r3, [pc, #436]	; (8008c1c <HAL_RCC_OscConfig+0x4f4>)
 8008a66:	6a1b      	ldr	r3, [r3, #32]
 8008a68:	4a6c      	ldr	r2, [pc, #432]	; (8008c1c <HAL_RCC_OscConfig+0x4f4>)
 8008a6a:	f043 0304 	orr.w	r3, r3, #4
 8008a6e:	6213      	str	r3, [r2, #32]
 8008a70:	4b6a      	ldr	r3, [pc, #424]	; (8008c1c <HAL_RCC_OscConfig+0x4f4>)
 8008a72:	6a1b      	ldr	r3, [r3, #32]
 8008a74:	4a69      	ldr	r2, [pc, #420]	; (8008c1c <HAL_RCC_OscConfig+0x4f4>)
 8008a76:	f043 0301 	orr.w	r3, r3, #1
 8008a7a:	6213      	str	r3, [r2, #32]
 8008a7c:	e00b      	b.n	8008a96 <HAL_RCC_OscConfig+0x36e>
 8008a7e:	4b67      	ldr	r3, [pc, #412]	; (8008c1c <HAL_RCC_OscConfig+0x4f4>)
 8008a80:	6a1b      	ldr	r3, [r3, #32]
 8008a82:	4a66      	ldr	r2, [pc, #408]	; (8008c1c <HAL_RCC_OscConfig+0x4f4>)
 8008a84:	f023 0301 	bic.w	r3, r3, #1
 8008a88:	6213      	str	r3, [r2, #32]
 8008a8a:	4b64      	ldr	r3, [pc, #400]	; (8008c1c <HAL_RCC_OscConfig+0x4f4>)
 8008a8c:	6a1b      	ldr	r3, [r3, #32]
 8008a8e:	4a63      	ldr	r2, [pc, #396]	; (8008c1c <HAL_RCC_OscConfig+0x4f4>)
 8008a90:	f023 0304 	bic.w	r3, r3, #4
 8008a94:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	68db      	ldr	r3, [r3, #12]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d015      	beq.n	8008aca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008a9e:	f7fe fea9 	bl	80077f4 <HAL_GetTick>
 8008aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008aa4:	e00a      	b.n	8008abc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008aa6:	f7fe fea5 	bl	80077f4 <HAL_GetTick>
 8008aaa:	4602      	mov	r2, r0
 8008aac:	693b      	ldr	r3, [r7, #16]
 8008aae:	1ad3      	subs	r3, r2, r3
 8008ab0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d901      	bls.n	8008abc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8008ab8:	2303      	movs	r3, #3
 8008aba:	e0ab      	b.n	8008c14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008abc:	4b57      	ldr	r3, [pc, #348]	; (8008c1c <HAL_RCC_OscConfig+0x4f4>)
 8008abe:	6a1b      	ldr	r3, [r3, #32]
 8008ac0:	f003 0302 	and.w	r3, r3, #2
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d0ee      	beq.n	8008aa6 <HAL_RCC_OscConfig+0x37e>
 8008ac8:	e014      	b.n	8008af4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008aca:	f7fe fe93 	bl	80077f4 <HAL_GetTick>
 8008ace:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008ad0:	e00a      	b.n	8008ae8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ad2:	f7fe fe8f 	bl	80077f4 <HAL_GetTick>
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	693b      	ldr	r3, [r7, #16]
 8008ada:	1ad3      	subs	r3, r2, r3
 8008adc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d901      	bls.n	8008ae8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8008ae4:	2303      	movs	r3, #3
 8008ae6:	e095      	b.n	8008c14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008ae8:	4b4c      	ldr	r3, [pc, #304]	; (8008c1c <HAL_RCC_OscConfig+0x4f4>)
 8008aea:	6a1b      	ldr	r3, [r3, #32]
 8008aec:	f003 0302 	and.w	r3, r3, #2
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d1ee      	bne.n	8008ad2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008af4:	7dfb      	ldrb	r3, [r7, #23]
 8008af6:	2b01      	cmp	r3, #1
 8008af8:	d105      	bne.n	8008b06 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008afa:	4b48      	ldr	r3, [pc, #288]	; (8008c1c <HAL_RCC_OscConfig+0x4f4>)
 8008afc:	69db      	ldr	r3, [r3, #28]
 8008afe:	4a47      	ldr	r2, [pc, #284]	; (8008c1c <HAL_RCC_OscConfig+0x4f4>)
 8008b00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b04:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	69db      	ldr	r3, [r3, #28]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	f000 8081 	beq.w	8008c12 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008b10:	4b42      	ldr	r3, [pc, #264]	; (8008c1c <HAL_RCC_OscConfig+0x4f4>)
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	f003 030c 	and.w	r3, r3, #12
 8008b18:	2b08      	cmp	r3, #8
 8008b1a:	d061      	beq.n	8008be0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	69db      	ldr	r3, [r3, #28]
 8008b20:	2b02      	cmp	r3, #2
 8008b22:	d146      	bne.n	8008bb2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b24:	4b3f      	ldr	r3, [pc, #252]	; (8008c24 <HAL_RCC_OscConfig+0x4fc>)
 8008b26:	2200      	movs	r2, #0
 8008b28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b2a:	f7fe fe63 	bl	80077f4 <HAL_GetTick>
 8008b2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008b30:	e008      	b.n	8008b44 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b32:	f7fe fe5f 	bl	80077f4 <HAL_GetTick>
 8008b36:	4602      	mov	r2, r0
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	1ad3      	subs	r3, r2, r3
 8008b3c:	2b02      	cmp	r3, #2
 8008b3e:	d901      	bls.n	8008b44 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8008b40:	2303      	movs	r3, #3
 8008b42:	e067      	b.n	8008c14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008b44:	4b35      	ldr	r3, [pc, #212]	; (8008c1c <HAL_RCC_OscConfig+0x4f4>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d1f0      	bne.n	8008b32 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6a1b      	ldr	r3, [r3, #32]
 8008b54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b58:	d108      	bne.n	8008b6c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008b5a:	4b30      	ldr	r3, [pc, #192]	; (8008c1c <HAL_RCC_OscConfig+0x4f4>)
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	689b      	ldr	r3, [r3, #8]
 8008b66:	492d      	ldr	r1, [pc, #180]	; (8008c1c <HAL_RCC_OscConfig+0x4f4>)
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008b6c:	4b2b      	ldr	r3, [pc, #172]	; (8008c1c <HAL_RCC_OscConfig+0x4f4>)
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6a19      	ldr	r1, [r3, #32]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b7c:	430b      	orrs	r3, r1
 8008b7e:	4927      	ldr	r1, [pc, #156]	; (8008c1c <HAL_RCC_OscConfig+0x4f4>)
 8008b80:	4313      	orrs	r3, r2
 8008b82:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008b84:	4b27      	ldr	r3, [pc, #156]	; (8008c24 <HAL_RCC_OscConfig+0x4fc>)
 8008b86:	2201      	movs	r2, #1
 8008b88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b8a:	f7fe fe33 	bl	80077f4 <HAL_GetTick>
 8008b8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008b90:	e008      	b.n	8008ba4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b92:	f7fe fe2f 	bl	80077f4 <HAL_GetTick>
 8008b96:	4602      	mov	r2, r0
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	1ad3      	subs	r3, r2, r3
 8008b9c:	2b02      	cmp	r3, #2
 8008b9e:	d901      	bls.n	8008ba4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8008ba0:	2303      	movs	r3, #3
 8008ba2:	e037      	b.n	8008c14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008ba4:	4b1d      	ldr	r3, [pc, #116]	; (8008c1c <HAL_RCC_OscConfig+0x4f4>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d0f0      	beq.n	8008b92 <HAL_RCC_OscConfig+0x46a>
 8008bb0:	e02f      	b.n	8008c12 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008bb2:	4b1c      	ldr	r3, [pc, #112]	; (8008c24 <HAL_RCC_OscConfig+0x4fc>)
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bb8:	f7fe fe1c 	bl	80077f4 <HAL_GetTick>
 8008bbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008bbe:	e008      	b.n	8008bd2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008bc0:	f7fe fe18 	bl	80077f4 <HAL_GetTick>
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	1ad3      	subs	r3, r2, r3
 8008bca:	2b02      	cmp	r3, #2
 8008bcc:	d901      	bls.n	8008bd2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8008bce:	2303      	movs	r3, #3
 8008bd0:	e020      	b.n	8008c14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008bd2:	4b12      	ldr	r3, [pc, #72]	; (8008c1c <HAL_RCC_OscConfig+0x4f4>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d1f0      	bne.n	8008bc0 <HAL_RCC_OscConfig+0x498>
 8008bde:	e018      	b.n	8008c12 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	69db      	ldr	r3, [r3, #28]
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	d101      	bne.n	8008bec <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8008be8:	2301      	movs	r3, #1
 8008bea:	e013      	b.n	8008c14 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008bec:	4b0b      	ldr	r3, [pc, #44]	; (8008c1c <HAL_RCC_OscConfig+0x4f4>)
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6a1b      	ldr	r3, [r3, #32]
 8008bfc:	429a      	cmp	r2, r3
 8008bfe:	d106      	bne.n	8008c0e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c0a:	429a      	cmp	r2, r3
 8008c0c:	d001      	beq.n	8008c12 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	e000      	b.n	8008c14 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8008c12:	2300      	movs	r3, #0
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3718      	adds	r7, #24
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}
 8008c1c:	40021000 	.word	0x40021000
 8008c20:	40007000 	.word	0x40007000
 8008c24:	42420060 	.word	0x42420060

08008c28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b084      	sub	sp, #16
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d101      	bne.n	8008c3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	e0d0      	b.n	8008dde <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008c3c:	4b6a      	ldr	r3, [pc, #424]	; (8008de8 <HAL_RCC_ClockConfig+0x1c0>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f003 0307 	and.w	r3, r3, #7
 8008c44:	683a      	ldr	r2, [r7, #0]
 8008c46:	429a      	cmp	r2, r3
 8008c48:	d910      	bls.n	8008c6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c4a:	4b67      	ldr	r3, [pc, #412]	; (8008de8 <HAL_RCC_ClockConfig+0x1c0>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f023 0207 	bic.w	r2, r3, #7
 8008c52:	4965      	ldr	r1, [pc, #404]	; (8008de8 <HAL_RCC_ClockConfig+0x1c0>)
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	4313      	orrs	r3, r2
 8008c58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c5a:	4b63      	ldr	r3, [pc, #396]	; (8008de8 <HAL_RCC_ClockConfig+0x1c0>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f003 0307 	and.w	r3, r3, #7
 8008c62:	683a      	ldr	r2, [r7, #0]
 8008c64:	429a      	cmp	r2, r3
 8008c66:	d001      	beq.n	8008c6c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8008c68:	2301      	movs	r3, #1
 8008c6a:	e0b8      	b.n	8008dde <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f003 0302 	and.w	r3, r3, #2
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d020      	beq.n	8008cba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f003 0304 	and.w	r3, r3, #4
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d005      	beq.n	8008c90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008c84:	4b59      	ldr	r3, [pc, #356]	; (8008dec <HAL_RCC_ClockConfig+0x1c4>)
 8008c86:	685b      	ldr	r3, [r3, #4]
 8008c88:	4a58      	ldr	r2, [pc, #352]	; (8008dec <HAL_RCC_ClockConfig+0x1c4>)
 8008c8a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008c8e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f003 0308 	and.w	r3, r3, #8
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d005      	beq.n	8008ca8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008c9c:	4b53      	ldr	r3, [pc, #332]	; (8008dec <HAL_RCC_ClockConfig+0x1c4>)
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	4a52      	ldr	r2, [pc, #328]	; (8008dec <HAL_RCC_ClockConfig+0x1c4>)
 8008ca2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8008ca6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008ca8:	4b50      	ldr	r3, [pc, #320]	; (8008dec <HAL_RCC_ClockConfig+0x1c4>)
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	689b      	ldr	r3, [r3, #8]
 8008cb4:	494d      	ldr	r1, [pc, #308]	; (8008dec <HAL_RCC_ClockConfig+0x1c4>)
 8008cb6:	4313      	orrs	r3, r2
 8008cb8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f003 0301 	and.w	r3, r3, #1
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d040      	beq.n	8008d48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	685b      	ldr	r3, [r3, #4]
 8008cca:	2b01      	cmp	r3, #1
 8008ccc:	d107      	bne.n	8008cde <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008cce:	4b47      	ldr	r3, [pc, #284]	; (8008dec <HAL_RCC_ClockConfig+0x1c4>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d115      	bne.n	8008d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	e07f      	b.n	8008dde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	2b02      	cmp	r3, #2
 8008ce4:	d107      	bne.n	8008cf6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008ce6:	4b41      	ldr	r3, [pc, #260]	; (8008dec <HAL_RCC_ClockConfig+0x1c4>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d109      	bne.n	8008d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	e073      	b.n	8008dde <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008cf6:	4b3d      	ldr	r3, [pc, #244]	; (8008dec <HAL_RCC_ClockConfig+0x1c4>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f003 0302 	and.w	r3, r3, #2
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d101      	bne.n	8008d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008d02:	2301      	movs	r3, #1
 8008d04:	e06b      	b.n	8008dde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008d06:	4b39      	ldr	r3, [pc, #228]	; (8008dec <HAL_RCC_ClockConfig+0x1c4>)
 8008d08:	685b      	ldr	r3, [r3, #4]
 8008d0a:	f023 0203 	bic.w	r2, r3, #3
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	685b      	ldr	r3, [r3, #4]
 8008d12:	4936      	ldr	r1, [pc, #216]	; (8008dec <HAL_RCC_ClockConfig+0x1c4>)
 8008d14:	4313      	orrs	r3, r2
 8008d16:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008d18:	f7fe fd6c 	bl	80077f4 <HAL_GetTick>
 8008d1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d1e:	e00a      	b.n	8008d36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d20:	f7fe fd68 	bl	80077f4 <HAL_GetTick>
 8008d24:	4602      	mov	r2, r0
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	1ad3      	subs	r3, r2, r3
 8008d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d901      	bls.n	8008d36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008d32:	2303      	movs	r3, #3
 8008d34:	e053      	b.n	8008dde <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d36:	4b2d      	ldr	r3, [pc, #180]	; (8008dec <HAL_RCC_ClockConfig+0x1c4>)
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	f003 020c 	and.w	r2, r3, #12
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	685b      	ldr	r3, [r3, #4]
 8008d42:	009b      	lsls	r3, r3, #2
 8008d44:	429a      	cmp	r2, r3
 8008d46:	d1eb      	bne.n	8008d20 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008d48:	4b27      	ldr	r3, [pc, #156]	; (8008de8 <HAL_RCC_ClockConfig+0x1c0>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f003 0307 	and.w	r3, r3, #7
 8008d50:	683a      	ldr	r2, [r7, #0]
 8008d52:	429a      	cmp	r2, r3
 8008d54:	d210      	bcs.n	8008d78 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d56:	4b24      	ldr	r3, [pc, #144]	; (8008de8 <HAL_RCC_ClockConfig+0x1c0>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f023 0207 	bic.w	r2, r3, #7
 8008d5e:	4922      	ldr	r1, [pc, #136]	; (8008de8 <HAL_RCC_ClockConfig+0x1c0>)
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	4313      	orrs	r3, r2
 8008d64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d66:	4b20      	ldr	r3, [pc, #128]	; (8008de8 <HAL_RCC_ClockConfig+0x1c0>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f003 0307 	and.w	r3, r3, #7
 8008d6e:	683a      	ldr	r2, [r7, #0]
 8008d70:	429a      	cmp	r2, r3
 8008d72:	d001      	beq.n	8008d78 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8008d74:	2301      	movs	r3, #1
 8008d76:	e032      	b.n	8008dde <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f003 0304 	and.w	r3, r3, #4
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d008      	beq.n	8008d96 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008d84:	4b19      	ldr	r3, [pc, #100]	; (8008dec <HAL_RCC_ClockConfig+0x1c4>)
 8008d86:	685b      	ldr	r3, [r3, #4]
 8008d88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	68db      	ldr	r3, [r3, #12]
 8008d90:	4916      	ldr	r1, [pc, #88]	; (8008dec <HAL_RCC_ClockConfig+0x1c4>)
 8008d92:	4313      	orrs	r3, r2
 8008d94:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f003 0308 	and.w	r3, r3, #8
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d009      	beq.n	8008db6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008da2:	4b12      	ldr	r3, [pc, #72]	; (8008dec <HAL_RCC_ClockConfig+0x1c4>)
 8008da4:	685b      	ldr	r3, [r3, #4]
 8008da6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	691b      	ldr	r3, [r3, #16]
 8008dae:	00db      	lsls	r3, r3, #3
 8008db0:	490e      	ldr	r1, [pc, #56]	; (8008dec <HAL_RCC_ClockConfig+0x1c4>)
 8008db2:	4313      	orrs	r3, r2
 8008db4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008db6:	f000 f821 	bl	8008dfc <HAL_RCC_GetSysClockFreq>
 8008dba:	4602      	mov	r2, r0
 8008dbc:	4b0b      	ldr	r3, [pc, #44]	; (8008dec <HAL_RCC_ClockConfig+0x1c4>)
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	091b      	lsrs	r3, r3, #4
 8008dc2:	f003 030f 	and.w	r3, r3, #15
 8008dc6:	490a      	ldr	r1, [pc, #40]	; (8008df0 <HAL_RCC_ClockConfig+0x1c8>)
 8008dc8:	5ccb      	ldrb	r3, [r1, r3]
 8008dca:	fa22 f303 	lsr.w	r3, r2, r3
 8008dce:	4a09      	ldr	r2, [pc, #36]	; (8008df4 <HAL_RCC_ClockConfig+0x1cc>)
 8008dd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008dd2:	4b09      	ldr	r3, [pc, #36]	; (8008df8 <HAL_RCC_ClockConfig+0x1d0>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f7fe fcca 	bl	8007770 <HAL_InitTick>

  return HAL_OK;
 8008ddc:	2300      	movs	r3, #0
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	3710      	adds	r7, #16
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}
 8008de6:	bf00      	nop
 8008de8:	40022000 	.word	0x40022000
 8008dec:	40021000 	.word	0x40021000
 8008df0:	0800cd40 	.word	0x0800cd40
 8008df4:	2000003c 	.word	0x2000003c
 8008df8:	20000040 	.word	0x20000040

08008dfc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008dfc:	b490      	push	{r4, r7}
 8008dfe:	b08a      	sub	sp, #40	; 0x28
 8008e00:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8008e02:	4b2a      	ldr	r3, [pc, #168]	; (8008eac <HAL_RCC_GetSysClockFreq+0xb0>)
 8008e04:	1d3c      	adds	r4, r7, #4
 8008e06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008e08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8008e0c:	f240 2301 	movw	r3, #513	; 0x201
 8008e10:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008e12:	2300      	movs	r3, #0
 8008e14:	61fb      	str	r3, [r7, #28]
 8008e16:	2300      	movs	r3, #0
 8008e18:	61bb      	str	r3, [r7, #24]
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	627b      	str	r3, [r7, #36]	; 0x24
 8008e1e:	2300      	movs	r3, #0
 8008e20:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8008e22:	2300      	movs	r3, #0
 8008e24:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8008e26:	4b22      	ldr	r3, [pc, #136]	; (8008eb0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008e2c:	69fb      	ldr	r3, [r7, #28]
 8008e2e:	f003 030c 	and.w	r3, r3, #12
 8008e32:	2b04      	cmp	r3, #4
 8008e34:	d002      	beq.n	8008e3c <HAL_RCC_GetSysClockFreq+0x40>
 8008e36:	2b08      	cmp	r3, #8
 8008e38:	d003      	beq.n	8008e42 <HAL_RCC_GetSysClockFreq+0x46>
 8008e3a:	e02d      	b.n	8008e98 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008e3c:	4b1d      	ldr	r3, [pc, #116]	; (8008eb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008e3e:	623b      	str	r3, [r7, #32]
      break;
 8008e40:	e02d      	b.n	8008e9e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008e42:	69fb      	ldr	r3, [r7, #28]
 8008e44:	0c9b      	lsrs	r3, r3, #18
 8008e46:	f003 030f 	and.w	r3, r3, #15
 8008e4a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008e4e:	4413      	add	r3, r2
 8008e50:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8008e54:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008e56:	69fb      	ldr	r3, [r7, #28]
 8008e58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d013      	beq.n	8008e88 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008e60:	4b13      	ldr	r3, [pc, #76]	; (8008eb0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	0c5b      	lsrs	r3, r3, #17
 8008e66:	f003 0301 	and.w	r3, r3, #1
 8008e6a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008e6e:	4413      	add	r3, r2
 8008e70:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008e74:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	4a0e      	ldr	r2, [pc, #56]	; (8008eb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008e7a:	fb02 f203 	mul.w	r2, r2, r3
 8008e7e:	69bb      	ldr	r3, [r7, #24]
 8008e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e84:	627b      	str	r3, [r7, #36]	; 0x24
 8008e86:	e004      	b.n	8008e92 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	4a0b      	ldr	r2, [pc, #44]	; (8008eb8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008e8c:	fb02 f303 	mul.w	r3, r2, r3
 8008e90:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8008e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e94:	623b      	str	r3, [r7, #32]
      break;
 8008e96:	e002      	b.n	8008e9e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008e98:	4b06      	ldr	r3, [pc, #24]	; (8008eb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008e9a:	623b      	str	r3, [r7, #32]
      break;
 8008e9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008e9e:	6a3b      	ldr	r3, [r7, #32]
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3728      	adds	r7, #40	; 0x28
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bc90      	pop	{r4, r7}
 8008ea8:	4770      	bx	lr
 8008eaa:	bf00      	nop
 8008eac:	0800b570 	.word	0x0800b570
 8008eb0:	40021000 	.word	0x40021000
 8008eb4:	007a1200 	.word	0x007a1200
 8008eb8:	003d0900 	.word	0x003d0900

08008ebc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008ec0:	4b02      	ldr	r3, [pc, #8]	; (8008ecc <HAL_RCC_GetHCLKFreq+0x10>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bc80      	pop	{r7}
 8008eca:	4770      	bx	lr
 8008ecc:	2000003c 	.word	0x2000003c

08008ed0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008ed4:	f7ff fff2 	bl	8008ebc <HAL_RCC_GetHCLKFreq>
 8008ed8:	4602      	mov	r2, r0
 8008eda:	4b05      	ldr	r3, [pc, #20]	; (8008ef0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	0a1b      	lsrs	r3, r3, #8
 8008ee0:	f003 0307 	and.w	r3, r3, #7
 8008ee4:	4903      	ldr	r1, [pc, #12]	; (8008ef4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008ee6:	5ccb      	ldrb	r3, [r1, r3]
 8008ee8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	bd80      	pop	{r7, pc}
 8008ef0:	40021000 	.word	0x40021000
 8008ef4:	0800cd50 	.word	0x0800cd50

08008ef8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008efc:	f7ff ffde 	bl	8008ebc <HAL_RCC_GetHCLKFreq>
 8008f00:	4602      	mov	r2, r0
 8008f02:	4b05      	ldr	r3, [pc, #20]	; (8008f18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	0adb      	lsrs	r3, r3, #11
 8008f08:	f003 0307 	and.w	r3, r3, #7
 8008f0c:	4903      	ldr	r1, [pc, #12]	; (8008f1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008f0e:	5ccb      	ldrb	r3, [r1, r3]
 8008f10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	bd80      	pop	{r7, pc}
 8008f18:	40021000 	.word	0x40021000
 8008f1c:	0800cd50 	.word	0x0800cd50

08008f20 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b085      	sub	sp, #20
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008f28:	4b0a      	ldr	r3, [pc, #40]	; (8008f54 <RCC_Delay+0x34>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	4a0a      	ldr	r2, [pc, #40]	; (8008f58 <RCC_Delay+0x38>)
 8008f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8008f32:	0a5b      	lsrs	r3, r3, #9
 8008f34:	687a      	ldr	r2, [r7, #4]
 8008f36:	fb02 f303 	mul.w	r3, r2, r3
 8008f3a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8008f3c:	bf00      	nop
  }
  while (Delay --);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	1e5a      	subs	r2, r3, #1
 8008f42:	60fa      	str	r2, [r7, #12]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d1f9      	bne.n	8008f3c <RCC_Delay+0x1c>
}
 8008f48:	bf00      	nop
 8008f4a:	bf00      	nop
 8008f4c:	3714      	adds	r7, #20
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bc80      	pop	{r7}
 8008f52:	4770      	bx	lr
 8008f54:	2000003c 	.word	0x2000003c
 8008f58:	10624dd3 	.word	0x10624dd3

08008f5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b082      	sub	sp, #8
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d101      	bne.n	8008f6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	e041      	b.n	8008ff2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f74:	b2db      	uxtb	r3, r3
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d106      	bne.n	8008f88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f7fe fa3c 	bl	8007400 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2202      	movs	r2, #2
 8008f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681a      	ldr	r2, [r3, #0]
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	3304      	adds	r3, #4
 8008f98:	4619      	mov	r1, r3
 8008f9a:	4610      	mov	r0, r2
 8008f9c:	f000 faac 	bl	80094f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2201      	movs	r2, #1
 8008fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2201      	movs	r2, #1
 8008fbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2201      	movs	r2, #1
 8008fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2201      	movs	r2, #1
 8008fcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2201      	movs	r2, #1
 8008fd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2201      	movs	r2, #1
 8008fdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2201      	movs	r2, #1
 8008fe4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2201      	movs	r2, #1
 8008fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008ff0:	2300      	movs	r3, #0
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3708      	adds	r7, #8
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}
	...

08008ffc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b085      	sub	sp, #20
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800900a:	b2db      	uxtb	r3, r3
 800900c:	2b01      	cmp	r3, #1
 800900e:	d001      	beq.n	8009014 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009010:	2301      	movs	r3, #1
 8009012:	e044      	b.n	800909e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2202      	movs	r2, #2
 8009018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	68da      	ldr	r2, [r3, #12]
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f042 0201 	orr.w	r2, r2, #1
 800902a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4a1d      	ldr	r2, [pc, #116]	; (80090a8 <HAL_TIM_Base_Start_IT+0xac>)
 8009032:	4293      	cmp	r3, r2
 8009034:	d018      	beq.n	8009068 <HAL_TIM_Base_Start_IT+0x6c>
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	4a1c      	ldr	r2, [pc, #112]	; (80090ac <HAL_TIM_Base_Start_IT+0xb0>)
 800903c:	4293      	cmp	r3, r2
 800903e:	d013      	beq.n	8009068 <HAL_TIM_Base_Start_IT+0x6c>
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009048:	d00e      	beq.n	8009068 <HAL_TIM_Base_Start_IT+0x6c>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	4a18      	ldr	r2, [pc, #96]	; (80090b0 <HAL_TIM_Base_Start_IT+0xb4>)
 8009050:	4293      	cmp	r3, r2
 8009052:	d009      	beq.n	8009068 <HAL_TIM_Base_Start_IT+0x6c>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	4a16      	ldr	r2, [pc, #88]	; (80090b4 <HAL_TIM_Base_Start_IT+0xb8>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d004      	beq.n	8009068 <HAL_TIM_Base_Start_IT+0x6c>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	4a15      	ldr	r2, [pc, #84]	; (80090b8 <HAL_TIM_Base_Start_IT+0xbc>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d111      	bne.n	800908c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	689b      	ldr	r3, [r3, #8]
 800906e:	f003 0307 	and.w	r3, r3, #7
 8009072:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	2b06      	cmp	r3, #6
 8009078:	d010      	beq.n	800909c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	681a      	ldr	r2, [r3, #0]
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f042 0201 	orr.w	r2, r2, #1
 8009088:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800908a:	e007      	b.n	800909c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	681a      	ldr	r2, [r3, #0]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f042 0201 	orr.w	r2, r2, #1
 800909a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800909c:	2300      	movs	r3, #0
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3714      	adds	r7, #20
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bc80      	pop	{r7}
 80090a6:	4770      	bx	lr
 80090a8:	40012c00 	.word	0x40012c00
 80090ac:	40013400 	.word	0x40013400
 80090b0:	40000400 	.word	0x40000400
 80090b4:	40000800 	.word	0x40000800
 80090b8:	40000c00 	.word	0x40000c00

080090bc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80090bc:	b480      	push	{r7}
 80090be:	b083      	sub	sp, #12
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	68da      	ldr	r2, [r3, #12]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f022 0201 	bic.w	r2, r2, #1
 80090d2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	6a1a      	ldr	r2, [r3, #32]
 80090da:	f241 1311 	movw	r3, #4369	; 0x1111
 80090de:	4013      	ands	r3, r2
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d10f      	bne.n	8009104 <HAL_TIM_Base_Stop_IT+0x48>
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	6a1a      	ldr	r2, [r3, #32]
 80090ea:	f240 4344 	movw	r3, #1092	; 0x444
 80090ee:	4013      	ands	r3, r2
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d107      	bne.n	8009104 <HAL_TIM_Base_Stop_IT+0x48>
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	681a      	ldr	r2, [r3, #0]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f022 0201 	bic.w	r2, r2, #1
 8009102:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2201      	movs	r2, #1
 8009108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800910c:	2300      	movs	r3, #0
}
 800910e:	4618      	mov	r0, r3
 8009110:	370c      	adds	r7, #12
 8009112:	46bd      	mov	sp, r7
 8009114:	bc80      	pop	{r7}
 8009116:	4770      	bx	lr

08009118 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	691b      	ldr	r3, [r3, #16]
 8009126:	f003 0302 	and.w	r3, r3, #2
 800912a:	2b02      	cmp	r3, #2
 800912c:	d122      	bne.n	8009174 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	68db      	ldr	r3, [r3, #12]
 8009134:	f003 0302 	and.w	r3, r3, #2
 8009138:	2b02      	cmp	r3, #2
 800913a:	d11b      	bne.n	8009174 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f06f 0202 	mvn.w	r2, #2
 8009144:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2201      	movs	r2, #1
 800914a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	699b      	ldr	r3, [r3, #24]
 8009152:	f003 0303 	and.w	r3, r3, #3
 8009156:	2b00      	cmp	r3, #0
 8009158:	d003      	beq.n	8009162 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f000 f9b1 	bl	80094c2 <HAL_TIM_IC_CaptureCallback>
 8009160:	e005      	b.n	800916e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f000 f9a4 	bl	80094b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f000 f9b3 	bl	80094d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2200      	movs	r2, #0
 8009172:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	691b      	ldr	r3, [r3, #16]
 800917a:	f003 0304 	and.w	r3, r3, #4
 800917e:	2b04      	cmp	r3, #4
 8009180:	d122      	bne.n	80091c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	68db      	ldr	r3, [r3, #12]
 8009188:	f003 0304 	and.w	r3, r3, #4
 800918c:	2b04      	cmp	r3, #4
 800918e:	d11b      	bne.n	80091c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f06f 0204 	mvn.w	r2, #4
 8009198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2202      	movs	r2, #2
 800919e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	699b      	ldr	r3, [r3, #24]
 80091a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d003      	beq.n	80091b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f000 f987 	bl	80094c2 <HAL_TIM_IC_CaptureCallback>
 80091b4:	e005      	b.n	80091c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f000 f97a 	bl	80094b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f000 f989 	bl	80094d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2200      	movs	r2, #0
 80091c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	691b      	ldr	r3, [r3, #16]
 80091ce:	f003 0308 	and.w	r3, r3, #8
 80091d2:	2b08      	cmp	r3, #8
 80091d4:	d122      	bne.n	800921c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	68db      	ldr	r3, [r3, #12]
 80091dc:	f003 0308 	and.w	r3, r3, #8
 80091e0:	2b08      	cmp	r3, #8
 80091e2:	d11b      	bne.n	800921c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f06f 0208 	mvn.w	r2, #8
 80091ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2204      	movs	r2, #4
 80091f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	69db      	ldr	r3, [r3, #28]
 80091fa:	f003 0303 	and.w	r3, r3, #3
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d003      	beq.n	800920a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 f95d 	bl	80094c2 <HAL_TIM_IC_CaptureCallback>
 8009208:	e005      	b.n	8009216 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 f950 	bl	80094b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f000 f95f 	bl	80094d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2200      	movs	r2, #0
 800921a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	691b      	ldr	r3, [r3, #16]
 8009222:	f003 0310 	and.w	r3, r3, #16
 8009226:	2b10      	cmp	r3, #16
 8009228:	d122      	bne.n	8009270 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	68db      	ldr	r3, [r3, #12]
 8009230:	f003 0310 	and.w	r3, r3, #16
 8009234:	2b10      	cmp	r3, #16
 8009236:	d11b      	bne.n	8009270 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f06f 0210 	mvn.w	r2, #16
 8009240:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2208      	movs	r2, #8
 8009246:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	69db      	ldr	r3, [r3, #28]
 800924e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009252:	2b00      	cmp	r3, #0
 8009254:	d003      	beq.n	800925e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f000 f933 	bl	80094c2 <HAL_TIM_IC_CaptureCallback>
 800925c:	e005      	b.n	800926a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f000 f926 	bl	80094b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f000 f935 	bl	80094d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2200      	movs	r2, #0
 800926e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	691b      	ldr	r3, [r3, #16]
 8009276:	f003 0301 	and.w	r3, r3, #1
 800927a:	2b01      	cmp	r3, #1
 800927c:	d10e      	bne.n	800929c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	68db      	ldr	r3, [r3, #12]
 8009284:	f003 0301 	and.w	r3, r3, #1
 8009288:	2b01      	cmp	r3, #1
 800928a:	d107      	bne.n	800929c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f06f 0201 	mvn.w	r2, #1
 8009294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f7fd fa12 	bl	80066c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	691b      	ldr	r3, [r3, #16]
 80092a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092a6:	2b80      	cmp	r3, #128	; 0x80
 80092a8:	d10e      	bne.n	80092c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	68db      	ldr	r3, [r3, #12]
 80092b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092b4:	2b80      	cmp	r3, #128	; 0x80
 80092b6:	d107      	bne.n	80092c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80092c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f000 fa9d 	bl	8009802 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	691b      	ldr	r3, [r3, #16]
 80092ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092d2:	2b40      	cmp	r3, #64	; 0x40
 80092d4:	d10e      	bne.n	80092f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	68db      	ldr	r3, [r3, #12]
 80092dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092e0:	2b40      	cmp	r3, #64	; 0x40
 80092e2:	d107      	bne.n	80092f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80092ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f000 f8f9 	bl	80094e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	691b      	ldr	r3, [r3, #16]
 80092fa:	f003 0320 	and.w	r3, r3, #32
 80092fe:	2b20      	cmp	r3, #32
 8009300:	d10e      	bne.n	8009320 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	68db      	ldr	r3, [r3, #12]
 8009308:	f003 0320 	and.w	r3, r3, #32
 800930c:	2b20      	cmp	r3, #32
 800930e:	d107      	bne.n	8009320 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f06f 0220 	mvn.w	r2, #32
 8009318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 fa68 	bl	80097f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009320:	bf00      	nop
 8009322:	3708      	adds	r7, #8
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}

08009328 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b084      	sub	sp, #16
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009338:	2b01      	cmp	r3, #1
 800933a:	d101      	bne.n	8009340 <HAL_TIM_ConfigClockSource+0x18>
 800933c:	2302      	movs	r3, #2
 800933e:	e0b3      	b.n	80094a8 <HAL_TIM_ConfigClockSource+0x180>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2201      	movs	r2, #1
 8009344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2202      	movs	r2, #2
 800934c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	689b      	ldr	r3, [r3, #8]
 8009356:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800935e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009366:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	68fa      	ldr	r2, [r7, #12]
 800936e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009378:	d03e      	beq.n	80093f8 <HAL_TIM_ConfigClockSource+0xd0>
 800937a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800937e:	f200 8087 	bhi.w	8009490 <HAL_TIM_ConfigClockSource+0x168>
 8009382:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009386:	f000 8085 	beq.w	8009494 <HAL_TIM_ConfigClockSource+0x16c>
 800938a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800938e:	d87f      	bhi.n	8009490 <HAL_TIM_ConfigClockSource+0x168>
 8009390:	2b70      	cmp	r3, #112	; 0x70
 8009392:	d01a      	beq.n	80093ca <HAL_TIM_ConfigClockSource+0xa2>
 8009394:	2b70      	cmp	r3, #112	; 0x70
 8009396:	d87b      	bhi.n	8009490 <HAL_TIM_ConfigClockSource+0x168>
 8009398:	2b60      	cmp	r3, #96	; 0x60
 800939a:	d050      	beq.n	800943e <HAL_TIM_ConfigClockSource+0x116>
 800939c:	2b60      	cmp	r3, #96	; 0x60
 800939e:	d877      	bhi.n	8009490 <HAL_TIM_ConfigClockSource+0x168>
 80093a0:	2b50      	cmp	r3, #80	; 0x50
 80093a2:	d03c      	beq.n	800941e <HAL_TIM_ConfigClockSource+0xf6>
 80093a4:	2b50      	cmp	r3, #80	; 0x50
 80093a6:	d873      	bhi.n	8009490 <HAL_TIM_ConfigClockSource+0x168>
 80093a8:	2b40      	cmp	r3, #64	; 0x40
 80093aa:	d058      	beq.n	800945e <HAL_TIM_ConfigClockSource+0x136>
 80093ac:	2b40      	cmp	r3, #64	; 0x40
 80093ae:	d86f      	bhi.n	8009490 <HAL_TIM_ConfigClockSource+0x168>
 80093b0:	2b30      	cmp	r3, #48	; 0x30
 80093b2:	d064      	beq.n	800947e <HAL_TIM_ConfigClockSource+0x156>
 80093b4:	2b30      	cmp	r3, #48	; 0x30
 80093b6:	d86b      	bhi.n	8009490 <HAL_TIM_ConfigClockSource+0x168>
 80093b8:	2b20      	cmp	r3, #32
 80093ba:	d060      	beq.n	800947e <HAL_TIM_ConfigClockSource+0x156>
 80093bc:	2b20      	cmp	r3, #32
 80093be:	d867      	bhi.n	8009490 <HAL_TIM_ConfigClockSource+0x168>
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d05c      	beq.n	800947e <HAL_TIM_ConfigClockSource+0x156>
 80093c4:	2b10      	cmp	r3, #16
 80093c6:	d05a      	beq.n	800947e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80093c8:	e062      	b.n	8009490 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6818      	ldr	r0, [r3, #0]
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	6899      	ldr	r1, [r3, #8]
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	685a      	ldr	r2, [r3, #4]
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	68db      	ldr	r3, [r3, #12]
 80093da:	f000 f97e 	bl	80096da <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	689b      	ldr	r3, [r3, #8]
 80093e4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80093ec:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	68fa      	ldr	r2, [r7, #12]
 80093f4:	609a      	str	r2, [r3, #8]
      break;
 80093f6:	e04e      	b.n	8009496 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6818      	ldr	r0, [r3, #0]
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	6899      	ldr	r1, [r3, #8]
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	685a      	ldr	r2, [r3, #4]
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	68db      	ldr	r3, [r3, #12]
 8009408:	f000 f967 	bl	80096da <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	689a      	ldr	r2, [r3, #8]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800941a:	609a      	str	r2, [r3, #8]
      break;
 800941c:	e03b      	b.n	8009496 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6818      	ldr	r0, [r3, #0]
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	6859      	ldr	r1, [r3, #4]
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	68db      	ldr	r3, [r3, #12]
 800942a:	461a      	mov	r2, r3
 800942c:	f000 f8de 	bl	80095ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	2150      	movs	r1, #80	; 0x50
 8009436:	4618      	mov	r0, r3
 8009438:	f000 f935 	bl	80096a6 <TIM_ITRx_SetConfig>
      break;
 800943c:	e02b      	b.n	8009496 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6818      	ldr	r0, [r3, #0]
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	6859      	ldr	r1, [r3, #4]
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	68db      	ldr	r3, [r3, #12]
 800944a:	461a      	mov	r2, r3
 800944c:	f000 f8fc 	bl	8009648 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	2160      	movs	r1, #96	; 0x60
 8009456:	4618      	mov	r0, r3
 8009458:	f000 f925 	bl	80096a6 <TIM_ITRx_SetConfig>
      break;
 800945c:	e01b      	b.n	8009496 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6818      	ldr	r0, [r3, #0]
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	6859      	ldr	r1, [r3, #4]
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	68db      	ldr	r3, [r3, #12]
 800946a:	461a      	mov	r2, r3
 800946c:	f000 f8be 	bl	80095ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	2140      	movs	r1, #64	; 0x40
 8009476:	4618      	mov	r0, r3
 8009478:	f000 f915 	bl	80096a6 <TIM_ITRx_SetConfig>
      break;
 800947c:	e00b      	b.n	8009496 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681a      	ldr	r2, [r3, #0]
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4619      	mov	r1, r3
 8009488:	4610      	mov	r0, r2
 800948a:	f000 f90c 	bl	80096a6 <TIM_ITRx_SetConfig>
        break;
 800948e:	e002      	b.n	8009496 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009490:	bf00      	nop
 8009492:	e000      	b.n	8009496 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009494:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2201      	movs	r2, #1
 800949a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2200      	movs	r2, #0
 80094a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80094a6:	2300      	movs	r3, #0
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3710      	adds	r7, #16
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}

080094b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80094b0:	b480      	push	{r7}
 80094b2:	b083      	sub	sp, #12
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80094b8:	bf00      	nop
 80094ba:	370c      	adds	r7, #12
 80094bc:	46bd      	mov	sp, r7
 80094be:	bc80      	pop	{r7}
 80094c0:	4770      	bx	lr

080094c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80094c2:	b480      	push	{r7}
 80094c4:	b083      	sub	sp, #12
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80094ca:	bf00      	nop
 80094cc:	370c      	adds	r7, #12
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bc80      	pop	{r7}
 80094d2:	4770      	bx	lr

080094d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b083      	sub	sp, #12
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80094dc:	bf00      	nop
 80094de:	370c      	adds	r7, #12
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bc80      	pop	{r7}
 80094e4:	4770      	bx	lr

080094e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80094e6:	b480      	push	{r7}
 80094e8:	b083      	sub	sp, #12
 80094ea:	af00      	add	r7, sp, #0
 80094ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80094ee:	bf00      	nop
 80094f0:	370c      	adds	r7, #12
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bc80      	pop	{r7}
 80094f6:	4770      	bx	lr

080094f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b085      	sub	sp, #20
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	4a33      	ldr	r2, [pc, #204]	; (80095d8 <TIM_Base_SetConfig+0xe0>)
 800950c:	4293      	cmp	r3, r2
 800950e:	d013      	beq.n	8009538 <TIM_Base_SetConfig+0x40>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	4a32      	ldr	r2, [pc, #200]	; (80095dc <TIM_Base_SetConfig+0xe4>)
 8009514:	4293      	cmp	r3, r2
 8009516:	d00f      	beq.n	8009538 <TIM_Base_SetConfig+0x40>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800951e:	d00b      	beq.n	8009538 <TIM_Base_SetConfig+0x40>
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	4a2f      	ldr	r2, [pc, #188]	; (80095e0 <TIM_Base_SetConfig+0xe8>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d007      	beq.n	8009538 <TIM_Base_SetConfig+0x40>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	4a2e      	ldr	r2, [pc, #184]	; (80095e4 <TIM_Base_SetConfig+0xec>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d003      	beq.n	8009538 <TIM_Base_SetConfig+0x40>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	4a2d      	ldr	r2, [pc, #180]	; (80095e8 <TIM_Base_SetConfig+0xf0>)
 8009534:	4293      	cmp	r3, r2
 8009536:	d108      	bne.n	800954a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800953e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	685b      	ldr	r3, [r3, #4]
 8009544:	68fa      	ldr	r2, [r7, #12]
 8009546:	4313      	orrs	r3, r2
 8009548:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	4a22      	ldr	r2, [pc, #136]	; (80095d8 <TIM_Base_SetConfig+0xe0>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d013      	beq.n	800957a <TIM_Base_SetConfig+0x82>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	4a21      	ldr	r2, [pc, #132]	; (80095dc <TIM_Base_SetConfig+0xe4>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d00f      	beq.n	800957a <TIM_Base_SetConfig+0x82>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009560:	d00b      	beq.n	800957a <TIM_Base_SetConfig+0x82>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	4a1e      	ldr	r2, [pc, #120]	; (80095e0 <TIM_Base_SetConfig+0xe8>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d007      	beq.n	800957a <TIM_Base_SetConfig+0x82>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	4a1d      	ldr	r2, [pc, #116]	; (80095e4 <TIM_Base_SetConfig+0xec>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d003      	beq.n	800957a <TIM_Base_SetConfig+0x82>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	4a1c      	ldr	r2, [pc, #112]	; (80095e8 <TIM_Base_SetConfig+0xf0>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d108      	bne.n	800958c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009580:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	68db      	ldr	r3, [r3, #12]
 8009586:	68fa      	ldr	r2, [r7, #12]
 8009588:	4313      	orrs	r3, r2
 800958a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	695b      	ldr	r3, [r3, #20]
 8009596:	4313      	orrs	r3, r2
 8009598:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	68fa      	ldr	r2, [r7, #12]
 800959e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	689a      	ldr	r2, [r3, #8]
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	681a      	ldr	r2, [r3, #0]
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	4a09      	ldr	r2, [pc, #36]	; (80095d8 <TIM_Base_SetConfig+0xe0>)
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d003      	beq.n	80095c0 <TIM_Base_SetConfig+0xc8>
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	4a08      	ldr	r2, [pc, #32]	; (80095dc <TIM_Base_SetConfig+0xe4>)
 80095bc:	4293      	cmp	r3, r2
 80095be:	d103      	bne.n	80095c8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	691a      	ldr	r2, [r3, #16]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2201      	movs	r2, #1
 80095cc:	615a      	str	r2, [r3, #20]
}
 80095ce:	bf00      	nop
 80095d0:	3714      	adds	r7, #20
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bc80      	pop	{r7}
 80095d6:	4770      	bx	lr
 80095d8:	40012c00 	.word	0x40012c00
 80095dc:	40013400 	.word	0x40013400
 80095e0:	40000400 	.word	0x40000400
 80095e4:	40000800 	.word	0x40000800
 80095e8:	40000c00 	.word	0x40000c00

080095ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b087      	sub	sp, #28
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	60f8      	str	r0, [r7, #12]
 80095f4:	60b9      	str	r1, [r7, #8]
 80095f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	6a1b      	ldr	r3, [r3, #32]
 80095fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	6a1b      	ldr	r3, [r3, #32]
 8009602:	f023 0201 	bic.w	r2, r3, #1
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	699b      	ldr	r3, [r3, #24]
 800960e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009616:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	011b      	lsls	r3, r3, #4
 800961c:	693a      	ldr	r2, [r7, #16]
 800961e:	4313      	orrs	r3, r2
 8009620:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	f023 030a 	bic.w	r3, r3, #10
 8009628:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800962a:	697a      	ldr	r2, [r7, #20]
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	4313      	orrs	r3, r2
 8009630:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	693a      	ldr	r2, [r7, #16]
 8009636:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	697a      	ldr	r2, [r7, #20]
 800963c:	621a      	str	r2, [r3, #32]
}
 800963e:	bf00      	nop
 8009640:	371c      	adds	r7, #28
 8009642:	46bd      	mov	sp, r7
 8009644:	bc80      	pop	{r7}
 8009646:	4770      	bx	lr

08009648 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009648:	b480      	push	{r7}
 800964a:	b087      	sub	sp, #28
 800964c:	af00      	add	r7, sp, #0
 800964e:	60f8      	str	r0, [r7, #12]
 8009650:	60b9      	str	r1, [r7, #8]
 8009652:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	6a1b      	ldr	r3, [r3, #32]
 8009658:	f023 0210 	bic.w	r2, r3, #16
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	699b      	ldr	r3, [r3, #24]
 8009664:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	6a1b      	ldr	r3, [r3, #32]
 800966a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009672:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	031b      	lsls	r3, r3, #12
 8009678:	697a      	ldr	r2, [r7, #20]
 800967a:	4313      	orrs	r3, r2
 800967c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800967e:	693b      	ldr	r3, [r7, #16]
 8009680:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009684:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	011b      	lsls	r3, r3, #4
 800968a:	693a      	ldr	r2, [r7, #16]
 800968c:	4313      	orrs	r3, r2
 800968e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	697a      	ldr	r2, [r7, #20]
 8009694:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	693a      	ldr	r2, [r7, #16]
 800969a:	621a      	str	r2, [r3, #32]
}
 800969c:	bf00      	nop
 800969e:	371c      	adds	r7, #28
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bc80      	pop	{r7}
 80096a4:	4770      	bx	lr

080096a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80096a6:	b480      	push	{r7}
 80096a8:	b085      	sub	sp, #20
 80096aa:	af00      	add	r7, sp, #0
 80096ac:	6078      	str	r0, [r7, #4]
 80096ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	689b      	ldr	r3, [r3, #8]
 80096b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80096be:	683a      	ldr	r2, [r7, #0]
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	4313      	orrs	r3, r2
 80096c4:	f043 0307 	orr.w	r3, r3, #7
 80096c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	68fa      	ldr	r2, [r7, #12]
 80096ce:	609a      	str	r2, [r3, #8]
}
 80096d0:	bf00      	nop
 80096d2:	3714      	adds	r7, #20
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bc80      	pop	{r7}
 80096d8:	4770      	bx	lr

080096da <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80096da:	b480      	push	{r7}
 80096dc:	b087      	sub	sp, #28
 80096de:	af00      	add	r7, sp, #0
 80096e0:	60f8      	str	r0, [r7, #12]
 80096e2:	60b9      	str	r1, [r7, #8]
 80096e4:	607a      	str	r2, [r7, #4]
 80096e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	689b      	ldr	r3, [r3, #8]
 80096ec:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80096f4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	021a      	lsls	r2, r3, #8
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	431a      	orrs	r2, r3
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	4313      	orrs	r3, r2
 8009702:	697a      	ldr	r2, [r7, #20]
 8009704:	4313      	orrs	r3, r2
 8009706:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	697a      	ldr	r2, [r7, #20]
 800970c:	609a      	str	r2, [r3, #8]
}
 800970e:	bf00      	nop
 8009710:	371c      	adds	r7, #28
 8009712:	46bd      	mov	sp, r7
 8009714:	bc80      	pop	{r7}
 8009716:	4770      	bx	lr

08009718 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009718:	b480      	push	{r7}
 800971a:	b085      	sub	sp, #20
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009728:	2b01      	cmp	r3, #1
 800972a:	d101      	bne.n	8009730 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800972c:	2302      	movs	r3, #2
 800972e:	e050      	b.n	80097d2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2201      	movs	r2, #1
 8009734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2202      	movs	r2, #2
 800973c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	685b      	ldr	r3, [r3, #4]
 8009746:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	689b      	ldr	r3, [r3, #8]
 800974e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009756:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	68fa      	ldr	r2, [r7, #12]
 800975e:	4313      	orrs	r3, r2
 8009760:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	68fa      	ldr	r2, [r7, #12]
 8009768:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	4a1b      	ldr	r2, [pc, #108]	; (80097dc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009770:	4293      	cmp	r3, r2
 8009772:	d018      	beq.n	80097a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	4a19      	ldr	r2, [pc, #100]	; (80097e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d013      	beq.n	80097a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009786:	d00e      	beq.n	80097a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	4a15      	ldr	r2, [pc, #84]	; (80097e4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800978e:	4293      	cmp	r3, r2
 8009790:	d009      	beq.n	80097a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	4a14      	ldr	r2, [pc, #80]	; (80097e8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009798:	4293      	cmp	r3, r2
 800979a:	d004      	beq.n	80097a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	4a12      	ldr	r2, [pc, #72]	; (80097ec <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d10c      	bne.n	80097c0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80097ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	685b      	ldr	r3, [r3, #4]
 80097b2:	68ba      	ldr	r2, [r7, #8]
 80097b4:	4313      	orrs	r3, r2
 80097b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	68ba      	ldr	r2, [r7, #8]
 80097be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2201      	movs	r2, #1
 80097c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2200      	movs	r2, #0
 80097cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80097d0:	2300      	movs	r3, #0
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	3714      	adds	r7, #20
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bc80      	pop	{r7}
 80097da:	4770      	bx	lr
 80097dc:	40012c00 	.word	0x40012c00
 80097e0:	40013400 	.word	0x40013400
 80097e4:	40000400 	.word	0x40000400
 80097e8:	40000800 	.word	0x40000800
 80097ec:	40000c00 	.word	0x40000c00

080097f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b083      	sub	sp, #12
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80097f8:	bf00      	nop
 80097fa:	370c      	adds	r7, #12
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bc80      	pop	{r7}
 8009800:	4770      	bx	lr

08009802 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009802:	b480      	push	{r7}
 8009804:	b083      	sub	sp, #12
 8009806:	af00      	add	r7, sp, #0
 8009808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800980a:	bf00      	nop
 800980c:	370c      	adds	r7, #12
 800980e:	46bd      	mov	sp, r7
 8009810:	bc80      	pop	{r7}
 8009812:	4770      	bx	lr

08009814 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b082      	sub	sp, #8
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d101      	bne.n	8009826 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009822:	2301      	movs	r3, #1
 8009824:	e03f      	b.n	80098a6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800982c:	b2db      	uxtb	r3, r3
 800982e:	2b00      	cmp	r3, #0
 8009830:	d106      	bne.n	8009840 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2200      	movs	r2, #0
 8009836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f7fd fe74 	bl	8007528 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2224      	movs	r2, #36	; 0x24
 8009844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	68da      	ldr	r2, [r3, #12]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009856:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f000 fdd9 	bl	800a410 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	691a      	ldr	r2, [r3, #16]
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800986c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	695a      	ldr	r2, [r3, #20]
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800987c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	68da      	ldr	r2, [r3, #12]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800988c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2200      	movs	r2, #0
 8009892:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2220      	movs	r2, #32
 8009898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2220      	movs	r2, #32
 80098a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80098a4:	2300      	movs	r3, #0
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	3708      	adds	r7, #8
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}

080098ae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80098ae:	b580      	push	{r7, lr}
 80098b0:	b08a      	sub	sp, #40	; 0x28
 80098b2:	af02      	add	r7, sp, #8
 80098b4:	60f8      	str	r0, [r7, #12]
 80098b6:	60b9      	str	r1, [r7, #8]
 80098b8:	603b      	str	r3, [r7, #0]
 80098ba:	4613      	mov	r3, r2
 80098bc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80098be:	2300      	movs	r3, #0
 80098c0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098c8:	b2db      	uxtb	r3, r3
 80098ca:	2b20      	cmp	r3, #32
 80098cc:	d17c      	bne.n	80099c8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d002      	beq.n	80098da <HAL_UART_Transmit+0x2c>
 80098d4:	88fb      	ldrh	r3, [r7, #6]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d101      	bne.n	80098de <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80098da:	2301      	movs	r3, #1
 80098dc:	e075      	b.n	80099ca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098e4:	2b01      	cmp	r3, #1
 80098e6:	d101      	bne.n	80098ec <HAL_UART_Transmit+0x3e>
 80098e8:	2302      	movs	r3, #2
 80098ea:	e06e      	b.n	80099ca <HAL_UART_Transmit+0x11c>
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	2201      	movs	r2, #1
 80098f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	2200      	movs	r2, #0
 80098f8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	2221      	movs	r2, #33	; 0x21
 80098fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009902:	f7fd ff77 	bl	80077f4 <HAL_GetTick>
 8009906:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	88fa      	ldrh	r2, [r7, #6]
 800990c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	88fa      	ldrh	r2, [r7, #6]
 8009912:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	689b      	ldr	r3, [r3, #8]
 8009918:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800991c:	d108      	bne.n	8009930 <HAL_UART_Transmit+0x82>
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	691b      	ldr	r3, [r3, #16]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d104      	bne.n	8009930 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009926:	2300      	movs	r3, #0
 8009928:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	61bb      	str	r3, [r7, #24]
 800992e:	e003      	b.n	8009938 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009934:	2300      	movs	r3, #0
 8009936:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	2200      	movs	r2, #0
 800993c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009940:	e02a      	b.n	8009998 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	9300      	str	r3, [sp, #0]
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	2200      	movs	r2, #0
 800994a:	2180      	movs	r1, #128	; 0x80
 800994c:	68f8      	ldr	r0, [r7, #12]
 800994e:	f000 fb4b 	bl	8009fe8 <UART_WaitOnFlagUntilTimeout>
 8009952:	4603      	mov	r3, r0
 8009954:	2b00      	cmp	r3, #0
 8009956:	d001      	beq.n	800995c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009958:	2303      	movs	r3, #3
 800995a:	e036      	b.n	80099ca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800995c:	69fb      	ldr	r3, [r7, #28]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d10b      	bne.n	800997a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009962:	69bb      	ldr	r3, [r7, #24]
 8009964:	881b      	ldrh	r3, [r3, #0]
 8009966:	461a      	mov	r2, r3
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009970:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009972:	69bb      	ldr	r3, [r7, #24]
 8009974:	3302      	adds	r3, #2
 8009976:	61bb      	str	r3, [r7, #24]
 8009978:	e007      	b.n	800998a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800997a:	69fb      	ldr	r3, [r7, #28]
 800997c:	781a      	ldrb	r2, [r3, #0]
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009984:	69fb      	ldr	r3, [r7, #28]
 8009986:	3301      	adds	r3, #1
 8009988:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800998e:	b29b      	uxth	r3, r3
 8009990:	3b01      	subs	r3, #1
 8009992:	b29a      	uxth	r2, r3
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800999c:	b29b      	uxth	r3, r3
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d1cf      	bne.n	8009942 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	9300      	str	r3, [sp, #0]
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	2200      	movs	r2, #0
 80099aa:	2140      	movs	r1, #64	; 0x40
 80099ac:	68f8      	ldr	r0, [r7, #12]
 80099ae:	f000 fb1b 	bl	8009fe8 <UART_WaitOnFlagUntilTimeout>
 80099b2:	4603      	mov	r3, r0
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d001      	beq.n	80099bc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80099b8:	2303      	movs	r3, #3
 80099ba:	e006      	b.n	80099ca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	2220      	movs	r2, #32
 80099c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80099c4:	2300      	movs	r3, #0
 80099c6:	e000      	b.n	80099ca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80099c8:	2302      	movs	r3, #2
  }
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3720      	adds	r7, #32
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}

080099d2 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80099d2:	b580      	push	{r7, lr}
 80099d4:	b084      	sub	sp, #16
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	60f8      	str	r0, [r7, #12]
 80099da:	60b9      	str	r1, [r7, #8]
 80099dc:	4613      	mov	r3, r2
 80099de:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80099e6:	b2db      	uxtb	r3, r3
 80099e8:	2b20      	cmp	r3, #32
 80099ea:	d11d      	bne.n	8009a28 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d002      	beq.n	80099f8 <HAL_UART_Receive_DMA+0x26>
 80099f2:	88fb      	ldrh	r3, [r7, #6]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d101      	bne.n	80099fc <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80099f8:	2301      	movs	r3, #1
 80099fa:	e016      	b.n	8009a2a <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a02:	2b01      	cmp	r3, #1
 8009a04:	d101      	bne.n	8009a0a <HAL_UART_Receive_DMA+0x38>
 8009a06:	2302      	movs	r3, #2
 8009a08:	e00f      	b.n	8009a2a <HAL_UART_Receive_DMA+0x58>
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	2201      	movs	r2, #1
 8009a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	2200      	movs	r2, #0
 8009a16:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8009a18:	88fb      	ldrh	r3, [r7, #6]
 8009a1a:	461a      	mov	r2, r3
 8009a1c:	68b9      	ldr	r1, [r7, #8]
 8009a1e:	68f8      	ldr	r0, [r7, #12]
 8009a20:	f000 fb2c 	bl	800a07c <UART_Start_Receive_DMA>
 8009a24:	4603      	mov	r3, r0
 8009a26:	e000      	b.n	8009a2a <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009a28:	2302      	movs	r3, #2
  }
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3710      	adds	r7, #16
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}

08009a32 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8009a32:	b580      	push	{r7, lr}
 8009a34:	b084      	sub	sp, #16
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	695b      	ldr	r3, [r3, #20]
 8009a44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	bf14      	ite	ne
 8009a4c:	2301      	movne	r3, #1
 8009a4e:	2300      	moveq	r3, #0
 8009a50:	b2db      	uxtb	r3, r3
 8009a52:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a5a:	b2db      	uxtb	r3, r3
 8009a5c:	2b21      	cmp	r3, #33	; 0x21
 8009a5e:	d116      	bne.n	8009a8e <HAL_UART_DMAStop+0x5c>
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d013      	beq.n	8009a8e <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	695a      	ldr	r2, [r3, #20]
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009a74:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d004      	beq.n	8009a88 <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a82:	4618      	mov	r0, r3
 8009a84:	f7fe f8c7 	bl	8007c16 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f000 fb5b 	bl	800a144 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	695b      	ldr	r3, [r3, #20]
 8009a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	bf14      	ite	ne
 8009a9c:	2301      	movne	r3, #1
 8009a9e:	2300      	moveq	r3, #0
 8009aa0:	b2db      	uxtb	r3, r3
 8009aa2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009aaa:	b2db      	uxtb	r3, r3
 8009aac:	2b22      	cmp	r3, #34	; 0x22
 8009aae:	d116      	bne.n	8009ade <HAL_UART_DMAStop+0xac>
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d013      	beq.n	8009ade <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	695a      	ldr	r2, [r3, #20]
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ac4:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d004      	beq.n	8009ad8 <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f7fe f89f 	bl	8007c16 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f000 fb48 	bl	800a16e <UART_EndRxTransfer>
  }

  return HAL_OK;
 8009ade:	2300      	movs	r3, #0
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	3710      	adds	r7, #16
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}

08009ae8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b08a      	sub	sp, #40	; 0x28
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	68db      	ldr	r3, [r3, #12]
 8009afe:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	695b      	ldr	r3, [r3, #20]
 8009b06:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b12:	f003 030f 	and.w	r3, r3, #15
 8009b16:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8009b18:	69bb      	ldr	r3, [r7, #24]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d10d      	bne.n	8009b3a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b20:	f003 0320 	and.w	r3, r3, #32
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d008      	beq.n	8009b3a <HAL_UART_IRQHandler+0x52>
 8009b28:	6a3b      	ldr	r3, [r7, #32]
 8009b2a:	f003 0320 	and.w	r3, r3, #32
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d003      	beq.n	8009b3a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f000 fbc2 	bl	800a2bc <UART_Receive_IT>
      return;
 8009b38:	e17b      	b.n	8009e32 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009b3a:	69bb      	ldr	r3, [r7, #24]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	f000 80b1 	beq.w	8009ca4 <HAL_UART_IRQHandler+0x1bc>
 8009b42:	69fb      	ldr	r3, [r7, #28]
 8009b44:	f003 0301 	and.w	r3, r3, #1
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d105      	bne.n	8009b58 <HAL_UART_IRQHandler+0x70>
 8009b4c:	6a3b      	ldr	r3, [r7, #32]
 8009b4e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	f000 80a6 	beq.w	8009ca4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b5a:	f003 0301 	and.w	r3, r3, #1
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d00a      	beq.n	8009b78 <HAL_UART_IRQHandler+0x90>
 8009b62:	6a3b      	ldr	r3, [r7, #32]
 8009b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d005      	beq.n	8009b78 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b70:	f043 0201 	orr.w	r2, r3, #1
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b7a:	f003 0304 	and.w	r3, r3, #4
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d00a      	beq.n	8009b98 <HAL_UART_IRQHandler+0xb0>
 8009b82:	69fb      	ldr	r3, [r7, #28]
 8009b84:	f003 0301 	and.w	r3, r3, #1
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d005      	beq.n	8009b98 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b90:	f043 0202 	orr.w	r2, r3, #2
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b9a:	f003 0302 	and.w	r3, r3, #2
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d00a      	beq.n	8009bb8 <HAL_UART_IRQHandler+0xd0>
 8009ba2:	69fb      	ldr	r3, [r7, #28]
 8009ba4:	f003 0301 	and.w	r3, r3, #1
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d005      	beq.n	8009bb8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bb0:	f043 0204 	orr.w	r2, r3, #4
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8009bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bba:	f003 0308 	and.w	r3, r3, #8
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d00f      	beq.n	8009be2 <HAL_UART_IRQHandler+0xfa>
 8009bc2:	6a3b      	ldr	r3, [r7, #32]
 8009bc4:	f003 0320 	and.w	r3, r3, #32
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d104      	bne.n	8009bd6 <HAL_UART_IRQHandler+0xee>
 8009bcc:	69fb      	ldr	r3, [r7, #28]
 8009bce:	f003 0301 	and.w	r3, r3, #1
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d005      	beq.n	8009be2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bda:	f043 0208 	orr.w	r2, r3, #8
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	f000 811e 	beq.w	8009e28 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bee:	f003 0320 	and.w	r3, r3, #32
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d007      	beq.n	8009c06 <HAL_UART_IRQHandler+0x11e>
 8009bf6:	6a3b      	ldr	r3, [r7, #32]
 8009bf8:	f003 0320 	and.w	r3, r3, #32
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d002      	beq.n	8009c06 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	f000 fb5b 	bl	800a2bc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	695b      	ldr	r3, [r3, #20]
 8009c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	bf14      	ite	ne
 8009c14:	2301      	movne	r3, #1
 8009c16:	2300      	moveq	r3, #0
 8009c18:	b2db      	uxtb	r3, r3
 8009c1a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c20:	f003 0308 	and.w	r3, r3, #8
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d102      	bne.n	8009c2e <HAL_UART_IRQHandler+0x146>
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d031      	beq.n	8009c92 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f000 fa9d 	bl	800a16e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	695b      	ldr	r3, [r3, #20]
 8009c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d023      	beq.n	8009c8a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	695a      	ldr	r2, [r3, #20]
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c50:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d013      	beq.n	8009c82 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c5e:	4a76      	ldr	r2, [pc, #472]	; (8009e38 <HAL_UART_IRQHandler+0x350>)
 8009c60:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c66:	4618      	mov	r0, r3
 8009c68:	f7fe f810 	bl	8007c8c <HAL_DMA_Abort_IT>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d016      	beq.n	8009ca0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c78:	687a      	ldr	r2, [r7, #4]
 8009c7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009c7c:	4610      	mov	r0, r2
 8009c7e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c80:	e00e      	b.n	8009ca0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f000 f8ec 	bl	8009e60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c88:	e00a      	b.n	8009ca0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f000 f8e8 	bl	8009e60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c90:	e006      	b.n	8009ca0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f000 f8e4 	bl	8009e60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009c9e:	e0c3      	b.n	8009e28 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ca0:	bf00      	nop
    return;
 8009ca2:	e0c1      	b.n	8009e28 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ca8:	2b01      	cmp	r3, #1
 8009caa:	f040 80a1 	bne.w	8009df0 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8009cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb0:	f003 0310 	and.w	r3, r3, #16
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	f000 809b 	beq.w	8009df0 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8009cba:	6a3b      	ldr	r3, [r7, #32]
 8009cbc:	f003 0310 	and.w	r3, r3, #16
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	f000 8095 	beq.w	8009df0 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	60fb      	str	r3, [r7, #12]
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	60fb      	str	r3, [r7, #12]
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	685b      	ldr	r3, [r3, #4]
 8009cd8:	60fb      	str	r3, [r7, #12]
 8009cda:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	695b      	ldr	r3, [r3, #20]
 8009ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d04e      	beq.n	8009d88 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	685b      	ldr	r3, [r3, #4]
 8009cf2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8009cf4:	8a3b      	ldrh	r3, [r7, #16]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	f000 8098 	beq.w	8009e2c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009d00:	8a3a      	ldrh	r2, [r7, #16]
 8009d02:	429a      	cmp	r2, r3
 8009d04:	f080 8092 	bcs.w	8009e2c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	8a3a      	ldrh	r2, [r7, #16]
 8009d0c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d12:	699b      	ldr	r3, [r3, #24]
 8009d14:	2b20      	cmp	r3, #32
 8009d16:	d02b      	beq.n	8009d70 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	68da      	ldr	r2, [r3, #12]
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009d26:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	695a      	ldr	r2, [r3, #20]
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f022 0201 	bic.w	r2, r2, #1
 8009d36:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	695a      	ldr	r2, [r3, #20]
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009d46:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2220      	movs	r2, #32
 8009d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2200      	movs	r2, #0
 8009d54:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	68da      	ldr	r2, [r3, #12]
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f022 0210 	bic.w	r2, r2, #16
 8009d64:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f7fd ff53 	bl	8007c16 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009d78:	b29b      	uxth	r3, r3
 8009d7a:	1ad3      	subs	r3, r2, r3
 8009d7c:	b29b      	uxth	r3, r3
 8009d7e:	4619      	mov	r1, r3
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f000 f876 	bl	8009e72 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8009d86:	e051      	b.n	8009e2c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009d90:	b29b      	uxth	r3, r3
 8009d92:	1ad3      	subs	r3, r2, r3
 8009d94:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009d9a:	b29b      	uxth	r3, r3
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d047      	beq.n	8009e30 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8009da0:	8a7b      	ldrh	r3, [r7, #18]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d044      	beq.n	8009e30 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	68da      	ldr	r2, [r3, #12]
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009db4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	695a      	ldr	r2, [r3, #20]
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f022 0201 	bic.w	r2, r2, #1
 8009dc4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2220      	movs	r2, #32
 8009dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	68da      	ldr	r2, [r3, #12]
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f022 0210 	bic.w	r2, r2, #16
 8009de2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009de4:	8a7b      	ldrh	r3, [r7, #18]
 8009de6:	4619      	mov	r1, r3
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	f000 f842 	bl	8009e72 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8009dee:	e01f      	b.n	8009e30 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d008      	beq.n	8009e0c <HAL_UART_IRQHandler+0x324>
 8009dfa:	6a3b      	ldr	r3, [r7, #32]
 8009dfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d003      	beq.n	8009e0c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f000 f9f2 	bl	800a1ee <UART_Transmit_IT>
    return;
 8009e0a:	e012      	b.n	8009e32 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d00d      	beq.n	8009e32 <HAL_UART_IRQHandler+0x34a>
 8009e16:	6a3b      	ldr	r3, [r7, #32]
 8009e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d008      	beq.n	8009e32 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f000 fa33 	bl	800a28c <UART_EndTransmit_IT>
    return;
 8009e26:	e004      	b.n	8009e32 <HAL_UART_IRQHandler+0x34a>
    return;
 8009e28:	bf00      	nop
 8009e2a:	e002      	b.n	8009e32 <HAL_UART_IRQHandler+0x34a>
      return;
 8009e2c:	bf00      	nop
 8009e2e:	e000      	b.n	8009e32 <HAL_UART_IRQHandler+0x34a>
      return;
 8009e30:	bf00      	nop
  }
}
 8009e32:	3728      	adds	r7, #40	; 0x28
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}
 8009e38:	0800a1c7 	.word	0x0800a1c7

08009e3c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b083      	sub	sp, #12
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009e44:	bf00      	nop
 8009e46:	370c      	adds	r7, #12
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bc80      	pop	{r7}
 8009e4c:	4770      	bx	lr

08009e4e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009e4e:	b480      	push	{r7}
 8009e50:	b083      	sub	sp, #12
 8009e52:	af00      	add	r7, sp, #0
 8009e54:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009e56:	bf00      	nop
 8009e58:	370c      	adds	r7, #12
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bc80      	pop	{r7}
 8009e5e:	4770      	bx	lr

08009e60 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b083      	sub	sp, #12
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009e68:	bf00      	nop
 8009e6a:	370c      	adds	r7, #12
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bc80      	pop	{r7}
 8009e70:	4770      	bx	lr

08009e72 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009e72:	b480      	push	{r7}
 8009e74:	b083      	sub	sp, #12
 8009e76:	af00      	add	r7, sp, #0
 8009e78:	6078      	str	r0, [r7, #4]
 8009e7a:	460b      	mov	r3, r1
 8009e7c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009e7e:	bf00      	nop
 8009e80:	370c      	adds	r7, #12
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bc80      	pop	{r7}
 8009e86:	4770      	bx	lr

08009e88 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b084      	sub	sp, #16
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e94:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f003 0320 	and.w	r3, r3, #32
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d12a      	bne.n	8009efa <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	68da      	ldr	r2, [r3, #12]
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009eb8:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	695a      	ldr	r2, [r3, #20]
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f022 0201 	bic.w	r2, r2, #1
 8009ec8:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	695a      	ldr	r2, [r3, #20]
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ed8:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	2220      	movs	r2, #32
 8009ede:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ee6:	2b01      	cmp	r3, #1
 8009ee8:	d107      	bne.n	8009efa <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	68da      	ldr	r2, [r3, #12]
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	f022 0210 	bic.w	r2, r2, #16
 8009ef8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009efe:	2b01      	cmp	r3, #1
 8009f00:	d106      	bne.n	8009f10 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009f06:	4619      	mov	r1, r3
 8009f08:	68f8      	ldr	r0, [r7, #12]
 8009f0a:	f7ff ffb2 	bl	8009e72 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009f0e:	e002      	b.n	8009f16 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8009f10:	68f8      	ldr	r0, [r7, #12]
 8009f12:	f7fc fe5b 	bl	8006bcc <HAL_UART_RxCpltCallback>
}
 8009f16:	bf00      	nop
 8009f18:	3710      	adds	r7, #16
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}

08009f1e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009f1e:	b580      	push	{r7, lr}
 8009f20:	b084      	sub	sp, #16
 8009f22:	af00      	add	r7, sp, #0
 8009f24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f2a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f30:	2b01      	cmp	r3, #1
 8009f32:	d108      	bne.n	8009f46 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009f38:	085b      	lsrs	r3, r3, #1
 8009f3a:	b29b      	uxth	r3, r3
 8009f3c:	4619      	mov	r1, r3
 8009f3e:	68f8      	ldr	r0, [r7, #12]
 8009f40:	f7ff ff97 	bl	8009e72 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009f44:	e002      	b.n	8009f4c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8009f46:	68f8      	ldr	r0, [r7, #12]
 8009f48:	f7ff ff81 	bl	8009e4e <HAL_UART_RxHalfCpltCallback>
}
 8009f4c:	bf00      	nop
 8009f4e:	3710      	adds	r7, #16
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}

08009f54 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b084      	sub	sp, #16
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f64:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	695b      	ldr	r3, [r3, #20]
 8009f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	bf14      	ite	ne
 8009f74:	2301      	movne	r3, #1
 8009f76:	2300      	moveq	r3, #0
 8009f78:	b2db      	uxtb	r3, r3
 8009f7a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f82:	b2db      	uxtb	r3, r3
 8009f84:	2b21      	cmp	r3, #33	; 0x21
 8009f86:	d108      	bne.n	8009f9a <UART_DMAError+0x46>
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d005      	beq.n	8009f9a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009f8e:	68bb      	ldr	r3, [r7, #8]
 8009f90:	2200      	movs	r2, #0
 8009f92:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009f94:	68b8      	ldr	r0, [r7, #8]
 8009f96:	f000 f8d5 	bl	800a144 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	695b      	ldr	r3, [r3, #20]
 8009fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	bf14      	ite	ne
 8009fa8:	2301      	movne	r3, #1
 8009faa:	2300      	moveq	r3, #0
 8009fac:	b2db      	uxtb	r3, r3
 8009fae:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009fb6:	b2db      	uxtb	r3, r3
 8009fb8:	2b22      	cmp	r3, #34	; 0x22
 8009fba:	d108      	bne.n	8009fce <UART_DMAError+0x7a>
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d005      	beq.n	8009fce <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009fc2:	68bb      	ldr	r3, [r7, #8]
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009fc8:	68b8      	ldr	r0, [r7, #8]
 8009fca:	f000 f8d0 	bl	800a16e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fd2:	f043 0210 	orr.w	r2, r3, #16
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009fda:	68b8      	ldr	r0, [r7, #8]
 8009fdc:	f7ff ff40 	bl	8009e60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009fe0:	bf00      	nop
 8009fe2:	3710      	adds	r7, #16
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	bd80      	pop	{r7, pc}

08009fe8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b084      	sub	sp, #16
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	60f8      	str	r0, [r7, #12]
 8009ff0:	60b9      	str	r1, [r7, #8]
 8009ff2:	603b      	str	r3, [r7, #0]
 8009ff4:	4613      	mov	r3, r2
 8009ff6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ff8:	e02c      	b.n	800a054 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ffa:	69bb      	ldr	r3, [r7, #24]
 8009ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a000:	d028      	beq.n	800a054 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a002:	69bb      	ldr	r3, [r7, #24]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d007      	beq.n	800a018 <UART_WaitOnFlagUntilTimeout+0x30>
 800a008:	f7fd fbf4 	bl	80077f4 <HAL_GetTick>
 800a00c:	4602      	mov	r2, r0
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	1ad3      	subs	r3, r2, r3
 800a012:	69ba      	ldr	r2, [r7, #24]
 800a014:	429a      	cmp	r2, r3
 800a016:	d21d      	bcs.n	800a054 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	68da      	ldr	r2, [r3, #12]
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a026:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	695a      	ldr	r2, [r3, #20]
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f022 0201 	bic.w	r2, r2, #1
 800a036:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	2220      	movs	r2, #32
 800a03c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	2220      	movs	r2, #32
 800a044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	2200      	movs	r2, #0
 800a04c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a050:	2303      	movs	r3, #3
 800a052:	e00f      	b.n	800a074 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	681a      	ldr	r2, [r3, #0]
 800a05a:	68bb      	ldr	r3, [r7, #8]
 800a05c:	4013      	ands	r3, r2
 800a05e:	68ba      	ldr	r2, [r7, #8]
 800a060:	429a      	cmp	r2, r3
 800a062:	bf0c      	ite	eq
 800a064:	2301      	moveq	r3, #1
 800a066:	2300      	movne	r3, #0
 800a068:	b2db      	uxtb	r3, r3
 800a06a:	461a      	mov	r2, r3
 800a06c:	79fb      	ldrb	r3, [r7, #7]
 800a06e:	429a      	cmp	r2, r3
 800a070:	d0c3      	beq.n	8009ffa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a072:	2300      	movs	r3, #0
}
 800a074:	4618      	mov	r0, r3
 800a076:	3710      	adds	r7, #16
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}

0800a07c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b086      	sub	sp, #24
 800a080:	af00      	add	r7, sp, #0
 800a082:	60f8      	str	r0, [r7, #12]
 800a084:	60b9      	str	r1, [r7, #8]
 800a086:	4613      	mov	r3, r2
 800a088:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a08a:	68ba      	ldr	r2, [r7, #8]
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	88fa      	ldrh	r2, [r7, #6]
 800a094:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	2200      	movs	r2, #0
 800a09a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	2222      	movs	r2, #34	; 0x22
 800a0a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0a8:	4a23      	ldr	r2, [pc, #140]	; (800a138 <UART_Start_Receive_DMA+0xbc>)
 800a0aa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0b0:	4a22      	ldr	r2, [pc, #136]	; (800a13c <UART_Start_Receive_DMA+0xc0>)
 800a0b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0b8:	4a21      	ldr	r2, [pc, #132]	; (800a140 <UART_Start_Receive_DMA+0xc4>)
 800a0ba:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a0c4:	f107 0308 	add.w	r3, r7, #8
 800a0c8:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	3304      	adds	r3, #4
 800a0d4:	4619      	mov	r1, r3
 800a0d6:	697b      	ldr	r3, [r7, #20]
 800a0d8:	681a      	ldr	r2, [r3, #0]
 800a0da:	88fb      	ldrh	r3, [r7, #6]
 800a0dc:	f7fd fd3c 	bl	8007b58 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	613b      	str	r3, [r7, #16]
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	613b      	str	r3, [r7, #16]
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	685b      	ldr	r3, [r3, #4]
 800a0f2:	613b      	str	r3, [r7, #16]
 800a0f4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	68da      	ldr	r2, [r3, #12]
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a10c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	695a      	ldr	r2, [r3, #20]
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f042 0201 	orr.w	r2, r2, #1
 800a11c:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	695a      	ldr	r2, [r3, #20]
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a12c:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800a12e:	2300      	movs	r3, #0
}
 800a130:	4618      	mov	r0, r3
 800a132:	3718      	adds	r7, #24
 800a134:	46bd      	mov	sp, r7
 800a136:	bd80      	pop	{r7, pc}
 800a138:	08009e89 	.word	0x08009e89
 800a13c:	08009f1f 	.word	0x08009f1f
 800a140:	08009f55 	.word	0x08009f55

0800a144 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a144:	b480      	push	{r7}
 800a146:	b083      	sub	sp, #12
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	68da      	ldr	r2, [r3, #12]
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a15a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2220      	movs	r2, #32
 800a160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800a164:	bf00      	nop
 800a166:	370c      	adds	r7, #12
 800a168:	46bd      	mov	sp, r7
 800a16a:	bc80      	pop	{r7}
 800a16c:	4770      	bx	lr

0800a16e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a16e:	b480      	push	{r7}
 800a170:	b083      	sub	sp, #12
 800a172:	af00      	add	r7, sp, #0
 800a174:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	68da      	ldr	r2, [r3, #12]
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a184:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	695a      	ldr	r2, [r3, #20]
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f022 0201 	bic.w	r2, r2, #1
 800a194:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a19a:	2b01      	cmp	r3, #1
 800a19c:	d107      	bne.n	800a1ae <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	68da      	ldr	r2, [r3, #12]
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	f022 0210 	bic.w	r2, r2, #16
 800a1ac:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2220      	movs	r2, #32
 800a1b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a1bc:	bf00      	nop
 800a1be:	370c      	adds	r7, #12
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bc80      	pop	{r7}
 800a1c4:	4770      	bx	lr

0800a1c6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a1c6:	b580      	push	{r7, lr}
 800a1c8:	b084      	sub	sp, #16
 800a1ca:	af00      	add	r7, sp, #0
 800a1cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a1e0:	68f8      	ldr	r0, [r7, #12]
 800a1e2:	f7ff fe3d 	bl	8009e60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a1e6:	bf00      	nop
 800a1e8:	3710      	adds	r7, #16
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}

0800a1ee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a1ee:	b480      	push	{r7}
 800a1f0:	b085      	sub	sp, #20
 800a1f2:	af00      	add	r7, sp, #0
 800a1f4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1fc:	b2db      	uxtb	r3, r3
 800a1fe:	2b21      	cmp	r3, #33	; 0x21
 800a200:	d13e      	bne.n	800a280 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	689b      	ldr	r3, [r3, #8]
 800a206:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a20a:	d114      	bne.n	800a236 <UART_Transmit_IT+0x48>
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	691b      	ldr	r3, [r3, #16]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d110      	bne.n	800a236 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	6a1b      	ldr	r3, [r3, #32]
 800a218:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	881b      	ldrh	r3, [r3, #0]
 800a21e:	461a      	mov	r2, r3
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a228:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6a1b      	ldr	r3, [r3, #32]
 800a22e:	1c9a      	adds	r2, r3, #2
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	621a      	str	r2, [r3, #32]
 800a234:	e008      	b.n	800a248 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6a1b      	ldr	r3, [r3, #32]
 800a23a:	1c59      	adds	r1, r3, #1
 800a23c:	687a      	ldr	r2, [r7, #4]
 800a23e:	6211      	str	r1, [r2, #32]
 800a240:	781a      	ldrb	r2, [r3, #0]
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a24c:	b29b      	uxth	r3, r3
 800a24e:	3b01      	subs	r3, #1
 800a250:	b29b      	uxth	r3, r3
 800a252:	687a      	ldr	r2, [r7, #4]
 800a254:	4619      	mov	r1, r3
 800a256:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d10f      	bne.n	800a27c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	68da      	ldr	r2, [r3, #12]
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a26a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	68da      	ldr	r2, [r3, #12]
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a27a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a27c:	2300      	movs	r3, #0
 800a27e:	e000      	b.n	800a282 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a280:	2302      	movs	r3, #2
  }
}
 800a282:	4618      	mov	r0, r3
 800a284:	3714      	adds	r7, #20
 800a286:	46bd      	mov	sp, r7
 800a288:	bc80      	pop	{r7}
 800a28a:	4770      	bx	lr

0800a28c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b082      	sub	sp, #8
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	68da      	ldr	r2, [r3, #12]
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a2a2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2220      	movs	r2, #32
 800a2a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f7ff fdc5 	bl	8009e3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a2b2:	2300      	movs	r3, #0
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3708      	adds	r7, #8
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}

0800a2bc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b086      	sub	sp, #24
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a2ca:	b2db      	uxtb	r3, r3
 800a2cc:	2b22      	cmp	r3, #34	; 0x22
 800a2ce:	f040 8099 	bne.w	800a404 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	689b      	ldr	r3, [r3, #8]
 800a2d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2da:	d117      	bne.n	800a30c <UART_Receive_IT+0x50>
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	691b      	ldr	r3, [r3, #16]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d113      	bne.n	800a30c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2ec:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	685b      	ldr	r3, [r3, #4]
 800a2f4:	b29b      	uxth	r3, r3
 800a2f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2fa:	b29a      	uxth	r2, r3
 800a2fc:	693b      	ldr	r3, [r7, #16]
 800a2fe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a304:	1c9a      	adds	r2, r3, #2
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	629a      	str	r2, [r3, #40]	; 0x28
 800a30a:	e026      	b.n	800a35a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a310:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800a312:	2300      	movs	r3, #0
 800a314:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	689b      	ldr	r3, [r3, #8]
 800a31a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a31e:	d007      	beq.n	800a330 <UART_Receive_IT+0x74>
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	689b      	ldr	r3, [r3, #8]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d10a      	bne.n	800a33e <UART_Receive_IT+0x82>
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	691b      	ldr	r3, [r3, #16]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d106      	bne.n	800a33e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	685b      	ldr	r3, [r3, #4]
 800a336:	b2da      	uxtb	r2, r3
 800a338:	697b      	ldr	r3, [r7, #20]
 800a33a:	701a      	strb	r2, [r3, #0]
 800a33c:	e008      	b.n	800a350 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	685b      	ldr	r3, [r3, #4]
 800a344:	b2db      	uxtb	r3, r3
 800a346:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a34a:	b2da      	uxtb	r2, r3
 800a34c:	697b      	ldr	r3, [r7, #20]
 800a34e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a354:	1c5a      	adds	r2, r3, #1
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a35e:	b29b      	uxth	r3, r3
 800a360:	3b01      	subs	r3, #1
 800a362:	b29b      	uxth	r3, r3
 800a364:	687a      	ldr	r2, [r7, #4]
 800a366:	4619      	mov	r1, r3
 800a368:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d148      	bne.n	800a400 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	68da      	ldr	r2, [r3, #12]
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f022 0220 	bic.w	r2, r2, #32
 800a37c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	68da      	ldr	r2, [r3, #12]
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a38c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	695a      	ldr	r2, [r3, #20]
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f022 0201 	bic.w	r2, r2, #1
 800a39c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2220      	movs	r2, #32
 800a3a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3aa:	2b01      	cmp	r3, #1
 800a3ac:	d123      	bne.n	800a3f6 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	68da      	ldr	r2, [r3, #12]
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f022 0210 	bic.w	r2, r2, #16
 800a3c2:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f003 0310 	and.w	r3, r3, #16
 800a3ce:	2b10      	cmp	r3, #16
 800a3d0:	d10a      	bne.n	800a3e8 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	60fb      	str	r3, [r7, #12]
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	60fb      	str	r3, [r7, #12]
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	685b      	ldr	r3, [r3, #4]
 800a3e4:	60fb      	str	r3, [r7, #12]
 800a3e6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a3ec:	4619      	mov	r1, r3
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	f7ff fd3f 	bl	8009e72 <HAL_UARTEx_RxEventCallback>
 800a3f4:	e002      	b.n	800a3fc <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	f7fc fbe8 	bl	8006bcc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	e002      	b.n	800a406 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800a400:	2300      	movs	r3, #0
 800a402:	e000      	b.n	800a406 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800a404:	2302      	movs	r3, #2
  }
}
 800a406:	4618      	mov	r0, r3
 800a408:	3718      	adds	r7, #24
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}
	...

0800a410 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b084      	sub	sp, #16
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	691b      	ldr	r3, [r3, #16]
 800a41e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	68da      	ldr	r2, [r3, #12]
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	430a      	orrs	r2, r1
 800a42c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	689a      	ldr	r2, [r3, #8]
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	691b      	ldr	r3, [r3, #16]
 800a436:	431a      	orrs	r2, r3
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	695b      	ldr	r3, [r3, #20]
 800a43c:	4313      	orrs	r3, r2
 800a43e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	68db      	ldr	r3, [r3, #12]
 800a446:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800a44a:	f023 030c 	bic.w	r3, r3, #12
 800a44e:	687a      	ldr	r2, [r7, #4]
 800a450:	6812      	ldr	r2, [r2, #0]
 800a452:	68b9      	ldr	r1, [r7, #8]
 800a454:	430b      	orrs	r3, r1
 800a456:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	695b      	ldr	r3, [r3, #20]
 800a45e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	699a      	ldr	r2, [r3, #24]
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	430a      	orrs	r2, r1
 800a46c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	4a2c      	ldr	r2, [pc, #176]	; (800a524 <UART_SetConfig+0x114>)
 800a474:	4293      	cmp	r3, r2
 800a476:	d103      	bne.n	800a480 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800a478:	f7fe fd3e 	bl	8008ef8 <HAL_RCC_GetPCLK2Freq>
 800a47c:	60f8      	str	r0, [r7, #12]
 800a47e:	e002      	b.n	800a486 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800a480:	f7fe fd26 	bl	8008ed0 <HAL_RCC_GetPCLK1Freq>
 800a484:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a486:	68fa      	ldr	r2, [r7, #12]
 800a488:	4613      	mov	r3, r2
 800a48a:	009b      	lsls	r3, r3, #2
 800a48c:	4413      	add	r3, r2
 800a48e:	009a      	lsls	r2, r3, #2
 800a490:	441a      	add	r2, r3
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	685b      	ldr	r3, [r3, #4]
 800a496:	009b      	lsls	r3, r3, #2
 800a498:	fbb2 f3f3 	udiv	r3, r2, r3
 800a49c:	4a22      	ldr	r2, [pc, #136]	; (800a528 <UART_SetConfig+0x118>)
 800a49e:	fba2 2303 	umull	r2, r3, r2, r3
 800a4a2:	095b      	lsrs	r3, r3, #5
 800a4a4:	0119      	lsls	r1, r3, #4
 800a4a6:	68fa      	ldr	r2, [r7, #12]
 800a4a8:	4613      	mov	r3, r2
 800a4aa:	009b      	lsls	r3, r3, #2
 800a4ac:	4413      	add	r3, r2
 800a4ae:	009a      	lsls	r2, r3, #2
 800a4b0:	441a      	add	r2, r3
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	685b      	ldr	r3, [r3, #4]
 800a4b6:	009b      	lsls	r3, r3, #2
 800a4b8:	fbb2 f2f3 	udiv	r2, r2, r3
 800a4bc:	4b1a      	ldr	r3, [pc, #104]	; (800a528 <UART_SetConfig+0x118>)
 800a4be:	fba3 0302 	umull	r0, r3, r3, r2
 800a4c2:	095b      	lsrs	r3, r3, #5
 800a4c4:	2064      	movs	r0, #100	; 0x64
 800a4c6:	fb00 f303 	mul.w	r3, r0, r3
 800a4ca:	1ad3      	subs	r3, r2, r3
 800a4cc:	011b      	lsls	r3, r3, #4
 800a4ce:	3332      	adds	r3, #50	; 0x32
 800a4d0:	4a15      	ldr	r2, [pc, #84]	; (800a528 <UART_SetConfig+0x118>)
 800a4d2:	fba2 2303 	umull	r2, r3, r2, r3
 800a4d6:	095b      	lsrs	r3, r3, #5
 800a4d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a4dc:	4419      	add	r1, r3
 800a4de:	68fa      	ldr	r2, [r7, #12]
 800a4e0:	4613      	mov	r3, r2
 800a4e2:	009b      	lsls	r3, r3, #2
 800a4e4:	4413      	add	r3, r2
 800a4e6:	009a      	lsls	r2, r3, #2
 800a4e8:	441a      	add	r2, r3
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	685b      	ldr	r3, [r3, #4]
 800a4ee:	009b      	lsls	r3, r3, #2
 800a4f0:	fbb2 f2f3 	udiv	r2, r2, r3
 800a4f4:	4b0c      	ldr	r3, [pc, #48]	; (800a528 <UART_SetConfig+0x118>)
 800a4f6:	fba3 0302 	umull	r0, r3, r3, r2
 800a4fa:	095b      	lsrs	r3, r3, #5
 800a4fc:	2064      	movs	r0, #100	; 0x64
 800a4fe:	fb00 f303 	mul.w	r3, r0, r3
 800a502:	1ad3      	subs	r3, r2, r3
 800a504:	011b      	lsls	r3, r3, #4
 800a506:	3332      	adds	r3, #50	; 0x32
 800a508:	4a07      	ldr	r2, [pc, #28]	; (800a528 <UART_SetConfig+0x118>)
 800a50a:	fba2 2303 	umull	r2, r3, r2, r3
 800a50e:	095b      	lsrs	r3, r3, #5
 800a510:	f003 020f 	and.w	r2, r3, #15
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	440a      	add	r2, r1
 800a51a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800a51c:	bf00      	nop
 800a51e:	3710      	adds	r7, #16
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}
 800a524:	40013800 	.word	0x40013800
 800a528:	51eb851f 	.word	0x51eb851f

0800a52c <atoi>:
 800a52c:	220a      	movs	r2, #10
 800a52e:	2100      	movs	r1, #0
 800a530:	f000 b90e 	b.w	800a750 <strtol>

0800a534 <__errno>:
 800a534:	4b01      	ldr	r3, [pc, #4]	; (800a53c <__errno+0x8>)
 800a536:	6818      	ldr	r0, [r3, #0]
 800a538:	4770      	bx	lr
 800a53a:	bf00      	nop
 800a53c:	20000048 	.word	0x20000048

0800a540 <__libc_init_array>:
 800a540:	b570      	push	{r4, r5, r6, lr}
 800a542:	2600      	movs	r6, #0
 800a544:	4d0c      	ldr	r5, [pc, #48]	; (800a578 <__libc_init_array+0x38>)
 800a546:	4c0d      	ldr	r4, [pc, #52]	; (800a57c <__libc_init_array+0x3c>)
 800a548:	1b64      	subs	r4, r4, r5
 800a54a:	10a4      	asrs	r4, r4, #2
 800a54c:	42a6      	cmp	r6, r4
 800a54e:	d109      	bne.n	800a564 <__libc_init_array+0x24>
 800a550:	f000 fd22 	bl	800af98 <_init>
 800a554:	2600      	movs	r6, #0
 800a556:	4d0a      	ldr	r5, [pc, #40]	; (800a580 <__libc_init_array+0x40>)
 800a558:	4c0a      	ldr	r4, [pc, #40]	; (800a584 <__libc_init_array+0x44>)
 800a55a:	1b64      	subs	r4, r4, r5
 800a55c:	10a4      	asrs	r4, r4, #2
 800a55e:	42a6      	cmp	r6, r4
 800a560:	d105      	bne.n	800a56e <__libc_init_array+0x2e>
 800a562:	bd70      	pop	{r4, r5, r6, pc}
 800a564:	f855 3b04 	ldr.w	r3, [r5], #4
 800a568:	4798      	blx	r3
 800a56a:	3601      	adds	r6, #1
 800a56c:	e7ee      	b.n	800a54c <__libc_init_array+0xc>
 800a56e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a572:	4798      	blx	r3
 800a574:	3601      	adds	r6, #1
 800a576:	e7f2      	b.n	800a55e <__libc_init_array+0x1e>
 800a578:	0800ce8c 	.word	0x0800ce8c
 800a57c:	0800ce8c 	.word	0x0800ce8c
 800a580:	0800ce8c 	.word	0x0800ce8c
 800a584:	0800ce90 	.word	0x0800ce90

0800a588 <memset>:
 800a588:	4603      	mov	r3, r0
 800a58a:	4402      	add	r2, r0
 800a58c:	4293      	cmp	r3, r2
 800a58e:	d100      	bne.n	800a592 <memset+0xa>
 800a590:	4770      	bx	lr
 800a592:	f803 1b01 	strb.w	r1, [r3], #1
 800a596:	e7f9      	b.n	800a58c <memset+0x4>

0800a598 <siprintf>:
 800a598:	b40e      	push	{r1, r2, r3}
 800a59a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a59e:	b500      	push	{lr}
 800a5a0:	b09c      	sub	sp, #112	; 0x70
 800a5a2:	ab1d      	add	r3, sp, #116	; 0x74
 800a5a4:	9002      	str	r0, [sp, #8]
 800a5a6:	9006      	str	r0, [sp, #24]
 800a5a8:	9107      	str	r1, [sp, #28]
 800a5aa:	9104      	str	r1, [sp, #16]
 800a5ac:	4808      	ldr	r0, [pc, #32]	; (800a5d0 <siprintf+0x38>)
 800a5ae:	4909      	ldr	r1, [pc, #36]	; (800a5d4 <siprintf+0x3c>)
 800a5b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5b4:	9105      	str	r1, [sp, #20]
 800a5b6:	6800      	ldr	r0, [r0, #0]
 800a5b8:	a902      	add	r1, sp, #8
 800a5ba:	9301      	str	r3, [sp, #4]
 800a5bc:	f000 f92e 	bl	800a81c <_svfiprintf_r>
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	9b02      	ldr	r3, [sp, #8]
 800a5c4:	701a      	strb	r2, [r3, #0]
 800a5c6:	b01c      	add	sp, #112	; 0x70
 800a5c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a5cc:	b003      	add	sp, #12
 800a5ce:	4770      	bx	lr
 800a5d0:	20000048 	.word	0x20000048
 800a5d4:	ffff0208 	.word	0xffff0208

0800a5d8 <strchr>:
 800a5d8:	4603      	mov	r3, r0
 800a5da:	b2c9      	uxtb	r1, r1
 800a5dc:	4618      	mov	r0, r3
 800a5de:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5e2:	b112      	cbz	r2, 800a5ea <strchr+0x12>
 800a5e4:	428a      	cmp	r2, r1
 800a5e6:	d1f9      	bne.n	800a5dc <strchr+0x4>
 800a5e8:	4770      	bx	lr
 800a5ea:	2900      	cmp	r1, #0
 800a5ec:	bf18      	it	ne
 800a5ee:	2000      	movne	r0, #0
 800a5f0:	4770      	bx	lr

0800a5f2 <strncmp>:
 800a5f2:	b510      	push	{r4, lr}
 800a5f4:	b16a      	cbz	r2, 800a612 <strncmp+0x20>
 800a5f6:	3901      	subs	r1, #1
 800a5f8:	1884      	adds	r4, r0, r2
 800a5fa:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a5fe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a602:	4293      	cmp	r3, r2
 800a604:	d103      	bne.n	800a60e <strncmp+0x1c>
 800a606:	42a0      	cmp	r0, r4
 800a608:	d001      	beq.n	800a60e <strncmp+0x1c>
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d1f5      	bne.n	800a5fa <strncmp+0x8>
 800a60e:	1a98      	subs	r0, r3, r2
 800a610:	bd10      	pop	{r4, pc}
 800a612:	4610      	mov	r0, r2
 800a614:	e7fc      	b.n	800a610 <strncmp+0x1e>

0800a616 <strstr>:
 800a616:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a618:	780c      	ldrb	r4, [r1, #0]
 800a61a:	b164      	cbz	r4, 800a636 <strstr+0x20>
 800a61c:	4603      	mov	r3, r0
 800a61e:	781a      	ldrb	r2, [r3, #0]
 800a620:	4618      	mov	r0, r3
 800a622:	1c5e      	adds	r6, r3, #1
 800a624:	b90a      	cbnz	r2, 800a62a <strstr+0x14>
 800a626:	4610      	mov	r0, r2
 800a628:	e005      	b.n	800a636 <strstr+0x20>
 800a62a:	4294      	cmp	r4, r2
 800a62c:	d108      	bne.n	800a640 <strstr+0x2a>
 800a62e:	460d      	mov	r5, r1
 800a630:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800a634:	b902      	cbnz	r2, 800a638 <strstr+0x22>
 800a636:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a638:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800a63c:	4297      	cmp	r7, r2
 800a63e:	d0f7      	beq.n	800a630 <strstr+0x1a>
 800a640:	4633      	mov	r3, r6
 800a642:	e7ec      	b.n	800a61e <strstr+0x8>

0800a644 <_strtol_l.isra.0>:
 800a644:	2b01      	cmp	r3, #1
 800a646:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a64a:	4686      	mov	lr, r0
 800a64c:	d001      	beq.n	800a652 <_strtol_l.isra.0+0xe>
 800a64e:	2b24      	cmp	r3, #36	; 0x24
 800a650:	d906      	bls.n	800a660 <_strtol_l.isra.0+0x1c>
 800a652:	f7ff ff6f 	bl	800a534 <__errno>
 800a656:	2316      	movs	r3, #22
 800a658:	6003      	str	r3, [r0, #0]
 800a65a:	2000      	movs	r0, #0
 800a65c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a660:	468c      	mov	ip, r1
 800a662:	4e3a      	ldr	r6, [pc, #232]	; (800a74c <_strtol_l.isra.0+0x108>)
 800a664:	4660      	mov	r0, ip
 800a666:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800a66a:	5da5      	ldrb	r5, [r4, r6]
 800a66c:	f015 0508 	ands.w	r5, r5, #8
 800a670:	d1f8      	bne.n	800a664 <_strtol_l.isra.0+0x20>
 800a672:	2c2d      	cmp	r4, #45	; 0x2d
 800a674:	d133      	bne.n	800a6de <_strtol_l.isra.0+0x9a>
 800a676:	f04f 0801 	mov.w	r8, #1
 800a67a:	f89c 4000 	ldrb.w	r4, [ip]
 800a67e:	f100 0c02 	add.w	ip, r0, #2
 800a682:	2b00      	cmp	r3, #0
 800a684:	d05d      	beq.n	800a742 <_strtol_l.isra.0+0xfe>
 800a686:	2b10      	cmp	r3, #16
 800a688:	d10c      	bne.n	800a6a4 <_strtol_l.isra.0+0x60>
 800a68a:	2c30      	cmp	r4, #48	; 0x30
 800a68c:	d10a      	bne.n	800a6a4 <_strtol_l.isra.0+0x60>
 800a68e:	f89c 0000 	ldrb.w	r0, [ip]
 800a692:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a696:	2858      	cmp	r0, #88	; 0x58
 800a698:	d14e      	bne.n	800a738 <_strtol_l.isra.0+0xf4>
 800a69a:	2310      	movs	r3, #16
 800a69c:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800a6a0:	f10c 0c02 	add.w	ip, ip, #2
 800a6a4:	2500      	movs	r5, #0
 800a6a6:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800a6aa:	3f01      	subs	r7, #1
 800a6ac:	fbb7 f9f3 	udiv	r9, r7, r3
 800a6b0:	4628      	mov	r0, r5
 800a6b2:	fb03 7a19 	mls	sl, r3, r9, r7
 800a6b6:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800a6ba:	2e09      	cmp	r6, #9
 800a6bc:	d818      	bhi.n	800a6f0 <_strtol_l.isra.0+0xac>
 800a6be:	4634      	mov	r4, r6
 800a6c0:	42a3      	cmp	r3, r4
 800a6c2:	dd24      	ble.n	800a70e <_strtol_l.isra.0+0xca>
 800a6c4:	2d00      	cmp	r5, #0
 800a6c6:	db1f      	blt.n	800a708 <_strtol_l.isra.0+0xc4>
 800a6c8:	4581      	cmp	r9, r0
 800a6ca:	d31d      	bcc.n	800a708 <_strtol_l.isra.0+0xc4>
 800a6cc:	d101      	bne.n	800a6d2 <_strtol_l.isra.0+0x8e>
 800a6ce:	45a2      	cmp	sl, r4
 800a6d0:	db1a      	blt.n	800a708 <_strtol_l.isra.0+0xc4>
 800a6d2:	2501      	movs	r5, #1
 800a6d4:	fb00 4003 	mla	r0, r0, r3, r4
 800a6d8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800a6dc:	e7eb      	b.n	800a6b6 <_strtol_l.isra.0+0x72>
 800a6de:	2c2b      	cmp	r4, #43	; 0x2b
 800a6e0:	bf08      	it	eq
 800a6e2:	f89c 4000 	ldrbeq.w	r4, [ip]
 800a6e6:	46a8      	mov	r8, r5
 800a6e8:	bf08      	it	eq
 800a6ea:	f100 0c02 	addeq.w	ip, r0, #2
 800a6ee:	e7c8      	b.n	800a682 <_strtol_l.isra.0+0x3e>
 800a6f0:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800a6f4:	2e19      	cmp	r6, #25
 800a6f6:	d801      	bhi.n	800a6fc <_strtol_l.isra.0+0xb8>
 800a6f8:	3c37      	subs	r4, #55	; 0x37
 800a6fa:	e7e1      	b.n	800a6c0 <_strtol_l.isra.0+0x7c>
 800a6fc:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800a700:	2e19      	cmp	r6, #25
 800a702:	d804      	bhi.n	800a70e <_strtol_l.isra.0+0xca>
 800a704:	3c57      	subs	r4, #87	; 0x57
 800a706:	e7db      	b.n	800a6c0 <_strtol_l.isra.0+0x7c>
 800a708:	f04f 35ff 	mov.w	r5, #4294967295
 800a70c:	e7e4      	b.n	800a6d8 <_strtol_l.isra.0+0x94>
 800a70e:	2d00      	cmp	r5, #0
 800a710:	da08      	bge.n	800a724 <_strtol_l.isra.0+0xe0>
 800a712:	2322      	movs	r3, #34	; 0x22
 800a714:	4638      	mov	r0, r7
 800a716:	f8ce 3000 	str.w	r3, [lr]
 800a71a:	2a00      	cmp	r2, #0
 800a71c:	d09e      	beq.n	800a65c <_strtol_l.isra.0+0x18>
 800a71e:	f10c 31ff 	add.w	r1, ip, #4294967295
 800a722:	e007      	b.n	800a734 <_strtol_l.isra.0+0xf0>
 800a724:	f1b8 0f00 	cmp.w	r8, #0
 800a728:	d000      	beq.n	800a72c <_strtol_l.isra.0+0xe8>
 800a72a:	4240      	negs	r0, r0
 800a72c:	2a00      	cmp	r2, #0
 800a72e:	d095      	beq.n	800a65c <_strtol_l.isra.0+0x18>
 800a730:	2d00      	cmp	r5, #0
 800a732:	d1f4      	bne.n	800a71e <_strtol_l.isra.0+0xda>
 800a734:	6011      	str	r1, [r2, #0]
 800a736:	e791      	b.n	800a65c <_strtol_l.isra.0+0x18>
 800a738:	2430      	movs	r4, #48	; 0x30
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d1b2      	bne.n	800a6a4 <_strtol_l.isra.0+0x60>
 800a73e:	2308      	movs	r3, #8
 800a740:	e7b0      	b.n	800a6a4 <_strtol_l.isra.0+0x60>
 800a742:	2c30      	cmp	r4, #48	; 0x30
 800a744:	d0a3      	beq.n	800a68e <_strtol_l.isra.0+0x4a>
 800a746:	230a      	movs	r3, #10
 800a748:	e7ac      	b.n	800a6a4 <_strtol_l.isra.0+0x60>
 800a74a:	bf00      	nop
 800a74c:	0800cd59 	.word	0x0800cd59

0800a750 <strtol>:
 800a750:	4613      	mov	r3, r2
 800a752:	460a      	mov	r2, r1
 800a754:	4601      	mov	r1, r0
 800a756:	4802      	ldr	r0, [pc, #8]	; (800a760 <strtol+0x10>)
 800a758:	6800      	ldr	r0, [r0, #0]
 800a75a:	f7ff bf73 	b.w	800a644 <_strtol_l.isra.0>
 800a75e:	bf00      	nop
 800a760:	20000048 	.word	0x20000048

0800a764 <__ssputs_r>:
 800a764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a768:	688e      	ldr	r6, [r1, #8]
 800a76a:	4682      	mov	sl, r0
 800a76c:	429e      	cmp	r6, r3
 800a76e:	460c      	mov	r4, r1
 800a770:	4690      	mov	r8, r2
 800a772:	461f      	mov	r7, r3
 800a774:	d838      	bhi.n	800a7e8 <__ssputs_r+0x84>
 800a776:	898a      	ldrh	r2, [r1, #12]
 800a778:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a77c:	d032      	beq.n	800a7e4 <__ssputs_r+0x80>
 800a77e:	6825      	ldr	r5, [r4, #0]
 800a780:	6909      	ldr	r1, [r1, #16]
 800a782:	3301      	adds	r3, #1
 800a784:	eba5 0901 	sub.w	r9, r5, r1
 800a788:	6965      	ldr	r5, [r4, #20]
 800a78a:	444b      	add	r3, r9
 800a78c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a790:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a794:	106d      	asrs	r5, r5, #1
 800a796:	429d      	cmp	r5, r3
 800a798:	bf38      	it	cc
 800a79a:	461d      	movcc	r5, r3
 800a79c:	0553      	lsls	r3, r2, #21
 800a79e:	d531      	bpl.n	800a804 <__ssputs_r+0xa0>
 800a7a0:	4629      	mov	r1, r5
 800a7a2:	f000 fb53 	bl	800ae4c <_malloc_r>
 800a7a6:	4606      	mov	r6, r0
 800a7a8:	b950      	cbnz	r0, 800a7c0 <__ssputs_r+0x5c>
 800a7aa:	230c      	movs	r3, #12
 800a7ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a7b0:	f8ca 3000 	str.w	r3, [sl]
 800a7b4:	89a3      	ldrh	r3, [r4, #12]
 800a7b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7ba:	81a3      	strh	r3, [r4, #12]
 800a7bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7c0:	464a      	mov	r2, r9
 800a7c2:	6921      	ldr	r1, [r4, #16]
 800a7c4:	f000 face 	bl	800ad64 <memcpy>
 800a7c8:	89a3      	ldrh	r3, [r4, #12]
 800a7ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a7ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7d2:	81a3      	strh	r3, [r4, #12]
 800a7d4:	6126      	str	r6, [r4, #16]
 800a7d6:	444e      	add	r6, r9
 800a7d8:	6026      	str	r6, [r4, #0]
 800a7da:	463e      	mov	r6, r7
 800a7dc:	6165      	str	r5, [r4, #20]
 800a7de:	eba5 0509 	sub.w	r5, r5, r9
 800a7e2:	60a5      	str	r5, [r4, #8]
 800a7e4:	42be      	cmp	r6, r7
 800a7e6:	d900      	bls.n	800a7ea <__ssputs_r+0x86>
 800a7e8:	463e      	mov	r6, r7
 800a7ea:	4632      	mov	r2, r6
 800a7ec:	4641      	mov	r1, r8
 800a7ee:	6820      	ldr	r0, [r4, #0]
 800a7f0:	f000 fac6 	bl	800ad80 <memmove>
 800a7f4:	68a3      	ldr	r3, [r4, #8]
 800a7f6:	6822      	ldr	r2, [r4, #0]
 800a7f8:	1b9b      	subs	r3, r3, r6
 800a7fa:	4432      	add	r2, r6
 800a7fc:	2000      	movs	r0, #0
 800a7fe:	60a3      	str	r3, [r4, #8]
 800a800:	6022      	str	r2, [r4, #0]
 800a802:	e7db      	b.n	800a7bc <__ssputs_r+0x58>
 800a804:	462a      	mov	r2, r5
 800a806:	f000 fb7b 	bl	800af00 <_realloc_r>
 800a80a:	4606      	mov	r6, r0
 800a80c:	2800      	cmp	r0, #0
 800a80e:	d1e1      	bne.n	800a7d4 <__ssputs_r+0x70>
 800a810:	4650      	mov	r0, sl
 800a812:	6921      	ldr	r1, [r4, #16]
 800a814:	f000 face 	bl	800adb4 <_free_r>
 800a818:	e7c7      	b.n	800a7aa <__ssputs_r+0x46>
	...

0800a81c <_svfiprintf_r>:
 800a81c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a820:	4698      	mov	r8, r3
 800a822:	898b      	ldrh	r3, [r1, #12]
 800a824:	4607      	mov	r7, r0
 800a826:	061b      	lsls	r3, r3, #24
 800a828:	460d      	mov	r5, r1
 800a82a:	4614      	mov	r4, r2
 800a82c:	b09d      	sub	sp, #116	; 0x74
 800a82e:	d50e      	bpl.n	800a84e <_svfiprintf_r+0x32>
 800a830:	690b      	ldr	r3, [r1, #16]
 800a832:	b963      	cbnz	r3, 800a84e <_svfiprintf_r+0x32>
 800a834:	2140      	movs	r1, #64	; 0x40
 800a836:	f000 fb09 	bl	800ae4c <_malloc_r>
 800a83a:	6028      	str	r0, [r5, #0]
 800a83c:	6128      	str	r0, [r5, #16]
 800a83e:	b920      	cbnz	r0, 800a84a <_svfiprintf_r+0x2e>
 800a840:	230c      	movs	r3, #12
 800a842:	603b      	str	r3, [r7, #0]
 800a844:	f04f 30ff 	mov.w	r0, #4294967295
 800a848:	e0d1      	b.n	800a9ee <_svfiprintf_r+0x1d2>
 800a84a:	2340      	movs	r3, #64	; 0x40
 800a84c:	616b      	str	r3, [r5, #20]
 800a84e:	2300      	movs	r3, #0
 800a850:	9309      	str	r3, [sp, #36]	; 0x24
 800a852:	2320      	movs	r3, #32
 800a854:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a858:	2330      	movs	r3, #48	; 0x30
 800a85a:	f04f 0901 	mov.w	r9, #1
 800a85e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a862:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800aa08 <_svfiprintf_r+0x1ec>
 800a866:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a86a:	4623      	mov	r3, r4
 800a86c:	469a      	mov	sl, r3
 800a86e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a872:	b10a      	cbz	r2, 800a878 <_svfiprintf_r+0x5c>
 800a874:	2a25      	cmp	r2, #37	; 0x25
 800a876:	d1f9      	bne.n	800a86c <_svfiprintf_r+0x50>
 800a878:	ebba 0b04 	subs.w	fp, sl, r4
 800a87c:	d00b      	beq.n	800a896 <_svfiprintf_r+0x7a>
 800a87e:	465b      	mov	r3, fp
 800a880:	4622      	mov	r2, r4
 800a882:	4629      	mov	r1, r5
 800a884:	4638      	mov	r0, r7
 800a886:	f7ff ff6d 	bl	800a764 <__ssputs_r>
 800a88a:	3001      	adds	r0, #1
 800a88c:	f000 80aa 	beq.w	800a9e4 <_svfiprintf_r+0x1c8>
 800a890:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a892:	445a      	add	r2, fp
 800a894:	9209      	str	r2, [sp, #36]	; 0x24
 800a896:	f89a 3000 	ldrb.w	r3, [sl]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	f000 80a2 	beq.w	800a9e4 <_svfiprintf_r+0x1c8>
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	f04f 32ff 	mov.w	r2, #4294967295
 800a8a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a8aa:	f10a 0a01 	add.w	sl, sl, #1
 800a8ae:	9304      	str	r3, [sp, #16]
 800a8b0:	9307      	str	r3, [sp, #28]
 800a8b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a8b6:	931a      	str	r3, [sp, #104]	; 0x68
 800a8b8:	4654      	mov	r4, sl
 800a8ba:	2205      	movs	r2, #5
 800a8bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8c0:	4851      	ldr	r0, [pc, #324]	; (800aa08 <_svfiprintf_r+0x1ec>)
 800a8c2:	f000 fa41 	bl	800ad48 <memchr>
 800a8c6:	9a04      	ldr	r2, [sp, #16]
 800a8c8:	b9d8      	cbnz	r0, 800a902 <_svfiprintf_r+0xe6>
 800a8ca:	06d0      	lsls	r0, r2, #27
 800a8cc:	bf44      	itt	mi
 800a8ce:	2320      	movmi	r3, #32
 800a8d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8d4:	0711      	lsls	r1, r2, #28
 800a8d6:	bf44      	itt	mi
 800a8d8:	232b      	movmi	r3, #43	; 0x2b
 800a8da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8de:	f89a 3000 	ldrb.w	r3, [sl]
 800a8e2:	2b2a      	cmp	r3, #42	; 0x2a
 800a8e4:	d015      	beq.n	800a912 <_svfiprintf_r+0xf6>
 800a8e6:	4654      	mov	r4, sl
 800a8e8:	2000      	movs	r0, #0
 800a8ea:	f04f 0c0a 	mov.w	ip, #10
 800a8ee:	9a07      	ldr	r2, [sp, #28]
 800a8f0:	4621      	mov	r1, r4
 800a8f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a8f6:	3b30      	subs	r3, #48	; 0x30
 800a8f8:	2b09      	cmp	r3, #9
 800a8fa:	d94e      	bls.n	800a99a <_svfiprintf_r+0x17e>
 800a8fc:	b1b0      	cbz	r0, 800a92c <_svfiprintf_r+0x110>
 800a8fe:	9207      	str	r2, [sp, #28]
 800a900:	e014      	b.n	800a92c <_svfiprintf_r+0x110>
 800a902:	eba0 0308 	sub.w	r3, r0, r8
 800a906:	fa09 f303 	lsl.w	r3, r9, r3
 800a90a:	4313      	orrs	r3, r2
 800a90c:	46a2      	mov	sl, r4
 800a90e:	9304      	str	r3, [sp, #16]
 800a910:	e7d2      	b.n	800a8b8 <_svfiprintf_r+0x9c>
 800a912:	9b03      	ldr	r3, [sp, #12]
 800a914:	1d19      	adds	r1, r3, #4
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	9103      	str	r1, [sp, #12]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	bfbb      	ittet	lt
 800a91e:	425b      	neglt	r3, r3
 800a920:	f042 0202 	orrlt.w	r2, r2, #2
 800a924:	9307      	strge	r3, [sp, #28]
 800a926:	9307      	strlt	r3, [sp, #28]
 800a928:	bfb8      	it	lt
 800a92a:	9204      	strlt	r2, [sp, #16]
 800a92c:	7823      	ldrb	r3, [r4, #0]
 800a92e:	2b2e      	cmp	r3, #46	; 0x2e
 800a930:	d10c      	bne.n	800a94c <_svfiprintf_r+0x130>
 800a932:	7863      	ldrb	r3, [r4, #1]
 800a934:	2b2a      	cmp	r3, #42	; 0x2a
 800a936:	d135      	bne.n	800a9a4 <_svfiprintf_r+0x188>
 800a938:	9b03      	ldr	r3, [sp, #12]
 800a93a:	3402      	adds	r4, #2
 800a93c:	1d1a      	adds	r2, r3, #4
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	9203      	str	r2, [sp, #12]
 800a942:	2b00      	cmp	r3, #0
 800a944:	bfb8      	it	lt
 800a946:	f04f 33ff 	movlt.w	r3, #4294967295
 800a94a:	9305      	str	r3, [sp, #20]
 800a94c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800aa18 <_svfiprintf_r+0x1fc>
 800a950:	2203      	movs	r2, #3
 800a952:	4650      	mov	r0, sl
 800a954:	7821      	ldrb	r1, [r4, #0]
 800a956:	f000 f9f7 	bl	800ad48 <memchr>
 800a95a:	b140      	cbz	r0, 800a96e <_svfiprintf_r+0x152>
 800a95c:	2340      	movs	r3, #64	; 0x40
 800a95e:	eba0 000a 	sub.w	r0, r0, sl
 800a962:	fa03 f000 	lsl.w	r0, r3, r0
 800a966:	9b04      	ldr	r3, [sp, #16]
 800a968:	3401      	adds	r4, #1
 800a96a:	4303      	orrs	r3, r0
 800a96c:	9304      	str	r3, [sp, #16]
 800a96e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a972:	2206      	movs	r2, #6
 800a974:	4825      	ldr	r0, [pc, #148]	; (800aa0c <_svfiprintf_r+0x1f0>)
 800a976:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a97a:	f000 f9e5 	bl	800ad48 <memchr>
 800a97e:	2800      	cmp	r0, #0
 800a980:	d038      	beq.n	800a9f4 <_svfiprintf_r+0x1d8>
 800a982:	4b23      	ldr	r3, [pc, #140]	; (800aa10 <_svfiprintf_r+0x1f4>)
 800a984:	bb1b      	cbnz	r3, 800a9ce <_svfiprintf_r+0x1b2>
 800a986:	9b03      	ldr	r3, [sp, #12]
 800a988:	3307      	adds	r3, #7
 800a98a:	f023 0307 	bic.w	r3, r3, #7
 800a98e:	3308      	adds	r3, #8
 800a990:	9303      	str	r3, [sp, #12]
 800a992:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a994:	4433      	add	r3, r6
 800a996:	9309      	str	r3, [sp, #36]	; 0x24
 800a998:	e767      	b.n	800a86a <_svfiprintf_r+0x4e>
 800a99a:	460c      	mov	r4, r1
 800a99c:	2001      	movs	r0, #1
 800a99e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a9a2:	e7a5      	b.n	800a8f0 <_svfiprintf_r+0xd4>
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	f04f 0c0a 	mov.w	ip, #10
 800a9aa:	4619      	mov	r1, r3
 800a9ac:	3401      	adds	r4, #1
 800a9ae:	9305      	str	r3, [sp, #20]
 800a9b0:	4620      	mov	r0, r4
 800a9b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a9b6:	3a30      	subs	r2, #48	; 0x30
 800a9b8:	2a09      	cmp	r2, #9
 800a9ba:	d903      	bls.n	800a9c4 <_svfiprintf_r+0x1a8>
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d0c5      	beq.n	800a94c <_svfiprintf_r+0x130>
 800a9c0:	9105      	str	r1, [sp, #20]
 800a9c2:	e7c3      	b.n	800a94c <_svfiprintf_r+0x130>
 800a9c4:	4604      	mov	r4, r0
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a9cc:	e7f0      	b.n	800a9b0 <_svfiprintf_r+0x194>
 800a9ce:	ab03      	add	r3, sp, #12
 800a9d0:	9300      	str	r3, [sp, #0]
 800a9d2:	462a      	mov	r2, r5
 800a9d4:	4638      	mov	r0, r7
 800a9d6:	4b0f      	ldr	r3, [pc, #60]	; (800aa14 <_svfiprintf_r+0x1f8>)
 800a9d8:	a904      	add	r1, sp, #16
 800a9da:	f3af 8000 	nop.w
 800a9de:	1c42      	adds	r2, r0, #1
 800a9e0:	4606      	mov	r6, r0
 800a9e2:	d1d6      	bne.n	800a992 <_svfiprintf_r+0x176>
 800a9e4:	89ab      	ldrh	r3, [r5, #12]
 800a9e6:	065b      	lsls	r3, r3, #25
 800a9e8:	f53f af2c 	bmi.w	800a844 <_svfiprintf_r+0x28>
 800a9ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a9ee:	b01d      	add	sp, #116	; 0x74
 800a9f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9f4:	ab03      	add	r3, sp, #12
 800a9f6:	9300      	str	r3, [sp, #0]
 800a9f8:	462a      	mov	r2, r5
 800a9fa:	4638      	mov	r0, r7
 800a9fc:	4b05      	ldr	r3, [pc, #20]	; (800aa14 <_svfiprintf_r+0x1f8>)
 800a9fe:	a904      	add	r1, sp, #16
 800aa00:	f000 f87c 	bl	800aafc <_printf_i>
 800aa04:	e7eb      	b.n	800a9de <_svfiprintf_r+0x1c2>
 800aa06:	bf00      	nop
 800aa08:	0800ce59 	.word	0x0800ce59
 800aa0c:	0800ce63 	.word	0x0800ce63
 800aa10:	00000000 	.word	0x00000000
 800aa14:	0800a765 	.word	0x0800a765
 800aa18:	0800ce5f 	.word	0x0800ce5f

0800aa1c <_printf_common>:
 800aa1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa20:	4616      	mov	r6, r2
 800aa22:	4699      	mov	r9, r3
 800aa24:	688a      	ldr	r2, [r1, #8]
 800aa26:	690b      	ldr	r3, [r1, #16]
 800aa28:	4607      	mov	r7, r0
 800aa2a:	4293      	cmp	r3, r2
 800aa2c:	bfb8      	it	lt
 800aa2e:	4613      	movlt	r3, r2
 800aa30:	6033      	str	r3, [r6, #0]
 800aa32:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aa36:	460c      	mov	r4, r1
 800aa38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aa3c:	b10a      	cbz	r2, 800aa42 <_printf_common+0x26>
 800aa3e:	3301      	adds	r3, #1
 800aa40:	6033      	str	r3, [r6, #0]
 800aa42:	6823      	ldr	r3, [r4, #0]
 800aa44:	0699      	lsls	r1, r3, #26
 800aa46:	bf42      	ittt	mi
 800aa48:	6833      	ldrmi	r3, [r6, #0]
 800aa4a:	3302      	addmi	r3, #2
 800aa4c:	6033      	strmi	r3, [r6, #0]
 800aa4e:	6825      	ldr	r5, [r4, #0]
 800aa50:	f015 0506 	ands.w	r5, r5, #6
 800aa54:	d106      	bne.n	800aa64 <_printf_common+0x48>
 800aa56:	f104 0a19 	add.w	sl, r4, #25
 800aa5a:	68e3      	ldr	r3, [r4, #12]
 800aa5c:	6832      	ldr	r2, [r6, #0]
 800aa5e:	1a9b      	subs	r3, r3, r2
 800aa60:	42ab      	cmp	r3, r5
 800aa62:	dc28      	bgt.n	800aab6 <_printf_common+0x9a>
 800aa64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aa68:	1e13      	subs	r3, r2, #0
 800aa6a:	6822      	ldr	r2, [r4, #0]
 800aa6c:	bf18      	it	ne
 800aa6e:	2301      	movne	r3, #1
 800aa70:	0692      	lsls	r2, r2, #26
 800aa72:	d42d      	bmi.n	800aad0 <_printf_common+0xb4>
 800aa74:	4649      	mov	r1, r9
 800aa76:	4638      	mov	r0, r7
 800aa78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aa7c:	47c0      	blx	r8
 800aa7e:	3001      	adds	r0, #1
 800aa80:	d020      	beq.n	800aac4 <_printf_common+0xa8>
 800aa82:	6823      	ldr	r3, [r4, #0]
 800aa84:	68e5      	ldr	r5, [r4, #12]
 800aa86:	f003 0306 	and.w	r3, r3, #6
 800aa8a:	2b04      	cmp	r3, #4
 800aa8c:	bf18      	it	ne
 800aa8e:	2500      	movne	r5, #0
 800aa90:	6832      	ldr	r2, [r6, #0]
 800aa92:	f04f 0600 	mov.w	r6, #0
 800aa96:	68a3      	ldr	r3, [r4, #8]
 800aa98:	bf08      	it	eq
 800aa9a:	1aad      	subeq	r5, r5, r2
 800aa9c:	6922      	ldr	r2, [r4, #16]
 800aa9e:	bf08      	it	eq
 800aaa0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aaa4:	4293      	cmp	r3, r2
 800aaa6:	bfc4      	itt	gt
 800aaa8:	1a9b      	subgt	r3, r3, r2
 800aaaa:	18ed      	addgt	r5, r5, r3
 800aaac:	341a      	adds	r4, #26
 800aaae:	42b5      	cmp	r5, r6
 800aab0:	d11a      	bne.n	800aae8 <_printf_common+0xcc>
 800aab2:	2000      	movs	r0, #0
 800aab4:	e008      	b.n	800aac8 <_printf_common+0xac>
 800aab6:	2301      	movs	r3, #1
 800aab8:	4652      	mov	r2, sl
 800aaba:	4649      	mov	r1, r9
 800aabc:	4638      	mov	r0, r7
 800aabe:	47c0      	blx	r8
 800aac0:	3001      	adds	r0, #1
 800aac2:	d103      	bne.n	800aacc <_printf_common+0xb0>
 800aac4:	f04f 30ff 	mov.w	r0, #4294967295
 800aac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aacc:	3501      	adds	r5, #1
 800aace:	e7c4      	b.n	800aa5a <_printf_common+0x3e>
 800aad0:	2030      	movs	r0, #48	; 0x30
 800aad2:	18e1      	adds	r1, r4, r3
 800aad4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aad8:	1c5a      	adds	r2, r3, #1
 800aada:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aade:	4422      	add	r2, r4
 800aae0:	3302      	adds	r3, #2
 800aae2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aae6:	e7c5      	b.n	800aa74 <_printf_common+0x58>
 800aae8:	2301      	movs	r3, #1
 800aaea:	4622      	mov	r2, r4
 800aaec:	4649      	mov	r1, r9
 800aaee:	4638      	mov	r0, r7
 800aaf0:	47c0      	blx	r8
 800aaf2:	3001      	adds	r0, #1
 800aaf4:	d0e6      	beq.n	800aac4 <_printf_common+0xa8>
 800aaf6:	3601      	adds	r6, #1
 800aaf8:	e7d9      	b.n	800aaae <_printf_common+0x92>
	...

0800aafc <_printf_i>:
 800aafc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab00:	460c      	mov	r4, r1
 800ab02:	7e27      	ldrb	r7, [r4, #24]
 800ab04:	4691      	mov	r9, r2
 800ab06:	2f78      	cmp	r7, #120	; 0x78
 800ab08:	4680      	mov	r8, r0
 800ab0a:	469a      	mov	sl, r3
 800ab0c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ab0e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ab12:	d807      	bhi.n	800ab24 <_printf_i+0x28>
 800ab14:	2f62      	cmp	r7, #98	; 0x62
 800ab16:	d80a      	bhi.n	800ab2e <_printf_i+0x32>
 800ab18:	2f00      	cmp	r7, #0
 800ab1a:	f000 80d9 	beq.w	800acd0 <_printf_i+0x1d4>
 800ab1e:	2f58      	cmp	r7, #88	; 0x58
 800ab20:	f000 80a4 	beq.w	800ac6c <_printf_i+0x170>
 800ab24:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ab28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ab2c:	e03a      	b.n	800aba4 <_printf_i+0xa8>
 800ab2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ab32:	2b15      	cmp	r3, #21
 800ab34:	d8f6      	bhi.n	800ab24 <_printf_i+0x28>
 800ab36:	a001      	add	r0, pc, #4	; (adr r0, 800ab3c <_printf_i+0x40>)
 800ab38:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ab3c:	0800ab95 	.word	0x0800ab95
 800ab40:	0800aba9 	.word	0x0800aba9
 800ab44:	0800ab25 	.word	0x0800ab25
 800ab48:	0800ab25 	.word	0x0800ab25
 800ab4c:	0800ab25 	.word	0x0800ab25
 800ab50:	0800ab25 	.word	0x0800ab25
 800ab54:	0800aba9 	.word	0x0800aba9
 800ab58:	0800ab25 	.word	0x0800ab25
 800ab5c:	0800ab25 	.word	0x0800ab25
 800ab60:	0800ab25 	.word	0x0800ab25
 800ab64:	0800ab25 	.word	0x0800ab25
 800ab68:	0800acb7 	.word	0x0800acb7
 800ab6c:	0800abd9 	.word	0x0800abd9
 800ab70:	0800ac99 	.word	0x0800ac99
 800ab74:	0800ab25 	.word	0x0800ab25
 800ab78:	0800ab25 	.word	0x0800ab25
 800ab7c:	0800acd9 	.word	0x0800acd9
 800ab80:	0800ab25 	.word	0x0800ab25
 800ab84:	0800abd9 	.word	0x0800abd9
 800ab88:	0800ab25 	.word	0x0800ab25
 800ab8c:	0800ab25 	.word	0x0800ab25
 800ab90:	0800aca1 	.word	0x0800aca1
 800ab94:	680b      	ldr	r3, [r1, #0]
 800ab96:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ab9a:	1d1a      	adds	r2, r3, #4
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	600a      	str	r2, [r1, #0]
 800aba0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aba4:	2301      	movs	r3, #1
 800aba6:	e0a4      	b.n	800acf2 <_printf_i+0x1f6>
 800aba8:	6825      	ldr	r5, [r4, #0]
 800abaa:	6808      	ldr	r0, [r1, #0]
 800abac:	062e      	lsls	r6, r5, #24
 800abae:	f100 0304 	add.w	r3, r0, #4
 800abb2:	d50a      	bpl.n	800abca <_printf_i+0xce>
 800abb4:	6805      	ldr	r5, [r0, #0]
 800abb6:	600b      	str	r3, [r1, #0]
 800abb8:	2d00      	cmp	r5, #0
 800abba:	da03      	bge.n	800abc4 <_printf_i+0xc8>
 800abbc:	232d      	movs	r3, #45	; 0x2d
 800abbe:	426d      	negs	r5, r5
 800abc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800abc4:	230a      	movs	r3, #10
 800abc6:	485e      	ldr	r0, [pc, #376]	; (800ad40 <_printf_i+0x244>)
 800abc8:	e019      	b.n	800abfe <_printf_i+0x102>
 800abca:	f015 0f40 	tst.w	r5, #64	; 0x40
 800abce:	6805      	ldr	r5, [r0, #0]
 800abd0:	600b      	str	r3, [r1, #0]
 800abd2:	bf18      	it	ne
 800abd4:	b22d      	sxthne	r5, r5
 800abd6:	e7ef      	b.n	800abb8 <_printf_i+0xbc>
 800abd8:	680b      	ldr	r3, [r1, #0]
 800abda:	6825      	ldr	r5, [r4, #0]
 800abdc:	1d18      	adds	r0, r3, #4
 800abde:	6008      	str	r0, [r1, #0]
 800abe0:	0628      	lsls	r0, r5, #24
 800abe2:	d501      	bpl.n	800abe8 <_printf_i+0xec>
 800abe4:	681d      	ldr	r5, [r3, #0]
 800abe6:	e002      	b.n	800abee <_printf_i+0xf2>
 800abe8:	0669      	lsls	r1, r5, #25
 800abea:	d5fb      	bpl.n	800abe4 <_printf_i+0xe8>
 800abec:	881d      	ldrh	r5, [r3, #0]
 800abee:	2f6f      	cmp	r7, #111	; 0x6f
 800abf0:	bf0c      	ite	eq
 800abf2:	2308      	moveq	r3, #8
 800abf4:	230a      	movne	r3, #10
 800abf6:	4852      	ldr	r0, [pc, #328]	; (800ad40 <_printf_i+0x244>)
 800abf8:	2100      	movs	r1, #0
 800abfa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800abfe:	6866      	ldr	r6, [r4, #4]
 800ac00:	2e00      	cmp	r6, #0
 800ac02:	bfa8      	it	ge
 800ac04:	6821      	ldrge	r1, [r4, #0]
 800ac06:	60a6      	str	r6, [r4, #8]
 800ac08:	bfa4      	itt	ge
 800ac0a:	f021 0104 	bicge.w	r1, r1, #4
 800ac0e:	6021      	strge	r1, [r4, #0]
 800ac10:	b90d      	cbnz	r5, 800ac16 <_printf_i+0x11a>
 800ac12:	2e00      	cmp	r6, #0
 800ac14:	d04d      	beq.n	800acb2 <_printf_i+0x1b6>
 800ac16:	4616      	mov	r6, r2
 800ac18:	fbb5 f1f3 	udiv	r1, r5, r3
 800ac1c:	fb03 5711 	mls	r7, r3, r1, r5
 800ac20:	5dc7      	ldrb	r7, [r0, r7]
 800ac22:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ac26:	462f      	mov	r7, r5
 800ac28:	42bb      	cmp	r3, r7
 800ac2a:	460d      	mov	r5, r1
 800ac2c:	d9f4      	bls.n	800ac18 <_printf_i+0x11c>
 800ac2e:	2b08      	cmp	r3, #8
 800ac30:	d10b      	bne.n	800ac4a <_printf_i+0x14e>
 800ac32:	6823      	ldr	r3, [r4, #0]
 800ac34:	07df      	lsls	r7, r3, #31
 800ac36:	d508      	bpl.n	800ac4a <_printf_i+0x14e>
 800ac38:	6923      	ldr	r3, [r4, #16]
 800ac3a:	6861      	ldr	r1, [r4, #4]
 800ac3c:	4299      	cmp	r1, r3
 800ac3e:	bfde      	ittt	le
 800ac40:	2330      	movle	r3, #48	; 0x30
 800ac42:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ac46:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ac4a:	1b92      	subs	r2, r2, r6
 800ac4c:	6122      	str	r2, [r4, #16]
 800ac4e:	464b      	mov	r3, r9
 800ac50:	4621      	mov	r1, r4
 800ac52:	4640      	mov	r0, r8
 800ac54:	f8cd a000 	str.w	sl, [sp]
 800ac58:	aa03      	add	r2, sp, #12
 800ac5a:	f7ff fedf 	bl	800aa1c <_printf_common>
 800ac5e:	3001      	adds	r0, #1
 800ac60:	d14c      	bne.n	800acfc <_printf_i+0x200>
 800ac62:	f04f 30ff 	mov.w	r0, #4294967295
 800ac66:	b004      	add	sp, #16
 800ac68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac6c:	4834      	ldr	r0, [pc, #208]	; (800ad40 <_printf_i+0x244>)
 800ac6e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ac72:	680e      	ldr	r6, [r1, #0]
 800ac74:	6823      	ldr	r3, [r4, #0]
 800ac76:	f856 5b04 	ldr.w	r5, [r6], #4
 800ac7a:	061f      	lsls	r7, r3, #24
 800ac7c:	600e      	str	r6, [r1, #0]
 800ac7e:	d514      	bpl.n	800acaa <_printf_i+0x1ae>
 800ac80:	07d9      	lsls	r1, r3, #31
 800ac82:	bf44      	itt	mi
 800ac84:	f043 0320 	orrmi.w	r3, r3, #32
 800ac88:	6023      	strmi	r3, [r4, #0]
 800ac8a:	b91d      	cbnz	r5, 800ac94 <_printf_i+0x198>
 800ac8c:	6823      	ldr	r3, [r4, #0]
 800ac8e:	f023 0320 	bic.w	r3, r3, #32
 800ac92:	6023      	str	r3, [r4, #0]
 800ac94:	2310      	movs	r3, #16
 800ac96:	e7af      	b.n	800abf8 <_printf_i+0xfc>
 800ac98:	6823      	ldr	r3, [r4, #0]
 800ac9a:	f043 0320 	orr.w	r3, r3, #32
 800ac9e:	6023      	str	r3, [r4, #0]
 800aca0:	2378      	movs	r3, #120	; 0x78
 800aca2:	4828      	ldr	r0, [pc, #160]	; (800ad44 <_printf_i+0x248>)
 800aca4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aca8:	e7e3      	b.n	800ac72 <_printf_i+0x176>
 800acaa:	065e      	lsls	r6, r3, #25
 800acac:	bf48      	it	mi
 800acae:	b2ad      	uxthmi	r5, r5
 800acb0:	e7e6      	b.n	800ac80 <_printf_i+0x184>
 800acb2:	4616      	mov	r6, r2
 800acb4:	e7bb      	b.n	800ac2e <_printf_i+0x132>
 800acb6:	680b      	ldr	r3, [r1, #0]
 800acb8:	6826      	ldr	r6, [r4, #0]
 800acba:	1d1d      	adds	r5, r3, #4
 800acbc:	6960      	ldr	r0, [r4, #20]
 800acbe:	600d      	str	r5, [r1, #0]
 800acc0:	0635      	lsls	r5, r6, #24
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	d501      	bpl.n	800acca <_printf_i+0x1ce>
 800acc6:	6018      	str	r0, [r3, #0]
 800acc8:	e002      	b.n	800acd0 <_printf_i+0x1d4>
 800acca:	0671      	lsls	r1, r6, #25
 800accc:	d5fb      	bpl.n	800acc6 <_printf_i+0x1ca>
 800acce:	8018      	strh	r0, [r3, #0]
 800acd0:	2300      	movs	r3, #0
 800acd2:	4616      	mov	r6, r2
 800acd4:	6123      	str	r3, [r4, #16]
 800acd6:	e7ba      	b.n	800ac4e <_printf_i+0x152>
 800acd8:	680b      	ldr	r3, [r1, #0]
 800acda:	1d1a      	adds	r2, r3, #4
 800acdc:	600a      	str	r2, [r1, #0]
 800acde:	681e      	ldr	r6, [r3, #0]
 800ace0:	2100      	movs	r1, #0
 800ace2:	4630      	mov	r0, r6
 800ace4:	6862      	ldr	r2, [r4, #4]
 800ace6:	f000 f82f 	bl	800ad48 <memchr>
 800acea:	b108      	cbz	r0, 800acf0 <_printf_i+0x1f4>
 800acec:	1b80      	subs	r0, r0, r6
 800acee:	6060      	str	r0, [r4, #4]
 800acf0:	6863      	ldr	r3, [r4, #4]
 800acf2:	6123      	str	r3, [r4, #16]
 800acf4:	2300      	movs	r3, #0
 800acf6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800acfa:	e7a8      	b.n	800ac4e <_printf_i+0x152>
 800acfc:	4632      	mov	r2, r6
 800acfe:	4649      	mov	r1, r9
 800ad00:	4640      	mov	r0, r8
 800ad02:	6923      	ldr	r3, [r4, #16]
 800ad04:	47d0      	blx	sl
 800ad06:	3001      	adds	r0, #1
 800ad08:	d0ab      	beq.n	800ac62 <_printf_i+0x166>
 800ad0a:	6823      	ldr	r3, [r4, #0]
 800ad0c:	079b      	lsls	r3, r3, #30
 800ad0e:	d413      	bmi.n	800ad38 <_printf_i+0x23c>
 800ad10:	68e0      	ldr	r0, [r4, #12]
 800ad12:	9b03      	ldr	r3, [sp, #12]
 800ad14:	4298      	cmp	r0, r3
 800ad16:	bfb8      	it	lt
 800ad18:	4618      	movlt	r0, r3
 800ad1a:	e7a4      	b.n	800ac66 <_printf_i+0x16a>
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	4632      	mov	r2, r6
 800ad20:	4649      	mov	r1, r9
 800ad22:	4640      	mov	r0, r8
 800ad24:	47d0      	blx	sl
 800ad26:	3001      	adds	r0, #1
 800ad28:	d09b      	beq.n	800ac62 <_printf_i+0x166>
 800ad2a:	3501      	adds	r5, #1
 800ad2c:	68e3      	ldr	r3, [r4, #12]
 800ad2e:	9903      	ldr	r1, [sp, #12]
 800ad30:	1a5b      	subs	r3, r3, r1
 800ad32:	42ab      	cmp	r3, r5
 800ad34:	dcf2      	bgt.n	800ad1c <_printf_i+0x220>
 800ad36:	e7eb      	b.n	800ad10 <_printf_i+0x214>
 800ad38:	2500      	movs	r5, #0
 800ad3a:	f104 0619 	add.w	r6, r4, #25
 800ad3e:	e7f5      	b.n	800ad2c <_printf_i+0x230>
 800ad40:	0800ce6a 	.word	0x0800ce6a
 800ad44:	0800ce7b 	.word	0x0800ce7b

0800ad48 <memchr>:
 800ad48:	4603      	mov	r3, r0
 800ad4a:	b510      	push	{r4, lr}
 800ad4c:	b2c9      	uxtb	r1, r1
 800ad4e:	4402      	add	r2, r0
 800ad50:	4293      	cmp	r3, r2
 800ad52:	4618      	mov	r0, r3
 800ad54:	d101      	bne.n	800ad5a <memchr+0x12>
 800ad56:	2000      	movs	r0, #0
 800ad58:	e003      	b.n	800ad62 <memchr+0x1a>
 800ad5a:	7804      	ldrb	r4, [r0, #0]
 800ad5c:	3301      	adds	r3, #1
 800ad5e:	428c      	cmp	r4, r1
 800ad60:	d1f6      	bne.n	800ad50 <memchr+0x8>
 800ad62:	bd10      	pop	{r4, pc}

0800ad64 <memcpy>:
 800ad64:	440a      	add	r2, r1
 800ad66:	4291      	cmp	r1, r2
 800ad68:	f100 33ff 	add.w	r3, r0, #4294967295
 800ad6c:	d100      	bne.n	800ad70 <memcpy+0xc>
 800ad6e:	4770      	bx	lr
 800ad70:	b510      	push	{r4, lr}
 800ad72:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad76:	4291      	cmp	r1, r2
 800ad78:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ad7c:	d1f9      	bne.n	800ad72 <memcpy+0xe>
 800ad7e:	bd10      	pop	{r4, pc}

0800ad80 <memmove>:
 800ad80:	4288      	cmp	r0, r1
 800ad82:	b510      	push	{r4, lr}
 800ad84:	eb01 0402 	add.w	r4, r1, r2
 800ad88:	d902      	bls.n	800ad90 <memmove+0x10>
 800ad8a:	4284      	cmp	r4, r0
 800ad8c:	4623      	mov	r3, r4
 800ad8e:	d807      	bhi.n	800ada0 <memmove+0x20>
 800ad90:	1e43      	subs	r3, r0, #1
 800ad92:	42a1      	cmp	r1, r4
 800ad94:	d008      	beq.n	800ada8 <memmove+0x28>
 800ad96:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ad9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ad9e:	e7f8      	b.n	800ad92 <memmove+0x12>
 800ada0:	4601      	mov	r1, r0
 800ada2:	4402      	add	r2, r0
 800ada4:	428a      	cmp	r2, r1
 800ada6:	d100      	bne.n	800adaa <memmove+0x2a>
 800ada8:	bd10      	pop	{r4, pc}
 800adaa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800adae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800adb2:	e7f7      	b.n	800ada4 <memmove+0x24>

0800adb4 <_free_r>:
 800adb4:	b538      	push	{r3, r4, r5, lr}
 800adb6:	4605      	mov	r5, r0
 800adb8:	2900      	cmp	r1, #0
 800adba:	d043      	beq.n	800ae44 <_free_r+0x90>
 800adbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800adc0:	1f0c      	subs	r4, r1, #4
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	bfb8      	it	lt
 800adc6:	18e4      	addlt	r4, r4, r3
 800adc8:	f000 f8d0 	bl	800af6c <__malloc_lock>
 800adcc:	4a1e      	ldr	r2, [pc, #120]	; (800ae48 <_free_r+0x94>)
 800adce:	6813      	ldr	r3, [r2, #0]
 800add0:	4610      	mov	r0, r2
 800add2:	b933      	cbnz	r3, 800ade2 <_free_r+0x2e>
 800add4:	6063      	str	r3, [r4, #4]
 800add6:	6014      	str	r4, [r2, #0]
 800add8:	4628      	mov	r0, r5
 800adda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800adde:	f000 b8cb 	b.w	800af78 <__malloc_unlock>
 800ade2:	42a3      	cmp	r3, r4
 800ade4:	d90a      	bls.n	800adfc <_free_r+0x48>
 800ade6:	6821      	ldr	r1, [r4, #0]
 800ade8:	1862      	adds	r2, r4, r1
 800adea:	4293      	cmp	r3, r2
 800adec:	bf01      	itttt	eq
 800adee:	681a      	ldreq	r2, [r3, #0]
 800adf0:	685b      	ldreq	r3, [r3, #4]
 800adf2:	1852      	addeq	r2, r2, r1
 800adf4:	6022      	streq	r2, [r4, #0]
 800adf6:	6063      	str	r3, [r4, #4]
 800adf8:	6004      	str	r4, [r0, #0]
 800adfa:	e7ed      	b.n	800add8 <_free_r+0x24>
 800adfc:	461a      	mov	r2, r3
 800adfe:	685b      	ldr	r3, [r3, #4]
 800ae00:	b10b      	cbz	r3, 800ae06 <_free_r+0x52>
 800ae02:	42a3      	cmp	r3, r4
 800ae04:	d9fa      	bls.n	800adfc <_free_r+0x48>
 800ae06:	6811      	ldr	r1, [r2, #0]
 800ae08:	1850      	adds	r0, r2, r1
 800ae0a:	42a0      	cmp	r0, r4
 800ae0c:	d10b      	bne.n	800ae26 <_free_r+0x72>
 800ae0e:	6820      	ldr	r0, [r4, #0]
 800ae10:	4401      	add	r1, r0
 800ae12:	1850      	adds	r0, r2, r1
 800ae14:	4283      	cmp	r3, r0
 800ae16:	6011      	str	r1, [r2, #0]
 800ae18:	d1de      	bne.n	800add8 <_free_r+0x24>
 800ae1a:	6818      	ldr	r0, [r3, #0]
 800ae1c:	685b      	ldr	r3, [r3, #4]
 800ae1e:	4401      	add	r1, r0
 800ae20:	6011      	str	r1, [r2, #0]
 800ae22:	6053      	str	r3, [r2, #4]
 800ae24:	e7d8      	b.n	800add8 <_free_r+0x24>
 800ae26:	d902      	bls.n	800ae2e <_free_r+0x7a>
 800ae28:	230c      	movs	r3, #12
 800ae2a:	602b      	str	r3, [r5, #0]
 800ae2c:	e7d4      	b.n	800add8 <_free_r+0x24>
 800ae2e:	6820      	ldr	r0, [r4, #0]
 800ae30:	1821      	adds	r1, r4, r0
 800ae32:	428b      	cmp	r3, r1
 800ae34:	bf01      	itttt	eq
 800ae36:	6819      	ldreq	r1, [r3, #0]
 800ae38:	685b      	ldreq	r3, [r3, #4]
 800ae3a:	1809      	addeq	r1, r1, r0
 800ae3c:	6021      	streq	r1, [r4, #0]
 800ae3e:	6063      	str	r3, [r4, #4]
 800ae40:	6054      	str	r4, [r2, #4]
 800ae42:	e7c9      	b.n	800add8 <_free_r+0x24>
 800ae44:	bd38      	pop	{r3, r4, r5, pc}
 800ae46:	bf00      	nop
 800ae48:	200000ec 	.word	0x200000ec

0800ae4c <_malloc_r>:
 800ae4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae4e:	1ccd      	adds	r5, r1, #3
 800ae50:	f025 0503 	bic.w	r5, r5, #3
 800ae54:	3508      	adds	r5, #8
 800ae56:	2d0c      	cmp	r5, #12
 800ae58:	bf38      	it	cc
 800ae5a:	250c      	movcc	r5, #12
 800ae5c:	2d00      	cmp	r5, #0
 800ae5e:	4606      	mov	r6, r0
 800ae60:	db01      	blt.n	800ae66 <_malloc_r+0x1a>
 800ae62:	42a9      	cmp	r1, r5
 800ae64:	d903      	bls.n	800ae6e <_malloc_r+0x22>
 800ae66:	230c      	movs	r3, #12
 800ae68:	6033      	str	r3, [r6, #0]
 800ae6a:	2000      	movs	r0, #0
 800ae6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae6e:	f000 f87d 	bl	800af6c <__malloc_lock>
 800ae72:	4921      	ldr	r1, [pc, #132]	; (800aef8 <_malloc_r+0xac>)
 800ae74:	680a      	ldr	r2, [r1, #0]
 800ae76:	4614      	mov	r4, r2
 800ae78:	b99c      	cbnz	r4, 800aea2 <_malloc_r+0x56>
 800ae7a:	4f20      	ldr	r7, [pc, #128]	; (800aefc <_malloc_r+0xb0>)
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	b923      	cbnz	r3, 800ae8a <_malloc_r+0x3e>
 800ae80:	4621      	mov	r1, r4
 800ae82:	4630      	mov	r0, r6
 800ae84:	f000 f862 	bl	800af4c <_sbrk_r>
 800ae88:	6038      	str	r0, [r7, #0]
 800ae8a:	4629      	mov	r1, r5
 800ae8c:	4630      	mov	r0, r6
 800ae8e:	f000 f85d 	bl	800af4c <_sbrk_r>
 800ae92:	1c43      	adds	r3, r0, #1
 800ae94:	d123      	bne.n	800aede <_malloc_r+0x92>
 800ae96:	230c      	movs	r3, #12
 800ae98:	4630      	mov	r0, r6
 800ae9a:	6033      	str	r3, [r6, #0]
 800ae9c:	f000 f86c 	bl	800af78 <__malloc_unlock>
 800aea0:	e7e3      	b.n	800ae6a <_malloc_r+0x1e>
 800aea2:	6823      	ldr	r3, [r4, #0]
 800aea4:	1b5b      	subs	r3, r3, r5
 800aea6:	d417      	bmi.n	800aed8 <_malloc_r+0x8c>
 800aea8:	2b0b      	cmp	r3, #11
 800aeaa:	d903      	bls.n	800aeb4 <_malloc_r+0x68>
 800aeac:	6023      	str	r3, [r4, #0]
 800aeae:	441c      	add	r4, r3
 800aeb0:	6025      	str	r5, [r4, #0]
 800aeb2:	e004      	b.n	800aebe <_malloc_r+0x72>
 800aeb4:	6863      	ldr	r3, [r4, #4]
 800aeb6:	42a2      	cmp	r2, r4
 800aeb8:	bf0c      	ite	eq
 800aeba:	600b      	streq	r3, [r1, #0]
 800aebc:	6053      	strne	r3, [r2, #4]
 800aebe:	4630      	mov	r0, r6
 800aec0:	f000 f85a 	bl	800af78 <__malloc_unlock>
 800aec4:	f104 000b 	add.w	r0, r4, #11
 800aec8:	1d23      	adds	r3, r4, #4
 800aeca:	f020 0007 	bic.w	r0, r0, #7
 800aece:	1ac2      	subs	r2, r0, r3
 800aed0:	d0cc      	beq.n	800ae6c <_malloc_r+0x20>
 800aed2:	1a1b      	subs	r3, r3, r0
 800aed4:	50a3      	str	r3, [r4, r2]
 800aed6:	e7c9      	b.n	800ae6c <_malloc_r+0x20>
 800aed8:	4622      	mov	r2, r4
 800aeda:	6864      	ldr	r4, [r4, #4]
 800aedc:	e7cc      	b.n	800ae78 <_malloc_r+0x2c>
 800aede:	1cc4      	adds	r4, r0, #3
 800aee0:	f024 0403 	bic.w	r4, r4, #3
 800aee4:	42a0      	cmp	r0, r4
 800aee6:	d0e3      	beq.n	800aeb0 <_malloc_r+0x64>
 800aee8:	1a21      	subs	r1, r4, r0
 800aeea:	4630      	mov	r0, r6
 800aeec:	f000 f82e 	bl	800af4c <_sbrk_r>
 800aef0:	3001      	adds	r0, #1
 800aef2:	d1dd      	bne.n	800aeb0 <_malloc_r+0x64>
 800aef4:	e7cf      	b.n	800ae96 <_malloc_r+0x4a>
 800aef6:	bf00      	nop
 800aef8:	200000ec 	.word	0x200000ec
 800aefc:	200000f0 	.word	0x200000f0

0800af00 <_realloc_r>:
 800af00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af02:	4607      	mov	r7, r0
 800af04:	4614      	mov	r4, r2
 800af06:	460e      	mov	r6, r1
 800af08:	b921      	cbnz	r1, 800af14 <_realloc_r+0x14>
 800af0a:	4611      	mov	r1, r2
 800af0c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800af10:	f7ff bf9c 	b.w	800ae4c <_malloc_r>
 800af14:	b922      	cbnz	r2, 800af20 <_realloc_r+0x20>
 800af16:	f7ff ff4d 	bl	800adb4 <_free_r>
 800af1a:	4625      	mov	r5, r4
 800af1c:	4628      	mov	r0, r5
 800af1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af20:	f000 f830 	bl	800af84 <_malloc_usable_size_r>
 800af24:	42a0      	cmp	r0, r4
 800af26:	d20f      	bcs.n	800af48 <_realloc_r+0x48>
 800af28:	4621      	mov	r1, r4
 800af2a:	4638      	mov	r0, r7
 800af2c:	f7ff ff8e 	bl	800ae4c <_malloc_r>
 800af30:	4605      	mov	r5, r0
 800af32:	2800      	cmp	r0, #0
 800af34:	d0f2      	beq.n	800af1c <_realloc_r+0x1c>
 800af36:	4631      	mov	r1, r6
 800af38:	4622      	mov	r2, r4
 800af3a:	f7ff ff13 	bl	800ad64 <memcpy>
 800af3e:	4631      	mov	r1, r6
 800af40:	4638      	mov	r0, r7
 800af42:	f7ff ff37 	bl	800adb4 <_free_r>
 800af46:	e7e9      	b.n	800af1c <_realloc_r+0x1c>
 800af48:	4635      	mov	r5, r6
 800af4a:	e7e7      	b.n	800af1c <_realloc_r+0x1c>

0800af4c <_sbrk_r>:
 800af4c:	b538      	push	{r3, r4, r5, lr}
 800af4e:	2300      	movs	r3, #0
 800af50:	4d05      	ldr	r5, [pc, #20]	; (800af68 <_sbrk_r+0x1c>)
 800af52:	4604      	mov	r4, r0
 800af54:	4608      	mov	r0, r1
 800af56:	602b      	str	r3, [r5, #0]
 800af58:	f7fc f97a 	bl	8007250 <_sbrk>
 800af5c:	1c43      	adds	r3, r0, #1
 800af5e:	d102      	bne.n	800af66 <_sbrk_r+0x1a>
 800af60:	682b      	ldr	r3, [r5, #0]
 800af62:	b103      	cbz	r3, 800af66 <_sbrk_r+0x1a>
 800af64:	6023      	str	r3, [r4, #0]
 800af66:	bd38      	pop	{r3, r4, r5, pc}
 800af68:	2000132c 	.word	0x2000132c

0800af6c <__malloc_lock>:
 800af6c:	4801      	ldr	r0, [pc, #4]	; (800af74 <__malloc_lock+0x8>)
 800af6e:	f000 b811 	b.w	800af94 <__retarget_lock_acquire_recursive>
 800af72:	bf00      	nop
 800af74:	20001334 	.word	0x20001334

0800af78 <__malloc_unlock>:
 800af78:	4801      	ldr	r0, [pc, #4]	; (800af80 <__malloc_unlock+0x8>)
 800af7a:	f000 b80c 	b.w	800af96 <__retarget_lock_release_recursive>
 800af7e:	bf00      	nop
 800af80:	20001334 	.word	0x20001334

0800af84 <_malloc_usable_size_r>:
 800af84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af88:	1f18      	subs	r0, r3, #4
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	bfbc      	itt	lt
 800af8e:	580b      	ldrlt	r3, [r1, r0]
 800af90:	18c0      	addlt	r0, r0, r3
 800af92:	4770      	bx	lr

0800af94 <__retarget_lock_acquire_recursive>:
 800af94:	4770      	bx	lr

0800af96 <__retarget_lock_release_recursive>:
 800af96:	4770      	bx	lr

0800af98 <_init>:
 800af98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af9a:	bf00      	nop
 800af9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af9e:	bc08      	pop	{r3}
 800afa0:	469e      	mov	lr, r3
 800afa2:	4770      	bx	lr

0800afa4 <_fini>:
 800afa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afa6:	bf00      	nop
 800afa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afaa:	bc08      	pop	{r3}
 800afac:	469e      	mov	lr, r3
 800afae:	4770      	bx	lr
