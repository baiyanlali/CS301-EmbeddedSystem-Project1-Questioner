
Project1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ec8  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080080b0  080080b0  000180b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080d8  080080d8  0002004c  2**0
                  CONTENTS
  4 .ARM          00000000  080080d8  080080d8  0002004c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080080d8  080080d8  0002004c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080d8  080080d8  000180d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080dc  080080dc  000180dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000004c  20000000  080080e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  2000004c  0800812c  0002004c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  0800812c  00020198  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e1c2  00000000  00000000  00020075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002265  00000000  00000000  0002e237  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d40  00000000  00000000  000304a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c80  00000000  00000000  000311e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a30f  00000000  00000000  00031e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f9da  00000000  00000000  0004c16f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009939c  00000000  00000000  0005bb49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f4ee5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037c8  00000000  00000000  000f4f38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	2000004c 	.word	0x2000004c
 8000204:	00000000 	.word	0x00000000
 8000208:	08008098 	.word	0x08008098

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000050 	.word	0x20000050
 8000224:	08008098 	.word	0x08008098

08000228 <strcmp>:
 8000228:	f810 2b01 	ldrb.w	r2, [r0], #1
 800022c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000230:	2a01      	cmp	r2, #1
 8000232:	bf28      	it	cs
 8000234:	429a      	cmpcs	r2, r3
 8000236:	d0f7      	beq.n	8000228 <strcmp>
 8000238:	1ad0      	subs	r0, r2, r3
 800023a:	4770      	bx	lr

0800023c <__aeabi_dmul>:
 800023c:	b570      	push	{r4, r5, r6, lr}
 800023e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000242:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000246:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800024a:	bf1d      	ittte	ne
 800024c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000250:	ea94 0f0c 	teqne	r4, ip
 8000254:	ea95 0f0c 	teqne	r5, ip
 8000258:	f000 f8de 	bleq	8000418 <__aeabi_dmul+0x1dc>
 800025c:	442c      	add	r4, r5
 800025e:	ea81 0603 	eor.w	r6, r1, r3
 8000262:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000266:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800026a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800026e:	bf18      	it	ne
 8000270:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000274:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000278:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800027c:	d038      	beq.n	80002f0 <__aeabi_dmul+0xb4>
 800027e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000282:	f04f 0500 	mov.w	r5, #0
 8000286:	fbe1 e502 	umlal	lr, r5, r1, r2
 800028a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800028e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000292:	f04f 0600 	mov.w	r6, #0
 8000296:	fbe1 5603 	umlal	r5, r6, r1, r3
 800029a:	f09c 0f00 	teq	ip, #0
 800029e:	bf18      	it	ne
 80002a0:	f04e 0e01 	orrne.w	lr, lr, #1
 80002a4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002a8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002ac:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002b0:	d204      	bcs.n	80002bc <__aeabi_dmul+0x80>
 80002b2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002b6:	416d      	adcs	r5, r5
 80002b8:	eb46 0606 	adc.w	r6, r6, r6
 80002bc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002c0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002c4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002c8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002cc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002d0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002d4:	bf88      	it	hi
 80002d6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002da:	d81e      	bhi.n	800031a <__aeabi_dmul+0xde>
 80002dc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002e0:	bf08      	it	eq
 80002e2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002e6:	f150 0000 	adcs.w	r0, r0, #0
 80002ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ee:	bd70      	pop	{r4, r5, r6, pc}
 80002f0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002f4:	ea46 0101 	orr.w	r1, r6, r1
 80002f8:	ea40 0002 	orr.w	r0, r0, r2
 80002fc:	ea81 0103 	eor.w	r1, r1, r3
 8000300:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000304:	bfc2      	ittt	gt
 8000306:	ebd4 050c 	rsbsgt	r5, r4, ip
 800030a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800030e:	bd70      	popgt	{r4, r5, r6, pc}
 8000310:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000314:	f04f 0e00 	mov.w	lr, #0
 8000318:	3c01      	subs	r4, #1
 800031a:	f300 80ab 	bgt.w	8000474 <__aeabi_dmul+0x238>
 800031e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000322:	bfde      	ittt	le
 8000324:	2000      	movle	r0, #0
 8000326:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800032a:	bd70      	pople	{r4, r5, r6, pc}
 800032c:	f1c4 0400 	rsb	r4, r4, #0
 8000330:	3c20      	subs	r4, #32
 8000332:	da35      	bge.n	80003a0 <__aeabi_dmul+0x164>
 8000334:	340c      	adds	r4, #12
 8000336:	dc1b      	bgt.n	8000370 <__aeabi_dmul+0x134>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f305 	lsl.w	r3, r0, r5
 8000344:	fa20 f004 	lsr.w	r0, r0, r4
 8000348:	fa01 f205 	lsl.w	r2, r1, r5
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000354:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000358:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800035c:	fa21 f604 	lsr.w	r6, r1, r4
 8000360:	eb42 0106 	adc.w	r1, r2, r6
 8000364:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000368:	bf08      	it	eq
 800036a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036e:	bd70      	pop	{r4, r5, r6, pc}
 8000370:	f1c4 040c 	rsb	r4, r4, #12
 8000374:	f1c4 0520 	rsb	r5, r4, #32
 8000378:	fa00 f304 	lsl.w	r3, r0, r4
 800037c:	fa20 f005 	lsr.w	r0, r0, r5
 8000380:	fa01 f204 	lsl.w	r2, r1, r4
 8000384:	ea40 0002 	orr.w	r0, r0, r2
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	f141 0100 	adc.w	r1, r1, #0
 8000394:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000398:	bf08      	it	eq
 800039a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800039e:	bd70      	pop	{r4, r5, r6, pc}
 80003a0:	f1c4 0520 	rsb	r5, r4, #32
 80003a4:	fa00 f205 	lsl.w	r2, r0, r5
 80003a8:	ea4e 0e02 	orr.w	lr, lr, r2
 80003ac:	fa20 f304 	lsr.w	r3, r0, r4
 80003b0:	fa01 f205 	lsl.w	r2, r1, r5
 80003b4:	ea43 0302 	orr.w	r3, r3, r2
 80003b8:	fa21 f004 	lsr.w	r0, r1, r4
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c0:	fa21 f204 	lsr.w	r2, r1, r4
 80003c4:	ea20 0002 	bic.w	r0, r0, r2
 80003c8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003d0:	bf08      	it	eq
 80003d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d6:	bd70      	pop	{r4, r5, r6, pc}
 80003d8:	f094 0f00 	teq	r4, #0
 80003dc:	d10f      	bne.n	80003fe <__aeabi_dmul+0x1c2>
 80003de:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003e2:	0040      	lsls	r0, r0, #1
 80003e4:	eb41 0101 	adc.w	r1, r1, r1
 80003e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ec:	bf08      	it	eq
 80003ee:	3c01      	subeq	r4, #1
 80003f0:	d0f7      	beq.n	80003e2 <__aeabi_dmul+0x1a6>
 80003f2:	ea41 0106 	orr.w	r1, r1, r6
 80003f6:	f095 0f00 	teq	r5, #0
 80003fa:	bf18      	it	ne
 80003fc:	4770      	bxne	lr
 80003fe:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000402:	0052      	lsls	r2, r2, #1
 8000404:	eb43 0303 	adc.w	r3, r3, r3
 8000408:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800040c:	bf08      	it	eq
 800040e:	3d01      	subeq	r5, #1
 8000410:	d0f7      	beq.n	8000402 <__aeabi_dmul+0x1c6>
 8000412:	ea43 0306 	orr.w	r3, r3, r6
 8000416:	4770      	bx	lr
 8000418:	ea94 0f0c 	teq	r4, ip
 800041c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000420:	bf18      	it	ne
 8000422:	ea95 0f0c 	teqne	r5, ip
 8000426:	d00c      	beq.n	8000442 <__aeabi_dmul+0x206>
 8000428:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800042c:	bf18      	it	ne
 800042e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000432:	d1d1      	bne.n	80003d8 <__aeabi_dmul+0x19c>
 8000434:	ea81 0103 	eor.w	r1, r1, r3
 8000438:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd70      	pop	{r4, r5, r6, pc}
 8000442:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000446:	bf06      	itte	eq
 8000448:	4610      	moveq	r0, r2
 800044a:	4619      	moveq	r1, r3
 800044c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000450:	d019      	beq.n	8000486 <__aeabi_dmul+0x24a>
 8000452:	ea94 0f0c 	teq	r4, ip
 8000456:	d102      	bne.n	800045e <__aeabi_dmul+0x222>
 8000458:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800045c:	d113      	bne.n	8000486 <__aeabi_dmul+0x24a>
 800045e:	ea95 0f0c 	teq	r5, ip
 8000462:	d105      	bne.n	8000470 <__aeabi_dmul+0x234>
 8000464:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000468:	bf1c      	itt	ne
 800046a:	4610      	movne	r0, r2
 800046c:	4619      	movne	r1, r3
 800046e:	d10a      	bne.n	8000486 <__aeabi_dmul+0x24a>
 8000470:	ea81 0103 	eor.w	r1, r1, r3
 8000474:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000478:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800047c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800048a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800048e:	bd70      	pop	{r4, r5, r6, pc}

08000490 <__aeabi_drsub>:
 8000490:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000494:	e002      	b.n	800049c <__adddf3>
 8000496:	bf00      	nop

08000498 <__aeabi_dsub>:
 8000498:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800049c <__adddf3>:
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	bf1f      	itttt	ne
 80004b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c2:	f000 80e2 	beq.w	800068a <__adddf3+0x1ee>
 80004c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004ce:	bfb8      	it	lt
 80004d0:	426d      	neglt	r5, r5
 80004d2:	dd0c      	ble.n	80004ee <__adddf3+0x52>
 80004d4:	442c      	add	r4, r5
 80004d6:	ea80 0202 	eor.w	r2, r0, r2
 80004da:	ea81 0303 	eor.w	r3, r1, r3
 80004de:	ea82 0000 	eor.w	r0, r2, r0
 80004e2:	ea83 0101 	eor.w	r1, r3, r1
 80004e6:	ea80 0202 	eor.w	r2, r0, r2
 80004ea:	ea81 0303 	eor.w	r3, r1, r3
 80004ee:	2d36      	cmp	r5, #54	; 0x36
 80004f0:	bf88      	it	hi
 80004f2:	bd30      	pophi	{r4, r5, pc}
 80004f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000500:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000504:	d002      	beq.n	800050c <__adddf3+0x70>
 8000506:	4240      	negs	r0, r0
 8000508:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000510:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000514:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000518:	d002      	beq.n	8000520 <__adddf3+0x84>
 800051a:	4252      	negs	r2, r2
 800051c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000520:	ea94 0f05 	teq	r4, r5
 8000524:	f000 80a7 	beq.w	8000676 <__adddf3+0x1da>
 8000528:	f1a4 0401 	sub.w	r4, r4, #1
 800052c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000530:	db0d      	blt.n	800054e <__adddf3+0xb2>
 8000532:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000536:	fa22 f205 	lsr.w	r2, r2, r5
 800053a:	1880      	adds	r0, r0, r2
 800053c:	f141 0100 	adc.w	r1, r1, #0
 8000540:	fa03 f20e 	lsl.w	r2, r3, lr
 8000544:	1880      	adds	r0, r0, r2
 8000546:	fa43 f305 	asr.w	r3, r3, r5
 800054a:	4159      	adcs	r1, r3
 800054c:	e00e      	b.n	800056c <__adddf3+0xd0>
 800054e:	f1a5 0520 	sub.w	r5, r5, #32
 8000552:	f10e 0e20 	add.w	lr, lr, #32
 8000556:	2a01      	cmp	r2, #1
 8000558:	fa03 fc0e 	lsl.w	ip, r3, lr
 800055c:	bf28      	it	cs
 800055e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000562:	fa43 f305 	asr.w	r3, r3, r5
 8000566:	18c0      	adds	r0, r0, r3
 8000568:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800056c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000570:	d507      	bpl.n	8000582 <__adddf3+0xe6>
 8000572:	f04f 0e00 	mov.w	lr, #0
 8000576:	f1dc 0c00 	rsbs	ip, ip, #0
 800057a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800057e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000582:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000586:	d31b      	bcc.n	80005c0 <__adddf3+0x124>
 8000588:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800058c:	d30c      	bcc.n	80005a8 <__adddf3+0x10c>
 800058e:	0849      	lsrs	r1, r1, #1
 8000590:	ea5f 0030 	movs.w	r0, r0, rrx
 8000594:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000598:	f104 0401 	add.w	r4, r4, #1
 800059c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005a4:	f080 809a 	bcs.w	80006dc <__adddf3+0x240>
 80005a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	ea41 0105 	orr.w	r1, r1, r5
 80005be:	bd30      	pop	{r4, r5, pc}
 80005c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005c4:	4140      	adcs	r0, r0
 80005c6:	eb41 0101 	adc.w	r1, r1, r1
 80005ca:	3c01      	subs	r4, #1
 80005cc:	bf28      	it	cs
 80005ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005d2:	d2e9      	bcs.n	80005a8 <__adddf3+0x10c>
 80005d4:	f091 0f00 	teq	r1, #0
 80005d8:	bf04      	itt	eq
 80005da:	4601      	moveq	r1, r0
 80005dc:	2000      	moveq	r0, #0
 80005de:	fab1 f381 	clz	r3, r1
 80005e2:	bf08      	it	eq
 80005e4:	3320      	addeq	r3, #32
 80005e6:	f1a3 030b 	sub.w	r3, r3, #11
 80005ea:	f1b3 0220 	subs.w	r2, r3, #32
 80005ee:	da0c      	bge.n	800060a <__adddf3+0x16e>
 80005f0:	320c      	adds	r2, #12
 80005f2:	dd08      	ble.n	8000606 <__adddf3+0x16a>
 80005f4:	f102 0c14 	add.w	ip, r2, #20
 80005f8:	f1c2 020c 	rsb	r2, r2, #12
 80005fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000600:	fa21 f102 	lsr.w	r1, r1, r2
 8000604:	e00c      	b.n	8000620 <__adddf3+0x184>
 8000606:	f102 0214 	add.w	r2, r2, #20
 800060a:	bfd8      	it	le
 800060c:	f1c2 0c20 	rsble	ip, r2, #32
 8000610:	fa01 f102 	lsl.w	r1, r1, r2
 8000614:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000618:	bfdc      	itt	le
 800061a:	ea41 010c 	orrle.w	r1, r1, ip
 800061e:	4090      	lslle	r0, r2
 8000620:	1ae4      	subs	r4, r4, r3
 8000622:	bfa2      	ittt	ge
 8000624:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000628:	4329      	orrge	r1, r5
 800062a:	bd30      	popge	{r4, r5, pc}
 800062c:	ea6f 0404 	mvn.w	r4, r4
 8000630:	3c1f      	subs	r4, #31
 8000632:	da1c      	bge.n	800066e <__adddf3+0x1d2>
 8000634:	340c      	adds	r4, #12
 8000636:	dc0e      	bgt.n	8000656 <__adddf3+0x1ba>
 8000638:	f104 0414 	add.w	r4, r4, #20
 800063c:	f1c4 0220 	rsb	r2, r4, #32
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f302 	lsl.w	r3, r1, r2
 8000648:	ea40 0003 	orr.w	r0, r0, r3
 800064c:	fa21 f304 	lsr.w	r3, r1, r4
 8000650:	ea45 0103 	orr.w	r1, r5, r3
 8000654:	bd30      	pop	{r4, r5, pc}
 8000656:	f1c4 040c 	rsb	r4, r4, #12
 800065a:	f1c4 0220 	rsb	r2, r4, #32
 800065e:	fa20 f002 	lsr.w	r0, r0, r2
 8000662:	fa01 f304 	lsl.w	r3, r1, r4
 8000666:	ea40 0003 	orr.w	r0, r0, r3
 800066a:	4629      	mov	r1, r5
 800066c:	bd30      	pop	{r4, r5, pc}
 800066e:	fa21 f004 	lsr.w	r0, r1, r4
 8000672:	4629      	mov	r1, r5
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	f094 0f00 	teq	r4, #0
 800067a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800067e:	bf06      	itte	eq
 8000680:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000684:	3401      	addeq	r4, #1
 8000686:	3d01      	subne	r5, #1
 8000688:	e74e      	b.n	8000528 <__adddf3+0x8c>
 800068a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068e:	bf18      	it	ne
 8000690:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000694:	d029      	beq.n	80006ea <__adddf3+0x24e>
 8000696:	ea94 0f05 	teq	r4, r5
 800069a:	bf08      	it	eq
 800069c:	ea90 0f02 	teqeq	r0, r2
 80006a0:	d005      	beq.n	80006ae <__adddf3+0x212>
 80006a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80006a6:	bf04      	itt	eq
 80006a8:	4619      	moveq	r1, r3
 80006aa:	4610      	moveq	r0, r2
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	ea91 0f03 	teq	r1, r3
 80006b2:	bf1e      	ittt	ne
 80006b4:	2100      	movne	r1, #0
 80006b6:	2000      	movne	r0, #0
 80006b8:	bd30      	popne	{r4, r5, pc}
 80006ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006be:	d105      	bne.n	80006cc <__adddf3+0x230>
 80006c0:	0040      	lsls	r0, r0, #1
 80006c2:	4149      	adcs	r1, r1
 80006c4:	bf28      	it	cs
 80006c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006ca:	bd30      	pop	{r4, r5, pc}
 80006cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006d0:	bf3c      	itt	cc
 80006d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006d6:	bd30      	popcc	{r4, r5, pc}
 80006d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006e4:	f04f 0000 	mov.w	r0, #0
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ee:	bf1a      	itte	ne
 80006f0:	4619      	movne	r1, r3
 80006f2:	4610      	movne	r0, r2
 80006f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006f8:	bf1c      	itt	ne
 80006fa:	460b      	movne	r3, r1
 80006fc:	4602      	movne	r2, r0
 80006fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000702:	bf06      	itte	eq
 8000704:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000708:	ea91 0f03 	teqeq	r1, r3
 800070c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000710:	bd30      	pop	{r4, r5, pc}
 8000712:	bf00      	nop

08000714 <__aeabi_ui2d>:
 8000714:	f090 0f00 	teq	r0, #0
 8000718:	bf04      	itt	eq
 800071a:	2100      	moveq	r1, #0
 800071c:	4770      	bxeq	lr
 800071e:	b530      	push	{r4, r5, lr}
 8000720:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000724:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000728:	f04f 0500 	mov.w	r5, #0
 800072c:	f04f 0100 	mov.w	r1, #0
 8000730:	e750      	b.n	80005d4 <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_i2d>:
 8000734:	f090 0f00 	teq	r0, #0
 8000738:	bf04      	itt	eq
 800073a:	2100      	moveq	r1, #0
 800073c:	4770      	bxeq	lr
 800073e:	b530      	push	{r4, r5, lr}
 8000740:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000744:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000748:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800074c:	bf48      	it	mi
 800074e:	4240      	negmi	r0, r0
 8000750:	f04f 0100 	mov.w	r1, #0
 8000754:	e73e      	b.n	80005d4 <__adddf3+0x138>
 8000756:	bf00      	nop

08000758 <__aeabi_f2d>:
 8000758:	0042      	lsls	r2, r0, #1
 800075a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800075e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000762:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000766:	bf1f      	itttt	ne
 8000768:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800076c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000770:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000774:	4770      	bxne	lr
 8000776:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800077a:	bf08      	it	eq
 800077c:	4770      	bxeq	lr
 800077e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000782:	bf04      	itt	eq
 8000784:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000788:	4770      	bxeq	lr
 800078a:	b530      	push	{r4, r5, lr}
 800078c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000790:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000794:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000798:	e71c      	b.n	80005d4 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_ul2d>:
 800079c:	ea50 0201 	orrs.w	r2, r0, r1
 80007a0:	bf08      	it	eq
 80007a2:	4770      	bxeq	lr
 80007a4:	b530      	push	{r4, r5, lr}
 80007a6:	f04f 0500 	mov.w	r5, #0
 80007aa:	e00a      	b.n	80007c2 <__aeabi_l2d+0x16>

080007ac <__aeabi_l2d>:
 80007ac:	ea50 0201 	orrs.w	r2, r0, r1
 80007b0:	bf08      	it	eq
 80007b2:	4770      	bxeq	lr
 80007b4:	b530      	push	{r4, r5, lr}
 80007b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ba:	d502      	bpl.n	80007c2 <__aeabi_l2d+0x16>
 80007bc:	4240      	negs	r0, r0
 80007be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007ce:	f43f aed8 	beq.w	8000582 <__adddf3+0xe6>
 80007d2:	f04f 0203 	mov.w	r2, #3
 80007d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007da:	bf18      	it	ne
 80007dc:	3203      	addne	r2, #3
 80007de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007e2:	bf18      	it	ne
 80007e4:	3203      	addne	r2, #3
 80007e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007ea:	f1c2 0320 	rsb	r3, r2, #32
 80007ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80007f2:	fa20 f002 	lsr.w	r0, r0, r2
 80007f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80007fa:	ea40 000e 	orr.w	r0, r0, lr
 80007fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000802:	4414      	add	r4, r2
 8000804:	e6bd      	b.n	8000582 <__adddf3+0xe6>
 8000806:	bf00      	nop

08000808 <__aeabi_d2uiz>:
 8000808:	004a      	lsls	r2, r1, #1
 800080a:	d211      	bcs.n	8000830 <__aeabi_d2uiz+0x28>
 800080c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000810:	d211      	bcs.n	8000836 <__aeabi_d2uiz+0x2e>
 8000812:	d50d      	bpl.n	8000830 <__aeabi_d2uiz+0x28>
 8000814:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000818:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800081c:	d40e      	bmi.n	800083c <__aeabi_d2uiz+0x34>
 800081e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000822:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000826:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800082a:	fa23 f002 	lsr.w	r0, r3, r2
 800082e:	4770      	bx	lr
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	4770      	bx	lr
 8000836:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800083a:	d102      	bne.n	8000842 <__aeabi_d2uiz+0x3a>
 800083c:	f04f 30ff 	mov.w	r0, #4294967295
 8000840:	4770      	bx	lr
 8000842:	f04f 0000 	mov.w	r0, #0
 8000846:	4770      	bx	lr

08000848 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b088      	sub	sp, #32
 800084c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084e:	f107 0310 	add.w	r3, r7, #16
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800085c:	4b3d      	ldr	r3, [pc, #244]	; (8000954 <MX_GPIO_Init+0x10c>)
 800085e:	699b      	ldr	r3, [r3, #24]
 8000860:	4a3c      	ldr	r2, [pc, #240]	; (8000954 <MX_GPIO_Init+0x10c>)
 8000862:	f043 0320 	orr.w	r3, r3, #32
 8000866:	6193      	str	r3, [r2, #24]
 8000868:	4b3a      	ldr	r3, [pc, #232]	; (8000954 <MX_GPIO_Init+0x10c>)
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	f003 0320 	and.w	r3, r3, #32
 8000870:	60fb      	str	r3, [r7, #12]
 8000872:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000874:	4b37      	ldr	r3, [pc, #220]	; (8000954 <MX_GPIO_Init+0x10c>)
 8000876:	699b      	ldr	r3, [r3, #24]
 8000878:	4a36      	ldr	r2, [pc, #216]	; (8000954 <MX_GPIO_Init+0x10c>)
 800087a:	f043 0310 	orr.w	r3, r3, #16
 800087e:	6193      	str	r3, [r2, #24]
 8000880:	4b34      	ldr	r3, [pc, #208]	; (8000954 <MX_GPIO_Init+0x10c>)
 8000882:	699b      	ldr	r3, [r3, #24]
 8000884:	f003 0310 	and.w	r3, r3, #16
 8000888:	60bb      	str	r3, [r7, #8]
 800088a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088c:	4b31      	ldr	r3, [pc, #196]	; (8000954 <MX_GPIO_Init+0x10c>)
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	4a30      	ldr	r2, [pc, #192]	; (8000954 <MX_GPIO_Init+0x10c>)
 8000892:	f043 0304 	orr.w	r3, r3, #4
 8000896:	6193      	str	r3, [r2, #24]
 8000898:	4b2e      	ldr	r3, [pc, #184]	; (8000954 <MX_GPIO_Init+0x10c>)
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	f003 0304 	and.w	r3, r3, #4
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 80008a4:	2200      	movs	r2, #0
 80008a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008aa:	482b      	ldr	r0, [pc, #172]	; (8000958 <MX_GPIO_Init+0x110>)
 80008ac:	f005 ff42 	bl	8006734 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80008b0:	2200      	movs	r2, #0
 80008b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008b6:	4829      	ldr	r0, [pc, #164]	; (800095c <MX_GPIO_Init+0x114>)
 80008b8:	f005 ff3c 	bl	8006734 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY0_Pin;
 80008bc:	2320      	movs	r3, #32
 80008be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008c0:	4b27      	ldr	r3, [pc, #156]	; (8000960 <MX_GPIO_Init+0x118>)
 80008c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY0_GPIO_Port, &GPIO_InitStruct);
 80008c8:	f107 0310 	add.w	r3, r7, #16
 80008cc:	4619      	mov	r1, r3
 80008ce:	4823      	ldr	r0, [pc, #140]	; (800095c <MX_GPIO_Init+0x114>)
 80008d0:	f005 fd9c 	bl	800640c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 80008d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008da:	2301      	movs	r3, #1
 80008dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	2302      	movs	r3, #2
 80008e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 80008e6:	f107 0310 	add.w	r3, r7, #16
 80008ea:	4619      	mov	r1, r3
 80008ec:	481a      	ldr	r0, [pc, #104]	; (8000958 <MX_GPIO_Init+0x110>)
 80008ee:	f005 fd8d 	bl	800640c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 80008f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008f8:	4b19      	ldr	r3, [pc, #100]	; (8000960 <MX_GPIO_Init+0x118>)
 80008fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 8000900:	f107 0310 	add.w	r3, r7, #16
 8000904:	4619      	mov	r1, r3
 8000906:	4814      	ldr	r0, [pc, #80]	; (8000958 <MX_GPIO_Init+0x110>)
 8000908:	f005 fd80 	bl	800640c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800090c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000910:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000912:	2301      	movs	r3, #1
 8000914:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2302      	movs	r3, #2
 800091c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800091e:	f107 0310 	add.w	r3, r7, #16
 8000922:	4619      	mov	r1, r3
 8000924:	480d      	ldr	r0, [pc, #52]	; (800095c <MX_GPIO_Init+0x114>)
 8000926:	f005 fd71 	bl	800640c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 800092a:	2200      	movs	r2, #0
 800092c:	2101      	movs	r1, #1
 800092e:	2017      	movs	r0, #23
 8000930:	f005 fbf3 	bl	800611a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000934:	2017      	movs	r0, #23
 8000936:	f005 fc0c 	bl	8006152 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 800093a:	2200      	movs	r2, #0
 800093c:	2101      	movs	r1, #1
 800093e:	2028      	movs	r0, #40	; 0x28
 8000940:	f005 fbeb 	bl	800611a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000944:	2028      	movs	r0, #40	; 0x28
 8000946:	f005 fc04 	bl	8006152 <HAL_NVIC_EnableIRQ>

}
 800094a:	bf00      	nop
 800094c:	3720      	adds	r7, #32
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40021000 	.word	0x40021000
 8000958:	40010800 	.word	0x40010800
 800095c:	40011000 	.word	0x40011000
 8000960:	10110000 	.word	0x10110000

08000964 <LCD_WR_REG>:
//默认为竖屏
_lcd_dev lcddev;

//写寄存器函数
//data:寄存器值
void LCD_WR_REG(uint16_t data) {
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	80fb      	strh	r3, [r7, #6]
	LCD_RS_CLR;  //写地址
 800096e:	4b0d      	ldr	r3, [pc, #52]	; (80009a4 <LCD_WR_REG+0x40>)
 8000970:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000974:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 8000976:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <LCD_WR_REG+0x40>)
 8000978:	f44f 7200 	mov.w	r2, #512	; 0x200
 800097c:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 800097e:	4a0a      	ldr	r2, [pc, #40]	; (80009a8 <LCD_WR_REG+0x44>)
 8000980:	88fb      	ldrh	r3, [r7, #6]
 8000982:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 8000984:	4b07      	ldr	r3, [pc, #28]	; (80009a4 <LCD_WR_REG+0x40>)
 8000986:	2280      	movs	r2, #128	; 0x80
 8000988:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <LCD_WR_REG+0x40>)
 800098c:	2280      	movs	r2, #128	; 0x80
 800098e:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8000990:	4b04      	ldr	r3, [pc, #16]	; (80009a4 <LCD_WR_REG+0x40>)
 8000992:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000996:	611a      	str	r2, [r3, #16]
}
 8000998:	bf00      	nop
 800099a:	370c      	adds	r7, #12
 800099c:	46bd      	mov	sp, r7
 800099e:	bc80      	pop	{r7}
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	40011000 	.word	0x40011000
 80009a8:	40010c00 	.word	0x40010c00

080009ac <LCD_WR_DATAX>:
//写数据函数
//可以替代LCD_WR_DATAX宏,拿时间换空间.
//data:寄存器值
void LCD_WR_DATAX(uint16_t data) {
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	80fb      	strh	r3, [r7, #6]
	LCD_RS_SET;
 80009b6:	4b0d      	ldr	r3, [pc, #52]	; (80009ec <LCD_WR_DATAX+0x40>)
 80009b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009bc:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 80009be:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <LCD_WR_DATAX+0x40>)
 80009c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009c4:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 80009c6:	4a0a      	ldr	r2, [pc, #40]	; (80009f0 <LCD_WR_DATAX+0x44>)
 80009c8:	88fb      	ldrh	r3, [r7, #6]
 80009ca:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 80009cc:	4b07      	ldr	r3, [pc, #28]	; (80009ec <LCD_WR_DATAX+0x40>)
 80009ce:	2280      	movs	r2, #128	; 0x80
 80009d0:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 80009d2:	4b06      	ldr	r3, [pc, #24]	; (80009ec <LCD_WR_DATAX+0x40>)
 80009d4:	2280      	movs	r2, #128	; 0x80
 80009d6:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 80009d8:	4b04      	ldr	r3, [pc, #16]	; (80009ec <LCD_WR_DATAX+0x40>)
 80009da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009de:	611a      	str	r2, [r3, #16]
}
 80009e0:	bf00      	nop
 80009e2:	370c      	adds	r7, #12
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bc80      	pop	{r7}
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	40011000 	.word	0x40011000
 80009f0:	40010c00 	.word	0x40010c00

080009f4 <LCD_RD_DATA>:
//读LCD数据
//返回值:读到的值
uint16_t LCD_RD_DATA(void) {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
	uint16_t t;
	GPIOB->CRL = 0X88888888; //PB0-7  上拉输入
 80009fa:	4b1d      	ldr	r3, [pc, #116]	; (8000a70 <LCD_RD_DATA+0x7c>)
 80009fc:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8000a00:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X88888888; //PB8-15 上拉输入
 8000a02:	4b1b      	ldr	r3, [pc, #108]	; (8000a70 <LCD_RD_DATA+0x7c>)
 8000a04:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8000a08:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0X0000;     //全部输出0
 8000a0a:	4b19      	ldr	r3, [pc, #100]	; (8000a70 <LCD_RD_DATA+0x7c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	60da      	str	r2, [r3, #12]

	LCD_RS_SET;
 8000a10:	4b18      	ldr	r3, [pc, #96]	; (8000a74 <LCD_RD_DATA+0x80>)
 8000a12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a16:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 8000a18:	4b16      	ldr	r3, [pc, #88]	; (8000a74 <LCD_RD_DATA+0x80>)
 8000a1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a1e:	615a      	str	r2, [r3, #20]
	//读取数据(读寄存器时,并不需要读2次)
	LCD_RD_CLR;
 8000a20:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <LCD_RD_DATA+0x80>)
 8000a22:	2240      	movs	r2, #64	; 0x40
 8000a24:	615a      	str	r2, [r3, #20]
	if (lcddev.id == 0X8989)
 8000a26:	4b14      	ldr	r3, [pc, #80]	; (8000a78 <LCD_RD_DATA+0x84>)
 8000a28:	889b      	ldrh	r3, [r3, #4]
 8000a2a:	f648 1289 	movw	r2, #35209	; 0x8989
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d102      	bne.n	8000a38 <LCD_RD_DATA+0x44>
		HAL_Delay(1); // delay_us(2);//FOR 8989,延时2us
 8000a32:	2001      	movs	r0, #1
 8000a34:	f005 fa76 	bl	8005f24 <HAL_Delay>
	t = DATAIN
 8000a38:	4b0d      	ldr	r3, [pc, #52]	; (8000a70 <LCD_RD_DATA+0x7c>)
 8000a3a:	689b      	ldr	r3, [r3, #8]
 8000a3c:	80fb      	strh	r3, [r7, #6]
	;
	LCD_RD_SET;
 8000a3e:	4b0d      	ldr	r3, [pc, #52]	; (8000a74 <LCD_RD_DATA+0x80>)
 8000a40:	2240      	movs	r2, #64	; 0x40
 8000a42:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8000a44:	4b0b      	ldr	r3, [pc, #44]	; (8000a74 <LCD_RD_DATA+0x80>)
 8000a46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a4a:	611a      	str	r2, [r3, #16]

	GPIOB->CRL = 0X33333333; //PB0-7  上拉输出
 8000a4c:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <LCD_RD_DATA+0x7c>)
 8000a4e:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000a52:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X33333333; //PB8-15 上拉输出
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <LCD_RD_DATA+0x7c>)
 8000a56:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000a5a:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0XFFFF;    //全部输出高
 8000a5c:	4b04      	ldr	r3, [pc, #16]	; (8000a70 <LCD_RD_DATA+0x7c>)
 8000a5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a62:	60da      	str	r2, [r3, #12]
	return t;
 8000a64:	88fb      	ldrh	r3, [r7, #6]
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40010c00 	.word	0x40010c00
 8000a74:	40011000 	.word	0x40011000
 8000a78:	20000080 	.word	0x20000080

08000a7c <LCD_WriteReg>:
//写寄存器
//LCD_Reg:寄存器编号
//LCD_RegValue:要写入的值
void LCD_WriteReg(uint16_t LCD_Reg, uint16_t LCD_RegValue) {
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	460a      	mov	r2, r1
 8000a86:	80fb      	strh	r3, [r7, #6]
 8000a88:	4613      	mov	r3, r2
 8000a8a:	80bb      	strh	r3, [r7, #4]
	LCD_WR_REG(LCD_Reg);
 8000a8c:	88fb      	ldrh	r3, [r7, #6]
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f7ff ff68 	bl	8000964 <LCD_WR_REG>
	LCD_WR_DATA(LCD_RegValue);
 8000a94:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <LCD_WriteReg+0x4c>)
 8000a96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a9a:	611a      	str	r2, [r3, #16]
 8000a9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ac8 <LCD_WriteReg+0x4c>)
 8000a9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aa2:	615a      	str	r2, [r3, #20]
 8000aa4:	4a09      	ldr	r2, [pc, #36]	; (8000acc <LCD_WriteReg+0x50>)
 8000aa6:	88bb      	ldrh	r3, [r7, #4]
 8000aa8:	60d3      	str	r3, [r2, #12]
 8000aaa:	4b07      	ldr	r3, [pc, #28]	; (8000ac8 <LCD_WriteReg+0x4c>)
 8000aac:	2280      	movs	r2, #128	; 0x80
 8000aae:	615a      	str	r2, [r3, #20]
 8000ab0:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <LCD_WriteReg+0x4c>)
 8000ab2:	2280      	movs	r2, #128	; 0x80
 8000ab4:	611a      	str	r2, [r3, #16]
 8000ab6:	4b04      	ldr	r3, [pc, #16]	; (8000ac8 <LCD_WriteReg+0x4c>)
 8000ab8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000abc:	611a      	str	r2, [r3, #16]
}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40011000 	.word	0x40011000
 8000acc:	40010c00 	.word	0x40010c00

08000ad0 <LCD_ReadReg>:
//读寄存器
//LCD_Reg:寄存器编号
//返回值:读到的值
uint16_t LCD_ReadReg(uint16_t LCD_Reg) {
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	80fb      	strh	r3, [r7, #6]
	LCD_WR_REG(LCD_Reg);  //写入要读的寄存器号
 8000ada:	88fb      	ldrh	r3, [r7, #6]
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff ff41 	bl	8000964 <LCD_WR_REG>
	return LCD_RD_DATA();
 8000ae2:	f7ff ff87 	bl	80009f4 <LCD_RD_DATA>
 8000ae6:	4603      	mov	r3, r0
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <LCD_WriteRAM_Prepare>:
//开始写GRAM
void LCD_WriteRAM_Prepare(void) {
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
	LCD_WR_REG(lcddev.wramcmd);
 8000af4:	4b03      	ldr	r3, [pc, #12]	; (8000b04 <LCD_WriteRAM_Prepare+0x14>)
 8000af6:	891b      	ldrh	r3, [r3, #8]
 8000af8:	4618      	mov	r0, r3
 8000afa:	f7ff ff33 	bl	8000964 <LCD_WR_REG>
}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000080 	.word	0x20000080

08000b08 <LCD_SetCursor>:
		LCD_WriteReg(0X07, 0x0);	//关闭显示
}
//设置光标位置
//Xpos:横坐标
//Ypos:纵坐标
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	460a      	mov	r2, r1
 8000b12:	80fb      	strh	r3, [r7, #6]
 8000b14:	4613      	mov	r3, r2
 8000b16:	80bb      	strh	r3, [r7, #4]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8000b18:	4b73      	ldr	r3, [pc, #460]	; (8000ce8 <LCD_SetCursor+0x1e0>)
 8000b1a:	889b      	ldrh	r3, [r3, #4]
 8000b1c:	f249 3241 	movw	r2, #37697	; 0x9341
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d005      	beq.n	8000b30 <LCD_SetCursor+0x28>
 8000b24:	4b70      	ldr	r3, [pc, #448]	; (8000ce8 <LCD_SetCursor+0x1e0>)
 8000b26:	889b      	ldrh	r3, [r3, #4]
 8000b28:	f245 3210 	movw	r2, #21264	; 0x5310
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d164      	bne.n	8000bfa <LCD_SetCursor+0xf2>
		LCD_WR_REG(lcddev.setxcmd);
 8000b30:	4b6d      	ldr	r3, [pc, #436]	; (8000ce8 <LCD_SetCursor+0x1e0>)
 8000b32:	895b      	ldrh	r3, [r3, #10]
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff ff15 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000b3a:	4b6c      	ldr	r3, [pc, #432]	; (8000cec <LCD_SetCursor+0x1e4>)
 8000b3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b40:	611a      	str	r2, [r3, #16]
 8000b42:	4b6a      	ldr	r3, [pc, #424]	; (8000cec <LCD_SetCursor+0x1e4>)
 8000b44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b48:	615a      	str	r2, [r3, #20]
 8000b4a:	88fb      	ldrh	r3, [r7, #6]
 8000b4c:	0a1b      	lsrs	r3, r3, #8
 8000b4e:	b29a      	uxth	r2, r3
 8000b50:	4b67      	ldr	r3, [pc, #412]	; (8000cf0 <LCD_SetCursor+0x1e8>)
 8000b52:	60da      	str	r2, [r3, #12]
 8000b54:	4b65      	ldr	r3, [pc, #404]	; (8000cec <LCD_SetCursor+0x1e4>)
 8000b56:	2280      	movs	r2, #128	; 0x80
 8000b58:	615a      	str	r2, [r3, #20]
 8000b5a:	4b64      	ldr	r3, [pc, #400]	; (8000cec <LCD_SetCursor+0x1e4>)
 8000b5c:	2280      	movs	r2, #128	; 0x80
 8000b5e:	611a      	str	r2, [r3, #16]
 8000b60:	4b62      	ldr	r3, [pc, #392]	; (8000cec <LCD_SetCursor+0x1e4>)
 8000b62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b66:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8000b68:	4b60      	ldr	r3, [pc, #384]	; (8000cec <LCD_SetCursor+0x1e4>)
 8000b6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b6e:	611a      	str	r2, [r3, #16]
 8000b70:	4b5e      	ldr	r3, [pc, #376]	; (8000cec <LCD_SetCursor+0x1e4>)
 8000b72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b76:	615a      	str	r2, [r3, #20]
 8000b78:	88fb      	ldrh	r3, [r7, #6]
 8000b7a:	4a5d      	ldr	r2, [pc, #372]	; (8000cf0 <LCD_SetCursor+0x1e8>)
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	60d3      	str	r3, [r2, #12]
 8000b80:	4b5a      	ldr	r3, [pc, #360]	; (8000cec <LCD_SetCursor+0x1e4>)
 8000b82:	2280      	movs	r2, #128	; 0x80
 8000b84:	615a      	str	r2, [r3, #20]
 8000b86:	4b59      	ldr	r3, [pc, #356]	; (8000cec <LCD_SetCursor+0x1e4>)
 8000b88:	2280      	movs	r2, #128	; 0x80
 8000b8a:	611a      	str	r2, [r3, #16]
 8000b8c:	4b57      	ldr	r3, [pc, #348]	; (8000cec <LCD_SetCursor+0x1e4>)
 8000b8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b92:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000b94:	4b54      	ldr	r3, [pc, #336]	; (8000ce8 <LCD_SetCursor+0x1e0>)
 8000b96:	899b      	ldrh	r3, [r3, #12]
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff fee3 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000b9e:	4b53      	ldr	r3, [pc, #332]	; (8000cec <LCD_SetCursor+0x1e4>)
 8000ba0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ba4:	611a      	str	r2, [r3, #16]
 8000ba6:	4b51      	ldr	r3, [pc, #324]	; (8000cec <LCD_SetCursor+0x1e4>)
 8000ba8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bac:	615a      	str	r2, [r3, #20]
 8000bae:	88bb      	ldrh	r3, [r7, #4]
 8000bb0:	0a1b      	lsrs	r3, r3, #8
 8000bb2:	b29a      	uxth	r2, r3
 8000bb4:	4b4e      	ldr	r3, [pc, #312]	; (8000cf0 <LCD_SetCursor+0x1e8>)
 8000bb6:	60da      	str	r2, [r3, #12]
 8000bb8:	4b4c      	ldr	r3, [pc, #304]	; (8000cec <LCD_SetCursor+0x1e4>)
 8000bba:	2280      	movs	r2, #128	; 0x80
 8000bbc:	615a      	str	r2, [r3, #20]
 8000bbe:	4b4b      	ldr	r3, [pc, #300]	; (8000cec <LCD_SetCursor+0x1e4>)
 8000bc0:	2280      	movs	r2, #128	; 0x80
 8000bc2:	611a      	str	r2, [r3, #16]
 8000bc4:	4b49      	ldr	r3, [pc, #292]	; (8000cec <LCD_SetCursor+0x1e4>)
 8000bc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bca:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000bcc:	4b47      	ldr	r3, [pc, #284]	; (8000cec <LCD_SetCursor+0x1e4>)
 8000bce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bd2:	611a      	str	r2, [r3, #16]
 8000bd4:	4b45      	ldr	r3, [pc, #276]	; (8000cec <LCD_SetCursor+0x1e4>)
 8000bd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bda:	615a      	str	r2, [r3, #20]
 8000bdc:	88bb      	ldrh	r3, [r7, #4]
 8000bde:	4a44      	ldr	r2, [pc, #272]	; (8000cf0 <LCD_SetCursor+0x1e8>)
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	60d3      	str	r3, [r2, #12]
 8000be4:	4b41      	ldr	r3, [pc, #260]	; (8000cec <LCD_SetCursor+0x1e4>)
 8000be6:	2280      	movs	r2, #128	; 0x80
 8000be8:	615a      	str	r2, [r3, #20]
 8000bea:	4b40      	ldr	r3, [pc, #256]	; (8000cec <LCD_SetCursor+0x1e4>)
 8000bec:	2280      	movs	r2, #128	; 0x80
 8000bee:	611a      	str	r2, [r3, #16]
 8000bf0:	4b3e      	ldr	r3, [pc, #248]	; (8000cec <LCD_SetCursor+0x1e4>)
 8000bf2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bf6:	611a      	str	r2, [r3, #16]
		if (lcddev.dir == 1)
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
		LCD_WriteReg(lcddev.setxcmd, Xpos);
		LCD_WriteReg(lcddev.setycmd, Ypos);
	}
}
 8000bf8:	e248      	b.n	800108c <LCD_SetCursor+0x584>
	} else if (lcddev.id == 0X6804) {
 8000bfa:	4b3b      	ldr	r3, [pc, #236]	; (8000ce8 <LCD_SetCursor+0x1e0>)
 8000bfc:	889b      	ldrh	r3, [r3, #4]
 8000bfe:	f646 0204 	movw	r2, #26628	; 0x6804
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d176      	bne.n	8000cf4 <LCD_SetCursor+0x1ec>
		if (lcddev.dir == 1)
 8000c06:	4b38      	ldr	r3, [pc, #224]	; (8000ce8 <LCD_SetCursor+0x1e0>)
 8000c08:	799b      	ldrb	r3, [r3, #6]
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d106      	bne.n	8000c1c <LCD_SetCursor+0x114>
			Xpos = lcddev.width - 1 - Xpos;	//横屏时处理
 8000c0e:	4b36      	ldr	r3, [pc, #216]	; (8000ce8 <LCD_SetCursor+0x1e0>)
 8000c10:	881a      	ldrh	r2, [r3, #0]
 8000c12:	88fb      	ldrh	r3, [r7, #6]
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	b29b      	uxth	r3, r3
 8000c18:	3b01      	subs	r3, #1
 8000c1a:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8000c1c:	4b32      	ldr	r3, [pc, #200]	; (8000ce8 <LCD_SetCursor+0x1e0>)
 8000c1e:	895b      	ldrh	r3, [r3, #10]
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff fe9f 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000c26:	4b31      	ldr	r3, [pc, #196]	; (8000cec <LCD_SetCursor+0x1e4>)
 8000c28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c2c:	611a      	str	r2, [r3, #16]
 8000c2e:	4b2f      	ldr	r3, [pc, #188]	; (8000cec <LCD_SetCursor+0x1e4>)
 8000c30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c34:	615a      	str	r2, [r3, #20]
 8000c36:	88fb      	ldrh	r3, [r7, #6]
 8000c38:	0a1b      	lsrs	r3, r3, #8
 8000c3a:	b29a      	uxth	r2, r3
 8000c3c:	4b2c      	ldr	r3, [pc, #176]	; (8000cf0 <LCD_SetCursor+0x1e8>)
 8000c3e:	60da      	str	r2, [r3, #12]
 8000c40:	4b2a      	ldr	r3, [pc, #168]	; (8000cec <LCD_SetCursor+0x1e4>)
 8000c42:	2280      	movs	r2, #128	; 0x80
 8000c44:	615a      	str	r2, [r3, #20]
 8000c46:	4b29      	ldr	r3, [pc, #164]	; (8000cec <LCD_SetCursor+0x1e4>)
 8000c48:	2280      	movs	r2, #128	; 0x80
 8000c4a:	611a      	str	r2, [r3, #16]
 8000c4c:	4b27      	ldr	r3, [pc, #156]	; (8000cec <LCD_SetCursor+0x1e4>)
 8000c4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c52:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8000c54:	4b25      	ldr	r3, [pc, #148]	; (8000cec <LCD_SetCursor+0x1e4>)
 8000c56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c5a:	611a      	str	r2, [r3, #16]
 8000c5c:	4b23      	ldr	r3, [pc, #140]	; (8000cec <LCD_SetCursor+0x1e4>)
 8000c5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c62:	615a      	str	r2, [r3, #20]
 8000c64:	88fb      	ldrh	r3, [r7, #6]
 8000c66:	4a22      	ldr	r2, [pc, #136]	; (8000cf0 <LCD_SetCursor+0x1e8>)
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	60d3      	str	r3, [r2, #12]
 8000c6c:	4b1f      	ldr	r3, [pc, #124]	; (8000cec <LCD_SetCursor+0x1e4>)
 8000c6e:	2280      	movs	r2, #128	; 0x80
 8000c70:	615a      	str	r2, [r3, #20]
 8000c72:	4b1e      	ldr	r3, [pc, #120]	; (8000cec <LCD_SetCursor+0x1e4>)
 8000c74:	2280      	movs	r2, #128	; 0x80
 8000c76:	611a      	str	r2, [r3, #16]
 8000c78:	4b1c      	ldr	r3, [pc, #112]	; (8000cec <LCD_SetCursor+0x1e4>)
 8000c7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c7e:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000c80:	4b19      	ldr	r3, [pc, #100]	; (8000ce8 <LCD_SetCursor+0x1e0>)
 8000c82:	899b      	ldrh	r3, [r3, #12]
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff fe6d 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000c8a:	4b18      	ldr	r3, [pc, #96]	; (8000cec <LCD_SetCursor+0x1e4>)
 8000c8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c90:	611a      	str	r2, [r3, #16]
 8000c92:	4b16      	ldr	r3, [pc, #88]	; (8000cec <LCD_SetCursor+0x1e4>)
 8000c94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c98:	615a      	str	r2, [r3, #20]
 8000c9a:	88bb      	ldrh	r3, [r7, #4]
 8000c9c:	0a1b      	lsrs	r3, r3, #8
 8000c9e:	b29a      	uxth	r2, r3
 8000ca0:	4b13      	ldr	r3, [pc, #76]	; (8000cf0 <LCD_SetCursor+0x1e8>)
 8000ca2:	60da      	str	r2, [r3, #12]
 8000ca4:	4b11      	ldr	r3, [pc, #68]	; (8000cec <LCD_SetCursor+0x1e4>)
 8000ca6:	2280      	movs	r2, #128	; 0x80
 8000ca8:	615a      	str	r2, [r3, #20]
 8000caa:	4b10      	ldr	r3, [pc, #64]	; (8000cec <LCD_SetCursor+0x1e4>)
 8000cac:	2280      	movs	r2, #128	; 0x80
 8000cae:	611a      	str	r2, [r3, #16]
 8000cb0:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <LCD_SetCursor+0x1e4>)
 8000cb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cb6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000cb8:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <LCD_SetCursor+0x1e4>)
 8000cba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cbe:	611a      	str	r2, [r3, #16]
 8000cc0:	4b0a      	ldr	r3, [pc, #40]	; (8000cec <LCD_SetCursor+0x1e4>)
 8000cc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cc6:	615a      	str	r2, [r3, #20]
 8000cc8:	88bb      	ldrh	r3, [r7, #4]
 8000cca:	4a09      	ldr	r2, [pc, #36]	; (8000cf0 <LCD_SetCursor+0x1e8>)
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	60d3      	str	r3, [r2, #12]
 8000cd0:	4b06      	ldr	r3, [pc, #24]	; (8000cec <LCD_SetCursor+0x1e4>)
 8000cd2:	2280      	movs	r2, #128	; 0x80
 8000cd4:	615a      	str	r2, [r3, #20]
 8000cd6:	4b05      	ldr	r3, [pc, #20]	; (8000cec <LCD_SetCursor+0x1e4>)
 8000cd8:	2280      	movs	r2, #128	; 0x80
 8000cda:	611a      	str	r2, [r3, #16]
 8000cdc:	4b03      	ldr	r3, [pc, #12]	; (8000cec <LCD_SetCursor+0x1e4>)
 8000cde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ce2:	611a      	str	r2, [r3, #16]
}
 8000ce4:	e1d2      	b.n	800108c <LCD_SetCursor+0x584>
 8000ce6:	bf00      	nop
 8000ce8:	20000080 	.word	0x20000080
 8000cec:	40011000 	.word	0x40011000
 8000cf0:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 8000cf4:	4b99      	ldr	r3, [pc, #612]	; (8000f5c <LCD_SetCursor+0x454>)
 8000cf6:	889b      	ldrh	r3, [r3, #4]
 8000cf8:	f641 1263 	movw	r2, #6499	; 0x1963
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	f040 8133 	bne.w	8000f68 <LCD_SetCursor+0x460>
		if (lcddev.dir == 0)	//x坐标需要变换
 8000d02:	4b96      	ldr	r3, [pc, #600]	; (8000f5c <LCD_SetCursor+0x454>)
 8000d04:	799b      	ldrb	r3, [r3, #6]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d163      	bne.n	8000dd2 <LCD_SetCursor+0x2ca>
			Xpos = lcddev.width - 1 - Xpos;
 8000d0a:	4b94      	ldr	r3, [pc, #592]	; (8000f5c <LCD_SetCursor+0x454>)
 8000d0c:	881a      	ldrh	r2, [r3, #0]
 8000d0e:	88fb      	ldrh	r3, [r7, #6]
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	b29b      	uxth	r3, r3
 8000d14:	3b01      	subs	r3, #1
 8000d16:	80fb      	strh	r3, [r7, #6]
			LCD_WR_REG(lcddev.setxcmd);
 8000d18:	4b90      	ldr	r3, [pc, #576]	; (8000f5c <LCD_SetCursor+0x454>)
 8000d1a:	895b      	ldrh	r3, [r3, #10]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff fe21 	bl	8000964 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8000d22:	4b8f      	ldr	r3, [pc, #572]	; (8000f60 <LCD_SetCursor+0x458>)
 8000d24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d28:	611a      	str	r2, [r3, #16]
 8000d2a:	4b8d      	ldr	r3, [pc, #564]	; (8000f60 <LCD_SetCursor+0x458>)
 8000d2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d30:	615a      	str	r2, [r3, #20]
 8000d32:	4b8c      	ldr	r3, [pc, #560]	; (8000f64 <LCD_SetCursor+0x45c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	60da      	str	r2, [r3, #12]
 8000d38:	4b89      	ldr	r3, [pc, #548]	; (8000f60 <LCD_SetCursor+0x458>)
 8000d3a:	2280      	movs	r2, #128	; 0x80
 8000d3c:	615a      	str	r2, [r3, #20]
 8000d3e:	4b88      	ldr	r3, [pc, #544]	; (8000f60 <LCD_SetCursor+0x458>)
 8000d40:	2280      	movs	r2, #128	; 0x80
 8000d42:	611a      	str	r2, [r3, #16]
 8000d44:	4b86      	ldr	r3, [pc, #536]	; (8000f60 <LCD_SetCursor+0x458>)
 8000d46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d4a:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8000d4c:	4b84      	ldr	r3, [pc, #528]	; (8000f60 <LCD_SetCursor+0x458>)
 8000d4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d52:	611a      	str	r2, [r3, #16]
 8000d54:	4b82      	ldr	r3, [pc, #520]	; (8000f60 <LCD_SetCursor+0x458>)
 8000d56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d5a:	615a      	str	r2, [r3, #20]
 8000d5c:	4b81      	ldr	r3, [pc, #516]	; (8000f64 <LCD_SetCursor+0x45c>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	4b7f      	ldr	r3, [pc, #508]	; (8000f60 <LCD_SetCursor+0x458>)
 8000d64:	2280      	movs	r2, #128	; 0x80
 8000d66:	615a      	str	r2, [r3, #20]
 8000d68:	4b7d      	ldr	r3, [pc, #500]	; (8000f60 <LCD_SetCursor+0x458>)
 8000d6a:	2280      	movs	r2, #128	; 0x80
 8000d6c:	611a      	str	r2, [r3, #16]
 8000d6e:	4b7c      	ldr	r3, [pc, #496]	; (8000f60 <LCD_SetCursor+0x458>)
 8000d70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d74:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos >> 8);
 8000d76:	4b7a      	ldr	r3, [pc, #488]	; (8000f60 <LCD_SetCursor+0x458>)
 8000d78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d7c:	611a      	str	r2, [r3, #16]
 8000d7e:	4b78      	ldr	r3, [pc, #480]	; (8000f60 <LCD_SetCursor+0x458>)
 8000d80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d84:	615a      	str	r2, [r3, #20]
 8000d86:	88fb      	ldrh	r3, [r7, #6]
 8000d88:	0a1b      	lsrs	r3, r3, #8
 8000d8a:	b29a      	uxth	r2, r3
 8000d8c:	4b75      	ldr	r3, [pc, #468]	; (8000f64 <LCD_SetCursor+0x45c>)
 8000d8e:	60da      	str	r2, [r3, #12]
 8000d90:	4b73      	ldr	r3, [pc, #460]	; (8000f60 <LCD_SetCursor+0x458>)
 8000d92:	2280      	movs	r2, #128	; 0x80
 8000d94:	615a      	str	r2, [r3, #20]
 8000d96:	4b72      	ldr	r3, [pc, #456]	; (8000f60 <LCD_SetCursor+0x458>)
 8000d98:	2280      	movs	r2, #128	; 0x80
 8000d9a:	611a      	str	r2, [r3, #16]
 8000d9c:	4b70      	ldr	r3, [pc, #448]	; (8000f60 <LCD_SetCursor+0x458>)
 8000d9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000da2:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8000da4:	4b6e      	ldr	r3, [pc, #440]	; (8000f60 <LCD_SetCursor+0x458>)
 8000da6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000daa:	611a      	str	r2, [r3, #16]
 8000dac:	4b6c      	ldr	r3, [pc, #432]	; (8000f60 <LCD_SetCursor+0x458>)
 8000dae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000db2:	615a      	str	r2, [r3, #20]
 8000db4:	88fb      	ldrh	r3, [r7, #6]
 8000db6:	4a6b      	ldr	r2, [pc, #428]	; (8000f64 <LCD_SetCursor+0x45c>)
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	60d3      	str	r3, [r2, #12]
 8000dbc:	4b68      	ldr	r3, [pc, #416]	; (8000f60 <LCD_SetCursor+0x458>)
 8000dbe:	2280      	movs	r2, #128	; 0x80
 8000dc0:	615a      	str	r2, [r3, #20]
 8000dc2:	4b67      	ldr	r3, [pc, #412]	; (8000f60 <LCD_SetCursor+0x458>)
 8000dc4:	2280      	movs	r2, #128	; 0x80
 8000dc6:	611a      	str	r2, [r3, #16]
 8000dc8:	4b65      	ldr	r3, [pc, #404]	; (8000f60 <LCD_SetCursor+0x458>)
 8000dca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dce:	611a      	str	r2, [r3, #16]
 8000dd0:	e061      	b.n	8000e96 <LCD_SetCursor+0x38e>
			LCD_WR_REG(lcddev.setxcmd);
 8000dd2:	4b62      	ldr	r3, [pc, #392]	; (8000f5c <LCD_SetCursor+0x454>)
 8000dd4:	895b      	ldrh	r3, [r3, #10]
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff fdc4 	bl	8000964 <LCD_WR_REG>
			LCD_WR_DATA(Xpos >> 8);
 8000ddc:	4b60      	ldr	r3, [pc, #384]	; (8000f60 <LCD_SetCursor+0x458>)
 8000dde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000de2:	611a      	str	r2, [r3, #16]
 8000de4:	4b5e      	ldr	r3, [pc, #376]	; (8000f60 <LCD_SetCursor+0x458>)
 8000de6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dea:	615a      	str	r2, [r3, #20]
 8000dec:	88fb      	ldrh	r3, [r7, #6]
 8000dee:	0a1b      	lsrs	r3, r3, #8
 8000df0:	b29a      	uxth	r2, r3
 8000df2:	4b5c      	ldr	r3, [pc, #368]	; (8000f64 <LCD_SetCursor+0x45c>)
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	4b5a      	ldr	r3, [pc, #360]	; (8000f60 <LCD_SetCursor+0x458>)
 8000df8:	2280      	movs	r2, #128	; 0x80
 8000dfa:	615a      	str	r2, [r3, #20]
 8000dfc:	4b58      	ldr	r3, [pc, #352]	; (8000f60 <LCD_SetCursor+0x458>)
 8000dfe:	2280      	movs	r2, #128	; 0x80
 8000e00:	611a      	str	r2, [r3, #16]
 8000e02:	4b57      	ldr	r3, [pc, #348]	; (8000f60 <LCD_SetCursor+0x458>)
 8000e04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e08:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8000e0a:	4b55      	ldr	r3, [pc, #340]	; (8000f60 <LCD_SetCursor+0x458>)
 8000e0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e10:	611a      	str	r2, [r3, #16]
 8000e12:	4b53      	ldr	r3, [pc, #332]	; (8000f60 <LCD_SetCursor+0x458>)
 8000e14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e18:	615a      	str	r2, [r3, #20]
 8000e1a:	88fb      	ldrh	r3, [r7, #6]
 8000e1c:	4a51      	ldr	r2, [pc, #324]	; (8000f64 <LCD_SetCursor+0x45c>)
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	60d3      	str	r3, [r2, #12]
 8000e22:	4b4f      	ldr	r3, [pc, #316]	; (8000f60 <LCD_SetCursor+0x458>)
 8000e24:	2280      	movs	r2, #128	; 0x80
 8000e26:	615a      	str	r2, [r3, #20]
 8000e28:	4b4d      	ldr	r3, [pc, #308]	; (8000f60 <LCD_SetCursor+0x458>)
 8000e2a:	2280      	movs	r2, #128	; 0x80
 8000e2c:	611a      	str	r2, [r3, #16]
 8000e2e:	4b4c      	ldr	r3, [pc, #304]	; (8000f60 <LCD_SetCursor+0x458>)
 8000e30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e34:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 8000e36:	4b4a      	ldr	r3, [pc, #296]	; (8000f60 <LCD_SetCursor+0x458>)
 8000e38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e3c:	611a      	str	r2, [r3, #16]
 8000e3e:	4b48      	ldr	r3, [pc, #288]	; (8000f60 <LCD_SetCursor+0x458>)
 8000e40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e44:	615a      	str	r2, [r3, #20]
 8000e46:	4b45      	ldr	r3, [pc, #276]	; (8000f5c <LCD_SetCursor+0x454>)
 8000e48:	881b      	ldrh	r3, [r3, #0]
 8000e4a:	3b01      	subs	r3, #1
 8000e4c:	121a      	asrs	r2, r3, #8
 8000e4e:	4b45      	ldr	r3, [pc, #276]	; (8000f64 <LCD_SetCursor+0x45c>)
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	4b43      	ldr	r3, [pc, #268]	; (8000f60 <LCD_SetCursor+0x458>)
 8000e54:	2280      	movs	r2, #128	; 0x80
 8000e56:	615a      	str	r2, [r3, #20]
 8000e58:	4b41      	ldr	r3, [pc, #260]	; (8000f60 <LCD_SetCursor+0x458>)
 8000e5a:	2280      	movs	r2, #128	; 0x80
 8000e5c:	611a      	str	r2, [r3, #16]
 8000e5e:	4b40      	ldr	r3, [pc, #256]	; (8000f60 <LCD_SetCursor+0x458>)
 8000e60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e64:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8000e66:	4b3e      	ldr	r3, [pc, #248]	; (8000f60 <LCD_SetCursor+0x458>)
 8000e68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e6c:	611a      	str	r2, [r3, #16]
 8000e6e:	4b3c      	ldr	r3, [pc, #240]	; (8000f60 <LCD_SetCursor+0x458>)
 8000e70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e74:	615a      	str	r2, [r3, #20]
 8000e76:	4b39      	ldr	r3, [pc, #228]	; (8000f5c <LCD_SetCursor+0x454>)
 8000e78:	881b      	ldrh	r3, [r3, #0]
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	4a39      	ldr	r2, [pc, #228]	; (8000f64 <LCD_SetCursor+0x45c>)
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	60d3      	str	r3, [r2, #12]
 8000e82:	4b37      	ldr	r3, [pc, #220]	; (8000f60 <LCD_SetCursor+0x458>)
 8000e84:	2280      	movs	r2, #128	; 0x80
 8000e86:	615a      	str	r2, [r3, #20]
 8000e88:	4b35      	ldr	r3, [pc, #212]	; (8000f60 <LCD_SetCursor+0x458>)
 8000e8a:	2280      	movs	r2, #128	; 0x80
 8000e8c:	611a      	str	r2, [r3, #16]
 8000e8e:	4b34      	ldr	r3, [pc, #208]	; (8000f60 <LCD_SetCursor+0x458>)
 8000e90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e94:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000e96:	4b31      	ldr	r3, [pc, #196]	; (8000f5c <LCD_SetCursor+0x454>)
 8000e98:	899b      	ldrh	r3, [r3, #12]
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff fd62 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000ea0:	4b2f      	ldr	r3, [pc, #188]	; (8000f60 <LCD_SetCursor+0x458>)
 8000ea2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ea6:	611a      	str	r2, [r3, #16]
 8000ea8:	4b2d      	ldr	r3, [pc, #180]	; (8000f60 <LCD_SetCursor+0x458>)
 8000eaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eae:	615a      	str	r2, [r3, #20]
 8000eb0:	88bb      	ldrh	r3, [r7, #4]
 8000eb2:	0a1b      	lsrs	r3, r3, #8
 8000eb4:	b29a      	uxth	r2, r3
 8000eb6:	4b2b      	ldr	r3, [pc, #172]	; (8000f64 <LCD_SetCursor+0x45c>)
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	4b29      	ldr	r3, [pc, #164]	; (8000f60 <LCD_SetCursor+0x458>)
 8000ebc:	2280      	movs	r2, #128	; 0x80
 8000ebe:	615a      	str	r2, [r3, #20]
 8000ec0:	4b27      	ldr	r3, [pc, #156]	; (8000f60 <LCD_SetCursor+0x458>)
 8000ec2:	2280      	movs	r2, #128	; 0x80
 8000ec4:	611a      	str	r2, [r3, #16]
 8000ec6:	4b26      	ldr	r3, [pc, #152]	; (8000f60 <LCD_SetCursor+0x458>)
 8000ec8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ecc:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000ece:	4b24      	ldr	r3, [pc, #144]	; (8000f60 <LCD_SetCursor+0x458>)
 8000ed0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ed4:	611a      	str	r2, [r3, #16]
 8000ed6:	4b22      	ldr	r3, [pc, #136]	; (8000f60 <LCD_SetCursor+0x458>)
 8000ed8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000edc:	615a      	str	r2, [r3, #20]
 8000ede:	88bb      	ldrh	r3, [r7, #4]
 8000ee0:	4a20      	ldr	r2, [pc, #128]	; (8000f64 <LCD_SetCursor+0x45c>)
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	60d3      	str	r3, [r2, #12]
 8000ee6:	4b1e      	ldr	r3, [pc, #120]	; (8000f60 <LCD_SetCursor+0x458>)
 8000ee8:	2280      	movs	r2, #128	; 0x80
 8000eea:	615a      	str	r2, [r3, #20]
 8000eec:	4b1c      	ldr	r3, [pc, #112]	; (8000f60 <LCD_SetCursor+0x458>)
 8000eee:	2280      	movs	r2, #128	; 0x80
 8000ef0:	611a      	str	r2, [r3, #16]
 8000ef2:	4b1b      	ldr	r3, [pc, #108]	; (8000f60 <LCD_SetCursor+0x458>)
 8000ef4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ef8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) >> 8);
 8000efa:	4b19      	ldr	r3, [pc, #100]	; (8000f60 <LCD_SetCursor+0x458>)
 8000efc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f00:	611a      	str	r2, [r3, #16]
 8000f02:	4b17      	ldr	r3, [pc, #92]	; (8000f60 <LCD_SetCursor+0x458>)
 8000f04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f08:	615a      	str	r2, [r3, #20]
 8000f0a:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <LCD_SetCursor+0x454>)
 8000f0c:	885b      	ldrh	r3, [r3, #2]
 8000f0e:	3b01      	subs	r3, #1
 8000f10:	121a      	asrs	r2, r3, #8
 8000f12:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <LCD_SetCursor+0x45c>)
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <LCD_SetCursor+0x458>)
 8000f18:	2280      	movs	r2, #128	; 0x80
 8000f1a:	615a      	str	r2, [r3, #20]
 8000f1c:	4b10      	ldr	r3, [pc, #64]	; (8000f60 <LCD_SetCursor+0x458>)
 8000f1e:	2280      	movs	r2, #128	; 0x80
 8000f20:	611a      	str	r2, [r3, #16]
 8000f22:	4b0f      	ldr	r3, [pc, #60]	; (8000f60 <LCD_SetCursor+0x458>)
 8000f24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f28:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8000f2a:	4b0d      	ldr	r3, [pc, #52]	; (8000f60 <LCD_SetCursor+0x458>)
 8000f2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f30:	611a      	str	r2, [r3, #16]
 8000f32:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <LCD_SetCursor+0x458>)
 8000f34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f38:	615a      	str	r2, [r3, #20]
 8000f3a:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <LCD_SetCursor+0x454>)
 8000f3c:	885b      	ldrh	r3, [r3, #2]
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	4a08      	ldr	r2, [pc, #32]	; (8000f64 <LCD_SetCursor+0x45c>)
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	60d3      	str	r3, [r2, #12]
 8000f46:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <LCD_SetCursor+0x458>)
 8000f48:	2280      	movs	r2, #128	; 0x80
 8000f4a:	615a      	str	r2, [r3, #20]
 8000f4c:	4b04      	ldr	r3, [pc, #16]	; (8000f60 <LCD_SetCursor+0x458>)
 8000f4e:	2280      	movs	r2, #128	; 0x80
 8000f50:	611a      	str	r2, [r3, #16]
 8000f52:	4b03      	ldr	r3, [pc, #12]	; (8000f60 <LCD_SetCursor+0x458>)
 8000f54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f58:	611a      	str	r2, [r3, #16]
}
 8000f5a:	e097      	b.n	800108c <LCD_SetCursor+0x584>
 8000f5c:	20000080 	.word	0x20000080
 8000f60:	40011000 	.word	0x40011000
 8000f64:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X5510) {
 8000f68:	4b4a      	ldr	r3, [pc, #296]	; (8001094 <LCD_SetCursor+0x58c>)
 8000f6a:	889b      	ldrh	r3, [r3, #4]
 8000f6c:	f245 5210 	movw	r2, #21776	; 0x5510
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d172      	bne.n	800105a <LCD_SetCursor+0x552>
		LCD_WR_REG(lcddev.setxcmd);
 8000f74:	4b47      	ldr	r3, [pc, #284]	; (8001094 <LCD_SetCursor+0x58c>)
 8000f76:	895b      	ldrh	r3, [r3, #10]
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff fcf3 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000f7e:	4b46      	ldr	r3, [pc, #280]	; (8001098 <LCD_SetCursor+0x590>)
 8000f80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f84:	611a      	str	r2, [r3, #16]
 8000f86:	4b44      	ldr	r3, [pc, #272]	; (8001098 <LCD_SetCursor+0x590>)
 8000f88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f8c:	615a      	str	r2, [r3, #20]
 8000f8e:	88fb      	ldrh	r3, [r7, #6]
 8000f90:	0a1b      	lsrs	r3, r3, #8
 8000f92:	b29a      	uxth	r2, r3
 8000f94:	4b41      	ldr	r3, [pc, #260]	; (800109c <LCD_SetCursor+0x594>)
 8000f96:	60da      	str	r2, [r3, #12]
 8000f98:	4b3f      	ldr	r3, [pc, #252]	; (8001098 <LCD_SetCursor+0x590>)
 8000f9a:	2280      	movs	r2, #128	; 0x80
 8000f9c:	615a      	str	r2, [r3, #20]
 8000f9e:	4b3e      	ldr	r3, [pc, #248]	; (8001098 <LCD_SetCursor+0x590>)
 8000fa0:	2280      	movs	r2, #128	; 0x80
 8000fa2:	611a      	str	r2, [r3, #16]
 8000fa4:	4b3c      	ldr	r3, [pc, #240]	; (8001098 <LCD_SetCursor+0x590>)
 8000fa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000faa:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 8000fac:	4b39      	ldr	r3, [pc, #228]	; (8001094 <LCD_SetCursor+0x58c>)
 8000fae:	895b      	ldrh	r3, [r3, #10]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	b29b      	uxth	r3, r3
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff fcd5 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATA(Xpos & 0XFF);
 8000fba:	4b37      	ldr	r3, [pc, #220]	; (8001098 <LCD_SetCursor+0x590>)
 8000fbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fc0:	611a      	str	r2, [r3, #16]
 8000fc2:	4b35      	ldr	r3, [pc, #212]	; (8001098 <LCD_SetCursor+0x590>)
 8000fc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fc8:	615a      	str	r2, [r3, #20]
 8000fca:	88fb      	ldrh	r3, [r7, #6]
 8000fcc:	4a33      	ldr	r2, [pc, #204]	; (800109c <LCD_SetCursor+0x594>)
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	60d3      	str	r3, [r2, #12]
 8000fd2:	4b31      	ldr	r3, [pc, #196]	; (8001098 <LCD_SetCursor+0x590>)
 8000fd4:	2280      	movs	r2, #128	; 0x80
 8000fd6:	615a      	str	r2, [r3, #20]
 8000fd8:	4b2f      	ldr	r3, [pc, #188]	; (8001098 <LCD_SetCursor+0x590>)
 8000fda:	2280      	movs	r2, #128	; 0x80
 8000fdc:	611a      	str	r2, [r3, #16]
 8000fde:	4b2e      	ldr	r3, [pc, #184]	; (8001098 <LCD_SetCursor+0x590>)
 8000fe0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fe4:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000fe6:	4b2b      	ldr	r3, [pc, #172]	; (8001094 <LCD_SetCursor+0x58c>)
 8000fe8:	899b      	ldrh	r3, [r3, #12]
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff fcba 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000ff0:	4b29      	ldr	r3, [pc, #164]	; (8001098 <LCD_SetCursor+0x590>)
 8000ff2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ff6:	611a      	str	r2, [r3, #16]
 8000ff8:	4b27      	ldr	r3, [pc, #156]	; (8001098 <LCD_SetCursor+0x590>)
 8000ffa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ffe:	615a      	str	r2, [r3, #20]
 8001000:	88bb      	ldrh	r3, [r7, #4]
 8001002:	0a1b      	lsrs	r3, r3, #8
 8001004:	b29a      	uxth	r2, r3
 8001006:	4b25      	ldr	r3, [pc, #148]	; (800109c <LCD_SetCursor+0x594>)
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	4b23      	ldr	r3, [pc, #140]	; (8001098 <LCD_SetCursor+0x590>)
 800100c:	2280      	movs	r2, #128	; 0x80
 800100e:	615a      	str	r2, [r3, #20]
 8001010:	4b21      	ldr	r3, [pc, #132]	; (8001098 <LCD_SetCursor+0x590>)
 8001012:	2280      	movs	r2, #128	; 0x80
 8001014:	611a      	str	r2, [r3, #16]
 8001016:	4b20      	ldr	r3, [pc, #128]	; (8001098 <LCD_SetCursor+0x590>)
 8001018:	f44f 7200 	mov.w	r2, #512	; 0x200
 800101c:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 800101e:	4b1d      	ldr	r3, [pc, #116]	; (8001094 <LCD_SetCursor+0x58c>)
 8001020:	899b      	ldrh	r3, [r3, #12]
 8001022:	3301      	adds	r3, #1
 8001024:	b29b      	uxth	r3, r3
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff fc9c 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATA(Ypos & 0XFF);
 800102c:	4b1a      	ldr	r3, [pc, #104]	; (8001098 <LCD_SetCursor+0x590>)
 800102e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001032:	611a      	str	r2, [r3, #16]
 8001034:	4b18      	ldr	r3, [pc, #96]	; (8001098 <LCD_SetCursor+0x590>)
 8001036:	f44f 7200 	mov.w	r2, #512	; 0x200
 800103a:	615a      	str	r2, [r3, #20]
 800103c:	88bb      	ldrh	r3, [r7, #4]
 800103e:	4a17      	ldr	r2, [pc, #92]	; (800109c <LCD_SetCursor+0x594>)
 8001040:	b2db      	uxtb	r3, r3
 8001042:	60d3      	str	r3, [r2, #12]
 8001044:	4b14      	ldr	r3, [pc, #80]	; (8001098 <LCD_SetCursor+0x590>)
 8001046:	2280      	movs	r2, #128	; 0x80
 8001048:	615a      	str	r2, [r3, #20]
 800104a:	4b13      	ldr	r3, [pc, #76]	; (8001098 <LCD_SetCursor+0x590>)
 800104c:	2280      	movs	r2, #128	; 0x80
 800104e:	611a      	str	r2, [r3, #16]
 8001050:	4b11      	ldr	r3, [pc, #68]	; (8001098 <LCD_SetCursor+0x590>)
 8001052:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001056:	611a      	str	r2, [r3, #16]
}
 8001058:	e018      	b.n	800108c <LCD_SetCursor+0x584>
		if (lcddev.dir == 1)
 800105a:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <LCD_SetCursor+0x58c>)
 800105c:	799b      	ldrb	r3, [r3, #6]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d106      	bne.n	8001070 <LCD_SetCursor+0x568>
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
 8001062:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <LCD_SetCursor+0x58c>)
 8001064:	881a      	ldrh	r2, [r3, #0]
 8001066:	88fb      	ldrh	r3, [r7, #6]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	b29b      	uxth	r3, r3
 800106c:	3b01      	subs	r3, #1
 800106e:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, Xpos);
 8001070:	4b08      	ldr	r3, [pc, #32]	; (8001094 <LCD_SetCursor+0x58c>)
 8001072:	895b      	ldrh	r3, [r3, #10]
 8001074:	88fa      	ldrh	r2, [r7, #6]
 8001076:	4611      	mov	r1, r2
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff fcff 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, Ypos);
 800107e:	4b05      	ldr	r3, [pc, #20]	; (8001094 <LCD_SetCursor+0x58c>)
 8001080:	899b      	ldrh	r3, [r3, #12]
 8001082:	88ba      	ldrh	r2, [r7, #4]
 8001084:	4611      	mov	r1, r2
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff fcf8 	bl	8000a7c <LCD_WriteReg>
}
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20000080 	.word	0x20000080
 8001098:	40011000 	.word	0x40011000
 800109c:	40010c00 	.word	0x40010c00

080010a0 <LCD_Scan_Dir>:
//设置LCD的自动扫描方向
//注意:其他函数可能会受到此函数设置的影响(尤其是9341/6804这两个奇葩),
//所以,一般设置为L2R_U2D即可,如果设置为其他扫描方式,可能导致显示不正常.
//dir:0~7,代表8个方向(具体定义见lcd.h)
//9320/9325/9328/4531/4535/1505/b505/5408/9341/5310/5510/1963等IC已经实际测试	   	   
void LCD_Scan_Dir(uint8_t dir) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	71fb      	strb	r3, [r7, #7]
	uint16_t regval = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	81fb      	strh	r3, [r7, #14]
	uint16_t dirreg = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	81bb      	strh	r3, [r7, #12]
	uint16_t temp;
	if ((lcddev.dir == 1 && lcddev.id != 0X6804 && lcddev.id != 0X1963)
 80010b2:	4b78      	ldr	r3, [pc, #480]	; (8001294 <LCD_Scan_Dir+0x1f4>)
 80010b4:	799b      	ldrb	r3, [r3, #6]
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d10b      	bne.n	80010d2 <LCD_Scan_Dir+0x32>
 80010ba:	4b76      	ldr	r3, [pc, #472]	; (8001294 <LCD_Scan_Dir+0x1f4>)
 80010bc:	889b      	ldrh	r3, [r3, #4]
 80010be:	f646 0204 	movw	r2, #26628	; 0x6804
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d005      	beq.n	80010d2 <LCD_Scan_Dir+0x32>
 80010c6:	4b73      	ldr	r3, [pc, #460]	; (8001294 <LCD_Scan_Dir+0x1f4>)
 80010c8:	889b      	ldrh	r3, [r3, #4]
 80010ca:	f641 1263 	movw	r2, #6499	; 0x1963
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d109      	bne.n	80010e6 <LCD_Scan_Dir+0x46>
			|| (lcddev.dir == 0 && lcddev.id == 0X1963))//横屏时，对6804和1963不改变扫描方向！竖屏时1963改变方向
 80010d2:	4b70      	ldr	r3, [pc, #448]	; (8001294 <LCD_Scan_Dir+0x1f4>)
 80010d4:	799b      	ldrb	r3, [r3, #6]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d134      	bne.n	8001144 <LCD_Scan_Dir+0xa4>
 80010da:	4b6e      	ldr	r3, [pc, #440]	; (8001294 <LCD_Scan_Dir+0x1f4>)
 80010dc:	889b      	ldrh	r3, [r3, #4]
 80010de:	f641 1263 	movw	r2, #6499	; 0x1963
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d12e      	bne.n	8001144 <LCD_Scan_Dir+0xa4>
			{
		switch (dir)	//方向转换
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	2b07      	cmp	r3, #7
 80010ea:	d82c      	bhi.n	8001146 <LCD_Scan_Dir+0xa6>
 80010ec:	a201      	add	r2, pc, #4	; (adr r2, 80010f4 <LCD_Scan_Dir+0x54>)
 80010ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f2:	bf00      	nop
 80010f4:	08001115 	.word	0x08001115
 80010f8:	0800111b 	.word	0x0800111b
 80010fc:	08001121 	.word	0x08001121
 8001100:	08001127 	.word	0x08001127
 8001104:	0800112d 	.word	0x0800112d
 8001108:	08001133 	.word	0x08001133
 800110c:	08001139 	.word	0x08001139
 8001110:	0800113f 	.word	0x0800113f
		{
		case 0:
			dir = 6;
 8001114:	2306      	movs	r3, #6
 8001116:	71fb      	strb	r3, [r7, #7]
			break;
 8001118:	e015      	b.n	8001146 <LCD_Scan_Dir+0xa6>
		case 1:
			dir = 7;
 800111a:	2307      	movs	r3, #7
 800111c:	71fb      	strb	r3, [r7, #7]
			break;
 800111e:	e012      	b.n	8001146 <LCD_Scan_Dir+0xa6>
		case 2:
			dir = 4;
 8001120:	2304      	movs	r3, #4
 8001122:	71fb      	strb	r3, [r7, #7]
			break;
 8001124:	e00f      	b.n	8001146 <LCD_Scan_Dir+0xa6>
		case 3:
			dir = 5;
 8001126:	2305      	movs	r3, #5
 8001128:	71fb      	strb	r3, [r7, #7]
			break;
 800112a:	e00c      	b.n	8001146 <LCD_Scan_Dir+0xa6>
		case 4:
			dir = 1;
 800112c:	2301      	movs	r3, #1
 800112e:	71fb      	strb	r3, [r7, #7]
			break;
 8001130:	e009      	b.n	8001146 <LCD_Scan_Dir+0xa6>
		case 5:
			dir = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	71fb      	strb	r3, [r7, #7]
			break;
 8001136:	e006      	b.n	8001146 <LCD_Scan_Dir+0xa6>
		case 6:
			dir = 3;
 8001138:	2303      	movs	r3, #3
 800113a:	71fb      	strb	r3, [r7, #7]
			break;
 800113c:	e003      	b.n	8001146 <LCD_Scan_Dir+0xa6>
		case 7:
			dir = 2;
 800113e:	2302      	movs	r3, #2
 8001140:	71fb      	strb	r3, [r7, #7]
			break;
 8001142:	e000      	b.n	8001146 <LCD_Scan_Dir+0xa6>
		}
	}
 8001144:	bf00      	nop
	if (lcddev.id == 0x9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310
 8001146:	4b53      	ldr	r3, [pc, #332]	; (8001294 <LCD_Scan_Dir+0x1f4>)
 8001148:	889b      	ldrh	r3, [r3, #4]
 800114a:	f249 3241 	movw	r2, #37697	; 0x9341
 800114e:	4293      	cmp	r3, r2
 8001150:	d018      	beq.n	8001184 <LCD_Scan_Dir+0xe4>
 8001152:	4b50      	ldr	r3, [pc, #320]	; (8001294 <LCD_Scan_Dir+0x1f4>)
 8001154:	889b      	ldrh	r3, [r3, #4]
 8001156:	f646 0204 	movw	r2, #26628	; 0x6804
 800115a:	4293      	cmp	r3, r2
 800115c:	d012      	beq.n	8001184 <LCD_Scan_Dir+0xe4>
 800115e:	4b4d      	ldr	r3, [pc, #308]	; (8001294 <LCD_Scan_Dir+0x1f4>)
 8001160:	889b      	ldrh	r3, [r3, #4]
 8001162:	f245 3210 	movw	r2, #21264	; 0x5310
 8001166:	4293      	cmp	r3, r2
 8001168:	d00c      	beq.n	8001184 <LCD_Scan_Dir+0xe4>
			|| lcddev.id == 0X5510 || lcddev.id == 0X1963)//9341/6804/5310/5510/1963,特殊处理
 800116a:	4b4a      	ldr	r3, [pc, #296]	; (8001294 <LCD_Scan_Dir+0x1f4>)
 800116c:	889b      	ldrh	r3, [r3, #4]
 800116e:	f245 5210 	movw	r2, #21776	; 0x5510
 8001172:	4293      	cmp	r3, r2
 8001174:	d006      	beq.n	8001184 <LCD_Scan_Dir+0xe4>
 8001176:	4b47      	ldr	r3, [pc, #284]	; (8001294 <LCD_Scan_Dir+0x1f4>)
 8001178:	889b      	ldrh	r3, [r3, #4]
 800117a:	f641 1263 	movw	r2, #6499	; 0x1963
 800117e:	4293      	cmp	r3, r2
 8001180:	f040 824f 	bne.w	8001622 <LCD_Scan_Dir+0x582>
					{
		switch (dir) {
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	2b07      	cmp	r3, #7
 8001188:	d835      	bhi.n	80011f6 <LCD_Scan_Dir+0x156>
 800118a:	a201      	add	r2, pc, #4	; (adr r2, 8001190 <LCD_Scan_Dir+0xf0>)
 800118c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001190:	080011f7 	.word	0x080011f7
 8001194:	080011b1 	.word	0x080011b1
 8001198:	080011bb 	.word	0x080011bb
 800119c:	080011c5 	.word	0x080011c5
 80011a0:	080011cf 	.word	0x080011cf
 80011a4:	080011d9 	.word	0x080011d9
 80011a8:	080011e3 	.word	0x080011e3
 80011ac:	080011ed 	.word	0x080011ed
		case L2R_U2D:	//从左到右,从上到下
			regval |= (0 << 7) | (0 << 6) | (0 << 5);
			break;
		case L2R_D2U:	//从左到右,从下到上
			regval |= (1 << 7) | (0 << 6) | (0 << 5);
 80011b0:	89fb      	ldrh	r3, [r7, #14]
 80011b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011b6:	81fb      	strh	r3, [r7, #14]
			break;
 80011b8:	e01d      	b.n	80011f6 <LCD_Scan_Dir+0x156>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (0 << 7) | (1 << 6) | (0 << 5);
 80011ba:	89fb      	ldrh	r3, [r7, #14]
 80011bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011c0:	81fb      	strh	r3, [r7, #14]
			break;
 80011c2:	e018      	b.n	80011f6 <LCD_Scan_Dir+0x156>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (1 << 7) | (1 << 6) | (0 << 5);
 80011c4:	89fb      	ldrh	r3, [r7, #14]
 80011c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80011ca:	81fb      	strh	r3, [r7, #14]
			break;
 80011cc:	e013      	b.n	80011f6 <LCD_Scan_Dir+0x156>
		case U2D_L2R:	//从上到下,从左到右
			regval |= (0 << 7) | (0 << 6) | (1 << 5);
 80011ce:	89fb      	ldrh	r3, [r7, #14]
 80011d0:	f043 0320 	orr.w	r3, r3, #32
 80011d4:	81fb      	strh	r3, [r7, #14]
			break;
 80011d6:	e00e      	b.n	80011f6 <LCD_Scan_Dir+0x156>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (0 << 7) | (1 << 6) | (1 << 5);
 80011d8:	89fb      	ldrh	r3, [r7, #14]
 80011da:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80011de:	81fb      	strh	r3, [r7, #14]
			break;
 80011e0:	e009      	b.n	80011f6 <LCD_Scan_Dir+0x156>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (1 << 7) | (0 << 6) | (1 << 5);
 80011e2:	89fb      	ldrh	r3, [r7, #14]
 80011e4:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80011e8:	81fb      	strh	r3, [r7, #14]
			break;
 80011ea:	e004      	b.n	80011f6 <LCD_Scan_Dir+0x156>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (1 << 7) | (1 << 6) | (1 << 5);
 80011ec:	89fb      	ldrh	r3, [r7, #14]
 80011ee:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80011f2:	81fb      	strh	r3, [r7, #14]
			break;
 80011f4:	bf00      	nop
		}
		if (lcddev.id == 0X5510)
 80011f6:	4b27      	ldr	r3, [pc, #156]	; (8001294 <LCD_Scan_Dir+0x1f4>)
 80011f8:	889b      	ldrh	r3, [r3, #4]
 80011fa:	f245 5210 	movw	r2, #21776	; 0x5510
 80011fe:	4293      	cmp	r3, r2
 8001200:	d103      	bne.n	800120a <LCD_Scan_Dir+0x16a>
			dirreg = 0X3600;
 8001202:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 8001206:	81bb      	strh	r3, [r7, #12]
 8001208:	e001      	b.n	800120e <LCD_Scan_Dir+0x16e>
		else
			dirreg = 0X36;
 800120a:	2336      	movs	r3, #54	; 0x36
 800120c:	81bb      	strh	r3, [r7, #12]
		if ((lcddev.id != 0X5310) && (lcddev.id != 0X5510) && (lcddev.id != 0X1963))
 800120e:	4b21      	ldr	r3, [pc, #132]	; (8001294 <LCD_Scan_Dir+0x1f4>)
 8001210:	889b      	ldrh	r3, [r3, #4]
 8001212:	f245 3210 	movw	r2, #21264	; 0x5310
 8001216:	4293      	cmp	r3, r2
 8001218:	d00f      	beq.n	800123a <LCD_Scan_Dir+0x19a>
 800121a:	4b1e      	ldr	r3, [pc, #120]	; (8001294 <LCD_Scan_Dir+0x1f4>)
 800121c:	889b      	ldrh	r3, [r3, #4]
 800121e:	f245 5210 	movw	r2, #21776	; 0x5510
 8001222:	4293      	cmp	r3, r2
 8001224:	d009      	beq.n	800123a <LCD_Scan_Dir+0x19a>
 8001226:	4b1b      	ldr	r3, [pc, #108]	; (8001294 <LCD_Scan_Dir+0x1f4>)
 8001228:	889b      	ldrh	r3, [r3, #4]
 800122a:	f641 1263 	movw	r2, #6499	; 0x1963
 800122e:	4293      	cmp	r3, r2
 8001230:	d003      	beq.n	800123a <LCD_Scan_Dir+0x19a>
			regval |= 0X08;	//5310/5510/1963不需要BGR
 8001232:	89fb      	ldrh	r3, [r7, #14]
 8001234:	f043 0308 	orr.w	r3, r3, #8
 8001238:	81fb      	strh	r3, [r7, #14]
		if (lcddev.id == 0X6804)
 800123a:	4b16      	ldr	r3, [pc, #88]	; (8001294 <LCD_Scan_Dir+0x1f4>)
 800123c:	889b      	ldrh	r3, [r3, #4]
 800123e:	f646 0204 	movw	r2, #26628	; 0x6804
 8001242:	4293      	cmp	r3, r2
 8001244:	d103      	bne.n	800124e <LCD_Scan_Dir+0x1ae>
			regval |= 0x02;	//6804的BIT6和9341的反了
 8001246:	89fb      	ldrh	r3, [r7, #14]
 8001248:	f043 0302 	orr.w	r3, r3, #2
 800124c:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 800124e:	89fa      	ldrh	r2, [r7, #14]
 8001250:	89bb      	ldrh	r3, [r7, #12]
 8001252:	4611      	mov	r1, r2
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff fc11 	bl	8000a7c <LCD_WriteReg>
		if (lcddev.id != 0X1963)	//1963不做坐标处理
 800125a:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <LCD_Scan_Dir+0x1f4>)
 800125c:	889b      	ldrh	r3, [r3, #4]
 800125e:	f641 1263 	movw	r2, #6499	; 0x1963
 8001262:	4293      	cmp	r3, r2
 8001264:	d028      	beq.n	80012b8 <LCD_Scan_Dir+0x218>
				{
			if (regval & 0X20) {
 8001266:	89fb      	ldrh	r3, [r7, #14]
 8001268:	f003 0320 	and.w	r3, r3, #32
 800126c:	2b00      	cmp	r3, #0
 800126e:	d013      	beq.n	8001298 <LCD_Scan_Dir+0x1f8>
				if (lcddev.width < lcddev.height)	//交换X,Y
 8001270:	4b08      	ldr	r3, [pc, #32]	; (8001294 <LCD_Scan_Dir+0x1f4>)
 8001272:	881a      	ldrh	r2, [r3, #0]
 8001274:	4b07      	ldr	r3, [pc, #28]	; (8001294 <LCD_Scan_Dir+0x1f4>)
 8001276:	885b      	ldrh	r3, [r3, #2]
 8001278:	429a      	cmp	r2, r3
 800127a:	d21d      	bcs.n	80012b8 <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 800127c:	4b05      	ldr	r3, [pc, #20]	; (8001294 <LCD_Scan_Dir+0x1f4>)
 800127e:	881b      	ldrh	r3, [r3, #0]
 8001280:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 8001282:	4b04      	ldr	r3, [pc, #16]	; (8001294 <LCD_Scan_Dir+0x1f4>)
 8001284:	885a      	ldrh	r2, [r3, #2]
 8001286:	4b03      	ldr	r3, [pc, #12]	; (8001294 <LCD_Scan_Dir+0x1f4>)
 8001288:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 800128a:	4a02      	ldr	r2, [pc, #8]	; (8001294 <LCD_Scan_Dir+0x1f4>)
 800128c:	897b      	ldrh	r3, [r7, #10]
 800128e:	8053      	strh	r3, [r2, #2]
 8001290:	e012      	b.n	80012b8 <LCD_Scan_Dir+0x218>
 8001292:	bf00      	nop
 8001294:	20000080 	.word	0x20000080
				}
			} else {
				if (lcddev.width > lcddev.height)	//交换X,Y
 8001298:	4b7f      	ldr	r3, [pc, #508]	; (8001498 <LCD_Scan_Dir+0x3f8>)
 800129a:	881a      	ldrh	r2, [r3, #0]
 800129c:	4b7e      	ldr	r3, [pc, #504]	; (8001498 <LCD_Scan_Dir+0x3f8>)
 800129e:	885b      	ldrh	r3, [r3, #2]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d909      	bls.n	80012b8 <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 80012a4:	4b7c      	ldr	r3, [pc, #496]	; (8001498 <LCD_Scan_Dir+0x3f8>)
 80012a6:	881b      	ldrh	r3, [r3, #0]
 80012a8:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 80012aa:	4b7b      	ldr	r3, [pc, #492]	; (8001498 <LCD_Scan_Dir+0x3f8>)
 80012ac:	885a      	ldrh	r2, [r3, #2]
 80012ae:	4b7a      	ldr	r3, [pc, #488]	; (8001498 <LCD_Scan_Dir+0x3f8>)
 80012b0:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 80012b2:	4a79      	ldr	r2, [pc, #484]	; (8001498 <LCD_Scan_Dir+0x3f8>)
 80012b4:	897b      	ldrh	r3, [r7, #10]
 80012b6:	8053      	strh	r3, [r2, #2]
				}
			}
		}
		if (lcddev.id == 0X5510) {
 80012b8:	4b77      	ldr	r3, [pc, #476]	; (8001498 <LCD_Scan_Dir+0x3f8>)
 80012ba:	889b      	ldrh	r3, [r3, #4]
 80012bc:	f245 5210 	movw	r2, #21776	; 0x5510
 80012c0:	4293      	cmp	r3, r2
 80012c2:	f040 80ef 	bne.w	80014a4 <LCD_Scan_Dir+0x404>
			LCD_WR_REG(lcddev.setxcmd);
 80012c6:	4b74      	ldr	r3, [pc, #464]	; (8001498 <LCD_Scan_Dir+0x3f8>)
 80012c8:	895b      	ldrh	r3, [r3, #10]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff fb4a 	bl	8000964 <LCD_WR_REG>
			LCD_WR_DATA(0);
 80012d0:	4b72      	ldr	r3, [pc, #456]	; (800149c <LCD_Scan_Dir+0x3fc>)
 80012d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012d6:	611a      	str	r2, [r3, #16]
 80012d8:	4b70      	ldr	r3, [pc, #448]	; (800149c <LCD_Scan_Dir+0x3fc>)
 80012da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012de:	615a      	str	r2, [r3, #20]
 80012e0:	4b6f      	ldr	r3, [pc, #444]	; (80014a0 <LCD_Scan_Dir+0x400>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	4b6d      	ldr	r3, [pc, #436]	; (800149c <LCD_Scan_Dir+0x3fc>)
 80012e8:	2280      	movs	r2, #128	; 0x80
 80012ea:	615a      	str	r2, [r3, #20]
 80012ec:	4b6b      	ldr	r3, [pc, #428]	; (800149c <LCD_Scan_Dir+0x3fc>)
 80012ee:	2280      	movs	r2, #128	; 0x80
 80012f0:	611a      	str	r2, [r3, #16]
 80012f2:	4b6a      	ldr	r3, [pc, #424]	; (800149c <LCD_Scan_Dir+0x3fc>)
 80012f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012f8:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 1);
 80012fa:	4b67      	ldr	r3, [pc, #412]	; (8001498 <LCD_Scan_Dir+0x3f8>)
 80012fc:	895b      	ldrh	r3, [r3, #10]
 80012fe:	3301      	adds	r3, #1
 8001300:	b29b      	uxth	r3, r3
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff fb2e 	bl	8000964 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001308:	4b64      	ldr	r3, [pc, #400]	; (800149c <LCD_Scan_Dir+0x3fc>)
 800130a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800130e:	611a      	str	r2, [r3, #16]
 8001310:	4b62      	ldr	r3, [pc, #392]	; (800149c <LCD_Scan_Dir+0x3fc>)
 8001312:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001316:	615a      	str	r2, [r3, #20]
 8001318:	4b61      	ldr	r3, [pc, #388]	; (80014a0 <LCD_Scan_Dir+0x400>)
 800131a:	2200      	movs	r2, #0
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	4b5f      	ldr	r3, [pc, #380]	; (800149c <LCD_Scan_Dir+0x3fc>)
 8001320:	2280      	movs	r2, #128	; 0x80
 8001322:	615a      	str	r2, [r3, #20]
 8001324:	4b5d      	ldr	r3, [pc, #372]	; (800149c <LCD_Scan_Dir+0x3fc>)
 8001326:	2280      	movs	r2, #128	; 0x80
 8001328:	611a      	str	r2, [r3, #16]
 800132a:	4b5c      	ldr	r3, [pc, #368]	; (800149c <LCD_Scan_Dir+0x3fc>)
 800132c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001330:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 2);
 8001332:	4b59      	ldr	r3, [pc, #356]	; (8001498 <LCD_Scan_Dir+0x3f8>)
 8001334:	895b      	ldrh	r3, [r3, #10]
 8001336:	3302      	adds	r3, #2
 8001338:	b29b      	uxth	r3, r3
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff fb12 	bl	8000964 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 8001340:	4b56      	ldr	r3, [pc, #344]	; (800149c <LCD_Scan_Dir+0x3fc>)
 8001342:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001346:	611a      	str	r2, [r3, #16]
 8001348:	4b54      	ldr	r3, [pc, #336]	; (800149c <LCD_Scan_Dir+0x3fc>)
 800134a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800134e:	615a      	str	r2, [r3, #20]
 8001350:	4b51      	ldr	r3, [pc, #324]	; (8001498 <LCD_Scan_Dir+0x3f8>)
 8001352:	881b      	ldrh	r3, [r3, #0]
 8001354:	3b01      	subs	r3, #1
 8001356:	121a      	asrs	r2, r3, #8
 8001358:	4b51      	ldr	r3, [pc, #324]	; (80014a0 <LCD_Scan_Dir+0x400>)
 800135a:	60da      	str	r2, [r3, #12]
 800135c:	4b4f      	ldr	r3, [pc, #316]	; (800149c <LCD_Scan_Dir+0x3fc>)
 800135e:	2280      	movs	r2, #128	; 0x80
 8001360:	615a      	str	r2, [r3, #20]
 8001362:	4b4e      	ldr	r3, [pc, #312]	; (800149c <LCD_Scan_Dir+0x3fc>)
 8001364:	2280      	movs	r2, #128	; 0x80
 8001366:	611a      	str	r2, [r3, #16]
 8001368:	4b4c      	ldr	r3, [pc, #304]	; (800149c <LCD_Scan_Dir+0x3fc>)
 800136a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800136e:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 3);
 8001370:	4b49      	ldr	r3, [pc, #292]	; (8001498 <LCD_Scan_Dir+0x3f8>)
 8001372:	895b      	ldrh	r3, [r3, #10]
 8001374:	3303      	adds	r3, #3
 8001376:	b29b      	uxth	r3, r3
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff faf3 	bl	8000964 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 800137e:	4b47      	ldr	r3, [pc, #284]	; (800149c <LCD_Scan_Dir+0x3fc>)
 8001380:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001384:	611a      	str	r2, [r3, #16]
 8001386:	4b45      	ldr	r3, [pc, #276]	; (800149c <LCD_Scan_Dir+0x3fc>)
 8001388:	f44f 7200 	mov.w	r2, #512	; 0x200
 800138c:	615a      	str	r2, [r3, #20]
 800138e:	4b42      	ldr	r3, [pc, #264]	; (8001498 <LCD_Scan_Dir+0x3f8>)
 8001390:	881b      	ldrh	r3, [r3, #0]
 8001392:	3b01      	subs	r3, #1
 8001394:	4a42      	ldr	r2, [pc, #264]	; (80014a0 <LCD_Scan_Dir+0x400>)
 8001396:	b2db      	uxtb	r3, r3
 8001398:	60d3      	str	r3, [r2, #12]
 800139a:	4b40      	ldr	r3, [pc, #256]	; (800149c <LCD_Scan_Dir+0x3fc>)
 800139c:	2280      	movs	r2, #128	; 0x80
 800139e:	615a      	str	r2, [r3, #20]
 80013a0:	4b3e      	ldr	r3, [pc, #248]	; (800149c <LCD_Scan_Dir+0x3fc>)
 80013a2:	2280      	movs	r2, #128	; 0x80
 80013a4:	611a      	str	r2, [r3, #16]
 80013a6:	4b3d      	ldr	r3, [pc, #244]	; (800149c <LCD_Scan_Dir+0x3fc>)
 80013a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013ac:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 80013ae:	4b3a      	ldr	r3, [pc, #232]	; (8001498 <LCD_Scan_Dir+0x3f8>)
 80013b0:	899b      	ldrh	r3, [r3, #12]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff fad6 	bl	8000964 <LCD_WR_REG>
			LCD_WR_DATA(0);
 80013b8:	4b38      	ldr	r3, [pc, #224]	; (800149c <LCD_Scan_Dir+0x3fc>)
 80013ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013be:	611a      	str	r2, [r3, #16]
 80013c0:	4b36      	ldr	r3, [pc, #216]	; (800149c <LCD_Scan_Dir+0x3fc>)
 80013c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013c6:	615a      	str	r2, [r3, #20]
 80013c8:	4b35      	ldr	r3, [pc, #212]	; (80014a0 <LCD_Scan_Dir+0x400>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	4b33      	ldr	r3, [pc, #204]	; (800149c <LCD_Scan_Dir+0x3fc>)
 80013d0:	2280      	movs	r2, #128	; 0x80
 80013d2:	615a      	str	r2, [r3, #20]
 80013d4:	4b31      	ldr	r3, [pc, #196]	; (800149c <LCD_Scan_Dir+0x3fc>)
 80013d6:	2280      	movs	r2, #128	; 0x80
 80013d8:	611a      	str	r2, [r3, #16]
 80013da:	4b30      	ldr	r3, [pc, #192]	; (800149c <LCD_Scan_Dir+0x3fc>)
 80013dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013e0:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 1);
 80013e2:	4b2d      	ldr	r3, [pc, #180]	; (8001498 <LCD_Scan_Dir+0x3f8>)
 80013e4:	899b      	ldrh	r3, [r3, #12]
 80013e6:	3301      	adds	r3, #1
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff faba 	bl	8000964 <LCD_WR_REG>
			LCD_WR_DATA(0);
 80013f0:	4b2a      	ldr	r3, [pc, #168]	; (800149c <LCD_Scan_Dir+0x3fc>)
 80013f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013f6:	611a      	str	r2, [r3, #16]
 80013f8:	4b28      	ldr	r3, [pc, #160]	; (800149c <LCD_Scan_Dir+0x3fc>)
 80013fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013fe:	615a      	str	r2, [r3, #20]
 8001400:	4b27      	ldr	r3, [pc, #156]	; (80014a0 <LCD_Scan_Dir+0x400>)
 8001402:	2200      	movs	r2, #0
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	4b25      	ldr	r3, [pc, #148]	; (800149c <LCD_Scan_Dir+0x3fc>)
 8001408:	2280      	movs	r2, #128	; 0x80
 800140a:	615a      	str	r2, [r3, #20]
 800140c:	4b23      	ldr	r3, [pc, #140]	; (800149c <LCD_Scan_Dir+0x3fc>)
 800140e:	2280      	movs	r2, #128	; 0x80
 8001410:	611a      	str	r2, [r3, #16]
 8001412:	4b22      	ldr	r3, [pc, #136]	; (800149c <LCD_Scan_Dir+0x3fc>)
 8001414:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001418:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 2);
 800141a:	4b1f      	ldr	r3, [pc, #124]	; (8001498 <LCD_Scan_Dir+0x3f8>)
 800141c:	899b      	ldrh	r3, [r3, #12]
 800141e:	3302      	adds	r3, #2
 8001420:	b29b      	uxth	r3, r3
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff fa9e 	bl	8000964 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 8001428:	4b1c      	ldr	r3, [pc, #112]	; (800149c <LCD_Scan_Dir+0x3fc>)
 800142a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800142e:	611a      	str	r2, [r3, #16]
 8001430:	4b1a      	ldr	r3, [pc, #104]	; (800149c <LCD_Scan_Dir+0x3fc>)
 8001432:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001436:	615a      	str	r2, [r3, #20]
 8001438:	4b17      	ldr	r3, [pc, #92]	; (8001498 <LCD_Scan_Dir+0x3f8>)
 800143a:	885b      	ldrh	r3, [r3, #2]
 800143c:	3b01      	subs	r3, #1
 800143e:	121a      	asrs	r2, r3, #8
 8001440:	4b17      	ldr	r3, [pc, #92]	; (80014a0 <LCD_Scan_Dir+0x400>)
 8001442:	60da      	str	r2, [r3, #12]
 8001444:	4b15      	ldr	r3, [pc, #84]	; (800149c <LCD_Scan_Dir+0x3fc>)
 8001446:	2280      	movs	r2, #128	; 0x80
 8001448:	615a      	str	r2, [r3, #20]
 800144a:	4b14      	ldr	r3, [pc, #80]	; (800149c <LCD_Scan_Dir+0x3fc>)
 800144c:	2280      	movs	r2, #128	; 0x80
 800144e:	611a      	str	r2, [r3, #16]
 8001450:	4b12      	ldr	r3, [pc, #72]	; (800149c <LCD_Scan_Dir+0x3fc>)
 8001452:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001456:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 3);
 8001458:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <LCD_Scan_Dir+0x3f8>)
 800145a:	899b      	ldrh	r3, [r3, #12]
 800145c:	3303      	adds	r3, #3
 800145e:	b29b      	uxth	r3, r3
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff fa7f 	bl	8000964 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8001466:	4b0d      	ldr	r3, [pc, #52]	; (800149c <LCD_Scan_Dir+0x3fc>)
 8001468:	f44f 7280 	mov.w	r2, #256	; 0x100
 800146c:	611a      	str	r2, [r3, #16]
 800146e:	4b0b      	ldr	r3, [pc, #44]	; (800149c <LCD_Scan_Dir+0x3fc>)
 8001470:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001474:	615a      	str	r2, [r3, #20]
 8001476:	4b08      	ldr	r3, [pc, #32]	; (8001498 <LCD_Scan_Dir+0x3f8>)
 8001478:	885b      	ldrh	r3, [r3, #2]
 800147a:	3b01      	subs	r3, #1
 800147c:	4a08      	ldr	r2, [pc, #32]	; (80014a0 <LCD_Scan_Dir+0x400>)
 800147e:	b2db      	uxtb	r3, r3
 8001480:	60d3      	str	r3, [r2, #12]
 8001482:	4b06      	ldr	r3, [pc, #24]	; (800149c <LCD_Scan_Dir+0x3fc>)
 8001484:	2280      	movs	r2, #128	; 0x80
 8001486:	615a      	str	r2, [r3, #20]
 8001488:	4b04      	ldr	r3, [pc, #16]	; (800149c <LCD_Scan_Dir+0x3fc>)
 800148a:	2280      	movs	r2, #128	; 0x80
 800148c:	611a      	str	r2, [r3, #16]
 800148e:	4b03      	ldr	r3, [pc, #12]	; (800149c <LCD_Scan_Dir+0x3fc>)
 8001490:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001494:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 8001496:	e10b      	b.n	80016b0 <LCD_Scan_Dir+0x610>
 8001498:	20000080 	.word	0x20000080
 800149c:	40011000 	.word	0x40011000
 80014a0:	40010c00 	.word	0x40010c00
		} else {
			LCD_WR_REG(lcddev.setxcmd);
 80014a4:	4b84      	ldr	r3, [pc, #528]	; (80016b8 <LCD_Scan_Dir+0x618>)
 80014a6:	895b      	ldrh	r3, [r3, #10]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff fa5b 	bl	8000964 <LCD_WR_REG>
			LCD_WR_DATA(0);
 80014ae:	4b83      	ldr	r3, [pc, #524]	; (80016bc <LCD_Scan_Dir+0x61c>)
 80014b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014b4:	611a      	str	r2, [r3, #16]
 80014b6:	4b81      	ldr	r3, [pc, #516]	; (80016bc <LCD_Scan_Dir+0x61c>)
 80014b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014bc:	615a      	str	r2, [r3, #20]
 80014be:	4b80      	ldr	r3, [pc, #512]	; (80016c0 <LCD_Scan_Dir+0x620>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	60da      	str	r2, [r3, #12]
 80014c4:	4b7d      	ldr	r3, [pc, #500]	; (80016bc <LCD_Scan_Dir+0x61c>)
 80014c6:	2280      	movs	r2, #128	; 0x80
 80014c8:	615a      	str	r2, [r3, #20]
 80014ca:	4b7c      	ldr	r3, [pc, #496]	; (80016bc <LCD_Scan_Dir+0x61c>)
 80014cc:	2280      	movs	r2, #128	; 0x80
 80014ce:	611a      	str	r2, [r3, #16]
 80014d0:	4b7a      	ldr	r3, [pc, #488]	; (80016bc <LCD_Scan_Dir+0x61c>)
 80014d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014d6:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 80014d8:	4b78      	ldr	r3, [pc, #480]	; (80016bc <LCD_Scan_Dir+0x61c>)
 80014da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014de:	611a      	str	r2, [r3, #16]
 80014e0:	4b76      	ldr	r3, [pc, #472]	; (80016bc <LCD_Scan_Dir+0x61c>)
 80014e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014e6:	615a      	str	r2, [r3, #20]
 80014e8:	4b75      	ldr	r3, [pc, #468]	; (80016c0 <LCD_Scan_Dir+0x620>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	4b73      	ldr	r3, [pc, #460]	; (80016bc <LCD_Scan_Dir+0x61c>)
 80014f0:	2280      	movs	r2, #128	; 0x80
 80014f2:	615a      	str	r2, [r3, #20]
 80014f4:	4b71      	ldr	r3, [pc, #452]	; (80016bc <LCD_Scan_Dir+0x61c>)
 80014f6:	2280      	movs	r2, #128	; 0x80
 80014f8:	611a      	str	r2, [r3, #16]
 80014fa:	4b70      	ldr	r3, [pc, #448]	; (80016bc <LCD_Scan_Dir+0x61c>)
 80014fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001500:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 8001502:	4b6e      	ldr	r3, [pc, #440]	; (80016bc <LCD_Scan_Dir+0x61c>)
 8001504:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001508:	611a      	str	r2, [r3, #16]
 800150a:	4b6c      	ldr	r3, [pc, #432]	; (80016bc <LCD_Scan_Dir+0x61c>)
 800150c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001510:	615a      	str	r2, [r3, #20]
 8001512:	4b69      	ldr	r3, [pc, #420]	; (80016b8 <LCD_Scan_Dir+0x618>)
 8001514:	881b      	ldrh	r3, [r3, #0]
 8001516:	3b01      	subs	r3, #1
 8001518:	121a      	asrs	r2, r3, #8
 800151a:	4b69      	ldr	r3, [pc, #420]	; (80016c0 <LCD_Scan_Dir+0x620>)
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	4b67      	ldr	r3, [pc, #412]	; (80016bc <LCD_Scan_Dir+0x61c>)
 8001520:	2280      	movs	r2, #128	; 0x80
 8001522:	615a      	str	r2, [r3, #20]
 8001524:	4b65      	ldr	r3, [pc, #404]	; (80016bc <LCD_Scan_Dir+0x61c>)
 8001526:	2280      	movs	r2, #128	; 0x80
 8001528:	611a      	str	r2, [r3, #16]
 800152a:	4b64      	ldr	r3, [pc, #400]	; (80016bc <LCD_Scan_Dir+0x61c>)
 800152c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001530:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8001532:	4b62      	ldr	r3, [pc, #392]	; (80016bc <LCD_Scan_Dir+0x61c>)
 8001534:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001538:	611a      	str	r2, [r3, #16]
 800153a:	4b60      	ldr	r3, [pc, #384]	; (80016bc <LCD_Scan_Dir+0x61c>)
 800153c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001540:	615a      	str	r2, [r3, #20]
 8001542:	4b5d      	ldr	r3, [pc, #372]	; (80016b8 <LCD_Scan_Dir+0x618>)
 8001544:	881b      	ldrh	r3, [r3, #0]
 8001546:	3b01      	subs	r3, #1
 8001548:	4a5d      	ldr	r2, [pc, #372]	; (80016c0 <LCD_Scan_Dir+0x620>)
 800154a:	b2db      	uxtb	r3, r3
 800154c:	60d3      	str	r3, [r2, #12]
 800154e:	4b5b      	ldr	r3, [pc, #364]	; (80016bc <LCD_Scan_Dir+0x61c>)
 8001550:	2280      	movs	r2, #128	; 0x80
 8001552:	615a      	str	r2, [r3, #20]
 8001554:	4b59      	ldr	r3, [pc, #356]	; (80016bc <LCD_Scan_Dir+0x61c>)
 8001556:	2280      	movs	r2, #128	; 0x80
 8001558:	611a      	str	r2, [r3, #16]
 800155a:	4b58      	ldr	r3, [pc, #352]	; (80016bc <LCD_Scan_Dir+0x61c>)
 800155c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001560:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 8001562:	4b55      	ldr	r3, [pc, #340]	; (80016b8 <LCD_Scan_Dir+0x618>)
 8001564:	899b      	ldrh	r3, [r3, #12]
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff f9fc 	bl	8000964 <LCD_WR_REG>
			LCD_WR_DATA(0);
 800156c:	4b53      	ldr	r3, [pc, #332]	; (80016bc <LCD_Scan_Dir+0x61c>)
 800156e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001572:	611a      	str	r2, [r3, #16]
 8001574:	4b51      	ldr	r3, [pc, #324]	; (80016bc <LCD_Scan_Dir+0x61c>)
 8001576:	f44f 7200 	mov.w	r2, #512	; 0x200
 800157a:	615a      	str	r2, [r3, #20]
 800157c:	4b50      	ldr	r3, [pc, #320]	; (80016c0 <LCD_Scan_Dir+0x620>)
 800157e:	2200      	movs	r2, #0
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	4b4e      	ldr	r3, [pc, #312]	; (80016bc <LCD_Scan_Dir+0x61c>)
 8001584:	2280      	movs	r2, #128	; 0x80
 8001586:	615a      	str	r2, [r3, #20]
 8001588:	4b4c      	ldr	r3, [pc, #304]	; (80016bc <LCD_Scan_Dir+0x61c>)
 800158a:	2280      	movs	r2, #128	; 0x80
 800158c:	611a      	str	r2, [r3, #16]
 800158e:	4b4b      	ldr	r3, [pc, #300]	; (80016bc <LCD_Scan_Dir+0x61c>)
 8001590:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001594:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8001596:	4b49      	ldr	r3, [pc, #292]	; (80016bc <LCD_Scan_Dir+0x61c>)
 8001598:	f44f 7280 	mov.w	r2, #256	; 0x100
 800159c:	611a      	str	r2, [r3, #16]
 800159e:	4b47      	ldr	r3, [pc, #284]	; (80016bc <LCD_Scan_Dir+0x61c>)
 80015a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015a4:	615a      	str	r2, [r3, #20]
 80015a6:	4b46      	ldr	r3, [pc, #280]	; (80016c0 <LCD_Scan_Dir+0x620>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	60da      	str	r2, [r3, #12]
 80015ac:	4b43      	ldr	r3, [pc, #268]	; (80016bc <LCD_Scan_Dir+0x61c>)
 80015ae:	2280      	movs	r2, #128	; 0x80
 80015b0:	615a      	str	r2, [r3, #20]
 80015b2:	4b42      	ldr	r3, [pc, #264]	; (80016bc <LCD_Scan_Dir+0x61c>)
 80015b4:	2280      	movs	r2, #128	; 0x80
 80015b6:	611a      	str	r2, [r3, #16]
 80015b8:	4b40      	ldr	r3, [pc, #256]	; (80016bc <LCD_Scan_Dir+0x61c>)
 80015ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015be:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 80015c0:	4b3e      	ldr	r3, [pc, #248]	; (80016bc <LCD_Scan_Dir+0x61c>)
 80015c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015c6:	611a      	str	r2, [r3, #16]
 80015c8:	4b3c      	ldr	r3, [pc, #240]	; (80016bc <LCD_Scan_Dir+0x61c>)
 80015ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015ce:	615a      	str	r2, [r3, #20]
 80015d0:	4b39      	ldr	r3, [pc, #228]	; (80016b8 <LCD_Scan_Dir+0x618>)
 80015d2:	885b      	ldrh	r3, [r3, #2]
 80015d4:	3b01      	subs	r3, #1
 80015d6:	121a      	asrs	r2, r3, #8
 80015d8:	4b39      	ldr	r3, [pc, #228]	; (80016c0 <LCD_Scan_Dir+0x620>)
 80015da:	60da      	str	r2, [r3, #12]
 80015dc:	4b37      	ldr	r3, [pc, #220]	; (80016bc <LCD_Scan_Dir+0x61c>)
 80015de:	2280      	movs	r2, #128	; 0x80
 80015e0:	615a      	str	r2, [r3, #20]
 80015e2:	4b36      	ldr	r3, [pc, #216]	; (80016bc <LCD_Scan_Dir+0x61c>)
 80015e4:	2280      	movs	r2, #128	; 0x80
 80015e6:	611a      	str	r2, [r3, #16]
 80015e8:	4b34      	ldr	r3, [pc, #208]	; (80016bc <LCD_Scan_Dir+0x61c>)
 80015ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015ee:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 80015f0:	4b32      	ldr	r3, [pc, #200]	; (80016bc <LCD_Scan_Dir+0x61c>)
 80015f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015f6:	611a      	str	r2, [r3, #16]
 80015f8:	4b30      	ldr	r3, [pc, #192]	; (80016bc <LCD_Scan_Dir+0x61c>)
 80015fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015fe:	615a      	str	r2, [r3, #20]
 8001600:	4b2d      	ldr	r3, [pc, #180]	; (80016b8 <LCD_Scan_Dir+0x618>)
 8001602:	885b      	ldrh	r3, [r3, #2]
 8001604:	3b01      	subs	r3, #1
 8001606:	4a2e      	ldr	r2, [pc, #184]	; (80016c0 <LCD_Scan_Dir+0x620>)
 8001608:	b2db      	uxtb	r3, r3
 800160a:	60d3      	str	r3, [r2, #12]
 800160c:	4b2b      	ldr	r3, [pc, #172]	; (80016bc <LCD_Scan_Dir+0x61c>)
 800160e:	2280      	movs	r2, #128	; 0x80
 8001610:	615a      	str	r2, [r3, #20]
 8001612:	4b2a      	ldr	r3, [pc, #168]	; (80016bc <LCD_Scan_Dir+0x61c>)
 8001614:	2280      	movs	r2, #128	; 0x80
 8001616:	611a      	str	r2, [r3, #16]
 8001618:	4b28      	ldr	r3, [pc, #160]	; (80016bc <LCD_Scan_Dir+0x61c>)
 800161a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800161e:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 8001620:	e046      	b.n	80016b0 <LCD_Scan_Dir+0x610>
		}
	} else {
		switch (dir) {
 8001622:	79fb      	ldrb	r3, [r7, #7]
 8001624:	2b07      	cmp	r3, #7
 8001626:	d836      	bhi.n	8001696 <LCD_Scan_Dir+0x5f6>
 8001628:	a201      	add	r2, pc, #4	; (adr r2, 8001630 <LCD_Scan_Dir+0x590>)
 800162a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800162e:	bf00      	nop
 8001630:	08001651 	.word	0x08001651
 8001634:	0800165b 	.word	0x0800165b
 8001638:	08001665 	.word	0x08001665
 800163c:	08001697 	.word	0x08001697
 8001640:	0800166f 	.word	0x0800166f
 8001644:	08001679 	.word	0x08001679
 8001648:	08001683 	.word	0x08001683
 800164c:	0800168d 	.word	0x0800168d
		case L2R_U2D:	//从左到右,从上到下
			regval |= (1 << 5) | (1 << 4) | (0 << 3);
 8001650:	89fb      	ldrh	r3, [r7, #14]
 8001652:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001656:	81fb      	strh	r3, [r7, #14]
			break;
 8001658:	e01d      	b.n	8001696 <LCD_Scan_Dir+0x5f6>
		case L2R_D2U:	//从左到右,从下到上
			regval |= (0 << 5) | (1 << 4) | (0 << 3);
 800165a:	89fb      	ldrh	r3, [r7, #14]
 800165c:	f043 0310 	orr.w	r3, r3, #16
 8001660:	81fb      	strh	r3, [r7, #14]
			break;
 8001662:	e018      	b.n	8001696 <LCD_Scan_Dir+0x5f6>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (1 << 5) | (0 << 4) | (0 << 3);
 8001664:	89fb      	ldrh	r3, [r7, #14]
 8001666:	f043 0320 	orr.w	r3, r3, #32
 800166a:	81fb      	strh	r3, [r7, #14]
			break;
 800166c:	e013      	b.n	8001696 <LCD_Scan_Dir+0x5f6>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (0 << 5) | (0 << 4) | (0 << 3);
			break;
		case U2D_L2R:	//从上到下,从左到右
			regval |= (1 << 5) | (1 << 4) | (1 << 3);
 800166e:	89fb      	ldrh	r3, [r7, #14]
 8001670:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8001674:	81fb      	strh	r3, [r7, #14]
			break;
 8001676:	e00e      	b.n	8001696 <LCD_Scan_Dir+0x5f6>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (1 << 5) | (0 << 4) | (1 << 3);
 8001678:	89fb      	ldrh	r3, [r7, #14]
 800167a:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800167e:	81fb      	strh	r3, [r7, #14]
			break;
 8001680:	e009      	b.n	8001696 <LCD_Scan_Dir+0x5f6>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (0 << 5) | (1 << 4) | (1 << 3);
 8001682:	89fb      	ldrh	r3, [r7, #14]
 8001684:	f043 0318 	orr.w	r3, r3, #24
 8001688:	81fb      	strh	r3, [r7, #14]
			break;
 800168a:	e004      	b.n	8001696 <LCD_Scan_Dir+0x5f6>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (0 << 5) | (0 << 4) | (1 << 3);
 800168c:	89fb      	ldrh	r3, [r7, #14]
 800168e:	f043 0308 	orr.w	r3, r3, #8
 8001692:	81fb      	strh	r3, [r7, #14]
			break;
 8001694:	bf00      	nop
		}
		dirreg = 0X03;
 8001696:	2303      	movs	r3, #3
 8001698:	81bb      	strh	r3, [r7, #12]
		regval |= 1 << 12;
 800169a:	89fb      	ldrh	r3, [r7, #14]
 800169c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016a0:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 80016a2:	89fa      	ldrh	r2, [r7, #14]
 80016a4:	89bb      	ldrh	r3, [r7, #12]
 80016a6:	4611      	mov	r1, r2
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff f9e7 	bl	8000a7c <LCD_WriteReg>
	}
}
 80016ae:	bf00      	nop
 80016b0:	bf00      	nop
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20000080 	.word	0x20000080
 80016bc:	40011000 	.word	0x40011000
 80016c0:	40010c00 	.word	0x40010c00
 80016c4:	00000000 	.word	0x00000000

080016c8 <LCD_SSD_BackLightSet>:
	LCD_CS_SET;
	LCD_WR_DATA(color);		//写数据
}
//SSD1963 背光设置
//pwm:背光等级,0~100.越大越亮.
void LCD_SSD_BackLightSet(uint8_t pwm) {
 80016c8:	b590      	push	{r4, r7, lr}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	71fb      	strb	r3, [r7, #7]
	LCD_WR_REG(0xBE);	//配置PWM输出
 80016d2:	20be      	movs	r0, #190	; 0xbe
 80016d4:	f7ff f946 	bl	8000964 <LCD_WR_REG>
	LCD_WR_DATA(0x05);	//1设置PWM频率
 80016d8:	4b4b      	ldr	r3, [pc, #300]	; (8001808 <LCD_SSD_BackLightSet+0x140>)
 80016da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016de:	611a      	str	r2, [r3, #16]
 80016e0:	4b49      	ldr	r3, [pc, #292]	; (8001808 <LCD_SSD_BackLightSet+0x140>)
 80016e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016e6:	615a      	str	r2, [r3, #20]
 80016e8:	4b48      	ldr	r3, [pc, #288]	; (800180c <LCD_SSD_BackLightSet+0x144>)
 80016ea:	2205      	movs	r2, #5
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	4b46      	ldr	r3, [pc, #280]	; (8001808 <LCD_SSD_BackLightSet+0x140>)
 80016f0:	2280      	movs	r2, #128	; 0x80
 80016f2:	615a      	str	r2, [r3, #20]
 80016f4:	4b44      	ldr	r3, [pc, #272]	; (8001808 <LCD_SSD_BackLightSet+0x140>)
 80016f6:	2280      	movs	r2, #128	; 0x80
 80016f8:	611a      	str	r2, [r3, #16]
 80016fa:	4b43      	ldr	r3, [pc, #268]	; (8001808 <LCD_SSD_BackLightSet+0x140>)
 80016fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001700:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(pwm * 2.55);	//2设置PWM占空比
 8001702:	4b41      	ldr	r3, [pc, #260]	; (8001808 <LCD_SSD_BackLightSet+0x140>)
 8001704:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001708:	611a      	str	r2, [r3, #16]
 800170a:	4b3f      	ldr	r3, [pc, #252]	; (8001808 <LCD_SSD_BackLightSet+0x140>)
 800170c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001710:	615a      	str	r2, [r3, #20]
 8001712:	79fb      	ldrb	r3, [r7, #7]
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff f80d 	bl	8000734 <__aeabi_i2d>
 800171a:	a339      	add	r3, pc, #228	; (adr r3, 8001800 <LCD_SSD_BackLightSet+0x138>)
 800171c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001720:	f7fe fd8c 	bl	800023c <__aeabi_dmul>
 8001724:	4602      	mov	r2, r0
 8001726:	460b      	mov	r3, r1
 8001728:	4c38      	ldr	r4, [pc, #224]	; (800180c <LCD_SSD_BackLightSet+0x144>)
 800172a:	4610      	mov	r0, r2
 800172c:	4619      	mov	r1, r3
 800172e:	f7ff f86b 	bl	8000808 <__aeabi_d2uiz>
 8001732:	4603      	mov	r3, r0
 8001734:	60e3      	str	r3, [r4, #12]
 8001736:	4b34      	ldr	r3, [pc, #208]	; (8001808 <LCD_SSD_BackLightSet+0x140>)
 8001738:	2280      	movs	r2, #128	; 0x80
 800173a:	615a      	str	r2, [r3, #20]
 800173c:	4b32      	ldr	r3, [pc, #200]	; (8001808 <LCD_SSD_BackLightSet+0x140>)
 800173e:	2280      	movs	r2, #128	; 0x80
 8001740:	611a      	str	r2, [r3, #16]
 8001742:	4b31      	ldr	r3, [pc, #196]	; (8001808 <LCD_SSD_BackLightSet+0x140>)
 8001744:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001748:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x01);	//3设置C
 800174a:	4b2f      	ldr	r3, [pc, #188]	; (8001808 <LCD_SSD_BackLightSet+0x140>)
 800174c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001750:	611a      	str	r2, [r3, #16]
 8001752:	4b2d      	ldr	r3, [pc, #180]	; (8001808 <LCD_SSD_BackLightSet+0x140>)
 8001754:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001758:	615a      	str	r2, [r3, #20]
 800175a:	4b2c      	ldr	r3, [pc, #176]	; (800180c <LCD_SSD_BackLightSet+0x144>)
 800175c:	2201      	movs	r2, #1
 800175e:	60da      	str	r2, [r3, #12]
 8001760:	4b29      	ldr	r3, [pc, #164]	; (8001808 <LCD_SSD_BackLightSet+0x140>)
 8001762:	2280      	movs	r2, #128	; 0x80
 8001764:	615a      	str	r2, [r3, #20]
 8001766:	4b28      	ldr	r3, [pc, #160]	; (8001808 <LCD_SSD_BackLightSet+0x140>)
 8001768:	2280      	movs	r2, #128	; 0x80
 800176a:	611a      	str	r2, [r3, #16]
 800176c:	4b26      	ldr	r3, [pc, #152]	; (8001808 <LCD_SSD_BackLightSet+0x140>)
 800176e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001772:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0xFF);	//4设置D
 8001774:	4b24      	ldr	r3, [pc, #144]	; (8001808 <LCD_SSD_BackLightSet+0x140>)
 8001776:	f44f 7280 	mov.w	r2, #256	; 0x100
 800177a:	611a      	str	r2, [r3, #16]
 800177c:	4b22      	ldr	r3, [pc, #136]	; (8001808 <LCD_SSD_BackLightSet+0x140>)
 800177e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001782:	615a      	str	r2, [r3, #20]
 8001784:	4b21      	ldr	r3, [pc, #132]	; (800180c <LCD_SSD_BackLightSet+0x144>)
 8001786:	22ff      	movs	r2, #255	; 0xff
 8001788:	60da      	str	r2, [r3, #12]
 800178a:	4b1f      	ldr	r3, [pc, #124]	; (8001808 <LCD_SSD_BackLightSet+0x140>)
 800178c:	2280      	movs	r2, #128	; 0x80
 800178e:	615a      	str	r2, [r3, #20]
 8001790:	4b1d      	ldr	r3, [pc, #116]	; (8001808 <LCD_SSD_BackLightSet+0x140>)
 8001792:	2280      	movs	r2, #128	; 0x80
 8001794:	611a      	str	r2, [r3, #16]
 8001796:	4b1c      	ldr	r3, [pc, #112]	; (8001808 <LCD_SSD_BackLightSet+0x140>)
 8001798:	f44f 7200 	mov.w	r2, #512	; 0x200
 800179c:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//5设置E
 800179e:	4b1a      	ldr	r3, [pc, #104]	; (8001808 <LCD_SSD_BackLightSet+0x140>)
 80017a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017a4:	611a      	str	r2, [r3, #16]
 80017a6:	4b18      	ldr	r3, [pc, #96]	; (8001808 <LCD_SSD_BackLightSet+0x140>)
 80017a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017ac:	615a      	str	r2, [r3, #20]
 80017ae:	4b17      	ldr	r3, [pc, #92]	; (800180c <LCD_SSD_BackLightSet+0x144>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	60da      	str	r2, [r3, #12]
 80017b4:	4b14      	ldr	r3, [pc, #80]	; (8001808 <LCD_SSD_BackLightSet+0x140>)
 80017b6:	2280      	movs	r2, #128	; 0x80
 80017b8:	615a      	str	r2, [r3, #20]
 80017ba:	4b13      	ldr	r3, [pc, #76]	; (8001808 <LCD_SSD_BackLightSet+0x140>)
 80017bc:	2280      	movs	r2, #128	; 0x80
 80017be:	611a      	str	r2, [r3, #16]
 80017c0:	4b11      	ldr	r3, [pc, #68]	; (8001808 <LCD_SSD_BackLightSet+0x140>)
 80017c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017c6:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//6设置F
 80017c8:	4b0f      	ldr	r3, [pc, #60]	; (8001808 <LCD_SSD_BackLightSet+0x140>)
 80017ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017ce:	611a      	str	r2, [r3, #16]
 80017d0:	4b0d      	ldr	r3, [pc, #52]	; (8001808 <LCD_SSD_BackLightSet+0x140>)
 80017d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017d6:	615a      	str	r2, [r3, #20]
 80017d8:	4b0c      	ldr	r3, [pc, #48]	; (800180c <LCD_SSD_BackLightSet+0x144>)
 80017da:	2200      	movs	r2, #0
 80017dc:	60da      	str	r2, [r3, #12]
 80017de:	4b0a      	ldr	r3, [pc, #40]	; (8001808 <LCD_SSD_BackLightSet+0x140>)
 80017e0:	2280      	movs	r2, #128	; 0x80
 80017e2:	615a      	str	r2, [r3, #20]
 80017e4:	4b08      	ldr	r3, [pc, #32]	; (8001808 <LCD_SSD_BackLightSet+0x140>)
 80017e6:	2280      	movs	r2, #128	; 0x80
 80017e8:	611a      	str	r2, [r3, #16]
 80017ea:	4b07      	ldr	r3, [pc, #28]	; (8001808 <LCD_SSD_BackLightSet+0x140>)
 80017ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017f0:	611a      	str	r2, [r3, #16]
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd90      	pop	{r4, r7, pc}
 80017fa:	bf00      	nop
 80017fc:	f3af 8000 	nop.w
 8001800:	66666666 	.word	0x66666666
 8001804:	40046666 	.word	0x40046666
 8001808:	40011000 	.word	0x40011000
 800180c:	40010c00 	.word	0x40010c00

08001810 <LCD_Display_Dir>:
// Set LCD display direction
// dir: 0, vertical 1, horizontal
void LCD_Display_Dir(uint8_t dir) {
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	71fb      	strb	r3, [r7, #7]
	if (dir == 0)			//竖屏
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d177      	bne.n	8001910 <LCD_Display_Dir+0x100>
			{
		lcddev.dir = 0;	//竖屏
 8001820:	4b80      	ldr	r3, [pc, #512]	; (8001a24 <LCD_Display_Dir+0x214>)
 8001822:	2200      	movs	r2, #0
 8001824:	719a      	strb	r2, [r3, #6]
		lcddev.width = 240;
 8001826:	4b7f      	ldr	r3, [pc, #508]	; (8001a24 <LCD_Display_Dir+0x214>)
 8001828:	22f0      	movs	r2, #240	; 0xf0
 800182a:	801a      	strh	r2, [r3, #0]
		lcddev.height = 320;
 800182c:	4b7d      	ldr	r3, [pc, #500]	; (8001a24 <LCD_Display_Dir+0x214>)
 800182e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001832:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001834:	4b7b      	ldr	r3, [pc, #492]	; (8001a24 <LCD_Display_Dir+0x214>)
 8001836:	889b      	ldrh	r3, [r3, #4]
 8001838:	f249 3241 	movw	r2, #37697	; 0x9341
 800183c:	4293      	cmp	r3, r2
 800183e:	d00b      	beq.n	8001858 <LCD_Display_Dir+0x48>
 8001840:	4b78      	ldr	r3, [pc, #480]	; (8001a24 <LCD_Display_Dir+0x214>)
 8001842:	889b      	ldrh	r3, [r3, #4]
 8001844:	f646 0204 	movw	r2, #26628	; 0x6804
 8001848:	4293      	cmp	r3, r2
 800184a:	d005      	beq.n	8001858 <LCD_Display_Dir+0x48>
 800184c:	4b75      	ldr	r3, [pc, #468]	; (8001a24 <LCD_Display_Dir+0x214>)
 800184e:	889b      	ldrh	r3, [r3, #4]
 8001850:	f245 3210 	movw	r2, #21264	; 0x5310
 8001854:	4293      	cmp	r3, r2
 8001856:	d11e      	bne.n	8001896 <LCD_Display_Dir+0x86>
			lcddev.wramcmd = 0X2C;
 8001858:	4b72      	ldr	r3, [pc, #456]	; (8001a24 <LCD_Display_Dir+0x214>)
 800185a:	222c      	movs	r2, #44	; 0x2c
 800185c:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 800185e:	4b71      	ldr	r3, [pc, #452]	; (8001a24 <LCD_Display_Dir+0x214>)
 8001860:	222a      	movs	r2, #42	; 0x2a
 8001862:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 8001864:	4b6f      	ldr	r3, [pc, #444]	; (8001a24 <LCD_Display_Dir+0x214>)
 8001866:	222b      	movs	r2, #43	; 0x2b
 8001868:	819a      	strh	r2, [r3, #12]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 800186a:	4b6e      	ldr	r3, [pc, #440]	; (8001a24 <LCD_Display_Dir+0x214>)
 800186c:	889b      	ldrh	r3, [r3, #4]
 800186e:	f646 0204 	movw	r2, #26628	; 0x6804
 8001872:	4293      	cmp	r3, r2
 8001874:	d006      	beq.n	8001884 <LCD_Display_Dir+0x74>
 8001876:	4b6b      	ldr	r3, [pc, #428]	; (8001a24 <LCD_Display_Dir+0x214>)
 8001878:	889b      	ldrh	r3, [r3, #4]
 800187a:	f245 3210 	movw	r2, #21264	; 0x5310
 800187e:	4293      	cmp	r3, r2
 8001880:	f040 80c7 	bne.w	8001a12 <LCD_Display_Dir+0x202>
				lcddev.width = 320;
 8001884:	4b67      	ldr	r3, [pc, #412]	; (8001a24 <LCD_Display_Dir+0x214>)
 8001886:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800188a:	801a      	strh	r2, [r3, #0]
				lcddev.height = 480;
 800188c:	4b65      	ldr	r3, [pc, #404]	; (8001a24 <LCD_Display_Dir+0x214>)
 800188e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001892:	805a      	strh	r2, [r3, #2]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001894:	e0bd      	b.n	8001a12 <LCD_Display_Dir+0x202>
			}
		} else if (lcddev.id == 0x5510) {
 8001896:	4b63      	ldr	r3, [pc, #396]	; (8001a24 <LCD_Display_Dir+0x214>)
 8001898:	889b      	ldrh	r3, [r3, #4]
 800189a:	f245 5210 	movw	r2, #21776	; 0x5510
 800189e:	4293      	cmp	r3, r2
 80018a0:	d114      	bne.n	80018cc <LCD_Display_Dir+0xbc>
			lcddev.wramcmd = 0X2C00;
 80018a2:	4b60      	ldr	r3, [pc, #384]	; (8001a24 <LCD_Display_Dir+0x214>)
 80018a4:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 80018a8:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 80018aa:	4b5e      	ldr	r3, [pc, #376]	; (8001a24 <LCD_Display_Dir+0x214>)
 80018ac:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 80018b0:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 80018b2:	4b5c      	ldr	r3, [pc, #368]	; (8001a24 <LCD_Display_Dir+0x214>)
 80018b4:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 80018b8:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;
 80018ba:	4b5a      	ldr	r3, [pc, #360]	; (8001a24 <LCD_Display_Dir+0x214>)
 80018bc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80018c0:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;
 80018c2:	4b58      	ldr	r3, [pc, #352]	; (8001a24 <LCD_Display_Dir+0x214>)
 80018c4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80018c8:	805a      	strh	r2, [r3, #2]
 80018ca:	e0a3      	b.n	8001a14 <LCD_Display_Dir+0x204>
		} else if (lcddev.id == 0X1963) {
 80018cc:	4b55      	ldr	r3, [pc, #340]	; (8001a24 <LCD_Display_Dir+0x214>)
 80018ce:	889b      	ldrh	r3, [r3, #4]
 80018d0:	f641 1263 	movw	r2, #6499	; 0x1963
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d111      	bne.n	80018fc <LCD_Display_Dir+0xec>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 80018d8:	4b52      	ldr	r3, [pc, #328]	; (8001a24 <LCD_Display_Dir+0x214>)
 80018da:	222c      	movs	r2, #44	; 0x2c
 80018dc:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;	//设置写X坐标指令
 80018de:	4b51      	ldr	r3, [pc, #324]	; (8001a24 <LCD_Display_Dir+0x214>)
 80018e0:	222b      	movs	r2, #43	; 0x2b
 80018e2:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;	//设置写Y坐标指令
 80018e4:	4b4f      	ldr	r3, [pc, #316]	; (8001a24 <LCD_Display_Dir+0x214>)
 80018e6:	222a      	movs	r2, #42	; 0x2a
 80018e8:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;		//设置宽度480
 80018ea:	4b4e      	ldr	r3, [pc, #312]	; (8001a24 <LCD_Display_Dir+0x214>)
 80018ec:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80018f0:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;		//设置高度800
 80018f2:	4b4c      	ldr	r3, [pc, #304]	; (8001a24 <LCD_Display_Dir+0x214>)
 80018f4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80018f8:	805a      	strh	r2, [r3, #2]
 80018fa:	e08b      	b.n	8001a14 <LCD_Display_Dir+0x204>
		} else {
			lcddev.wramcmd = 0X22;
 80018fc:	4b49      	ldr	r3, [pc, #292]	; (8001a24 <LCD_Display_Dir+0x214>)
 80018fe:	2222      	movs	r2, #34	; 0x22
 8001900:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X20;
 8001902:	4b48      	ldr	r3, [pc, #288]	; (8001a24 <LCD_Display_Dir+0x214>)
 8001904:	2220      	movs	r2, #32
 8001906:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X21;
 8001908:	4b46      	ldr	r3, [pc, #280]	; (8001a24 <LCD_Display_Dir+0x214>)
 800190a:	2221      	movs	r2, #33	; 0x21
 800190c:	819a      	strh	r2, [r3, #12]
 800190e:	e081      	b.n	8001a14 <LCD_Display_Dir+0x204>
		}
	} else 				//横屏
	{
		lcddev.dir = 1;	//横屏
 8001910:	4b44      	ldr	r3, [pc, #272]	; (8001a24 <LCD_Display_Dir+0x214>)
 8001912:	2201      	movs	r2, #1
 8001914:	719a      	strb	r2, [r3, #6]
		lcddev.width = 320;
 8001916:	4b43      	ldr	r3, [pc, #268]	; (8001a24 <LCD_Display_Dir+0x214>)
 8001918:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800191c:	801a      	strh	r2, [r3, #0]
		lcddev.height = 240;
 800191e:	4b41      	ldr	r3, [pc, #260]	; (8001a24 <LCD_Display_Dir+0x214>)
 8001920:	22f0      	movs	r2, #240	; 0xf0
 8001922:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8001924:	4b3f      	ldr	r3, [pc, #252]	; (8001a24 <LCD_Display_Dir+0x214>)
 8001926:	889b      	ldrh	r3, [r3, #4]
 8001928:	f249 3241 	movw	r2, #37697	; 0x9341
 800192c:	4293      	cmp	r3, r2
 800192e:	d005      	beq.n	800193c <LCD_Display_Dir+0x12c>
 8001930:	4b3c      	ldr	r3, [pc, #240]	; (8001a24 <LCD_Display_Dir+0x214>)
 8001932:	889b      	ldrh	r3, [r3, #4]
 8001934:	f245 3210 	movw	r2, #21264	; 0x5310
 8001938:	4293      	cmp	r3, r2
 800193a:	d109      	bne.n	8001950 <LCD_Display_Dir+0x140>
			lcddev.wramcmd = 0X2C;
 800193c:	4b39      	ldr	r3, [pc, #228]	; (8001a24 <LCD_Display_Dir+0x214>)
 800193e:	222c      	movs	r2, #44	; 0x2c
 8001940:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 8001942:	4b38      	ldr	r3, [pc, #224]	; (8001a24 <LCD_Display_Dir+0x214>)
 8001944:	222a      	movs	r2, #42	; 0x2a
 8001946:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 8001948:	4b36      	ldr	r3, [pc, #216]	; (8001a24 <LCD_Display_Dir+0x214>)
 800194a:	222b      	movs	r2, #43	; 0x2b
 800194c:	819a      	strh	r2, [r3, #12]
 800194e:	e04b      	b.n	80019e8 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X6804) {
 8001950:	4b34      	ldr	r3, [pc, #208]	; (8001a24 <LCD_Display_Dir+0x214>)
 8001952:	889b      	ldrh	r3, [r3, #4]
 8001954:	f646 0204 	movw	r2, #26628	; 0x6804
 8001958:	4293      	cmp	r3, r2
 800195a:	d109      	bne.n	8001970 <LCD_Display_Dir+0x160>
			lcddev.wramcmd = 0X2C;
 800195c:	4b31      	ldr	r3, [pc, #196]	; (8001a24 <LCD_Display_Dir+0x214>)
 800195e:	222c      	movs	r2, #44	; 0x2c
 8001960:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;
 8001962:	4b30      	ldr	r3, [pc, #192]	; (8001a24 <LCD_Display_Dir+0x214>)
 8001964:	222b      	movs	r2, #43	; 0x2b
 8001966:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;
 8001968:	4b2e      	ldr	r3, [pc, #184]	; (8001a24 <LCD_Display_Dir+0x214>)
 800196a:	222a      	movs	r2, #42	; 0x2a
 800196c:	819a      	strh	r2, [r3, #12]
 800196e:	e03b      	b.n	80019e8 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0x5510) {
 8001970:	4b2c      	ldr	r3, [pc, #176]	; (8001a24 <LCD_Display_Dir+0x214>)
 8001972:	889b      	ldrh	r3, [r3, #4]
 8001974:	f245 5210 	movw	r2, #21776	; 0x5510
 8001978:	4293      	cmp	r3, r2
 800197a:	d114      	bne.n	80019a6 <LCD_Display_Dir+0x196>
			lcddev.wramcmd = 0X2C00;
 800197c:	4b29      	ldr	r3, [pc, #164]	; (8001a24 <LCD_Display_Dir+0x214>)
 800197e:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8001982:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 8001984:	4b27      	ldr	r3, [pc, #156]	; (8001a24 <LCD_Display_Dir+0x214>)
 8001986:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 800198a:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 800198c:	4b25      	ldr	r3, [pc, #148]	; (8001a24 <LCD_Display_Dir+0x214>)
 800198e:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8001992:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;
 8001994:	4b23      	ldr	r3, [pc, #140]	; (8001a24 <LCD_Display_Dir+0x214>)
 8001996:	f44f 7248 	mov.w	r2, #800	; 0x320
 800199a:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;
 800199c:	4b21      	ldr	r3, [pc, #132]	; (8001a24 <LCD_Display_Dir+0x214>)
 800199e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80019a2:	805a      	strh	r2, [r3, #2]
 80019a4:	e020      	b.n	80019e8 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X1963) {
 80019a6:	4b1f      	ldr	r3, [pc, #124]	; (8001a24 <LCD_Display_Dir+0x214>)
 80019a8:	889b      	ldrh	r3, [r3, #4]
 80019aa:	f641 1263 	movw	r2, #6499	; 0x1963
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d111      	bne.n	80019d6 <LCD_Display_Dir+0x1c6>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 80019b2:	4b1c      	ldr	r3, [pc, #112]	; (8001a24 <LCD_Display_Dir+0x214>)
 80019b4:	222c      	movs	r2, #44	; 0x2c
 80019b6:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;	//设置写X坐标指令
 80019b8:	4b1a      	ldr	r3, [pc, #104]	; (8001a24 <LCD_Display_Dir+0x214>)
 80019ba:	222a      	movs	r2, #42	; 0x2a
 80019bc:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;	//设置写Y坐标指令
 80019be:	4b19      	ldr	r3, [pc, #100]	; (8001a24 <LCD_Display_Dir+0x214>)
 80019c0:	222b      	movs	r2, #43	; 0x2b
 80019c2:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;		//设置宽度800
 80019c4:	4b17      	ldr	r3, [pc, #92]	; (8001a24 <LCD_Display_Dir+0x214>)
 80019c6:	f44f 7248 	mov.w	r2, #800	; 0x320
 80019ca:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;		//设置高度480
 80019cc:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <LCD_Display_Dir+0x214>)
 80019ce:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80019d2:	805a      	strh	r2, [r3, #2]
 80019d4:	e008      	b.n	80019e8 <LCD_Display_Dir+0x1d8>
		} else {
			lcddev.wramcmd = 0X22;
 80019d6:	4b13      	ldr	r3, [pc, #76]	; (8001a24 <LCD_Display_Dir+0x214>)
 80019d8:	2222      	movs	r2, #34	; 0x22
 80019da:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X21;
 80019dc:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <LCD_Display_Dir+0x214>)
 80019de:	2221      	movs	r2, #33	; 0x21
 80019e0:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X20;
 80019e2:	4b10      	ldr	r3, [pc, #64]	; (8001a24 <LCD_Display_Dir+0x214>)
 80019e4:	2220      	movs	r2, #32
 80019e6:	819a      	strh	r2, [r3, #12]
		}
		if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 80019e8:	4b0e      	ldr	r3, [pc, #56]	; (8001a24 <LCD_Display_Dir+0x214>)
 80019ea:	889b      	ldrh	r3, [r3, #4]
 80019ec:	f646 0204 	movw	r2, #26628	; 0x6804
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d005      	beq.n	8001a00 <LCD_Display_Dir+0x1f0>
 80019f4:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <LCD_Display_Dir+0x214>)
 80019f6:	889b      	ldrh	r3, [r3, #4]
 80019f8:	f245 3210 	movw	r2, #21264	; 0x5310
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d109      	bne.n	8001a14 <LCD_Display_Dir+0x204>
			lcddev.width = 480;
 8001a00:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <LCD_Display_Dir+0x214>)
 8001a02:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001a06:	801a      	strh	r2, [r3, #0]
			lcddev.height = 320;
 8001a08:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <LCD_Display_Dir+0x214>)
 8001a0a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001a0e:	805a      	strh	r2, [r3, #2]
 8001a10:	e000      	b.n	8001a14 <LCD_Display_Dir+0x204>
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001a12:	bf00      	nop
		}
	}
	LCD_Scan_Dir(DFT_SCAN_DIR);	//默认扫描方向
 8001a14:	2000      	movs	r0, #0
 8001a16:	f7ff fb43 	bl	80010a0 <LCD_Scan_Dir>
}
 8001a1a:	bf00      	nop
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	20000080 	.word	0x20000080

08001a28 <LCD_Init>:
	}
}
//初始化lcd
//该初始化函数可以初始化各种ALIENTEK出品的LCD液晶屏
//本函数占用较大flash,用户可以根据自己的实际情况,删掉未用到的LCD初始化代码.以节省空间.
void LCD_Init(void) {
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_Initure;

	__HAL_RCC_GPIOB_CLK_ENABLE();           	//开启GPIOB时钟
 8001a2e:	4b90      	ldr	r3, [pc, #576]	; (8001c70 <LCD_Init+0x248>)
 8001a30:	699b      	ldr	r3, [r3, #24]
 8001a32:	4a8f      	ldr	r2, [pc, #572]	; (8001c70 <LCD_Init+0x248>)
 8001a34:	f043 0308 	orr.w	r3, r3, #8
 8001a38:	6193      	str	r3, [r2, #24]
 8001a3a:	4b8d      	ldr	r3, [pc, #564]	; (8001c70 <LCD_Init+0x248>)
 8001a3c:	699b      	ldr	r3, [r3, #24]
 8001a3e:	f003 0308 	and.w	r3, r3, #8
 8001a42:	607b      	str	r3, [r7, #4]
 8001a44:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();           	//开启GPIOC时钟
 8001a46:	4b8a      	ldr	r3, [pc, #552]	; (8001c70 <LCD_Init+0x248>)
 8001a48:	699b      	ldr	r3, [r3, #24]
 8001a4a:	4a89      	ldr	r2, [pc, #548]	; (8001c70 <LCD_Init+0x248>)
 8001a4c:	f043 0310 	orr.w	r3, r3, #16
 8001a50:	6193      	str	r3, [r2, #24]
 8001a52:	4b87      	ldr	r3, [pc, #540]	; (8001c70 <LCD_Init+0x248>)
 8001a54:	699b      	ldr	r3, [r3, #24]
 8001a56:	f003 0310 	and.w	r3, r3, #16
 8001a5a:	603b      	str	r3, [r7, #0]
 8001a5c:	683b      	ldr	r3, [r7, #0]

	//PC6,7,8,9,10
	GPIO_Initure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 |\
 8001a5e:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001a62:	60bb      	str	r3, [r7, #8]
 GPIO_PIN_9
			| GPIO_PIN_10;
	GPIO_Initure.Mode = GPIO_MODE_OUTPUT_PP;  	//推挽输出
 8001a64:	2301      	movs	r3, #1
 8001a66:	60fb      	str	r3, [r7, #12]
	GPIO_Initure.Pull = GPIO_PULLUP;          	//上拉
 8001a68:	2301      	movs	r3, #1
 8001a6a:	613b      	str	r3, [r7, #16]
	GPIO_Initure.Speed = GPIO_SPEED_FREQ_HIGH;    	 	//高速
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_Initure);
 8001a70:	f107 0308 	add.w	r3, r7, #8
 8001a74:	4619      	mov	r1, r3
 8001a76:	487f      	ldr	r0, [pc, #508]	; (8001c74 <LCD_Init+0x24c>)
 8001a78:	f004 fcc8 	bl	800640c <HAL_GPIO_Init>

	//PB0~15
	GPIO_Initure.Pin = GPIO_PIN_All;				//PB推挽输出
 8001a7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a80:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_Initure);
 8001a82:	f107 0308 	add.w	r3, r7, #8
 8001a86:	4619      	mov	r1, r3
 8001a88:	487b      	ldr	r0, [pc, #492]	; (8001c78 <LCD_Init+0x250>)
 8001a8a:	f004 fcbf 	bl	800640c <HAL_GPIO_Init>

//	__HAL_AFIO_REMAP_SWJ_DISABLE();				//禁止JTAG

	HAL_Delay(50); // delay 50 ms
 8001a8e:	2032      	movs	r0, #50	; 0x32
 8001a90:	f004 fa48 	bl	8005f24 <HAL_Delay>
	LCD_WriteReg(0x0000, 0x0001);
 8001a94:	2101      	movs	r1, #1
 8001a96:	2000      	movs	r0, #0
 8001a98:	f7fe fff0 	bl	8000a7c <LCD_WriteReg>
	HAL_Delay(50); // delay 50 ms
 8001a9c:	2032      	movs	r0, #50	; 0x32
 8001a9e:	f004 fa41 	bl	8005f24 <HAL_Delay>
	lcddev.id = LCD_ReadReg(0x0000);
 8001aa2:	2000      	movs	r0, #0
 8001aa4:	f7ff f814 	bl	8000ad0 <LCD_ReadReg>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	461a      	mov	r2, r3
 8001aac:	4b73      	ldr	r3, [pc, #460]	; (8001c7c <LCD_Init+0x254>)
 8001aae:	809a      	strh	r2, [r3, #4]
	if (lcddev.id < 0XFF || lcddev.id == 0XFFFF || lcddev.id == 0X9300) //读到ID不正确,新增lcddev.id==0X9300判断，因为9341在未被复位的情况下会被读成9300
 8001ab0:	4b72      	ldr	r3, [pc, #456]	; (8001c7c <LCD_Init+0x254>)
 8001ab2:	889b      	ldrh	r3, [r3, #4]
 8001ab4:	2bfe      	cmp	r3, #254	; 0xfe
 8001ab6:	d90b      	bls.n	8001ad0 <LCD_Init+0xa8>
 8001ab8:	4b70      	ldr	r3, [pc, #448]	; (8001c7c <LCD_Init+0x254>)
 8001aba:	889b      	ldrh	r3, [r3, #4]
 8001abc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d005      	beq.n	8001ad0 <LCD_Init+0xa8>
 8001ac4:	4b6d      	ldr	r3, [pc, #436]	; (8001c7c <LCD_Init+0x254>)
 8001ac6:	889b      	ldrh	r3, [r3, #4]
 8001ac8:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 8001acc:	f040 80c8 	bne.w	8001c60 <LCD_Init+0x238>
			{
		//尝试9341 ID的读取
		LCD_WR_REG(0XD3);
 8001ad0:	20d3      	movs	r0, #211	; 0xd3
 8001ad2:	f7fe ff47 	bl	8000964 <LCD_WR_REG>
		LCD_RD_DATA(); 				//dummy read 	
 8001ad6:	f7fe ff8d 	bl	80009f4 <LCD_RD_DATA>
		LCD_RD_DATA();   	    	//读到0X00
 8001ada:	f7fe ff8b 	bl	80009f4 <LCD_RD_DATA>
		lcddev.id = LCD_RD_DATA();   	//读取93
 8001ade:	f7fe ff89 	bl	80009f4 <LCD_RD_DATA>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	4b65      	ldr	r3, [pc, #404]	; (8001c7c <LCD_Init+0x254>)
 8001ae8:	809a      	strh	r2, [r3, #4]
		lcddev.id <<= 8;
 8001aea:	4b64      	ldr	r3, [pc, #400]	; (8001c7c <LCD_Init+0x254>)
 8001aec:	889b      	ldrh	r3, [r3, #4]
 8001aee:	021b      	lsls	r3, r3, #8
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	4b62      	ldr	r3, [pc, #392]	; (8001c7c <LCD_Init+0x254>)
 8001af4:	809a      	strh	r2, [r3, #4]
		lcddev.id |= LCD_RD_DATA();  	//读取41
 8001af6:	f7fe ff7d 	bl	80009f4 <LCD_RD_DATA>
 8001afa:	4603      	mov	r3, r0
 8001afc:	461a      	mov	r2, r3
 8001afe:	4b5f      	ldr	r3, [pc, #380]	; (8001c7c <LCD_Init+0x254>)
 8001b00:	889b      	ldrh	r3, [r3, #4]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	b29a      	uxth	r2, r3
 8001b06:	4b5d      	ldr	r3, [pc, #372]	; (8001c7c <LCD_Init+0x254>)
 8001b08:	809a      	strh	r2, [r3, #4]
		if (lcddev.id != 0X9341)		//非9341,尝试是不是6804
 8001b0a:	4b5c      	ldr	r3, [pc, #368]	; (8001c7c <LCD_Init+0x254>)
 8001b0c:	889b      	ldrh	r3, [r3, #4]
 8001b0e:	f249 3241 	movw	r2, #37697	; 0x9341
 8001b12:	4293      	cmp	r3, r2
 8001b14:	f000 80a4 	beq.w	8001c60 <LCD_Init+0x238>
				{
			LCD_WR_REG(0XBF);
 8001b18:	20bf      	movs	r0, #191	; 0xbf
 8001b1a:	f7fe ff23 	bl	8000964 <LCD_WR_REG>
			LCD_RD_DATA(); 			//dummy read 	 
 8001b1e:	f7fe ff69 	bl	80009f4 <LCD_RD_DATA>
			LCD_RD_DATA();   	    //读回0X01
 8001b22:	f7fe ff67 	bl	80009f4 <LCD_RD_DATA>
			LCD_RD_DATA(); 			//读回0XD0
 8001b26:	f7fe ff65 	bl	80009f4 <LCD_RD_DATA>
			lcddev.id = LCD_RD_DATA(); 			//这里读回0X68
 8001b2a:	f7fe ff63 	bl	80009f4 <LCD_RD_DATA>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	461a      	mov	r2, r3
 8001b32:	4b52      	ldr	r3, [pc, #328]	; (8001c7c <LCD_Init+0x254>)
 8001b34:	809a      	strh	r2, [r3, #4]
			lcddev.id <<= 8;
 8001b36:	4b51      	ldr	r3, [pc, #324]	; (8001c7c <LCD_Init+0x254>)
 8001b38:	889b      	ldrh	r3, [r3, #4]
 8001b3a:	021b      	lsls	r3, r3, #8
 8001b3c:	b29a      	uxth	r2, r3
 8001b3e:	4b4f      	ldr	r3, [pc, #316]	; (8001c7c <LCD_Init+0x254>)
 8001b40:	809a      	strh	r2, [r3, #4]
			lcddev.id |= LCD_RD_DATA(); 			//这里读回0X04
 8001b42:	f7fe ff57 	bl	80009f4 <LCD_RD_DATA>
 8001b46:	4603      	mov	r3, r0
 8001b48:	461a      	mov	r2, r3
 8001b4a:	4b4c      	ldr	r3, [pc, #304]	; (8001c7c <LCD_Init+0x254>)
 8001b4c:	889b      	ldrh	r3, [r3, #4]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	b29a      	uxth	r2, r3
 8001b52:	4b4a      	ldr	r3, [pc, #296]	; (8001c7c <LCD_Init+0x254>)
 8001b54:	809a      	strh	r2, [r3, #4]
			if (lcddev.id != 0X6804)	//也不是6804,尝试看看是不是NT35310
 8001b56:	4b49      	ldr	r3, [pc, #292]	; (8001c7c <LCD_Init+0x254>)
 8001b58:	889b      	ldrh	r3, [r3, #4]
 8001b5a:	f646 0204 	movw	r2, #26628	; 0x6804
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d07e      	beq.n	8001c60 <LCD_Init+0x238>
					{
				LCD_WR_REG(0XD4);
 8001b62:	20d4      	movs	r0, #212	; 0xd4
 8001b64:	f7fe fefe 	bl	8000964 <LCD_WR_REG>
				LCD_RD_DATA(); 				//dummy read  
 8001b68:	f7fe ff44 	bl	80009f4 <LCD_RD_DATA>
				LCD_RD_DATA();   			//读回0X01	 
 8001b6c:	f7fe ff42 	bl	80009f4 <LCD_RD_DATA>
				lcddev.id = LCD_RD_DATA();	//读回0X53
 8001b70:	f7fe ff40 	bl	80009f4 <LCD_RD_DATA>
 8001b74:	4603      	mov	r3, r0
 8001b76:	461a      	mov	r2, r3
 8001b78:	4b40      	ldr	r3, [pc, #256]	; (8001c7c <LCD_Init+0x254>)
 8001b7a:	809a      	strh	r2, [r3, #4]
				lcddev.id <<= 8;
 8001b7c:	4b3f      	ldr	r3, [pc, #252]	; (8001c7c <LCD_Init+0x254>)
 8001b7e:	889b      	ldrh	r3, [r3, #4]
 8001b80:	021b      	lsls	r3, r3, #8
 8001b82:	b29a      	uxth	r2, r3
 8001b84:	4b3d      	ldr	r3, [pc, #244]	; (8001c7c <LCD_Init+0x254>)
 8001b86:	809a      	strh	r2, [r3, #4]
				lcddev.id |= LCD_RD_DATA();	//这里读回0X10
 8001b88:	f7fe ff34 	bl	80009f4 <LCD_RD_DATA>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	461a      	mov	r2, r3
 8001b90:	4b3a      	ldr	r3, [pc, #232]	; (8001c7c <LCD_Init+0x254>)
 8001b92:	889b      	ldrh	r3, [r3, #4]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	b29a      	uxth	r2, r3
 8001b98:	4b38      	ldr	r3, [pc, #224]	; (8001c7c <LCD_Init+0x254>)
 8001b9a:	809a      	strh	r2, [r3, #4]
				if (lcddev.id != 0X5310)		//也不是NT35310,尝试看看是不是NT35510
 8001b9c:	4b37      	ldr	r3, [pc, #220]	; (8001c7c <LCD_Init+0x254>)
 8001b9e:	889b      	ldrh	r3, [r3, #4]
 8001ba0:	f245 3210 	movw	r2, #21264	; 0x5310
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d05b      	beq.n	8001c60 <LCD_Init+0x238>
						{
					LCD_WR_REG(0XDA00);
 8001ba8:	f44f 405a 	mov.w	r0, #55808	; 0xda00
 8001bac:	f7fe feda 	bl	8000964 <LCD_WR_REG>
					LCD_RD_DATA();   		//读回0X00	 
 8001bb0:	f7fe ff20 	bl	80009f4 <LCD_RD_DATA>
					LCD_WR_REG(0XDB00);
 8001bb4:	f44f 405b 	mov.w	r0, #56064	; 0xdb00
 8001bb8:	f7fe fed4 	bl	8000964 <LCD_WR_REG>
					lcddev.id = LCD_RD_DATA();   		//读回0X80
 8001bbc:	f7fe ff1a 	bl	80009f4 <LCD_RD_DATA>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	4b2d      	ldr	r3, [pc, #180]	; (8001c7c <LCD_Init+0x254>)
 8001bc6:	809a      	strh	r2, [r3, #4]
					lcddev.id <<= 8;
 8001bc8:	4b2c      	ldr	r3, [pc, #176]	; (8001c7c <LCD_Init+0x254>)
 8001bca:	889b      	ldrh	r3, [r3, #4]
 8001bcc:	021b      	lsls	r3, r3, #8
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	4b2a      	ldr	r3, [pc, #168]	; (8001c7c <LCD_Init+0x254>)
 8001bd2:	809a      	strh	r2, [r3, #4]
					LCD_WR_REG(0XDC00);
 8001bd4:	f44f 405c 	mov.w	r0, #56320	; 0xdc00
 8001bd8:	f7fe fec4 	bl	8000964 <LCD_WR_REG>
					lcddev.id |= LCD_RD_DATA();   		//读回0X00
 8001bdc:	f7fe ff0a 	bl	80009f4 <LCD_RD_DATA>
 8001be0:	4603      	mov	r3, r0
 8001be2:	461a      	mov	r2, r3
 8001be4:	4b25      	ldr	r3, [pc, #148]	; (8001c7c <LCD_Init+0x254>)
 8001be6:	889b      	ldrh	r3, [r3, #4]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	4b23      	ldr	r3, [pc, #140]	; (8001c7c <LCD_Init+0x254>)
 8001bee:	809a      	strh	r2, [r3, #4]
					if (lcddev.id == 0x8000)
 8001bf0:	4b22      	ldr	r3, [pc, #136]	; (8001c7c <LCD_Init+0x254>)
 8001bf2:	889b      	ldrh	r3, [r3, #4]
 8001bf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bf8:	d103      	bne.n	8001c02 <LCD_Init+0x1da>
						lcddev.id = 0x5510;   		//NT35510读回的ID是8000H,为方便区分,我们强制设置为5510
 8001bfa:	4b20      	ldr	r3, [pc, #128]	; (8001c7c <LCD_Init+0x254>)
 8001bfc:	f245 5210 	movw	r2, #21776	; 0x5510
 8001c00:	809a      	strh	r2, [r3, #4]
					if (lcddev.id != 0X5510)			//也不是NT5510,尝试看看是不是SSD1963
 8001c02:	4b1e      	ldr	r3, [pc, #120]	; (8001c7c <LCD_Init+0x254>)
 8001c04:	889b      	ldrh	r3, [r3, #4]
 8001c06:	f245 5210 	movw	r2, #21776	; 0x5510
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d028      	beq.n	8001c60 <LCD_Init+0x238>
							{
						LCD_WR_REG(0XA1);
 8001c0e:	20a1      	movs	r0, #161	; 0xa1
 8001c10:	f7fe fea8 	bl	8000964 <LCD_WR_REG>
						lcddev.id = LCD_RD_DATA();
 8001c14:	f7fe feee 	bl	80009f4 <LCD_RD_DATA>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	4b17      	ldr	r3, [pc, #92]	; (8001c7c <LCD_Init+0x254>)
 8001c1e:	809a      	strh	r2, [r3, #4]
						lcddev.id = LCD_RD_DATA();	//读回0X57
 8001c20:	f7fe fee8 	bl	80009f4 <LCD_RD_DATA>
 8001c24:	4603      	mov	r3, r0
 8001c26:	461a      	mov	r2, r3
 8001c28:	4b14      	ldr	r3, [pc, #80]	; (8001c7c <LCD_Init+0x254>)
 8001c2a:	809a      	strh	r2, [r3, #4]
						lcddev.id <<= 8;
 8001c2c:	4b13      	ldr	r3, [pc, #76]	; (8001c7c <LCD_Init+0x254>)
 8001c2e:	889b      	ldrh	r3, [r3, #4]
 8001c30:	021b      	lsls	r3, r3, #8
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	4b11      	ldr	r3, [pc, #68]	; (8001c7c <LCD_Init+0x254>)
 8001c36:	809a      	strh	r2, [r3, #4]
						lcddev.id |= LCD_RD_DATA();	//读回0X61
 8001c38:	f7fe fedc 	bl	80009f4 <LCD_RD_DATA>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	461a      	mov	r2, r3
 8001c40:	4b0e      	ldr	r3, [pc, #56]	; (8001c7c <LCD_Init+0x254>)
 8001c42:	889b      	ldrh	r3, [r3, #4]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	b29a      	uxth	r2, r3
 8001c48:	4b0c      	ldr	r3, [pc, #48]	; (8001c7c <LCD_Init+0x254>)
 8001c4a:	809a      	strh	r2, [r3, #4]
						if (lcddev.id == 0X5761)
 8001c4c:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <LCD_Init+0x254>)
 8001c4e:	889b      	ldrh	r3, [r3, #4]
 8001c50:	f245 7261 	movw	r2, #22369	; 0x5761
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d103      	bne.n	8001c60 <LCD_Init+0x238>
							lcddev.id = 0X1963;	//SSD1963读回的ID是5761H,为方便区分,我们强制设置为1963
 8001c58:	4b08      	ldr	r3, [pc, #32]	; (8001c7c <LCD_Init+0x254>)
 8001c5a:	f641 1263 	movw	r2, #6499	; 0x1963
 8001c5e:	809a      	strh	r2, [r3, #4]
				}
			}
		}
	}
// 	printf(" LCD ID:%x\r\n",lcddev.id); //打印LCD ID
	if (lcddev.id == 0X9341)	//9341初始化
 8001c60:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <LCD_Init+0x254>)
 8001c62:	889b      	ldrh	r3, [r3, #4]
 8001c64:	f249 3241 	movw	r2, #37697	; 0x9341
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	f040 811f 	bne.w	8001eac <LCD_Init+0x484>
 8001c6e:	e007      	b.n	8001c80 <LCD_Init+0x258>
 8001c70:	40021000 	.word	0x40021000
 8001c74:	40011000 	.word	0x40011000
 8001c78:	40010c00 	.word	0x40010c00
 8001c7c:	20000080 	.word	0x20000080
			{
		LCD_WR_REG(0xCF);
 8001c80:	20cf      	movs	r0, #207	; 0xcf
 8001c82:	f7fe fe6f 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8001c86:	2000      	movs	r0, #0
 8001c88:	f7fe fe90 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC1);
 8001c8c:	20c1      	movs	r0, #193	; 0xc1
 8001c8e:	f7fe fe8d 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0X30);
 8001c92:	2030      	movs	r0, #48	; 0x30
 8001c94:	f7fe fe8a 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_REG(0xED);
 8001c98:	20ed      	movs	r0, #237	; 0xed
 8001c9a:	f7fe fe63 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0x64);
 8001c9e:	2064      	movs	r0, #100	; 0x64
 8001ca0:	f7fe fe84 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 8001ca4:	2003      	movs	r0, #3
 8001ca6:	f7fe fe81 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0X12);
 8001caa:	2012      	movs	r0, #18
 8001cac:	f7fe fe7e 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0X81);
 8001cb0:	2081      	movs	r0, #129	; 0x81
 8001cb2:	f7fe fe7b 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_REG(0xE8);
 8001cb6:	20e8      	movs	r0, #232	; 0xe8
 8001cb8:	f7fe fe54 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0x85);
 8001cbc:	2085      	movs	r0, #133	; 0x85
 8001cbe:	f7fe fe75 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8001cc2:	2010      	movs	r0, #16
 8001cc4:	f7fe fe72 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8001cc8:	207a      	movs	r0, #122	; 0x7a
 8001cca:	f7fe fe6f 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_REG(0xCB);
 8001cce:	20cb      	movs	r0, #203	; 0xcb
 8001cd0:	f7fe fe48 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0x39);
 8001cd4:	2039      	movs	r0, #57	; 0x39
 8001cd6:	f7fe fe69 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8001cda:	202c      	movs	r0, #44	; 0x2c
 8001cdc:	f7fe fe66 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8001ce0:	2000      	movs	r0, #0
 8001ce2:	f7fe fe63 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8001ce6:	2034      	movs	r0, #52	; 0x34
 8001ce8:	f7fe fe60 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8001cec:	2002      	movs	r0, #2
 8001cee:	f7fe fe5d 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_REG(0xF7);
 8001cf2:	20f7      	movs	r0, #247	; 0xf7
 8001cf4:	f7fe fe36 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8001cf8:	2020      	movs	r0, #32
 8001cfa:	f7fe fe57 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_REG(0xEA);
 8001cfe:	20ea      	movs	r0, #234	; 0xea
 8001d00:	f7fe fe30 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8001d04:	2000      	movs	r0, #0
 8001d06:	f7fe fe51 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8001d0a:	2000      	movs	r0, #0
 8001d0c:	f7fe fe4e 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_REG(0xC0);    //Power control 
 8001d10:	20c0      	movs	r0, #192	; 0xc0
 8001d12:	f7fe fe27 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0x1B);   //VRH[5:0] 
 8001d16:	201b      	movs	r0, #27
 8001d18:	f7fe fe48 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_REG(0xC1);    //Power control 
 8001d1c:	20c1      	movs	r0, #193	; 0xc1
 8001d1e:	f7fe fe21 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);   //SAP[2:0];BT[3:0] 
 8001d22:	2001      	movs	r0, #1
 8001d24:	f7fe fe42 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_REG(0xC5);    //VCM control 
 8001d28:	20c5      	movs	r0, #197	; 0xc5
 8001d2a:	f7fe fe1b 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0x30); 	 //3F
 8001d2e:	2030      	movs	r0, #48	; 0x30
 8001d30:	f7fe fe3c 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x30); 	 //3C
 8001d34:	2030      	movs	r0, #48	; 0x30
 8001d36:	f7fe fe39 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_REG(0xC7);    //VCM control2 
 8001d3a:	20c7      	movs	r0, #199	; 0xc7
 8001d3c:	f7fe fe12 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0XB7);
 8001d40:	20b7      	movs	r0, #183	; 0xb7
 8001d42:	f7fe fe33 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_REG(0x36);    // Memory Access Control 
 8001d46:	2036      	movs	r0, #54	; 0x36
 8001d48:	f7fe fe0c 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0x48);
 8001d4c:	2048      	movs	r0, #72	; 0x48
 8001d4e:	f7fe fe2d 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_REG(0x3A);
 8001d52:	203a      	movs	r0, #58	; 0x3a
 8001d54:	f7fe fe06 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0x55);
 8001d58:	2055      	movs	r0, #85	; 0x55
 8001d5a:	f7fe fe27 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_REG(0xB1);
 8001d5e:	20b1      	movs	r0, #177	; 0xb1
 8001d60:	f7fe fe00 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8001d64:	2000      	movs	r0, #0
 8001d66:	f7fe fe21 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1A);
 8001d6a:	201a      	movs	r0, #26
 8001d6c:	f7fe fe1e 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_REG(0xB6);    // Display Function Control 
 8001d70:	20b6      	movs	r0, #182	; 0xb6
 8001d72:	f7fe fdf7 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 8001d76:	200a      	movs	r0, #10
 8001d78:	f7fe fe18 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8001d7c:	20a2      	movs	r0, #162	; 0xa2
 8001d7e:	f7fe fe15 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_REG(0xF2);    // 3Gamma Function Disable 
 8001d82:	20f2      	movs	r0, #242	; 0xf2
 8001d84:	f7fe fdee 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8001d88:	2000      	movs	r0, #0
 8001d8a:	f7fe fe0f 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_REG(0x26);    //Gamma curve selected 
 8001d8e:	2026      	movs	r0, #38	; 0x26
 8001d90:	f7fe fde8 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8001d94:	2001      	movs	r0, #1
 8001d96:	f7fe fe09 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_REG(0xE0);    //Set Gamma 
 8001d9a:	20e0      	movs	r0, #224	; 0xe0
 8001d9c:	f7fe fde2 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0x0F);
 8001da0:	200f      	movs	r0, #15
 8001da2:	f7fe fe03 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 8001da6:	202a      	movs	r0, #42	; 0x2a
 8001da8:	f7fe fe00 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x28);
 8001dac:	2028      	movs	r0, #40	; 0x28
 8001dae:	f7fe fdfd 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 8001db2:	2008      	movs	r0, #8
 8001db4:	f7fe fdfa 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0E);
 8001db8:	200e      	movs	r0, #14
 8001dba:	f7fe fdf7 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 8001dbe:	2008      	movs	r0, #8
 8001dc0:	f7fe fdf4 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 8001dc4:	2054      	movs	r0, #84	; 0x54
 8001dc6:	f7fe fdf1 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0XA9);
 8001dca:	20a9      	movs	r0, #169	; 0xa9
 8001dcc:	f7fe fdee 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 8001dd0:	2043      	movs	r0, #67	; 0x43
 8001dd2:	f7fe fdeb 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0A);
 8001dd6:	200a      	movs	r0, #10
 8001dd8:	f7fe fde8 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 8001ddc:	200f      	movs	r0, #15
 8001dde:	f7fe fde5 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8001de2:	2000      	movs	r0, #0
 8001de4:	f7fe fde2 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8001de8:	2000      	movs	r0, #0
 8001dea:	f7fe fddf 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8001dee:	2000      	movs	r0, #0
 8001df0:	f7fe fddc 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8001df4:	2000      	movs	r0, #0
 8001df6:	f7fe fdd9 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_REG(0XE1);    //Set Gamma 
 8001dfa:	20e1      	movs	r0, #225	; 0xe1
 8001dfc:	f7fe fdb2 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8001e00:	2000      	movs	r0, #0
 8001e02:	f7fe fdd3 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x15);
 8001e06:	2015      	movs	r0, #21
 8001e08:	f7fe fdd0 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8001e0c:	2017      	movs	r0, #23
 8001e0e:	f7fe fdcd 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x07);
 8001e12:	2007      	movs	r0, #7
 8001e14:	f7fe fdca 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 8001e18:	2011      	movs	r0, #17
 8001e1a:	f7fe fdc7 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x06);
 8001e1e:	2006      	movs	r0, #6
 8001e20:	f7fe fdc4 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2B);
 8001e24:	202b      	movs	r0, #43	; 0x2b
 8001e26:	f7fe fdc1 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8001e2a:	2056      	movs	r0, #86	; 0x56
 8001e2c:	f7fe fdbe 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8001e30:	203c      	movs	r0, #60	; 0x3c
 8001e32:	f7fe fdbb 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 8001e36:	2005      	movs	r0, #5
 8001e38:	f7fe fdb8 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8001e3c:	2010      	movs	r0, #16
 8001e3e:	f7fe fdb5 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 8001e42:	200f      	movs	r0, #15
 8001e44:	f7fe fdb2 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 8001e48:	203f      	movs	r0, #63	; 0x3f
 8001e4a:	f7fe fdaf 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 8001e4e:	203f      	movs	r0, #63	; 0x3f
 8001e50:	f7fe fdac 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 8001e54:	200f      	movs	r0, #15
 8001e56:	f7fe fda9 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_REG(0x2B);
 8001e5a:	202b      	movs	r0, #43	; 0x2b
 8001e5c:	f7fe fd82 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8001e60:	2000      	movs	r0, #0
 8001e62:	f7fe fda3 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8001e66:	2000      	movs	r0, #0
 8001e68:	f7fe fda0 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8001e6c:	2001      	movs	r0, #1
 8001e6e:	f7fe fd9d 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3f);
 8001e72:	203f      	movs	r0, #63	; 0x3f
 8001e74:	f7fe fd9a 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_REG(0x2A);
 8001e78:	202a      	movs	r0, #42	; 0x2a
 8001e7a:	f7fe fd73 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8001e7e:	2000      	movs	r0, #0
 8001e80:	f7fe fd94 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8001e84:	2000      	movs	r0, #0
 8001e86:	f7fe fd91 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8001e8a:	2000      	movs	r0, #0
 8001e8c:	f7fe fd8e 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0xef);
 8001e90:	20ef      	movs	r0, #239	; 0xef
 8001e92:	f7fe fd8b 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_REG(0x11); //Exit Sleep
 8001e96:	2011      	movs	r0, #17
 8001e98:	f7fe fd64 	bl	8000964 <LCD_WR_REG>
		HAL_Delay(120);
 8001e9c:	2078      	movs	r0, #120	; 0x78
 8001e9e:	f004 f841 	bl	8005f24 <HAL_Delay>
		LCD_WR_REG(0x29); //display on	
 8001ea2:	2029      	movs	r0, #41	; 0x29
 8001ea4:	f7fe fd5e 	bl	8000964 <LCD_WR_REG>
 8001ea8:	f003 bcd8 	b.w	800585c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x6804) //6804初始化
 8001eac:	4b58      	ldr	r3, [pc, #352]	; (8002010 <LCD_Init+0x5e8>)
 8001eae:	889b      	ldrh	r3, [r3, #4]
 8001eb0:	f646 0204 	movw	r2, #26628	; 0x6804
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	f040 80ad 	bne.w	8002014 <LCD_Init+0x5ec>
			{
		LCD_WR_REG(0X11);
 8001eba:	2011      	movs	r0, #17
 8001ebc:	f7fe fd52 	bl	8000964 <LCD_WR_REG>
		HAL_Delay(20);
 8001ec0:	2014      	movs	r0, #20
 8001ec2:	f004 f82f 	bl	8005f24 <HAL_Delay>
		LCD_WR_REG(0XD0); //VCI1  VCL  VGH  VGL DDVDH VREG1OUT power amplitude setting
 8001ec6:	20d0      	movs	r0, #208	; 0xd0
 8001ec8:	f7fe fd4c 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0X07);
 8001ecc:	2007      	movs	r0, #7
 8001ece:	f7fe fd6d 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0X42);
 8001ed2:	2042      	movs	r0, #66	; 0x42
 8001ed4:	f7fe fd6a 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1D);
 8001ed8:	201d      	movs	r0, #29
 8001eda:	f7fe fd67 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_REG(0XD1); //VCOMH VCOM_AC amplitude setting
 8001ede:	20d1      	movs	r0, #209	; 0xd1
 8001ee0:	f7fe fd40 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8001ee4:	2000      	movs	r0, #0
 8001ee6:	f7fe fd61 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1a);
 8001eea:	201a      	movs	r0, #26
 8001eec:	f7fe fd5e 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0X09);
 8001ef0:	2009      	movs	r0, #9
 8001ef2:	f7fe fd5b 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_REG(0XD2); //Operational Amplifier Circuit Constant Current Adjust , charge pump frequency setting
 8001ef6:	20d2      	movs	r0, #210	; 0xd2
 8001ef8:	f7fe fd34 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 8001efc:	2001      	movs	r0, #1
 8001efe:	f7fe fd55 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0X22);
 8001f02:	2022      	movs	r0, #34	; 0x22
 8001f04:	f7fe fd52 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_REG(0XC0); //REV SM GS
 8001f08:	20c0      	movs	r0, #192	; 0xc0
 8001f0a:	f7fe fd2b 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0X10);
 8001f0e:	2010      	movs	r0, #16
 8001f10:	f7fe fd4c 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3B);
 8001f14:	203b      	movs	r0, #59	; 0x3b
 8001f16:	f7fe fd49 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8001f1a:	2000      	movs	r0, #0
 8001f1c:	f7fe fd46 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 8001f20:	2002      	movs	r0, #2
 8001f22:	f7fe fd43 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0X11);
 8001f26:	2011      	movs	r0, #17
 8001f28:	f7fe fd40 	bl	80009ac <LCD_WR_DATAX>

		LCD_WR_REG(0XC5); // Frame rate setting = 72HZ  when setting 0x03
 8001f2c:	20c5      	movs	r0, #197	; 0xc5
 8001f2e:	f7fe fd19 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0X03);
 8001f32:	2003      	movs	r0, #3
 8001f34:	f7fe fd3a 	bl	80009ac <LCD_WR_DATAX>

		LCD_WR_REG(0XC8); //Gamma setting
 8001f38:	20c8      	movs	r0, #200	; 0xc8
 8001f3a:	f7fe fd13 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8001f3e:	2000      	movs	r0, #0
 8001f40:	f7fe fd34 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 8001f44:	2025      	movs	r0, #37	; 0x25
 8001f46:	f7fe fd31 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0X21);
 8001f4a:	2021      	movs	r0, #33	; 0x21
 8001f4c:	f7fe fd2e 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0X05);
 8001f50:	2005      	movs	r0, #5
 8001f52:	f7fe fd2b 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8001f56:	2000      	movs	r0, #0
 8001f58:	f7fe fd28 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0a);
 8001f5c:	200a      	movs	r0, #10
 8001f5e:	f7fe fd25 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0X65);
 8001f62:	2065      	movs	r0, #101	; 0x65
 8001f64:	f7fe fd22 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 8001f68:	2025      	movs	r0, #37	; 0x25
 8001f6a:	f7fe fd1f 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0X77);
 8001f6e:	2077      	movs	r0, #119	; 0x77
 8001f70:	f7fe fd1c 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0X50);
 8001f74:	2050      	movs	r0, #80	; 0x50
 8001f76:	f7fe fd19 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0f);
 8001f7a:	200f      	movs	r0, #15
 8001f7c:	f7fe fd16 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8001f80:	2000      	movs	r0, #0
 8001f82:	f7fe fd13 	bl	80009ac <LCD_WR_DATAX>

		LCD_WR_REG(0XF8);
 8001f86:	20f8      	movs	r0, #248	; 0xf8
 8001f88:	f7fe fcec 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 8001f8c:	2001      	movs	r0, #1
 8001f8e:	f7fe fd0d 	bl	80009ac <LCD_WR_DATAX>

		LCD_WR_REG(0XFE);
 8001f92:	20fe      	movs	r0, #254	; 0xfe
 8001f94:	f7fe fce6 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8001f98:	2000      	movs	r0, #0
 8001f9a:	f7fe fd07 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 8001f9e:	2002      	movs	r0, #2
 8001fa0:	f7fe fd04 	bl	80009ac <LCD_WR_DATAX>

		LCD_WR_REG(0X20); //Exit invert mode
 8001fa4:	2020      	movs	r0, #32
 8001fa6:	f7fe fcdd 	bl	8000964 <LCD_WR_REG>

		LCD_WR_REG(0X36);
 8001faa:	2036      	movs	r0, #54	; 0x36
 8001fac:	f7fe fcda 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0X08); //原来是a
 8001fb0:	2008      	movs	r0, #8
 8001fb2:	f7fe fcfb 	bl	80009ac <LCD_WR_DATAX>

		LCD_WR_REG(0X3A);
 8001fb6:	203a      	movs	r0, #58	; 0x3a
 8001fb8:	f7fe fcd4 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0X55); //16位模式
 8001fbc:	2055      	movs	r0, #85	; 0x55
 8001fbe:	f7fe fcf5 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_REG(0X2B);
 8001fc2:	202b      	movs	r0, #43	; 0x2b
 8001fc4:	f7fe fcce 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8001fc8:	2000      	movs	r0, #0
 8001fca:	f7fe fcef 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8001fce:	2000      	movs	r0, #0
 8001fd0:	f7fe fcec 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 8001fd4:	2001      	movs	r0, #1
 8001fd6:	f7fe fce9 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3F);
 8001fda:	203f      	movs	r0, #63	; 0x3f
 8001fdc:	f7fe fce6 	bl	80009ac <LCD_WR_DATAX>

		LCD_WR_REG(0X2A);
 8001fe0:	202a      	movs	r0, #42	; 0x2a
 8001fe2:	f7fe fcbf 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	f7fe fce0 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8001fec:	2000      	movs	r0, #0
 8001fee:	f7fe fcdd 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 8001ff2:	2001      	movs	r0, #1
 8001ff4:	f7fe fcda 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0XDF);
 8001ff8:	20df      	movs	r0, #223	; 0xdf
 8001ffa:	f7fe fcd7 	bl	80009ac <LCD_WR_DATAX>
		HAL_Delay(120);
 8001ffe:	2078      	movs	r0, #120	; 0x78
 8002000:	f003 ff90 	bl	8005f24 <HAL_Delay>
		LCD_WR_REG(0X29);
 8002004:	2029      	movs	r0, #41	; 0x29
 8002006:	f7fe fcad 	bl	8000964 <LCD_WR_REG>
 800200a:	f003 bc27 	b.w	800585c <LCD_Init+0x3e34>
 800200e:	bf00      	nop
 8002010:	20000080 	.word	0x20000080
	} else if (lcddev.id == 0x5310) {
 8002014:	4b03      	ldr	r3, [pc, #12]	; (8002024 <LCD_Init+0x5fc>)
 8002016:	889b      	ldrh	r3, [r3, #4]
 8002018:	f245 3210 	movw	r2, #21264	; 0x5310
 800201c:	4293      	cmp	r3, r2
 800201e:	f040 877c 	bne.w	8002f1a <LCD_Init+0x14f2>
 8002022:	e001      	b.n	8002028 <LCD_Init+0x600>
 8002024:	20000080 	.word	0x20000080
		LCD_WR_REG(0xED);
 8002028:	20ed      	movs	r0, #237	; 0xed
 800202a:	f7fe fc9b 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 800202e:	2001      	movs	r0, #1
 8002030:	f7fe fcbc 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFE);
 8002034:	20fe      	movs	r0, #254	; 0xfe
 8002036:	f7fe fcb9 	bl	80009ac <LCD_WR_DATAX>

		LCD_WR_REG(0xEE);
 800203a:	20ee      	movs	r0, #238	; 0xee
 800203c:	f7fe fc92 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0xDE);
 8002040:	20de      	movs	r0, #222	; 0xde
 8002042:	f7fe fcb3 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8002046:	2021      	movs	r0, #33	; 0x21
 8002048:	f7fe fcb0 	bl	80009ac <LCD_WR_DATAX>

		LCD_WR_REG(0xF1);
 800204c:	20f1      	movs	r0, #241	; 0xf1
 800204e:	f7fe fc89 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8002052:	2001      	movs	r0, #1
 8002054:	f7fe fcaa 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_REG(0xDF);
 8002058:	20df      	movs	r0, #223	; 0xdf
 800205a:	f7fe fc83 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0x10);
 800205e:	2010      	movs	r0, #16
 8002060:	f7fe fca4 	bl	80009ac <LCD_WR_DATAX>

		//VCOMvoltage//
		LCD_WR_REG(0xC4);
 8002064:	20c4      	movs	r0, #196	; 0xc4
 8002066:	f7fe fc7d 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0x8F);	  //5f
 800206a:	208f      	movs	r0, #143	; 0x8f
 800206c:	f7fe fc9e 	bl	80009ac <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 8002070:	20c6      	movs	r0, #198	; 0xc6
 8002072:	f7fe fc77 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002076:	2000      	movs	r0, #0
 8002078:	f7fe fc98 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 800207c:	20e2      	movs	r0, #226	; 0xe2
 800207e:	f7fe fc95 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 8002082:	20e2      	movs	r0, #226	; 0xe2
 8002084:	f7fe fc92 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 8002088:	20e2      	movs	r0, #226	; 0xe2
 800208a:	f7fe fc8f 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_REG(0xBF);
 800208e:	20bf      	movs	r0, #191	; 0xbf
 8002090:	f7fe fc68 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 8002094:	20aa      	movs	r0, #170	; 0xaa
 8002096:	f7fe fc89 	bl	80009ac <LCD_WR_DATAX>

		LCD_WR_REG(0xB0);
 800209a:	20b0      	movs	r0, #176	; 0xb0
 800209c:	f7fe fc62 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0x0D);
 80020a0:	200d      	movs	r0, #13
 80020a2:	f7fe fc83 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80020a6:	2000      	movs	r0, #0
 80020a8:	f7fe fc80 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0D);
 80020ac:	200d      	movs	r0, #13
 80020ae:	f7fe fc7d 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80020b2:	2000      	movs	r0, #0
 80020b4:	f7fe fc7a 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 80020b8:	2011      	movs	r0, #17
 80020ba:	f7fe fc77 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80020be:	2000      	movs	r0, #0
 80020c0:	f7fe fc74 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x19);
 80020c4:	2019      	movs	r0, #25
 80020c6:	f7fe fc71 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80020ca:	2000      	movs	r0, #0
 80020cc:	f7fe fc6e 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 80020d0:	2021      	movs	r0, #33	; 0x21
 80020d2:	f7fe fc6b 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80020d6:	2000      	movs	r0, #0
 80020d8:	f7fe fc68 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2D);
 80020dc:	202d      	movs	r0, #45	; 0x2d
 80020de:	f7fe fc65 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80020e2:	2000      	movs	r0, #0
 80020e4:	f7fe fc62 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3D);
 80020e8:	203d      	movs	r0, #61	; 0x3d
 80020ea:	f7fe fc5f 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80020ee:	2000      	movs	r0, #0
 80020f0:	f7fe fc5c 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 80020f4:	205d      	movs	r0, #93	; 0x5d
 80020f6:	f7fe fc59 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80020fa:	2000      	movs	r0, #0
 80020fc:	f7fe fc56 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8002100:	205d      	movs	r0, #93	; 0x5d
 8002102:	f7fe fc53 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002106:	2000      	movs	r0, #0
 8002108:	f7fe fc50 	bl	80009ac <LCD_WR_DATAX>

		LCD_WR_REG(0xB1);
 800210c:	20b1      	movs	r0, #177	; 0xb1
 800210e:	f7fe fc29 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0x80);
 8002112:	2080      	movs	r0, #128	; 0x80
 8002114:	f7fe fc4a 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002118:	2000      	movs	r0, #0
 800211a:	f7fe fc47 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 800211e:	208b      	movs	r0, #139	; 0x8b
 8002120:	f7fe fc44 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002124:	2000      	movs	r0, #0
 8002126:	f7fe fc41 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 800212a:	2096      	movs	r0, #150	; 0x96
 800212c:	f7fe fc3e 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002130:	2000      	movs	r0, #0
 8002132:	f7fe fc3b 	bl	80009ac <LCD_WR_DATAX>

		LCD_WR_REG(0xB2);
 8002136:	20b2      	movs	r0, #178	; 0xb2
 8002138:	f7fe fc14 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800213c:	2000      	movs	r0, #0
 800213e:	f7fe fc35 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002142:	2000      	movs	r0, #0
 8002144:	f7fe fc32 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8002148:	2002      	movs	r0, #2
 800214a:	f7fe fc2f 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800214e:	2000      	movs	r0, #0
 8002150:	f7fe fc2c 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 8002154:	2003      	movs	r0, #3
 8002156:	f7fe fc29 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800215a:	2000      	movs	r0, #0
 800215c:	f7fe fc26 	bl	80009ac <LCD_WR_DATAX>

		LCD_WR_REG(0xB3);
 8002160:	20b3      	movs	r0, #179	; 0xb3
 8002162:	f7fe fbff 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002166:	2000      	movs	r0, #0
 8002168:	f7fe fc20 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800216c:	2000      	movs	r0, #0
 800216e:	f7fe fc1d 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002172:	2000      	movs	r0, #0
 8002174:	f7fe fc1a 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002178:	2000      	movs	r0, #0
 800217a:	f7fe fc17 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800217e:	2000      	movs	r0, #0
 8002180:	f7fe fc14 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002184:	2000      	movs	r0, #0
 8002186:	f7fe fc11 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800218a:	2000      	movs	r0, #0
 800218c:	f7fe fc0e 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002190:	2000      	movs	r0, #0
 8002192:	f7fe fc0b 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002196:	2000      	movs	r0, #0
 8002198:	f7fe fc08 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800219c:	2000      	movs	r0, #0
 800219e:	f7fe fc05 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80021a2:	2000      	movs	r0, #0
 80021a4:	f7fe fc02 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80021a8:	2000      	movs	r0, #0
 80021aa:	f7fe fbff 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80021ae:	2000      	movs	r0, #0
 80021b0:	f7fe fbfc 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80021b4:	2000      	movs	r0, #0
 80021b6:	f7fe fbf9 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80021ba:	2000      	movs	r0, #0
 80021bc:	f7fe fbf6 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80021c0:	2000      	movs	r0, #0
 80021c2:	f7fe fbf3 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80021c6:	2000      	movs	r0, #0
 80021c8:	f7fe fbf0 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80021cc:	2000      	movs	r0, #0
 80021ce:	f7fe fbed 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80021d2:	2000      	movs	r0, #0
 80021d4:	f7fe fbea 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80021d8:	2000      	movs	r0, #0
 80021da:	f7fe fbe7 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80021de:	2000      	movs	r0, #0
 80021e0:	f7fe fbe4 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80021e4:	2000      	movs	r0, #0
 80021e6:	f7fe fbe1 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80021ea:	2000      	movs	r0, #0
 80021ec:	f7fe fbde 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80021f0:	2000      	movs	r0, #0
 80021f2:	f7fe fbdb 	bl	80009ac <LCD_WR_DATAX>

		LCD_WR_REG(0xB4);
 80021f6:	20b4      	movs	r0, #180	; 0xb4
 80021f8:	f7fe fbb4 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0x8B);
 80021fc:	208b      	movs	r0, #139	; 0x8b
 80021fe:	f7fe fbd5 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002202:	2000      	movs	r0, #0
 8002204:	f7fe fbd2 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 8002208:	2096      	movs	r0, #150	; 0x96
 800220a:	f7fe fbcf 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800220e:	2000      	movs	r0, #0
 8002210:	f7fe fbcc 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA1);
 8002214:	20a1      	movs	r0, #161	; 0xa1
 8002216:	f7fe fbc9 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800221a:	2000      	movs	r0, #0
 800221c:	f7fe fbc6 	bl	80009ac <LCD_WR_DATAX>

		LCD_WR_REG(0xB5);
 8002220:	20b5      	movs	r0, #181	; 0xb5
 8002222:	f7fe fb9f 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0x02);
 8002226:	2002      	movs	r0, #2
 8002228:	f7fe fbc0 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800222c:	2000      	movs	r0, #0
 800222e:	f7fe fbbd 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 8002232:	2003      	movs	r0, #3
 8002234:	f7fe fbba 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002238:	2000      	movs	r0, #0
 800223a:	f7fe fbb7 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 800223e:	2004      	movs	r0, #4
 8002240:	f7fe fbb4 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002244:	2000      	movs	r0, #0
 8002246:	f7fe fbb1 	bl	80009ac <LCD_WR_DATAX>

		LCD_WR_REG(0xB6);
 800224a:	20b6      	movs	r0, #182	; 0xb6
 800224c:	f7fe fb8a 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002250:	2000      	movs	r0, #0
 8002252:	f7fe fbab 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002256:	2000      	movs	r0, #0
 8002258:	f7fe fba8 	bl	80009ac <LCD_WR_DATAX>

		LCD_WR_REG(0xB7);
 800225c:	20b7      	movs	r0, #183	; 0xb7
 800225e:	f7fe fb81 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002262:	2000      	movs	r0, #0
 8002264:	f7fe fba2 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002268:	2000      	movs	r0, #0
 800226a:	f7fe fb9f 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 800226e:	203f      	movs	r0, #63	; 0x3f
 8002270:	f7fe fb9c 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002274:	2000      	movs	r0, #0
 8002276:	f7fe fb99 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5E);
 800227a:	205e      	movs	r0, #94	; 0x5e
 800227c:	f7fe fb96 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002280:	2000      	movs	r0, #0
 8002282:	f7fe fb93 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8002286:	2064      	movs	r0, #100	; 0x64
 8002288:	f7fe fb90 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800228c:	2000      	movs	r0, #0
 800228e:	f7fe fb8d 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8C);
 8002292:	208c      	movs	r0, #140	; 0x8c
 8002294:	f7fe fb8a 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002298:	2000      	movs	r0, #0
 800229a:	f7fe fb87 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAC);
 800229e:	20ac      	movs	r0, #172	; 0xac
 80022a0:	f7fe fb84 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80022a4:	2000      	movs	r0, #0
 80022a6:	f7fe fb81 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 80022aa:	20dc      	movs	r0, #220	; 0xdc
 80022ac:	f7fe fb7e 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80022b0:	2000      	movs	r0, #0
 80022b2:	f7fe fb7b 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x70);
 80022b6:	2070      	movs	r0, #112	; 0x70
 80022b8:	f7fe fb78 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80022bc:	2000      	movs	r0, #0
 80022be:	f7fe fb75 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x90);
 80022c2:	2090      	movs	r0, #144	; 0x90
 80022c4:	f7fe fb72 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80022c8:	2000      	movs	r0, #0
 80022ca:	f7fe fb6f 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0xEB);
 80022ce:	20eb      	movs	r0, #235	; 0xeb
 80022d0:	f7fe fb6c 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80022d4:	2000      	movs	r0, #0
 80022d6:	f7fe fb69 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 80022da:	20dc      	movs	r0, #220	; 0xdc
 80022dc:	f7fe fb66 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80022e0:	2000      	movs	r0, #0
 80022e2:	f7fe fb63 	bl	80009ac <LCD_WR_DATAX>

		LCD_WR_REG(0xB8);
 80022e6:	20b8      	movs	r0, #184	; 0xb8
 80022e8:	f7fe fb3c 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80022ec:	2000      	movs	r0, #0
 80022ee:	f7fe fb5d 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80022f2:	2000      	movs	r0, #0
 80022f4:	f7fe fb5a 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80022f8:	2000      	movs	r0, #0
 80022fa:	f7fe fb57 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80022fe:	2000      	movs	r0, #0
 8002300:	f7fe fb54 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002304:	2000      	movs	r0, #0
 8002306:	f7fe fb51 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800230a:	2000      	movs	r0, #0
 800230c:	f7fe fb4e 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002310:	2000      	movs	r0, #0
 8002312:	f7fe fb4b 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002316:	2000      	movs	r0, #0
 8002318:	f7fe fb48 	bl	80009ac <LCD_WR_DATAX>

		LCD_WR_REG(0xBA);
 800231c:	20ba      	movs	r0, #186	; 0xba
 800231e:	f7fe fb21 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0x24);
 8002322:	2024      	movs	r0, #36	; 0x24
 8002324:	f7fe fb42 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002328:	2000      	movs	r0, #0
 800232a:	f7fe fb3f 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800232e:	2000      	movs	r0, #0
 8002330:	f7fe fb3c 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002334:	2000      	movs	r0, #0
 8002336:	f7fe fb39 	bl	80009ac <LCD_WR_DATAX>

		LCD_WR_REG(0xC1);
 800233a:	20c1      	movs	r0, #193	; 0xc1
 800233c:	f7fe fb12 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8002340:	2020      	movs	r0, #32
 8002342:	f7fe fb33 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002346:	2000      	movs	r0, #0
 8002348:	f7fe fb30 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 800234c:	2054      	movs	r0, #84	; 0x54
 800234e:	f7fe fb2d 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002352:	2000      	movs	r0, #0
 8002354:	f7fe fb2a 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFF);
 8002358:	20ff      	movs	r0, #255	; 0xff
 800235a:	f7fe fb27 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800235e:	2000      	movs	r0, #0
 8002360:	f7fe fb24 	bl	80009ac <LCD_WR_DATAX>

		LCD_WR_REG(0xC2);
 8002364:	20c2      	movs	r0, #194	; 0xc2
 8002366:	f7fe fafd 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 800236a:	200a      	movs	r0, #10
 800236c:	f7fe fb1e 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002370:	2000      	movs	r0, #0
 8002372:	f7fe fb1b 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 8002376:	2004      	movs	r0, #4
 8002378:	f7fe fb18 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800237c:	2000      	movs	r0, #0
 800237e:	f7fe fb15 	bl	80009ac <LCD_WR_DATAX>

		LCD_WR_REG(0xC3);
 8002382:	20c3      	movs	r0, #195	; 0xc3
 8002384:	f7fe faee 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0x3C);
 8002388:	203c      	movs	r0, #60	; 0x3c
 800238a:	f7fe fb0f 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800238e:	2000      	movs	r0, #0
 8002390:	f7fe fb0c 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3A);
 8002394:	203a      	movs	r0, #58	; 0x3a
 8002396:	f7fe fb09 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800239a:	2000      	movs	r0, #0
 800239c:	f7fe fb06 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x39);
 80023a0:	2039      	movs	r0, #57	; 0x39
 80023a2:	f7fe fb03 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023a6:	2000      	movs	r0, #0
 80023a8:	f7fe fb00 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x37);
 80023ac:	2037      	movs	r0, #55	; 0x37
 80023ae:	f7fe fafd 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023b2:	2000      	movs	r0, #0
 80023b4:	f7fe fafa 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 80023b8:	203c      	movs	r0, #60	; 0x3c
 80023ba:	f7fe faf7 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023be:	2000      	movs	r0, #0
 80023c0:	f7fe faf4 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 80023c4:	2036      	movs	r0, #54	; 0x36
 80023c6:	f7fe faf1 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023ca:	2000      	movs	r0, #0
 80023cc:	f7fe faee 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 80023d0:	2032      	movs	r0, #50	; 0x32
 80023d2:	f7fe faeb 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023d6:	2000      	movs	r0, #0
 80023d8:	f7fe fae8 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 80023dc:	202f      	movs	r0, #47	; 0x2f
 80023de:	f7fe fae5 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023e2:	2000      	movs	r0, #0
 80023e4:	f7fe fae2 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 80023e8:	202c      	movs	r0, #44	; 0x2c
 80023ea:	f7fe fadf 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023ee:	2000      	movs	r0, #0
 80023f0:	f7fe fadc 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 80023f4:	2029      	movs	r0, #41	; 0x29
 80023f6:	f7fe fad9 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023fa:	2000      	movs	r0, #0
 80023fc:	f7fe fad6 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 8002400:	2026      	movs	r0, #38	; 0x26
 8002402:	f7fe fad3 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002406:	2000      	movs	r0, #0
 8002408:	f7fe fad0 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 800240c:	2024      	movs	r0, #36	; 0x24
 800240e:	f7fe facd 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002412:	2000      	movs	r0, #0
 8002414:	f7fe faca 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002418:	2024      	movs	r0, #36	; 0x24
 800241a:	f7fe fac7 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800241e:	2000      	movs	r0, #0
 8002420:	f7fe fac4 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 8002424:	2023      	movs	r0, #35	; 0x23
 8002426:	f7fe fac1 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800242a:	2000      	movs	r0, #0
 800242c:	f7fe fabe 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002430:	203c      	movs	r0, #60	; 0x3c
 8002432:	f7fe fabb 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002436:	2000      	movs	r0, #0
 8002438:	f7fe fab8 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 800243c:	2036      	movs	r0, #54	; 0x36
 800243e:	f7fe fab5 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002442:	2000      	movs	r0, #0
 8002444:	f7fe fab2 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 8002448:	2032      	movs	r0, #50	; 0x32
 800244a:	f7fe faaf 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800244e:	2000      	movs	r0, #0
 8002450:	f7fe faac 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 8002454:	202f      	movs	r0, #47	; 0x2f
 8002456:	f7fe faa9 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800245a:	2000      	movs	r0, #0
 800245c:	f7fe faa6 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8002460:	202c      	movs	r0, #44	; 0x2c
 8002462:	f7fe faa3 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002466:	2000      	movs	r0, #0
 8002468:	f7fe faa0 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 800246c:	2029      	movs	r0, #41	; 0x29
 800246e:	f7fe fa9d 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002472:	2000      	movs	r0, #0
 8002474:	f7fe fa9a 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 8002478:	2026      	movs	r0, #38	; 0x26
 800247a:	f7fe fa97 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800247e:	2000      	movs	r0, #0
 8002480:	f7fe fa94 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002484:	2024      	movs	r0, #36	; 0x24
 8002486:	f7fe fa91 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800248a:	2000      	movs	r0, #0
 800248c:	f7fe fa8e 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002490:	2024      	movs	r0, #36	; 0x24
 8002492:	f7fe fa8b 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002496:	2000      	movs	r0, #0
 8002498:	f7fe fa88 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 800249c:	2023      	movs	r0, #35	; 0x23
 800249e:	f7fe fa85 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024a2:	2000      	movs	r0, #0
 80024a4:	f7fe fa82 	bl	80009ac <LCD_WR_DATAX>

		LCD_WR_REG(0xC4);
 80024a8:	20c4      	movs	r0, #196	; 0xc4
 80024aa:	f7fe fa5b 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0x62);
 80024ae:	2062      	movs	r0, #98	; 0x62
 80024b0:	f7fe fa7c 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024b4:	2000      	movs	r0, #0
 80024b6:	f7fe fa79 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 80024ba:	2005      	movs	r0, #5
 80024bc:	f7fe fa76 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024c0:	2000      	movs	r0, #0
 80024c2:	f7fe fa73 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 80024c6:	2084      	movs	r0, #132	; 0x84
 80024c8:	f7fe fa70 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024cc:	2000      	movs	r0, #0
 80024ce:	f7fe fa6d 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF0);
 80024d2:	20f0      	movs	r0, #240	; 0xf0
 80024d4:	f7fe fa6a 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024d8:	2000      	movs	r0, #0
 80024da:	f7fe fa67 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 80024de:	2018      	movs	r0, #24
 80024e0:	f7fe fa64 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024e4:	2000      	movs	r0, #0
 80024e6:	f7fe fa61 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA4);
 80024ea:	20a4      	movs	r0, #164	; 0xa4
 80024ec:	f7fe fa5e 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024f0:	2000      	movs	r0, #0
 80024f2:	f7fe fa5b 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 80024f6:	2018      	movs	r0, #24
 80024f8:	f7fe fa58 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024fc:	2000      	movs	r0, #0
 80024fe:	f7fe fa55 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8002502:	2050      	movs	r0, #80	; 0x50
 8002504:	f7fe fa52 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002508:	2000      	movs	r0, #0
 800250a:	f7fe fa4f 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0C);
 800250e:	200c      	movs	r0, #12
 8002510:	f7fe fa4c 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002514:	2000      	movs	r0, #0
 8002516:	f7fe fa49 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 800251a:	2017      	movs	r0, #23
 800251c:	f7fe fa46 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002520:	2000      	movs	r0, #0
 8002522:	f7fe fa43 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x95);
 8002526:	2095      	movs	r0, #149	; 0x95
 8002528:	f7fe fa40 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800252c:	2000      	movs	r0, #0
 800252e:	f7fe fa3d 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002532:	20f3      	movs	r0, #243	; 0xf3
 8002534:	f7fe fa3a 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002538:	2000      	movs	r0, #0
 800253a:	f7fe fa37 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE6);
 800253e:	20e6      	movs	r0, #230	; 0xe6
 8002540:	f7fe fa34 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002544:	2000      	movs	r0, #0
 8002546:	f7fe fa31 	bl	80009ac <LCD_WR_DATAX>

		LCD_WR_REG(0xC5);
 800254a:	20c5      	movs	r0, #197	; 0xc5
 800254c:	f7fe fa0a 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 8002550:	2032      	movs	r0, #50	; 0x32
 8002552:	f7fe fa2b 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002556:	2000      	movs	r0, #0
 8002558:	f7fe fa28 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 800255c:	2044      	movs	r0, #68	; 0x44
 800255e:	f7fe fa25 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002562:	2000      	movs	r0, #0
 8002564:	f7fe fa22 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x65);
 8002568:	2065      	movs	r0, #101	; 0x65
 800256a:	f7fe fa1f 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800256e:	2000      	movs	r0, #0
 8002570:	f7fe fa1c 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8002574:	2076      	movs	r0, #118	; 0x76
 8002576:	f7fe fa19 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800257a:	2000      	movs	r0, #0
 800257c:	f7fe fa16 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002580:	2088      	movs	r0, #136	; 0x88
 8002582:	f7fe fa13 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002586:	2000      	movs	r0, #0
 8002588:	f7fe fa10 	bl	80009ac <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 800258c:	20c6      	movs	r0, #198	; 0xc6
 800258e:	f7fe f9e9 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8002592:	2020      	movs	r0, #32
 8002594:	f7fe fa0a 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002598:	2000      	movs	r0, #0
 800259a:	f7fe fa07 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 800259e:	2017      	movs	r0, #23
 80025a0:	f7fe fa04 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025a4:	2000      	movs	r0, #0
 80025a6:	f7fe fa01 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 80025aa:	2001      	movs	r0, #1
 80025ac:	f7fe f9fe 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025b0:	2000      	movs	r0, #0
 80025b2:	f7fe f9fb 	bl	80009ac <LCD_WR_DATAX>

		LCD_WR_REG(0xC7);
 80025b6:	20c7      	movs	r0, #199	; 0xc7
 80025b8:	f7fe f9d4 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80025bc:	2000      	movs	r0, #0
 80025be:	f7fe f9f5 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025c2:	2000      	movs	r0, #0
 80025c4:	f7fe f9f2 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025c8:	2000      	movs	r0, #0
 80025ca:	f7fe f9ef 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025ce:	2000      	movs	r0, #0
 80025d0:	f7fe f9ec 	bl	80009ac <LCD_WR_DATAX>

		LCD_WR_REG(0xC8);
 80025d4:	20c8      	movs	r0, #200	; 0xc8
 80025d6:	f7fe f9c5 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80025da:	2000      	movs	r0, #0
 80025dc:	f7fe f9e6 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025e0:	2000      	movs	r0, #0
 80025e2:	f7fe f9e3 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025e6:	2000      	movs	r0, #0
 80025e8:	f7fe f9e0 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025ec:	2000      	movs	r0, #0
 80025ee:	f7fe f9dd 	bl	80009ac <LCD_WR_DATAX>

		LCD_WR_REG(0xC9);
 80025f2:	20c9      	movs	r0, #201	; 0xc9
 80025f4:	f7fe f9b6 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80025f8:	2000      	movs	r0, #0
 80025fa:	f7fe f9d7 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025fe:	2000      	movs	r0, #0
 8002600:	f7fe f9d4 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002604:	2000      	movs	r0, #0
 8002606:	f7fe f9d1 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800260a:	2000      	movs	r0, #0
 800260c:	f7fe f9ce 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002610:	2000      	movs	r0, #0
 8002612:	f7fe f9cb 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002616:	2000      	movs	r0, #0
 8002618:	f7fe f9c8 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800261c:	2000      	movs	r0, #0
 800261e:	f7fe f9c5 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002622:	2000      	movs	r0, #0
 8002624:	f7fe f9c2 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002628:	2000      	movs	r0, #0
 800262a:	f7fe f9bf 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800262e:	2000      	movs	r0, #0
 8002630:	f7fe f9bc 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002634:	2000      	movs	r0, #0
 8002636:	f7fe f9b9 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800263a:	2000      	movs	r0, #0
 800263c:	f7fe f9b6 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002640:	2000      	movs	r0, #0
 8002642:	f7fe f9b3 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002646:	2000      	movs	r0, #0
 8002648:	f7fe f9b0 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800264c:	2000      	movs	r0, #0
 800264e:	f7fe f9ad 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002652:	2000      	movs	r0, #0
 8002654:	f7fe f9aa 	bl	80009ac <LCD_WR_DATAX>

		LCD_WR_REG(0xE0);
 8002658:	20e0      	movs	r0, #224	; 0xe0
 800265a:	f7fe f983 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 800265e:	2016      	movs	r0, #22
 8002660:	f7fe f9a4 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002664:	2000      	movs	r0, #0
 8002666:	f7fe f9a1 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 800266a:	201c      	movs	r0, #28
 800266c:	f7fe f99e 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002670:	2000      	movs	r0, #0
 8002672:	f7fe f99b 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8002676:	2021      	movs	r0, #33	; 0x21
 8002678:	f7fe f998 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800267c:	2000      	movs	r0, #0
 800267e:	f7fe f995 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002682:	2036      	movs	r0, #54	; 0x36
 8002684:	f7fe f992 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002688:	2000      	movs	r0, #0
 800268a:	f7fe f98f 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x46);
 800268e:	2046      	movs	r0, #70	; 0x46
 8002690:	f7fe f98c 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002694:	2000      	movs	r0, #0
 8002696:	f7fe f989 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 800269a:	2052      	movs	r0, #82	; 0x52
 800269c:	f7fe f986 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026a0:	2000      	movs	r0, #0
 80026a2:	f7fe f983 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 80026a6:	2064      	movs	r0, #100	; 0x64
 80026a8:	f7fe f980 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026ac:	2000      	movs	r0, #0
 80026ae:	f7fe f97d 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 80026b2:	207a      	movs	r0, #122	; 0x7a
 80026b4:	f7fe f97a 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026b8:	2000      	movs	r0, #0
 80026ba:	f7fe f977 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 80026be:	208b      	movs	r0, #139	; 0x8b
 80026c0:	f7fe f974 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026c4:	2000      	movs	r0, #0
 80026c6:	f7fe f971 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80026ca:	2099      	movs	r0, #153	; 0x99
 80026cc:	f7fe f96e 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026d0:	2000      	movs	r0, #0
 80026d2:	f7fe f96b 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 80026d6:	20a8      	movs	r0, #168	; 0xa8
 80026d8:	f7fe f968 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026dc:	2000      	movs	r0, #0
 80026de:	f7fe f965 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 80026e2:	20b9      	movs	r0, #185	; 0xb9
 80026e4:	f7fe f962 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026e8:	2000      	movs	r0, #0
 80026ea:	f7fe f95f 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 80026ee:	20c4      	movs	r0, #196	; 0xc4
 80026f0:	f7fe f95c 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026f4:	2000      	movs	r0, #0
 80026f6:	f7fe f959 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 80026fa:	20ca      	movs	r0, #202	; 0xca
 80026fc:	f7fe f956 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002700:	2000      	movs	r0, #0
 8002702:	f7fe f953 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 8002706:	20d2      	movs	r0, #210	; 0xd2
 8002708:	f7fe f950 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800270c:	2000      	movs	r0, #0
 800270e:	f7fe f94d 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD9);
 8002712:	20d9      	movs	r0, #217	; 0xd9
 8002714:	f7fe f94a 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002718:	2000      	movs	r0, #0
 800271a:	f7fe f947 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 800271e:	20e0      	movs	r0, #224	; 0xe0
 8002720:	f7fe f944 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002724:	2000      	movs	r0, #0
 8002726:	f7fe f941 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 800272a:	20f3      	movs	r0, #243	; 0xf3
 800272c:	f7fe f93e 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002730:	2000      	movs	r0, #0
 8002732:	f7fe f93b 	bl	80009ac <LCD_WR_DATAX>

		LCD_WR_REG(0xE1);
 8002736:	20e1      	movs	r0, #225	; 0xe1
 8002738:	f7fe f914 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 800273c:	2016      	movs	r0, #22
 800273e:	f7fe f935 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002742:	2000      	movs	r0, #0
 8002744:	f7fe f932 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8002748:	201c      	movs	r0, #28
 800274a:	f7fe f92f 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800274e:	2000      	movs	r0, #0
 8002750:	f7fe f92c 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x22);
 8002754:	2022      	movs	r0, #34	; 0x22
 8002756:	f7fe f929 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800275a:	2000      	movs	r0, #0
 800275c:	f7fe f926 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002760:	2036      	movs	r0, #54	; 0x36
 8002762:	f7fe f923 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002766:	2000      	movs	r0, #0
 8002768:	f7fe f920 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 800276c:	2045      	movs	r0, #69	; 0x45
 800276e:	f7fe f91d 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002772:	2000      	movs	r0, #0
 8002774:	f7fe f91a 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 8002778:	2052      	movs	r0, #82	; 0x52
 800277a:	f7fe f917 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800277e:	2000      	movs	r0, #0
 8002780:	f7fe f914 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8002784:	2064      	movs	r0, #100	; 0x64
 8002786:	f7fe f911 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800278a:	2000      	movs	r0, #0
 800278c:	f7fe f90e 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8002790:	207a      	movs	r0, #122	; 0x7a
 8002792:	f7fe f90b 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002796:	2000      	movs	r0, #0
 8002798:	f7fe f908 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 800279c:	208b      	movs	r0, #139	; 0x8b
 800279e:	f7fe f905 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027a2:	2000      	movs	r0, #0
 80027a4:	f7fe f902 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80027a8:	2099      	movs	r0, #153	; 0x99
 80027aa:	f7fe f8ff 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027ae:	2000      	movs	r0, #0
 80027b0:	f7fe f8fc 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 80027b4:	20a8      	movs	r0, #168	; 0xa8
 80027b6:	f7fe f8f9 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027ba:	2000      	movs	r0, #0
 80027bc:	f7fe f8f6 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 80027c0:	20b9      	movs	r0, #185	; 0xb9
 80027c2:	f7fe f8f3 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027c6:	2000      	movs	r0, #0
 80027c8:	f7fe f8f0 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 80027cc:	20c4      	movs	r0, #196	; 0xc4
 80027ce:	f7fe f8ed 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027d2:	2000      	movs	r0, #0
 80027d4:	f7fe f8ea 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 80027d8:	20ca      	movs	r0, #202	; 0xca
 80027da:	f7fe f8e7 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027de:	2000      	movs	r0, #0
 80027e0:	f7fe f8e4 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 80027e4:	20d2      	movs	r0, #210	; 0xd2
 80027e6:	f7fe f8e1 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027ea:	2000      	movs	r0, #0
 80027ec:	f7fe f8de 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD8);
 80027f0:	20d8      	movs	r0, #216	; 0xd8
 80027f2:	f7fe f8db 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027f6:	2000      	movs	r0, #0
 80027f8:	f7fe f8d8 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 80027fc:	20e0      	movs	r0, #224	; 0xe0
 80027fe:	f7fe f8d5 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002802:	2000      	movs	r0, #0
 8002804:	f7fe f8d2 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002808:	20f3      	movs	r0, #243	; 0xf3
 800280a:	f7fe f8cf 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800280e:	2000      	movs	r0, #0
 8002810:	f7fe f8cc 	bl	80009ac <LCD_WR_DATAX>

		LCD_WR_REG(0xE2);
 8002814:	20e2      	movs	r0, #226	; 0xe2
 8002816:	f7fe f8a5 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 800281a:	2005      	movs	r0, #5
 800281c:	f7fe f8c6 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002820:	2000      	movs	r0, #0
 8002822:	f7fe f8c3 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0B);
 8002826:	200b      	movs	r0, #11
 8002828:	f7fe f8c0 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800282c:	2000      	movs	r0, #0
 800282e:	f7fe f8bd 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1B);
 8002832:	201b      	movs	r0, #27
 8002834:	f7fe f8ba 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002838:	2000      	movs	r0, #0
 800283a:	f7fe f8b7 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 800283e:	2034      	movs	r0, #52	; 0x34
 8002840:	f7fe f8b4 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002844:	2000      	movs	r0, #0
 8002846:	f7fe f8b1 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 800284a:	2044      	movs	r0, #68	; 0x44
 800284c:	f7fe f8ae 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002850:	2000      	movs	r0, #0
 8002852:	f7fe f8ab 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4F);
 8002856:	204f      	movs	r0, #79	; 0x4f
 8002858:	f7fe f8a8 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800285c:	2000      	movs	r0, #0
 800285e:	f7fe f8a5 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x61);
 8002862:	2061      	movs	r0, #97	; 0x61
 8002864:	f7fe f8a2 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002868:	2000      	movs	r0, #0
 800286a:	f7fe f89f 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x79);
 800286e:	2079      	movs	r0, #121	; 0x79
 8002870:	f7fe f89c 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002874:	2000      	movs	r0, #0
 8002876:	f7fe f899 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 800287a:	2088      	movs	r0, #136	; 0x88
 800287c:	f7fe f896 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002880:	2000      	movs	r0, #0
 8002882:	f7fe f893 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 8002886:	2097      	movs	r0, #151	; 0x97
 8002888:	f7fe f890 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800288c:	2000      	movs	r0, #0
 800288e:	f7fe f88d 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 8002892:	20a6      	movs	r0, #166	; 0xa6
 8002894:	f7fe f88a 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002898:	2000      	movs	r0, #0
 800289a:	f7fe f887 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 800289e:	20b7      	movs	r0, #183	; 0xb7
 80028a0:	f7fe f884 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028a4:	2000      	movs	r0, #0
 80028a6:	f7fe f881 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 80028aa:	20c2      	movs	r0, #194	; 0xc2
 80028ac:	f7fe f87e 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028b0:	2000      	movs	r0, #0
 80028b2:	f7fe f87b 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 80028b6:	20c7      	movs	r0, #199	; 0xc7
 80028b8:	f7fe f878 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028bc:	2000      	movs	r0, #0
 80028be:	f7fe f875 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 80028c2:	20d1      	movs	r0, #209	; 0xd1
 80028c4:	f7fe f872 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028c8:	2000      	movs	r0, #0
 80028ca:	f7fe f86f 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD6);
 80028ce:	20d6      	movs	r0, #214	; 0xd6
 80028d0:	f7fe f86c 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028d4:	2000      	movs	r0, #0
 80028d6:	f7fe f869 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 80028da:	20dd      	movs	r0, #221	; 0xdd
 80028dc:	f7fe f866 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028e0:	2000      	movs	r0, #0
 80028e2:	f7fe f863 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 80028e6:	20f3      	movs	r0, #243	; 0xf3
 80028e8:	f7fe f860 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028ec:	2000      	movs	r0, #0
 80028ee:	f7fe f85d 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_REG(0xE3);
 80028f2:	20e3      	movs	r0, #227	; 0xe3
 80028f4:	f7fe f836 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 80028f8:	2005      	movs	r0, #5
 80028fa:	f7fe f857 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028fe:	2000      	movs	r0, #0
 8002900:	f7fe f854 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA);
 8002904:	200a      	movs	r0, #10
 8002906:	f7fe f851 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800290a:	2000      	movs	r0, #0
 800290c:	f7fe f84e 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8002910:	201c      	movs	r0, #28
 8002912:	f7fe f84b 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002916:	2000      	movs	r0, #0
 8002918:	f7fe f848 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 800291c:	2033      	movs	r0, #51	; 0x33
 800291e:	f7fe f845 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002922:	2000      	movs	r0, #0
 8002924:	f7fe f842 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002928:	2044      	movs	r0, #68	; 0x44
 800292a:	f7fe f83f 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800292e:	2000      	movs	r0, #0
 8002930:	f7fe f83c 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8002934:	2050      	movs	r0, #80	; 0x50
 8002936:	f7fe f839 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800293a:	2000      	movs	r0, #0
 800293c:	f7fe f836 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x62);
 8002940:	2062      	movs	r0, #98	; 0x62
 8002942:	f7fe f833 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002946:	2000      	movs	r0, #0
 8002948:	f7fe f830 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x78);
 800294c:	2078      	movs	r0, #120	; 0x78
 800294e:	f7fe f82d 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002952:	2000      	movs	r0, #0
 8002954:	f7fe f82a 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002958:	2088      	movs	r0, #136	; 0x88
 800295a:	f7fe f827 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800295e:	2000      	movs	r0, #0
 8002960:	f7fe f824 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 8002964:	2097      	movs	r0, #151	; 0x97
 8002966:	f7fe f821 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800296a:	2000      	movs	r0, #0
 800296c:	f7fe f81e 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 8002970:	20a6      	movs	r0, #166	; 0xa6
 8002972:	f7fe f81b 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002976:	2000      	movs	r0, #0
 8002978:	f7fe f818 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 800297c:	20b7      	movs	r0, #183	; 0xb7
 800297e:	f7fe f815 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002982:	2000      	movs	r0, #0
 8002984:	f7fe f812 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 8002988:	20c2      	movs	r0, #194	; 0xc2
 800298a:	f7fe f80f 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800298e:	2000      	movs	r0, #0
 8002990:	f7fe f80c 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 8002994:	20c7      	movs	r0, #199	; 0xc7
 8002996:	f7fe f809 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800299a:	2000      	movs	r0, #0
 800299c:	f7fe f806 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 80029a0:	20d1      	movs	r0, #209	; 0xd1
 80029a2:	f7fe f803 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029a6:	2000      	movs	r0, #0
 80029a8:	f7fe f800 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD5);
 80029ac:	20d5      	movs	r0, #213	; 0xd5
 80029ae:	f7fd fffd 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029b2:	2000      	movs	r0, #0
 80029b4:	f7fd fffa 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 80029b8:	20dd      	movs	r0, #221	; 0xdd
 80029ba:	f7fd fff7 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029be:	2000      	movs	r0, #0
 80029c0:	f7fd fff4 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 80029c4:	20f3      	movs	r0, #243	; 0xf3
 80029c6:	f7fd fff1 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029ca:	2000      	movs	r0, #0
 80029cc:	f7fd ffee 	bl	80009ac <LCD_WR_DATAX>

		LCD_WR_REG(0xE4);
 80029d0:	20e4      	movs	r0, #228	; 0xe4
 80029d2:	f7fd ffc7 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 80029d6:	2001      	movs	r0, #1
 80029d8:	f7fd ffe8 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029dc:	2000      	movs	r0, #0
 80029de:	f7fd ffe5 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 80029e2:	2001      	movs	r0, #1
 80029e4:	f7fd ffe2 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029e8:	2000      	movs	r0, #0
 80029ea:	f7fd ffdf 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 80029ee:	2002      	movs	r0, #2
 80029f0:	f7fd ffdc 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029f4:	2000      	movs	r0, #0
 80029f6:	f7fd ffd9 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 80029fa:	202a      	movs	r0, #42	; 0x2a
 80029fc:	f7fd ffd6 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a00:	2000      	movs	r0, #0
 8002a02:	f7fd ffd3 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002a06:	203c      	movs	r0, #60	; 0x3c
 8002a08:	f7fd ffd0 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a0c:	2000      	movs	r0, #0
 8002a0e:	f7fd ffcd 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 8002a12:	204b      	movs	r0, #75	; 0x4b
 8002a14:	f7fd ffca 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a18:	2000      	movs	r0, #0
 8002a1a:	f7fd ffc7 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8002a1e:	205d      	movs	r0, #93	; 0x5d
 8002a20:	f7fd ffc4 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a24:	2000      	movs	r0, #0
 8002a26:	f7fd ffc1 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 8002a2a:	2074      	movs	r0, #116	; 0x74
 8002a2c:	f7fd ffbe 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a30:	2000      	movs	r0, #0
 8002a32:	f7fd ffbb 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8002a36:	2084      	movs	r0, #132	; 0x84
 8002a38:	f7fd ffb8 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a3c:	2000      	movs	r0, #0
 8002a3e:	f7fd ffb5 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 8002a42:	2093      	movs	r0, #147	; 0x93
 8002a44:	f7fd ffb2 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a48:	2000      	movs	r0, #0
 8002a4a:	f7fd ffaf 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8002a4e:	20a2      	movs	r0, #162	; 0xa2
 8002a50:	f7fd ffac 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a54:	2000      	movs	r0, #0
 8002a56:	f7fd ffa9 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 8002a5a:	20b3      	movs	r0, #179	; 0xb3
 8002a5c:	f7fd ffa6 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a60:	2000      	movs	r0, #0
 8002a62:	f7fd ffa3 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 8002a66:	20be      	movs	r0, #190	; 0xbe
 8002a68:	f7fd ffa0 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a6c:	2000      	movs	r0, #0
 8002a6e:	f7fd ff9d 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002a72:	20c4      	movs	r0, #196	; 0xc4
 8002a74:	f7fd ff9a 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a78:	2000      	movs	r0, #0
 8002a7a:	f7fd ff97 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 8002a7e:	20cd      	movs	r0, #205	; 0xcd
 8002a80:	f7fd ff94 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a84:	2000      	movs	r0, #0
 8002a86:	f7fd ff91 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 8002a8a:	20d3      	movs	r0, #211	; 0xd3
 8002a8c:	f7fd ff8e 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a90:	2000      	movs	r0, #0
 8002a92:	f7fd ff8b 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8002a96:	20dd      	movs	r0, #221	; 0xdd
 8002a98:	f7fd ff88 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a9c:	2000      	movs	r0, #0
 8002a9e:	f7fd ff85 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002aa2:	20f3      	movs	r0, #243	; 0xf3
 8002aa4:	f7fd ff82 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002aa8:	2000      	movs	r0, #0
 8002aaa:	f7fd ff7f 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_REG(0xE5);
 8002aae:	20e5      	movs	r0, #229	; 0xe5
 8002ab0:	f7fd ff58 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002ab4:	2000      	movs	r0, #0
 8002ab6:	f7fd ff79 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002aba:	2000      	movs	r0, #0
 8002abc:	f7fd ff76 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ac0:	2000      	movs	r0, #0
 8002ac2:	f7fd ff73 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ac6:	2000      	movs	r0, #0
 8002ac8:	f7fd ff70 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8002acc:	2002      	movs	r0, #2
 8002ace:	f7fd ff6d 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ad2:	2000      	movs	r0, #0
 8002ad4:	f7fd ff6a 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8002ad8:	2029      	movs	r0, #41	; 0x29
 8002ada:	f7fd ff67 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ade:	2000      	movs	r0, #0
 8002ae0:	f7fd ff64 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002ae4:	203c      	movs	r0, #60	; 0x3c
 8002ae6:	f7fd ff61 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002aea:	2000      	movs	r0, #0
 8002aec:	f7fd ff5e 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 8002af0:	204b      	movs	r0, #75	; 0x4b
 8002af2:	f7fd ff5b 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002af6:	2000      	movs	r0, #0
 8002af8:	f7fd ff58 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8002afc:	205d      	movs	r0, #93	; 0x5d
 8002afe:	f7fd ff55 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b02:	2000      	movs	r0, #0
 8002b04:	f7fd ff52 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 8002b08:	2074      	movs	r0, #116	; 0x74
 8002b0a:	f7fd ff4f 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b0e:	2000      	movs	r0, #0
 8002b10:	f7fd ff4c 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8002b14:	2084      	movs	r0, #132	; 0x84
 8002b16:	f7fd ff49 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b1a:	2000      	movs	r0, #0
 8002b1c:	f7fd ff46 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 8002b20:	2093      	movs	r0, #147	; 0x93
 8002b22:	f7fd ff43 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b26:	2000      	movs	r0, #0
 8002b28:	f7fd ff40 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8002b2c:	20a2      	movs	r0, #162	; 0xa2
 8002b2e:	f7fd ff3d 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b32:	2000      	movs	r0, #0
 8002b34:	f7fd ff3a 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 8002b38:	20b3      	movs	r0, #179	; 0xb3
 8002b3a:	f7fd ff37 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b3e:	2000      	movs	r0, #0
 8002b40:	f7fd ff34 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 8002b44:	20be      	movs	r0, #190	; 0xbe
 8002b46:	f7fd ff31 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	f7fd ff2e 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002b50:	20c4      	movs	r0, #196	; 0xc4
 8002b52:	f7fd ff2b 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b56:	2000      	movs	r0, #0
 8002b58:	f7fd ff28 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 8002b5c:	20cd      	movs	r0, #205	; 0xcd
 8002b5e:	f7fd ff25 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b62:	2000      	movs	r0, #0
 8002b64:	f7fd ff22 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 8002b68:	20d3      	movs	r0, #211	; 0xd3
 8002b6a:	f7fd ff1f 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b6e:	2000      	movs	r0, #0
 8002b70:	f7fd ff1c 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 8002b74:	20dc      	movs	r0, #220	; 0xdc
 8002b76:	f7fd ff19 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b7a:	2000      	movs	r0, #0
 8002b7c:	f7fd ff16 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002b80:	20f3      	movs	r0, #243	; 0xf3
 8002b82:	f7fd ff13 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b86:	2000      	movs	r0, #0
 8002b88:	f7fd ff10 	bl	80009ac <LCD_WR_DATAX>

		LCD_WR_REG(0xE6);
 8002b8c:	20e6      	movs	r0, #230	; 0xe6
 8002b8e:	f7fd fee9 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0x11);
 8002b92:	2011      	movs	r0, #17
 8002b94:	f7fd ff0a 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b98:	2000      	movs	r0, #0
 8002b9a:	f7fd ff07 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8002b9e:	2034      	movs	r0, #52	; 0x34
 8002ba0:	f7fd ff04 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ba4:	2000      	movs	r0, #0
 8002ba6:	f7fd ff01 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8002baa:	2056      	movs	r0, #86	; 0x56
 8002bac:	f7fd fefe 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bb0:	2000      	movs	r0, #0
 8002bb2:	f7fd fefb 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8002bb6:	2076      	movs	r0, #118	; 0x76
 8002bb8:	f7fd fef8 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bbc:	2000      	movs	r0, #0
 8002bbe:	f7fd fef5 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8002bc2:	2077      	movs	r0, #119	; 0x77
 8002bc4:	f7fd fef2 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bc8:	2000      	movs	r0, #0
 8002bca:	f7fd feef 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8002bce:	2066      	movs	r0, #102	; 0x66
 8002bd0:	f7fd feec 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bd4:	2000      	movs	r0, #0
 8002bd6:	f7fd fee9 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002bda:	2088      	movs	r0, #136	; 0x88
 8002bdc:	f7fd fee6 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002be0:	2000      	movs	r0, #0
 8002be2:	f7fd fee3 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002be6:	2099      	movs	r0, #153	; 0x99
 8002be8:	f7fd fee0 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bec:	2000      	movs	r0, #0
 8002bee:	f7fd fedd 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8002bf2:	20bb      	movs	r0, #187	; 0xbb
 8002bf4:	f7fd feda 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bf8:	2000      	movs	r0, #0
 8002bfa:	f7fd fed7 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002bfe:	2099      	movs	r0, #153	; 0x99
 8002c00:	f7fd fed4 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c04:	2000      	movs	r0, #0
 8002c06:	f7fd fed1 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8002c0a:	2066      	movs	r0, #102	; 0x66
 8002c0c:	f7fd fece 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c10:	2000      	movs	r0, #0
 8002c12:	f7fd fecb 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8002c16:	2055      	movs	r0, #85	; 0x55
 8002c18:	f7fd fec8 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c1c:	2000      	movs	r0, #0
 8002c1e:	f7fd fec5 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8002c22:	2055      	movs	r0, #85	; 0x55
 8002c24:	f7fd fec2 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c28:	2000      	movs	r0, #0
 8002c2a:	f7fd febf 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8002c2e:	2045      	movs	r0, #69	; 0x45
 8002c30:	f7fd febc 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c34:	2000      	movs	r0, #0
 8002c36:	f7fd feb9 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 8002c3a:	2043      	movs	r0, #67	; 0x43
 8002c3c:	f7fd feb6 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c40:	2000      	movs	r0, #0
 8002c42:	f7fd feb3 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002c46:	2044      	movs	r0, #68	; 0x44
 8002c48:	f7fd feb0 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c4c:	2000      	movs	r0, #0
 8002c4e:	f7fd fead 	bl	80009ac <LCD_WR_DATAX>

		LCD_WR_REG(0xE7);
 8002c52:	20e7      	movs	r0, #231	; 0xe7
 8002c54:	f7fd fe86 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 8002c58:	2032      	movs	r0, #50	; 0x32
 8002c5a:	f7fd fea7 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c5e:	2000      	movs	r0, #0
 8002c60:	f7fd fea4 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8002c64:	2055      	movs	r0, #85	; 0x55
 8002c66:	f7fd fea1 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c6a:	2000      	movs	r0, #0
 8002c6c:	f7fd fe9e 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8002c70:	2076      	movs	r0, #118	; 0x76
 8002c72:	f7fd fe9b 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c76:	2000      	movs	r0, #0
 8002c78:	f7fd fe98 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8002c7c:	2066      	movs	r0, #102	; 0x66
 8002c7e:	f7fd fe95 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c82:	2000      	movs	r0, #0
 8002c84:	f7fd fe92 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 8002c88:	2067      	movs	r0, #103	; 0x67
 8002c8a:	f7fd fe8f 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c8e:	2000      	movs	r0, #0
 8002c90:	f7fd fe8c 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 8002c94:	2067      	movs	r0, #103	; 0x67
 8002c96:	f7fd fe89 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c9a:	2000      	movs	r0, #0
 8002c9c:	f7fd fe86 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 8002ca0:	2087      	movs	r0, #135	; 0x87
 8002ca2:	f7fd fe83 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ca6:	2000      	movs	r0, #0
 8002ca8:	f7fd fe80 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002cac:	2099      	movs	r0, #153	; 0x99
 8002cae:	f7fd fe7d 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cb2:	2000      	movs	r0, #0
 8002cb4:	f7fd fe7a 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8002cb8:	20bb      	movs	r0, #187	; 0xbb
 8002cba:	f7fd fe77 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cbe:	2000      	movs	r0, #0
 8002cc0:	f7fd fe74 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002cc4:	2099      	movs	r0, #153	; 0x99
 8002cc6:	f7fd fe71 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cca:	2000      	movs	r0, #0
 8002ccc:	f7fd fe6e 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8002cd0:	2077      	movs	r0, #119	; 0x77
 8002cd2:	f7fd fe6b 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cd6:	2000      	movs	r0, #0
 8002cd8:	f7fd fe68 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002cdc:	2044      	movs	r0, #68	; 0x44
 8002cde:	f7fd fe65 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ce2:	2000      	movs	r0, #0
 8002ce4:	f7fd fe62 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8002ce8:	2056      	movs	r0, #86	; 0x56
 8002cea:	f7fd fe5f 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cee:	2000      	movs	r0, #0
 8002cf0:	f7fd fe5c 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 8002cf4:	2023      	movs	r0, #35	; 0x23
 8002cf6:	f7fd fe59 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cfa:	2000      	movs	r0, #0
 8002cfc:	f7fd fe56 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 8002d00:	2033      	movs	r0, #51	; 0x33
 8002d02:	f7fd fe53 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d06:	2000      	movs	r0, #0
 8002d08:	f7fd fe50 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8002d0c:	2045      	movs	r0, #69	; 0x45
 8002d0e:	f7fd fe4d 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d12:	2000      	movs	r0, #0
 8002d14:	f7fd fe4a 	bl	80009ac <LCD_WR_DATAX>

		LCD_WR_REG(0xE8);
 8002d18:	20e8      	movs	r0, #232	; 0xe8
 8002d1a:	f7fd fe23 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002d1e:	2000      	movs	r0, #0
 8002d20:	f7fd fe44 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d24:	2000      	movs	r0, #0
 8002d26:	f7fd fe41 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002d2a:	2099      	movs	r0, #153	; 0x99
 8002d2c:	f7fd fe3e 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d30:	2000      	movs	r0, #0
 8002d32:	f7fd fe3b 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 8002d36:	2087      	movs	r0, #135	; 0x87
 8002d38:	f7fd fe38 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d3c:	2000      	movs	r0, #0
 8002d3e:	f7fd fe35 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002d42:	2088      	movs	r0, #136	; 0x88
 8002d44:	f7fd fe32 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d48:	2000      	movs	r0, #0
 8002d4a:	f7fd fe2f 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8002d4e:	2077      	movs	r0, #119	; 0x77
 8002d50:	f7fd fe2c 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d54:	2000      	movs	r0, #0
 8002d56:	f7fd fe29 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8002d5a:	2066      	movs	r0, #102	; 0x66
 8002d5c:	f7fd fe26 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d60:	2000      	movs	r0, #0
 8002d62:	f7fd fe23 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002d66:	2088      	movs	r0, #136	; 0x88
 8002d68:	f7fd fe20 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d6c:	2000      	movs	r0, #0
 8002d6e:	f7fd fe1d 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAA);
 8002d72:	20aa      	movs	r0, #170	; 0xaa
 8002d74:	f7fd fe1a 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d78:	2000      	movs	r0, #0
 8002d7a:	f7fd fe17 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8002d7e:	20bb      	movs	r0, #187	; 0xbb
 8002d80:	f7fd fe14 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d84:	2000      	movs	r0, #0
 8002d86:	f7fd fe11 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002d8a:	2099      	movs	r0, #153	; 0x99
 8002d8c:	f7fd fe0e 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d90:	2000      	movs	r0, #0
 8002d92:	f7fd fe0b 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8002d96:	2066      	movs	r0, #102	; 0x66
 8002d98:	f7fd fe08 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d9c:	2000      	movs	r0, #0
 8002d9e:	f7fd fe05 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8002da2:	2055      	movs	r0, #85	; 0x55
 8002da4:	f7fd fe02 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002da8:	2000      	movs	r0, #0
 8002daa:	f7fd fdff 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8002dae:	2055      	movs	r0, #85	; 0x55
 8002db0:	f7fd fdfc 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002db4:	2000      	movs	r0, #0
 8002db6:	f7fd fdf9 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002dba:	2044      	movs	r0, #68	; 0x44
 8002dbc:	f7fd fdf6 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dc0:	2000      	movs	r0, #0
 8002dc2:	f7fd fdf3 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002dc6:	2044      	movs	r0, #68	; 0x44
 8002dc8:	f7fd fdf0 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dcc:	2000      	movs	r0, #0
 8002dce:	f7fd fded 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8002dd2:	2055      	movs	r0, #85	; 0x55
 8002dd4:	f7fd fdea 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dd8:	2000      	movs	r0, #0
 8002dda:	f7fd fde7 	bl	80009ac <LCD_WR_DATAX>

		LCD_WR_REG(0xE9);
 8002dde:	20e9      	movs	r0, #233	; 0xe9
 8002de0:	f7fd fdc0 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 8002de4:	20aa      	movs	r0, #170	; 0xaa
 8002de6:	f7fd fde1 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dea:	2000      	movs	r0, #0
 8002dec:	f7fd fdde 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002df0:	2000      	movs	r0, #0
 8002df2:	f7fd fddb 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002df6:	2000      	movs	r0, #0
 8002df8:	f7fd fdd8 	bl	80009ac <LCD_WR_DATAX>

		LCD_WR_REG(0x00);
 8002dfc:	2000      	movs	r0, #0
 8002dfe:	f7fd fdb1 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 8002e02:	20aa      	movs	r0, #170	; 0xaa
 8002e04:	f7fd fdd2 	bl	80009ac <LCD_WR_DATAX>

		LCD_WR_REG(0xCF);
 8002e08:	20cf      	movs	r0, #207	; 0xcf
 8002e0a:	f7fd fdab 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002e0e:	2000      	movs	r0, #0
 8002e10:	f7fd fdcc 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e14:	2000      	movs	r0, #0
 8002e16:	f7fd fdc9 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e1a:	2000      	movs	r0, #0
 8002e1c:	f7fd fdc6 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e20:	2000      	movs	r0, #0
 8002e22:	f7fd fdc3 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e26:	2000      	movs	r0, #0
 8002e28:	f7fd fdc0 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e2c:	2000      	movs	r0, #0
 8002e2e:	f7fd fdbd 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e32:	2000      	movs	r0, #0
 8002e34:	f7fd fdba 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e38:	2000      	movs	r0, #0
 8002e3a:	f7fd fdb7 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e3e:	2000      	movs	r0, #0
 8002e40:	f7fd fdb4 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e44:	2000      	movs	r0, #0
 8002e46:	f7fd fdb1 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e4a:	2000      	movs	r0, #0
 8002e4c:	f7fd fdae 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e50:	2000      	movs	r0, #0
 8002e52:	f7fd fdab 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e56:	2000      	movs	r0, #0
 8002e58:	f7fd fda8 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e5c:	2000      	movs	r0, #0
 8002e5e:	f7fd fda5 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e62:	2000      	movs	r0, #0
 8002e64:	f7fd fda2 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e68:	2000      	movs	r0, #0
 8002e6a:	f7fd fd9f 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e6e:	2000      	movs	r0, #0
 8002e70:	f7fd fd9c 	bl	80009ac <LCD_WR_DATAX>

		LCD_WR_REG(0xF0);
 8002e74:	20f0      	movs	r0, #240	; 0xf0
 8002e76:	f7fd fd75 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002e7a:	2000      	movs	r0, #0
 8002e7c:	f7fd fd96 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8002e80:	2050      	movs	r0, #80	; 0x50
 8002e82:	f7fd fd93 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e86:	2000      	movs	r0, #0
 8002e88:	f7fd fd90 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e8c:	2000      	movs	r0, #0
 8002e8e:	f7fd fd8d 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e92:	2000      	movs	r0, #0
 8002e94:	f7fd fd8a 	bl	80009ac <LCD_WR_DATAX>

		LCD_WR_REG(0xF3);
 8002e98:	20f3      	movs	r0, #243	; 0xf3
 8002e9a:	f7fd fd63 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002e9e:	2000      	movs	r0, #0
 8002ea0:	f7fd fd84 	bl	80009ac <LCD_WR_DATAX>

		LCD_WR_REG(0xF9);
 8002ea4:	20f9      	movs	r0, #249	; 0xf9
 8002ea6:	f7fd fd5d 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0x06);
 8002eaa:	2006      	movs	r0, #6
 8002eac:	f7fd fd7e 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8002eb0:	2010      	movs	r0, #16
 8002eb2:	f7fd fd7b 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8002eb6:	2029      	movs	r0, #41	; 0x29
 8002eb8:	f7fd fd78 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ebc:	2000      	movs	r0, #0
 8002ebe:	f7fd fd75 	bl	80009ac <LCD_WR_DATAX>

		LCD_WR_REG(0x3A);
 8002ec2:	203a      	movs	r0, #58	; 0x3a
 8002ec4:	f7fd fd4e 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0x55);	//66
 8002ec8:	2055      	movs	r0, #85	; 0x55
 8002eca:	f7fd fd6f 	bl	80009ac <LCD_WR_DATAX>

		LCD_WR_REG(0x11);
 8002ece:	2011      	movs	r0, #17
 8002ed0:	f7fd fd48 	bl	8000964 <LCD_WR_REG>
		HAL_Delay(100);
 8002ed4:	2064      	movs	r0, #100	; 0x64
 8002ed6:	f003 f825 	bl	8005f24 <HAL_Delay>
		LCD_WR_REG(0x29);
 8002eda:	2029      	movs	r0, #41	; 0x29
 8002edc:	f7fd fd42 	bl	8000964 <LCD_WR_REG>
		LCD_WR_REG(0x35);
 8002ee0:	2035      	movs	r0, #53	; 0x35
 8002ee2:	f7fd fd3f 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002ee6:	2000      	movs	r0, #0
 8002ee8:	f7fd fd60 	bl	80009ac <LCD_WR_DATAX>

		LCD_WR_REG(0x51);
 8002eec:	2051      	movs	r0, #81	; 0x51
 8002eee:	f7fd fd39 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0xFF);
 8002ef2:	20ff      	movs	r0, #255	; 0xff
 8002ef4:	f7fd fd5a 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_REG(0x53);
 8002ef8:	2053      	movs	r0, #83	; 0x53
 8002efa:	f7fd fd33 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0x2C);
 8002efe:	202c      	movs	r0, #44	; 0x2c
 8002f00:	f7fd fd54 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_REG(0x55);
 8002f04:	2055      	movs	r0, #85	; 0x55
 8002f06:	f7fd fd2d 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATAX(0x82);
 8002f0a:	2082      	movs	r0, #130	; 0x82
 8002f0c:	f7fd fd4e 	bl	80009ac <LCD_WR_DATAX>
		LCD_WR_REG(0x2c);
 8002f10:	202c      	movs	r0, #44	; 0x2c
 8002f12:	f7fd fd27 	bl	8000964 <LCD_WR_REG>
 8002f16:	f002 bca1 	b.w	800585c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x5510) {
 8002f1a:	4b04      	ldr	r3, [pc, #16]	; (8002f2c <LCD_Init+0x1504>)
 8002f1c:	889b      	ldrh	r3, [r3, #4]
 8002f1e:	f245 5210 	movw	r2, #21776	; 0x5510
 8002f22:	4293      	cmp	r3, r2
 8002f24:	f040 8782 	bne.w	8003e2c <LCD_Init+0x2404>
 8002f28:	e002      	b.n	8002f30 <LCD_Init+0x1508>
 8002f2a:	bf00      	nop
 8002f2c:	20000080 	.word	0x20000080
		LCD_WriteReg(0xF000, 0x55);
 8002f30:	2155      	movs	r1, #85	; 0x55
 8002f32:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8002f36:	f7fd fda1 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 8002f3a:	21aa      	movs	r1, #170	; 0xaa
 8002f3c:	f24f 0001 	movw	r0, #61441	; 0xf001
 8002f40:	f7fd fd9c 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 8002f44:	2152      	movs	r1, #82	; 0x52
 8002f46:	f24f 0002 	movw	r0, #61442	; 0xf002
 8002f4a:	f7fd fd97 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 8002f4e:	2108      	movs	r1, #8
 8002f50:	f24f 0003 	movw	r0, #61443	; 0xf003
 8002f54:	f7fd fd92 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x01);
 8002f58:	2101      	movs	r1, #1
 8002f5a:	f24f 0004 	movw	r0, #61444	; 0xf004
 8002f5e:	f7fd fd8d 	bl	8000a7c <LCD_WriteReg>
		//AVDD Set AVDD 5.2V
		LCD_WriteReg(0xB000, 0x0D);
 8002f62:	210d      	movs	r1, #13
 8002f64:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 8002f68:	f7fd fd88 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xB001, 0x0D);
 8002f6c:	210d      	movs	r1, #13
 8002f6e:	f24b 0001 	movw	r0, #45057	; 0xb001
 8002f72:	f7fd fd83 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xB002, 0x0D);
 8002f76:	210d      	movs	r1, #13
 8002f78:	f24b 0002 	movw	r0, #45058	; 0xb002
 8002f7c:	f7fd fd7e 	bl	8000a7c <LCD_WriteReg>
		//AVDD ratio
		LCD_WriteReg(0xB600, 0x34);
 8002f80:	2134      	movs	r1, #52	; 0x34
 8002f82:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8002f86:	f7fd fd79 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xB601, 0x34);
 8002f8a:	2134      	movs	r1, #52	; 0x34
 8002f8c:	f24b 6001 	movw	r0, #46593	; 0xb601
 8002f90:	f7fd fd74 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xB602, 0x34);
 8002f94:	2134      	movs	r1, #52	; 0x34
 8002f96:	f24b 6002 	movw	r0, #46594	; 0xb602
 8002f9a:	f7fd fd6f 	bl	8000a7c <LCD_WriteReg>
		//AVEE -5.2V
		LCD_WriteReg(0xB100, 0x0D);
 8002f9e:	210d      	movs	r1, #13
 8002fa0:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8002fa4:	f7fd fd6a 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x0D);
 8002fa8:	210d      	movs	r1, #13
 8002faa:	f24b 1001 	movw	r0, #45313	; 0xb101
 8002fae:	f7fd fd65 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xB102, 0x0D);
 8002fb2:	210d      	movs	r1, #13
 8002fb4:	f24b 1002 	movw	r0, #45314	; 0xb102
 8002fb8:	f7fd fd60 	bl	8000a7c <LCD_WriteReg>
		//AVEE ratio
		LCD_WriteReg(0xB700, 0x34);
 8002fbc:	2134      	movs	r1, #52	; 0x34
 8002fbe:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8002fc2:	f7fd fd5b 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x34);
 8002fc6:	2134      	movs	r1, #52	; 0x34
 8002fc8:	f24b 7001 	movw	r0, #46849	; 0xb701
 8002fcc:	f7fd fd56 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xB702, 0x34);
 8002fd0:	2134      	movs	r1, #52	; 0x34
 8002fd2:	f24b 7002 	movw	r0, #46850	; 0xb702
 8002fd6:	f7fd fd51 	bl	8000a7c <LCD_WriteReg>
		//VCL -2.5V
		LCD_WriteReg(0xB200, 0x00);
 8002fda:	2100      	movs	r1, #0
 8002fdc:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 8002fe0:	f7fd fd4c 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xB201, 0x00);
 8002fe4:	2100      	movs	r1, #0
 8002fe6:	f24b 2001 	movw	r0, #45569	; 0xb201
 8002fea:	f7fd fd47 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xB202, 0x00);
 8002fee:	2100      	movs	r1, #0
 8002ff0:	f24b 2002 	movw	r0, #45570	; 0xb202
 8002ff4:	f7fd fd42 	bl	8000a7c <LCD_WriteReg>
		//VCL ratio
		LCD_WriteReg(0xB800, 0x24);
 8002ff8:	2124      	movs	r1, #36	; 0x24
 8002ffa:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8002ffe:	f7fd fd3d 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x24);
 8003002:	2124      	movs	r1, #36	; 0x24
 8003004:	f64b 0001 	movw	r0, #47105	; 0xb801
 8003008:	f7fd fd38 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x24);
 800300c:	2124      	movs	r1, #36	; 0x24
 800300e:	f64b 0002 	movw	r0, #47106	; 0xb802
 8003012:	f7fd fd33 	bl	8000a7c <LCD_WriteReg>
		//VGH 15V (Free pump)
		LCD_WriteReg(0xBF00, 0x01);
 8003016:	2101      	movs	r1, #1
 8003018:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 800301c:	f7fd fd2e 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xB300, 0x0F);
 8003020:	210f      	movs	r1, #15
 8003022:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 8003026:	f7fd fd29 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xB301, 0x0F);
 800302a:	210f      	movs	r1, #15
 800302c:	f24b 3001 	movw	r0, #45825	; 0xb301
 8003030:	f7fd fd24 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xB302, 0x0F);
 8003034:	210f      	movs	r1, #15
 8003036:	f24b 3002 	movw	r0, #45826	; 0xb302
 800303a:	f7fd fd1f 	bl	8000a7c <LCD_WriteReg>
		//VGH ratio
		LCD_WriteReg(0xB900, 0x34);
 800303e:	2134      	movs	r1, #52	; 0x34
 8003040:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 8003044:	f7fd fd1a 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xB901, 0x34);
 8003048:	2134      	movs	r1, #52	; 0x34
 800304a:	f64b 1001 	movw	r0, #47361	; 0xb901
 800304e:	f7fd fd15 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xB902, 0x34);
 8003052:	2134      	movs	r1, #52	; 0x34
 8003054:	f64b 1002 	movw	r0, #47362	; 0xb902
 8003058:	f7fd fd10 	bl	8000a7c <LCD_WriteReg>
		//VGL_REG -10V
		LCD_WriteReg(0xB500, 0x08);
 800305c:	2108      	movs	r1, #8
 800305e:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 8003062:	f7fd fd0b 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xB501, 0x08);
 8003066:	2108      	movs	r1, #8
 8003068:	f24b 5001 	movw	r0, #46337	; 0xb501
 800306c:	f7fd fd06 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xB502, 0x08);
 8003070:	2108      	movs	r1, #8
 8003072:	f24b 5002 	movw	r0, #46338	; 0xb502
 8003076:	f7fd fd01 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xC200, 0x03);
 800307a:	2103      	movs	r1, #3
 800307c:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 8003080:	f7fd fcfc 	bl	8000a7c <LCD_WriteReg>
		//VGLX ratio
		LCD_WriteReg(0xBA00, 0x24);
 8003084:	2124      	movs	r1, #36	; 0x24
 8003086:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 800308a:	f7fd fcf7 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xBA01, 0x24);
 800308e:	2124      	movs	r1, #36	; 0x24
 8003090:	f64b 2001 	movw	r0, #47617	; 0xba01
 8003094:	f7fd fcf2 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xBA02, 0x24);
 8003098:	2124      	movs	r1, #36	; 0x24
 800309a:	f64b 2002 	movw	r0, #47618	; 0xba02
 800309e:	f7fd fced 	bl	8000a7c <LCD_WriteReg>
		//VGMP/VGSP 4.5V/0V
		LCD_WriteReg(0xBC00, 0x00);
 80030a2:	2100      	movs	r1, #0
 80030a4:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 80030a8:	f7fd fce8 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x78);
 80030ac:	2178      	movs	r1, #120	; 0x78
 80030ae:	f64b 4001 	movw	r0, #48129	; 0xbc01
 80030b2:	f7fd fce3 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 80030b6:	2100      	movs	r1, #0
 80030b8:	f64b 4002 	movw	r0, #48130	; 0xbc02
 80030bc:	f7fd fcde 	bl	8000a7c <LCD_WriteReg>
		//VGMN/VGSN -4.5V/0V
		LCD_WriteReg(0xBD00, 0x00);
 80030c0:	2100      	movs	r1, #0
 80030c2:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 80030c6:	f7fd fcd9 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xBD01, 0x78);
 80030ca:	2178      	movs	r1, #120	; 0x78
 80030cc:	f64b 5001 	movw	r0, #48385	; 0xbd01
 80030d0:	f7fd fcd4 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xBD02, 0x00);
 80030d4:	2100      	movs	r1, #0
 80030d6:	f64b 5002 	movw	r0, #48386	; 0xbd02
 80030da:	f7fd fccf 	bl	8000a7c <LCD_WriteReg>
		//VCOM
		LCD_WriteReg(0xBE00, 0x00);
 80030de:	2100      	movs	r1, #0
 80030e0:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 80030e4:	f7fd fcca 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xBE01, 0x64);
 80030e8:	2164      	movs	r1, #100	; 0x64
 80030ea:	f64b 6001 	movw	r0, #48641	; 0xbe01
 80030ee:	f7fd fcc5 	bl	8000a7c <LCD_WriteReg>
		//Gamma Setting
		LCD_WriteReg(0xD100, 0x00);
 80030f2:	2100      	movs	r1, #0
 80030f4:	f44f 4051 	mov.w	r0, #53504	; 0xd100
 80030f8:	f7fd fcc0 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD101, 0x33);
 80030fc:	2133      	movs	r1, #51	; 0x33
 80030fe:	f24d 1001 	movw	r0, #53505	; 0xd101
 8003102:	f7fd fcbb 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD102, 0x00);
 8003106:	2100      	movs	r1, #0
 8003108:	f24d 1002 	movw	r0, #53506	; 0xd102
 800310c:	f7fd fcb6 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD103, 0x34);
 8003110:	2134      	movs	r1, #52	; 0x34
 8003112:	f24d 1003 	movw	r0, #53507	; 0xd103
 8003116:	f7fd fcb1 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD104, 0x00);
 800311a:	2100      	movs	r1, #0
 800311c:	f24d 1004 	movw	r0, #53508	; 0xd104
 8003120:	f7fd fcac 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD105, 0x3A);
 8003124:	213a      	movs	r1, #58	; 0x3a
 8003126:	f24d 1005 	movw	r0, #53509	; 0xd105
 800312a:	f7fd fca7 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD106, 0x00);
 800312e:	2100      	movs	r1, #0
 8003130:	f24d 1006 	movw	r0, #53510	; 0xd106
 8003134:	f7fd fca2 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD107, 0x4A);
 8003138:	214a      	movs	r1, #74	; 0x4a
 800313a:	f24d 1007 	movw	r0, #53511	; 0xd107
 800313e:	f7fd fc9d 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD108, 0x00);
 8003142:	2100      	movs	r1, #0
 8003144:	f24d 1008 	movw	r0, #53512	; 0xd108
 8003148:	f7fd fc98 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD109, 0x5C);
 800314c:	215c      	movs	r1, #92	; 0x5c
 800314e:	f24d 1009 	movw	r0, #53513	; 0xd109
 8003152:	f7fd fc93 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD10A, 0x00);
 8003156:	2100      	movs	r1, #0
 8003158:	f24d 100a 	movw	r0, #53514	; 0xd10a
 800315c:	f7fd fc8e 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD10B, 0x81);
 8003160:	2181      	movs	r1, #129	; 0x81
 8003162:	f24d 100b 	movw	r0, #53515	; 0xd10b
 8003166:	f7fd fc89 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD10C, 0x00);
 800316a:	2100      	movs	r1, #0
 800316c:	f24d 100c 	movw	r0, #53516	; 0xd10c
 8003170:	f7fd fc84 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD10D, 0xA6);
 8003174:	21a6      	movs	r1, #166	; 0xa6
 8003176:	f24d 100d 	movw	r0, #53517	; 0xd10d
 800317a:	f7fd fc7f 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD10E, 0x00);
 800317e:	2100      	movs	r1, #0
 8003180:	f24d 100e 	movw	r0, #53518	; 0xd10e
 8003184:	f7fd fc7a 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD10F, 0xE5);
 8003188:	21e5      	movs	r1, #229	; 0xe5
 800318a:	f24d 100f 	movw	r0, #53519	; 0xd10f
 800318e:	f7fd fc75 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD110, 0x01);
 8003192:	2101      	movs	r1, #1
 8003194:	f24d 1010 	movw	r0, #53520	; 0xd110
 8003198:	f7fd fc70 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD111, 0x13);
 800319c:	2113      	movs	r1, #19
 800319e:	f24d 1011 	movw	r0, #53521	; 0xd111
 80031a2:	f7fd fc6b 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD112, 0x01);
 80031a6:	2101      	movs	r1, #1
 80031a8:	f24d 1012 	movw	r0, #53522	; 0xd112
 80031ac:	f7fd fc66 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD113, 0x54);
 80031b0:	2154      	movs	r1, #84	; 0x54
 80031b2:	f24d 1013 	movw	r0, #53523	; 0xd113
 80031b6:	f7fd fc61 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD114, 0x01);
 80031ba:	2101      	movs	r1, #1
 80031bc:	f24d 1014 	movw	r0, #53524	; 0xd114
 80031c0:	f7fd fc5c 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD115, 0x82);
 80031c4:	2182      	movs	r1, #130	; 0x82
 80031c6:	f24d 1015 	movw	r0, #53525	; 0xd115
 80031ca:	f7fd fc57 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD116, 0x01);
 80031ce:	2101      	movs	r1, #1
 80031d0:	f24d 1016 	movw	r0, #53526	; 0xd116
 80031d4:	f7fd fc52 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD117, 0xCA);
 80031d8:	21ca      	movs	r1, #202	; 0xca
 80031da:	f24d 1017 	movw	r0, #53527	; 0xd117
 80031de:	f7fd fc4d 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD118, 0x02);
 80031e2:	2102      	movs	r1, #2
 80031e4:	f24d 1018 	movw	r0, #53528	; 0xd118
 80031e8:	f7fd fc48 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD119, 0x00);
 80031ec:	2100      	movs	r1, #0
 80031ee:	f24d 1019 	movw	r0, #53529	; 0xd119
 80031f2:	f7fd fc43 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD11A, 0x02);
 80031f6:	2102      	movs	r1, #2
 80031f8:	f24d 101a 	movw	r0, #53530	; 0xd11a
 80031fc:	f7fd fc3e 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD11B, 0x01);
 8003200:	2101      	movs	r1, #1
 8003202:	f24d 101b 	movw	r0, #53531	; 0xd11b
 8003206:	f7fd fc39 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD11C, 0x02);
 800320a:	2102      	movs	r1, #2
 800320c:	f24d 101c 	movw	r0, #53532	; 0xd11c
 8003210:	f7fd fc34 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD11D, 0x34);
 8003214:	2134      	movs	r1, #52	; 0x34
 8003216:	f24d 101d 	movw	r0, #53533	; 0xd11d
 800321a:	f7fd fc2f 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD11E, 0x02);
 800321e:	2102      	movs	r1, #2
 8003220:	f24d 101e 	movw	r0, #53534	; 0xd11e
 8003224:	f7fd fc2a 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD11F, 0x67);
 8003228:	2167      	movs	r1, #103	; 0x67
 800322a:	f24d 101f 	movw	r0, #53535	; 0xd11f
 800322e:	f7fd fc25 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD120, 0x02);
 8003232:	2102      	movs	r1, #2
 8003234:	f24d 1020 	movw	r0, #53536	; 0xd120
 8003238:	f7fd fc20 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD121, 0x84);
 800323c:	2184      	movs	r1, #132	; 0x84
 800323e:	f24d 1021 	movw	r0, #53537	; 0xd121
 8003242:	f7fd fc1b 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD122, 0x02);
 8003246:	2102      	movs	r1, #2
 8003248:	f24d 1022 	movw	r0, #53538	; 0xd122
 800324c:	f7fd fc16 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD123, 0xA4);
 8003250:	21a4      	movs	r1, #164	; 0xa4
 8003252:	f24d 1023 	movw	r0, #53539	; 0xd123
 8003256:	f7fd fc11 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD124, 0x02);
 800325a:	2102      	movs	r1, #2
 800325c:	f24d 1024 	movw	r0, #53540	; 0xd124
 8003260:	f7fd fc0c 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD125, 0xB7);
 8003264:	21b7      	movs	r1, #183	; 0xb7
 8003266:	f24d 1025 	movw	r0, #53541	; 0xd125
 800326a:	f7fd fc07 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD126, 0x02);
 800326e:	2102      	movs	r1, #2
 8003270:	f24d 1026 	movw	r0, #53542	; 0xd126
 8003274:	f7fd fc02 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD127, 0xCF);
 8003278:	21cf      	movs	r1, #207	; 0xcf
 800327a:	f24d 1027 	movw	r0, #53543	; 0xd127
 800327e:	f7fd fbfd 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD128, 0x02);
 8003282:	2102      	movs	r1, #2
 8003284:	f24d 1028 	movw	r0, #53544	; 0xd128
 8003288:	f7fd fbf8 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD129, 0xDE);
 800328c:	21de      	movs	r1, #222	; 0xde
 800328e:	f24d 1029 	movw	r0, #53545	; 0xd129
 8003292:	f7fd fbf3 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD12A, 0x02);
 8003296:	2102      	movs	r1, #2
 8003298:	f24d 102a 	movw	r0, #53546	; 0xd12a
 800329c:	f7fd fbee 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD12B, 0xF2);
 80032a0:	21f2      	movs	r1, #242	; 0xf2
 80032a2:	f24d 102b 	movw	r0, #53547	; 0xd12b
 80032a6:	f7fd fbe9 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD12C, 0x02);
 80032aa:	2102      	movs	r1, #2
 80032ac:	f24d 102c 	movw	r0, #53548	; 0xd12c
 80032b0:	f7fd fbe4 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD12D, 0xFE);
 80032b4:	21fe      	movs	r1, #254	; 0xfe
 80032b6:	f24d 102d 	movw	r0, #53549	; 0xd12d
 80032ba:	f7fd fbdf 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD12E, 0x03);
 80032be:	2103      	movs	r1, #3
 80032c0:	f24d 102e 	movw	r0, #53550	; 0xd12e
 80032c4:	f7fd fbda 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD12F, 0x10);
 80032c8:	2110      	movs	r1, #16
 80032ca:	f24d 102f 	movw	r0, #53551	; 0xd12f
 80032ce:	f7fd fbd5 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD130, 0x03);
 80032d2:	2103      	movs	r1, #3
 80032d4:	f24d 1030 	movw	r0, #53552	; 0xd130
 80032d8:	f7fd fbd0 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD131, 0x33);
 80032dc:	2133      	movs	r1, #51	; 0x33
 80032de:	f24d 1031 	movw	r0, #53553	; 0xd131
 80032e2:	f7fd fbcb 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD132, 0x03);
 80032e6:	2103      	movs	r1, #3
 80032e8:	f24d 1032 	movw	r0, #53554	; 0xd132
 80032ec:	f7fd fbc6 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD133, 0x6D);
 80032f0:	216d      	movs	r1, #109	; 0x6d
 80032f2:	f24d 1033 	movw	r0, #53555	; 0xd133
 80032f6:	f7fd fbc1 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD200, 0x00);
 80032fa:	2100      	movs	r1, #0
 80032fc:	f44f 4052 	mov.w	r0, #53760	; 0xd200
 8003300:	f7fd fbbc 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD201, 0x33);
 8003304:	2133      	movs	r1, #51	; 0x33
 8003306:	f24d 2001 	movw	r0, #53761	; 0xd201
 800330a:	f7fd fbb7 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD202, 0x00);
 800330e:	2100      	movs	r1, #0
 8003310:	f24d 2002 	movw	r0, #53762	; 0xd202
 8003314:	f7fd fbb2 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD203, 0x34);
 8003318:	2134      	movs	r1, #52	; 0x34
 800331a:	f24d 2003 	movw	r0, #53763	; 0xd203
 800331e:	f7fd fbad 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD204, 0x00);
 8003322:	2100      	movs	r1, #0
 8003324:	f24d 2004 	movw	r0, #53764	; 0xd204
 8003328:	f7fd fba8 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD205, 0x3A);
 800332c:	213a      	movs	r1, #58	; 0x3a
 800332e:	f24d 2005 	movw	r0, #53765	; 0xd205
 8003332:	f7fd fba3 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD206, 0x00);
 8003336:	2100      	movs	r1, #0
 8003338:	f24d 2006 	movw	r0, #53766	; 0xd206
 800333c:	f7fd fb9e 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD207, 0x4A);
 8003340:	214a      	movs	r1, #74	; 0x4a
 8003342:	f24d 2007 	movw	r0, #53767	; 0xd207
 8003346:	f7fd fb99 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD208, 0x00);
 800334a:	2100      	movs	r1, #0
 800334c:	f24d 2008 	movw	r0, #53768	; 0xd208
 8003350:	f7fd fb94 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD209, 0x5C);
 8003354:	215c      	movs	r1, #92	; 0x5c
 8003356:	f24d 2009 	movw	r0, #53769	; 0xd209
 800335a:	f7fd fb8f 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD20A, 0x00);
 800335e:	2100      	movs	r1, #0
 8003360:	f24d 200a 	movw	r0, #53770	; 0xd20a
 8003364:	f7fd fb8a 	bl	8000a7c <LCD_WriteReg>

		LCD_WriteReg(0xD20B, 0x81);
 8003368:	2181      	movs	r1, #129	; 0x81
 800336a:	f24d 200b 	movw	r0, #53771	; 0xd20b
 800336e:	f7fd fb85 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD20C, 0x00);
 8003372:	2100      	movs	r1, #0
 8003374:	f24d 200c 	movw	r0, #53772	; 0xd20c
 8003378:	f7fd fb80 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD20D, 0xA6);
 800337c:	21a6      	movs	r1, #166	; 0xa6
 800337e:	f24d 200d 	movw	r0, #53773	; 0xd20d
 8003382:	f7fd fb7b 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD20E, 0x00);
 8003386:	2100      	movs	r1, #0
 8003388:	f24d 200e 	movw	r0, #53774	; 0xd20e
 800338c:	f7fd fb76 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD20F, 0xE5);
 8003390:	21e5      	movs	r1, #229	; 0xe5
 8003392:	f24d 200f 	movw	r0, #53775	; 0xd20f
 8003396:	f7fd fb71 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD210, 0x01);
 800339a:	2101      	movs	r1, #1
 800339c:	f24d 2010 	movw	r0, #53776	; 0xd210
 80033a0:	f7fd fb6c 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD211, 0x13);
 80033a4:	2113      	movs	r1, #19
 80033a6:	f24d 2011 	movw	r0, #53777	; 0xd211
 80033aa:	f7fd fb67 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD212, 0x01);
 80033ae:	2101      	movs	r1, #1
 80033b0:	f24d 2012 	movw	r0, #53778	; 0xd212
 80033b4:	f7fd fb62 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD213, 0x54);
 80033b8:	2154      	movs	r1, #84	; 0x54
 80033ba:	f24d 2013 	movw	r0, #53779	; 0xd213
 80033be:	f7fd fb5d 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD214, 0x01);
 80033c2:	2101      	movs	r1, #1
 80033c4:	f24d 2014 	movw	r0, #53780	; 0xd214
 80033c8:	f7fd fb58 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD215, 0x82);
 80033cc:	2182      	movs	r1, #130	; 0x82
 80033ce:	f24d 2015 	movw	r0, #53781	; 0xd215
 80033d2:	f7fd fb53 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD216, 0x01);
 80033d6:	2101      	movs	r1, #1
 80033d8:	f24d 2016 	movw	r0, #53782	; 0xd216
 80033dc:	f7fd fb4e 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD217, 0xCA);
 80033e0:	21ca      	movs	r1, #202	; 0xca
 80033e2:	f24d 2017 	movw	r0, #53783	; 0xd217
 80033e6:	f7fd fb49 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD218, 0x02);
 80033ea:	2102      	movs	r1, #2
 80033ec:	f24d 2018 	movw	r0, #53784	; 0xd218
 80033f0:	f7fd fb44 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD219, 0x00);
 80033f4:	2100      	movs	r1, #0
 80033f6:	f24d 2019 	movw	r0, #53785	; 0xd219
 80033fa:	f7fd fb3f 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD21A, 0x02);
 80033fe:	2102      	movs	r1, #2
 8003400:	f24d 201a 	movw	r0, #53786	; 0xd21a
 8003404:	f7fd fb3a 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD21B, 0x01);
 8003408:	2101      	movs	r1, #1
 800340a:	f24d 201b 	movw	r0, #53787	; 0xd21b
 800340e:	f7fd fb35 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD21C, 0x02);
 8003412:	2102      	movs	r1, #2
 8003414:	f24d 201c 	movw	r0, #53788	; 0xd21c
 8003418:	f7fd fb30 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD21D, 0x34);
 800341c:	2134      	movs	r1, #52	; 0x34
 800341e:	f24d 201d 	movw	r0, #53789	; 0xd21d
 8003422:	f7fd fb2b 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD21E, 0x02);
 8003426:	2102      	movs	r1, #2
 8003428:	f24d 201e 	movw	r0, #53790	; 0xd21e
 800342c:	f7fd fb26 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD21F, 0x67);
 8003430:	2167      	movs	r1, #103	; 0x67
 8003432:	f24d 201f 	movw	r0, #53791	; 0xd21f
 8003436:	f7fd fb21 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD220, 0x02);
 800343a:	2102      	movs	r1, #2
 800343c:	f24d 2020 	movw	r0, #53792	; 0xd220
 8003440:	f7fd fb1c 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD221, 0x84);
 8003444:	2184      	movs	r1, #132	; 0x84
 8003446:	f24d 2021 	movw	r0, #53793	; 0xd221
 800344a:	f7fd fb17 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD222, 0x02);
 800344e:	2102      	movs	r1, #2
 8003450:	f24d 2022 	movw	r0, #53794	; 0xd222
 8003454:	f7fd fb12 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD223, 0xA4);
 8003458:	21a4      	movs	r1, #164	; 0xa4
 800345a:	f24d 2023 	movw	r0, #53795	; 0xd223
 800345e:	f7fd fb0d 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD224, 0x02);
 8003462:	2102      	movs	r1, #2
 8003464:	f24d 2024 	movw	r0, #53796	; 0xd224
 8003468:	f7fd fb08 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD225, 0xB7);
 800346c:	21b7      	movs	r1, #183	; 0xb7
 800346e:	f24d 2025 	movw	r0, #53797	; 0xd225
 8003472:	f7fd fb03 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD226, 0x02);
 8003476:	2102      	movs	r1, #2
 8003478:	f24d 2026 	movw	r0, #53798	; 0xd226
 800347c:	f7fd fafe 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD227, 0xCF);
 8003480:	21cf      	movs	r1, #207	; 0xcf
 8003482:	f24d 2027 	movw	r0, #53799	; 0xd227
 8003486:	f7fd faf9 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD228, 0x02);
 800348a:	2102      	movs	r1, #2
 800348c:	f24d 2028 	movw	r0, #53800	; 0xd228
 8003490:	f7fd faf4 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD229, 0xDE);
 8003494:	21de      	movs	r1, #222	; 0xde
 8003496:	f24d 2029 	movw	r0, #53801	; 0xd229
 800349a:	f7fd faef 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD22A, 0x02);
 800349e:	2102      	movs	r1, #2
 80034a0:	f24d 202a 	movw	r0, #53802	; 0xd22a
 80034a4:	f7fd faea 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD22B, 0xF2);
 80034a8:	21f2      	movs	r1, #242	; 0xf2
 80034aa:	f24d 202b 	movw	r0, #53803	; 0xd22b
 80034ae:	f7fd fae5 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD22C, 0x02);
 80034b2:	2102      	movs	r1, #2
 80034b4:	f24d 202c 	movw	r0, #53804	; 0xd22c
 80034b8:	f7fd fae0 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD22D, 0xFE);
 80034bc:	21fe      	movs	r1, #254	; 0xfe
 80034be:	f24d 202d 	movw	r0, #53805	; 0xd22d
 80034c2:	f7fd fadb 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD22E, 0x03);
 80034c6:	2103      	movs	r1, #3
 80034c8:	f24d 202e 	movw	r0, #53806	; 0xd22e
 80034cc:	f7fd fad6 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD22F, 0x10);
 80034d0:	2110      	movs	r1, #16
 80034d2:	f24d 202f 	movw	r0, #53807	; 0xd22f
 80034d6:	f7fd fad1 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD230, 0x03);
 80034da:	2103      	movs	r1, #3
 80034dc:	f24d 2030 	movw	r0, #53808	; 0xd230
 80034e0:	f7fd facc 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD231, 0x33);
 80034e4:	2133      	movs	r1, #51	; 0x33
 80034e6:	f24d 2031 	movw	r0, #53809	; 0xd231
 80034ea:	f7fd fac7 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD232, 0x03);
 80034ee:	2103      	movs	r1, #3
 80034f0:	f24d 2032 	movw	r0, #53810	; 0xd232
 80034f4:	f7fd fac2 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD233, 0x6D);
 80034f8:	216d      	movs	r1, #109	; 0x6d
 80034fa:	f24d 2033 	movw	r0, #53811	; 0xd233
 80034fe:	f7fd fabd 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD300, 0x00);
 8003502:	2100      	movs	r1, #0
 8003504:	f44f 4053 	mov.w	r0, #54016	; 0xd300
 8003508:	f7fd fab8 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD301, 0x33);
 800350c:	2133      	movs	r1, #51	; 0x33
 800350e:	f24d 3001 	movw	r0, #54017	; 0xd301
 8003512:	f7fd fab3 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD302, 0x00);
 8003516:	2100      	movs	r1, #0
 8003518:	f24d 3002 	movw	r0, #54018	; 0xd302
 800351c:	f7fd faae 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD303, 0x34);
 8003520:	2134      	movs	r1, #52	; 0x34
 8003522:	f24d 3003 	movw	r0, #54019	; 0xd303
 8003526:	f7fd faa9 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD304, 0x00);
 800352a:	2100      	movs	r1, #0
 800352c:	f24d 3004 	movw	r0, #54020	; 0xd304
 8003530:	f7fd faa4 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD305, 0x3A);
 8003534:	213a      	movs	r1, #58	; 0x3a
 8003536:	f24d 3005 	movw	r0, #54021	; 0xd305
 800353a:	f7fd fa9f 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD306, 0x00);
 800353e:	2100      	movs	r1, #0
 8003540:	f24d 3006 	movw	r0, #54022	; 0xd306
 8003544:	f7fd fa9a 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD307, 0x4A);
 8003548:	214a      	movs	r1, #74	; 0x4a
 800354a:	f24d 3007 	movw	r0, #54023	; 0xd307
 800354e:	f7fd fa95 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD308, 0x00);
 8003552:	2100      	movs	r1, #0
 8003554:	f24d 3008 	movw	r0, #54024	; 0xd308
 8003558:	f7fd fa90 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD309, 0x5C);
 800355c:	215c      	movs	r1, #92	; 0x5c
 800355e:	f24d 3009 	movw	r0, #54025	; 0xd309
 8003562:	f7fd fa8b 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD30A, 0x00);
 8003566:	2100      	movs	r1, #0
 8003568:	f24d 300a 	movw	r0, #54026	; 0xd30a
 800356c:	f7fd fa86 	bl	8000a7c <LCD_WriteReg>

		LCD_WriteReg(0xD30B, 0x81);
 8003570:	2181      	movs	r1, #129	; 0x81
 8003572:	f24d 300b 	movw	r0, #54027	; 0xd30b
 8003576:	f7fd fa81 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD30C, 0x00);
 800357a:	2100      	movs	r1, #0
 800357c:	f24d 300c 	movw	r0, #54028	; 0xd30c
 8003580:	f7fd fa7c 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD30D, 0xA6);
 8003584:	21a6      	movs	r1, #166	; 0xa6
 8003586:	f24d 300d 	movw	r0, #54029	; 0xd30d
 800358a:	f7fd fa77 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD30E, 0x00);
 800358e:	2100      	movs	r1, #0
 8003590:	f24d 300e 	movw	r0, #54030	; 0xd30e
 8003594:	f7fd fa72 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD30F, 0xE5);
 8003598:	21e5      	movs	r1, #229	; 0xe5
 800359a:	f24d 300f 	movw	r0, #54031	; 0xd30f
 800359e:	f7fd fa6d 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD310, 0x01);
 80035a2:	2101      	movs	r1, #1
 80035a4:	f24d 3010 	movw	r0, #54032	; 0xd310
 80035a8:	f7fd fa68 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD311, 0x13);
 80035ac:	2113      	movs	r1, #19
 80035ae:	f24d 3011 	movw	r0, #54033	; 0xd311
 80035b2:	f7fd fa63 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD312, 0x01);
 80035b6:	2101      	movs	r1, #1
 80035b8:	f24d 3012 	movw	r0, #54034	; 0xd312
 80035bc:	f7fd fa5e 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD313, 0x54);
 80035c0:	2154      	movs	r1, #84	; 0x54
 80035c2:	f24d 3013 	movw	r0, #54035	; 0xd313
 80035c6:	f7fd fa59 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD314, 0x01);
 80035ca:	2101      	movs	r1, #1
 80035cc:	f24d 3014 	movw	r0, #54036	; 0xd314
 80035d0:	f7fd fa54 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD315, 0x82);
 80035d4:	2182      	movs	r1, #130	; 0x82
 80035d6:	f24d 3015 	movw	r0, #54037	; 0xd315
 80035da:	f7fd fa4f 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD316, 0x01);
 80035de:	2101      	movs	r1, #1
 80035e0:	f24d 3016 	movw	r0, #54038	; 0xd316
 80035e4:	f7fd fa4a 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD317, 0xCA);
 80035e8:	21ca      	movs	r1, #202	; 0xca
 80035ea:	f24d 3017 	movw	r0, #54039	; 0xd317
 80035ee:	f7fd fa45 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD318, 0x02);
 80035f2:	2102      	movs	r1, #2
 80035f4:	f24d 3018 	movw	r0, #54040	; 0xd318
 80035f8:	f7fd fa40 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD319, 0x00);
 80035fc:	2100      	movs	r1, #0
 80035fe:	f24d 3019 	movw	r0, #54041	; 0xd319
 8003602:	f7fd fa3b 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD31A, 0x02);
 8003606:	2102      	movs	r1, #2
 8003608:	f24d 301a 	movw	r0, #54042	; 0xd31a
 800360c:	f7fd fa36 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD31B, 0x01);
 8003610:	2101      	movs	r1, #1
 8003612:	f24d 301b 	movw	r0, #54043	; 0xd31b
 8003616:	f7fd fa31 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD31C, 0x02);
 800361a:	2102      	movs	r1, #2
 800361c:	f24d 301c 	movw	r0, #54044	; 0xd31c
 8003620:	f7fd fa2c 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD31D, 0x34);
 8003624:	2134      	movs	r1, #52	; 0x34
 8003626:	f24d 301d 	movw	r0, #54045	; 0xd31d
 800362a:	f7fd fa27 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD31E, 0x02);
 800362e:	2102      	movs	r1, #2
 8003630:	f24d 301e 	movw	r0, #54046	; 0xd31e
 8003634:	f7fd fa22 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD31F, 0x67);
 8003638:	2167      	movs	r1, #103	; 0x67
 800363a:	f24d 301f 	movw	r0, #54047	; 0xd31f
 800363e:	f7fd fa1d 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD320, 0x02);
 8003642:	2102      	movs	r1, #2
 8003644:	f24d 3020 	movw	r0, #54048	; 0xd320
 8003648:	f7fd fa18 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD321, 0x84);
 800364c:	2184      	movs	r1, #132	; 0x84
 800364e:	f24d 3021 	movw	r0, #54049	; 0xd321
 8003652:	f7fd fa13 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD322, 0x02);
 8003656:	2102      	movs	r1, #2
 8003658:	f24d 3022 	movw	r0, #54050	; 0xd322
 800365c:	f7fd fa0e 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD323, 0xA4);
 8003660:	21a4      	movs	r1, #164	; 0xa4
 8003662:	f24d 3023 	movw	r0, #54051	; 0xd323
 8003666:	f7fd fa09 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD324, 0x02);
 800366a:	2102      	movs	r1, #2
 800366c:	f24d 3024 	movw	r0, #54052	; 0xd324
 8003670:	f7fd fa04 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD325, 0xB7);
 8003674:	21b7      	movs	r1, #183	; 0xb7
 8003676:	f24d 3025 	movw	r0, #54053	; 0xd325
 800367a:	f7fd f9ff 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD326, 0x02);
 800367e:	2102      	movs	r1, #2
 8003680:	f24d 3026 	movw	r0, #54054	; 0xd326
 8003684:	f7fd f9fa 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD327, 0xCF);
 8003688:	21cf      	movs	r1, #207	; 0xcf
 800368a:	f24d 3027 	movw	r0, #54055	; 0xd327
 800368e:	f7fd f9f5 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD328, 0x02);
 8003692:	2102      	movs	r1, #2
 8003694:	f24d 3028 	movw	r0, #54056	; 0xd328
 8003698:	f7fd f9f0 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD329, 0xDE);
 800369c:	21de      	movs	r1, #222	; 0xde
 800369e:	f24d 3029 	movw	r0, #54057	; 0xd329
 80036a2:	f7fd f9eb 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD32A, 0x02);
 80036a6:	2102      	movs	r1, #2
 80036a8:	f24d 302a 	movw	r0, #54058	; 0xd32a
 80036ac:	f7fd f9e6 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD32B, 0xF2);
 80036b0:	21f2      	movs	r1, #242	; 0xf2
 80036b2:	f24d 302b 	movw	r0, #54059	; 0xd32b
 80036b6:	f7fd f9e1 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD32C, 0x02);
 80036ba:	2102      	movs	r1, #2
 80036bc:	f24d 302c 	movw	r0, #54060	; 0xd32c
 80036c0:	f7fd f9dc 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD32D, 0xFE);
 80036c4:	21fe      	movs	r1, #254	; 0xfe
 80036c6:	f24d 302d 	movw	r0, #54061	; 0xd32d
 80036ca:	f7fd f9d7 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD32E, 0x03);
 80036ce:	2103      	movs	r1, #3
 80036d0:	f24d 302e 	movw	r0, #54062	; 0xd32e
 80036d4:	f7fd f9d2 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD32F, 0x10);
 80036d8:	2110      	movs	r1, #16
 80036da:	f24d 302f 	movw	r0, #54063	; 0xd32f
 80036de:	f7fd f9cd 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD330, 0x03);
 80036e2:	2103      	movs	r1, #3
 80036e4:	f24d 3030 	movw	r0, #54064	; 0xd330
 80036e8:	f7fd f9c8 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD331, 0x33);
 80036ec:	2133      	movs	r1, #51	; 0x33
 80036ee:	f24d 3031 	movw	r0, #54065	; 0xd331
 80036f2:	f7fd f9c3 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD332, 0x03);
 80036f6:	2103      	movs	r1, #3
 80036f8:	f24d 3032 	movw	r0, #54066	; 0xd332
 80036fc:	f7fd f9be 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD333, 0x6D);
 8003700:	216d      	movs	r1, #109	; 0x6d
 8003702:	f24d 3033 	movw	r0, #54067	; 0xd333
 8003706:	f7fd f9b9 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD400, 0x00);
 800370a:	2100      	movs	r1, #0
 800370c:	f44f 4054 	mov.w	r0, #54272	; 0xd400
 8003710:	f7fd f9b4 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD401, 0x33);
 8003714:	2133      	movs	r1, #51	; 0x33
 8003716:	f24d 4001 	movw	r0, #54273	; 0xd401
 800371a:	f7fd f9af 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD402, 0x00);
 800371e:	2100      	movs	r1, #0
 8003720:	f24d 4002 	movw	r0, #54274	; 0xd402
 8003724:	f7fd f9aa 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD403, 0x34);
 8003728:	2134      	movs	r1, #52	; 0x34
 800372a:	f24d 4003 	movw	r0, #54275	; 0xd403
 800372e:	f7fd f9a5 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD404, 0x00);
 8003732:	2100      	movs	r1, #0
 8003734:	f24d 4004 	movw	r0, #54276	; 0xd404
 8003738:	f7fd f9a0 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD405, 0x3A);
 800373c:	213a      	movs	r1, #58	; 0x3a
 800373e:	f24d 4005 	movw	r0, #54277	; 0xd405
 8003742:	f7fd f99b 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD406, 0x00);
 8003746:	2100      	movs	r1, #0
 8003748:	f24d 4006 	movw	r0, #54278	; 0xd406
 800374c:	f7fd f996 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD407, 0x4A);
 8003750:	214a      	movs	r1, #74	; 0x4a
 8003752:	f24d 4007 	movw	r0, #54279	; 0xd407
 8003756:	f7fd f991 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD408, 0x00);
 800375a:	2100      	movs	r1, #0
 800375c:	f24d 4008 	movw	r0, #54280	; 0xd408
 8003760:	f7fd f98c 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD409, 0x5C);
 8003764:	215c      	movs	r1, #92	; 0x5c
 8003766:	f24d 4009 	movw	r0, #54281	; 0xd409
 800376a:	f7fd f987 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD40A, 0x00);
 800376e:	2100      	movs	r1, #0
 8003770:	f24d 400a 	movw	r0, #54282	; 0xd40a
 8003774:	f7fd f982 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD40B, 0x81);
 8003778:	2181      	movs	r1, #129	; 0x81
 800377a:	f24d 400b 	movw	r0, #54283	; 0xd40b
 800377e:	f7fd f97d 	bl	8000a7c <LCD_WriteReg>

		LCD_WriteReg(0xD40C, 0x00);
 8003782:	2100      	movs	r1, #0
 8003784:	f24d 400c 	movw	r0, #54284	; 0xd40c
 8003788:	f7fd f978 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD40D, 0xA6);
 800378c:	21a6      	movs	r1, #166	; 0xa6
 800378e:	f24d 400d 	movw	r0, #54285	; 0xd40d
 8003792:	f7fd f973 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD40E, 0x00);
 8003796:	2100      	movs	r1, #0
 8003798:	f24d 400e 	movw	r0, #54286	; 0xd40e
 800379c:	f7fd f96e 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD40F, 0xE5);
 80037a0:	21e5      	movs	r1, #229	; 0xe5
 80037a2:	f24d 400f 	movw	r0, #54287	; 0xd40f
 80037a6:	f7fd f969 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD410, 0x01);
 80037aa:	2101      	movs	r1, #1
 80037ac:	f24d 4010 	movw	r0, #54288	; 0xd410
 80037b0:	f7fd f964 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD411, 0x13);
 80037b4:	2113      	movs	r1, #19
 80037b6:	f24d 4011 	movw	r0, #54289	; 0xd411
 80037ba:	f7fd f95f 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD412, 0x01);
 80037be:	2101      	movs	r1, #1
 80037c0:	f24d 4012 	movw	r0, #54290	; 0xd412
 80037c4:	f7fd f95a 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD413, 0x54);
 80037c8:	2154      	movs	r1, #84	; 0x54
 80037ca:	f24d 4013 	movw	r0, #54291	; 0xd413
 80037ce:	f7fd f955 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD414, 0x01);
 80037d2:	2101      	movs	r1, #1
 80037d4:	f24d 4014 	movw	r0, #54292	; 0xd414
 80037d8:	f7fd f950 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD415, 0x82);
 80037dc:	2182      	movs	r1, #130	; 0x82
 80037de:	f24d 4015 	movw	r0, #54293	; 0xd415
 80037e2:	f7fd f94b 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD416, 0x01);
 80037e6:	2101      	movs	r1, #1
 80037e8:	f24d 4016 	movw	r0, #54294	; 0xd416
 80037ec:	f7fd f946 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD417, 0xCA);
 80037f0:	21ca      	movs	r1, #202	; 0xca
 80037f2:	f24d 4017 	movw	r0, #54295	; 0xd417
 80037f6:	f7fd f941 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD418, 0x02);
 80037fa:	2102      	movs	r1, #2
 80037fc:	f24d 4018 	movw	r0, #54296	; 0xd418
 8003800:	f7fd f93c 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD419, 0x00);
 8003804:	2100      	movs	r1, #0
 8003806:	f24d 4019 	movw	r0, #54297	; 0xd419
 800380a:	f7fd f937 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD41A, 0x02);
 800380e:	2102      	movs	r1, #2
 8003810:	f24d 401a 	movw	r0, #54298	; 0xd41a
 8003814:	f7fd f932 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD41B, 0x01);
 8003818:	2101      	movs	r1, #1
 800381a:	f24d 401b 	movw	r0, #54299	; 0xd41b
 800381e:	f7fd f92d 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD41C, 0x02);
 8003822:	2102      	movs	r1, #2
 8003824:	f24d 401c 	movw	r0, #54300	; 0xd41c
 8003828:	f7fd f928 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD41D, 0x34);
 800382c:	2134      	movs	r1, #52	; 0x34
 800382e:	f24d 401d 	movw	r0, #54301	; 0xd41d
 8003832:	f7fd f923 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD41E, 0x02);
 8003836:	2102      	movs	r1, #2
 8003838:	f24d 401e 	movw	r0, #54302	; 0xd41e
 800383c:	f7fd f91e 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD41F, 0x67);
 8003840:	2167      	movs	r1, #103	; 0x67
 8003842:	f24d 401f 	movw	r0, #54303	; 0xd41f
 8003846:	f7fd f919 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD420, 0x02);
 800384a:	2102      	movs	r1, #2
 800384c:	f24d 4020 	movw	r0, #54304	; 0xd420
 8003850:	f7fd f914 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD421, 0x84);
 8003854:	2184      	movs	r1, #132	; 0x84
 8003856:	f24d 4021 	movw	r0, #54305	; 0xd421
 800385a:	f7fd f90f 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD422, 0x02);
 800385e:	2102      	movs	r1, #2
 8003860:	f24d 4022 	movw	r0, #54306	; 0xd422
 8003864:	f7fd f90a 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD423, 0xA4);
 8003868:	21a4      	movs	r1, #164	; 0xa4
 800386a:	f24d 4023 	movw	r0, #54307	; 0xd423
 800386e:	f7fd f905 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD424, 0x02);
 8003872:	2102      	movs	r1, #2
 8003874:	f24d 4024 	movw	r0, #54308	; 0xd424
 8003878:	f7fd f900 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD425, 0xB7);
 800387c:	21b7      	movs	r1, #183	; 0xb7
 800387e:	f24d 4025 	movw	r0, #54309	; 0xd425
 8003882:	f7fd f8fb 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD426, 0x02);
 8003886:	2102      	movs	r1, #2
 8003888:	f24d 4026 	movw	r0, #54310	; 0xd426
 800388c:	f7fd f8f6 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD427, 0xCF);
 8003890:	21cf      	movs	r1, #207	; 0xcf
 8003892:	f24d 4027 	movw	r0, #54311	; 0xd427
 8003896:	f7fd f8f1 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD428, 0x02);
 800389a:	2102      	movs	r1, #2
 800389c:	f24d 4028 	movw	r0, #54312	; 0xd428
 80038a0:	f7fd f8ec 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD429, 0xDE);
 80038a4:	21de      	movs	r1, #222	; 0xde
 80038a6:	f24d 4029 	movw	r0, #54313	; 0xd429
 80038aa:	f7fd f8e7 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD42A, 0x02);
 80038ae:	2102      	movs	r1, #2
 80038b0:	f24d 402a 	movw	r0, #54314	; 0xd42a
 80038b4:	f7fd f8e2 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD42B, 0xF2);
 80038b8:	21f2      	movs	r1, #242	; 0xf2
 80038ba:	f24d 402b 	movw	r0, #54315	; 0xd42b
 80038be:	f7fd f8dd 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD42C, 0x02);
 80038c2:	2102      	movs	r1, #2
 80038c4:	f24d 402c 	movw	r0, #54316	; 0xd42c
 80038c8:	f7fd f8d8 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD42D, 0xFE);
 80038cc:	21fe      	movs	r1, #254	; 0xfe
 80038ce:	f24d 402d 	movw	r0, #54317	; 0xd42d
 80038d2:	f7fd f8d3 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD42E, 0x03);
 80038d6:	2103      	movs	r1, #3
 80038d8:	f24d 402e 	movw	r0, #54318	; 0xd42e
 80038dc:	f7fd f8ce 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD42F, 0x10);
 80038e0:	2110      	movs	r1, #16
 80038e2:	f24d 402f 	movw	r0, #54319	; 0xd42f
 80038e6:	f7fd f8c9 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD430, 0x03);
 80038ea:	2103      	movs	r1, #3
 80038ec:	f24d 4030 	movw	r0, #54320	; 0xd430
 80038f0:	f7fd f8c4 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD431, 0x33);
 80038f4:	2133      	movs	r1, #51	; 0x33
 80038f6:	f24d 4031 	movw	r0, #54321	; 0xd431
 80038fa:	f7fd f8bf 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD432, 0x03);
 80038fe:	2103      	movs	r1, #3
 8003900:	f24d 4032 	movw	r0, #54322	; 0xd432
 8003904:	f7fd f8ba 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD433, 0x6D);
 8003908:	216d      	movs	r1, #109	; 0x6d
 800390a:	f24d 4033 	movw	r0, #54323	; 0xd433
 800390e:	f7fd f8b5 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD500, 0x00);
 8003912:	2100      	movs	r1, #0
 8003914:	f44f 4055 	mov.w	r0, #54528	; 0xd500
 8003918:	f7fd f8b0 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD501, 0x33);
 800391c:	2133      	movs	r1, #51	; 0x33
 800391e:	f24d 5001 	movw	r0, #54529	; 0xd501
 8003922:	f7fd f8ab 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD502, 0x00);
 8003926:	2100      	movs	r1, #0
 8003928:	f24d 5002 	movw	r0, #54530	; 0xd502
 800392c:	f7fd f8a6 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD503, 0x34);
 8003930:	2134      	movs	r1, #52	; 0x34
 8003932:	f24d 5003 	movw	r0, #54531	; 0xd503
 8003936:	f7fd f8a1 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD504, 0x00);
 800393a:	2100      	movs	r1, #0
 800393c:	f24d 5004 	movw	r0, #54532	; 0xd504
 8003940:	f7fd f89c 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD505, 0x3A);
 8003944:	213a      	movs	r1, #58	; 0x3a
 8003946:	f24d 5005 	movw	r0, #54533	; 0xd505
 800394a:	f7fd f897 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD506, 0x00);
 800394e:	2100      	movs	r1, #0
 8003950:	f24d 5006 	movw	r0, #54534	; 0xd506
 8003954:	f7fd f892 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD507, 0x4A);
 8003958:	214a      	movs	r1, #74	; 0x4a
 800395a:	f24d 5007 	movw	r0, #54535	; 0xd507
 800395e:	f7fd f88d 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD508, 0x00);
 8003962:	2100      	movs	r1, #0
 8003964:	f24d 5008 	movw	r0, #54536	; 0xd508
 8003968:	f7fd f888 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD509, 0x5C);
 800396c:	215c      	movs	r1, #92	; 0x5c
 800396e:	f24d 5009 	movw	r0, #54537	; 0xd509
 8003972:	f7fd f883 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD50A, 0x00);
 8003976:	2100      	movs	r1, #0
 8003978:	f24d 500a 	movw	r0, #54538	; 0xd50a
 800397c:	f7fd f87e 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD50B, 0x81);
 8003980:	2181      	movs	r1, #129	; 0x81
 8003982:	f24d 500b 	movw	r0, #54539	; 0xd50b
 8003986:	f7fd f879 	bl	8000a7c <LCD_WriteReg>

		LCD_WriteReg(0xD50C, 0x00);
 800398a:	2100      	movs	r1, #0
 800398c:	f24d 500c 	movw	r0, #54540	; 0xd50c
 8003990:	f7fd f874 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD50D, 0xA6);
 8003994:	21a6      	movs	r1, #166	; 0xa6
 8003996:	f24d 500d 	movw	r0, #54541	; 0xd50d
 800399a:	f7fd f86f 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD50E, 0x00);
 800399e:	2100      	movs	r1, #0
 80039a0:	f24d 500e 	movw	r0, #54542	; 0xd50e
 80039a4:	f7fd f86a 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD50F, 0xE5);
 80039a8:	21e5      	movs	r1, #229	; 0xe5
 80039aa:	f24d 500f 	movw	r0, #54543	; 0xd50f
 80039ae:	f7fd f865 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD510, 0x01);
 80039b2:	2101      	movs	r1, #1
 80039b4:	f24d 5010 	movw	r0, #54544	; 0xd510
 80039b8:	f7fd f860 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD511, 0x13);
 80039bc:	2113      	movs	r1, #19
 80039be:	f24d 5011 	movw	r0, #54545	; 0xd511
 80039c2:	f7fd f85b 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD512, 0x01);
 80039c6:	2101      	movs	r1, #1
 80039c8:	f24d 5012 	movw	r0, #54546	; 0xd512
 80039cc:	f7fd f856 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD513, 0x54);
 80039d0:	2154      	movs	r1, #84	; 0x54
 80039d2:	f24d 5013 	movw	r0, #54547	; 0xd513
 80039d6:	f7fd f851 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD514, 0x01);
 80039da:	2101      	movs	r1, #1
 80039dc:	f24d 5014 	movw	r0, #54548	; 0xd514
 80039e0:	f7fd f84c 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD515, 0x82);
 80039e4:	2182      	movs	r1, #130	; 0x82
 80039e6:	f24d 5015 	movw	r0, #54549	; 0xd515
 80039ea:	f7fd f847 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD516, 0x01);
 80039ee:	2101      	movs	r1, #1
 80039f0:	f24d 5016 	movw	r0, #54550	; 0xd516
 80039f4:	f7fd f842 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD517, 0xCA);
 80039f8:	21ca      	movs	r1, #202	; 0xca
 80039fa:	f24d 5017 	movw	r0, #54551	; 0xd517
 80039fe:	f7fd f83d 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD518, 0x02);
 8003a02:	2102      	movs	r1, #2
 8003a04:	f24d 5018 	movw	r0, #54552	; 0xd518
 8003a08:	f7fd f838 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD519, 0x00);
 8003a0c:	2100      	movs	r1, #0
 8003a0e:	f24d 5019 	movw	r0, #54553	; 0xd519
 8003a12:	f7fd f833 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD51A, 0x02);
 8003a16:	2102      	movs	r1, #2
 8003a18:	f24d 501a 	movw	r0, #54554	; 0xd51a
 8003a1c:	f7fd f82e 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD51B, 0x01);
 8003a20:	2101      	movs	r1, #1
 8003a22:	f24d 501b 	movw	r0, #54555	; 0xd51b
 8003a26:	f7fd f829 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD51C, 0x02);
 8003a2a:	2102      	movs	r1, #2
 8003a2c:	f24d 501c 	movw	r0, #54556	; 0xd51c
 8003a30:	f7fd f824 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD51D, 0x34);
 8003a34:	2134      	movs	r1, #52	; 0x34
 8003a36:	f24d 501d 	movw	r0, #54557	; 0xd51d
 8003a3a:	f7fd f81f 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD51E, 0x02);
 8003a3e:	2102      	movs	r1, #2
 8003a40:	f24d 501e 	movw	r0, #54558	; 0xd51e
 8003a44:	f7fd f81a 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD51F, 0x67);
 8003a48:	2167      	movs	r1, #103	; 0x67
 8003a4a:	f24d 501f 	movw	r0, #54559	; 0xd51f
 8003a4e:	f7fd f815 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD520, 0x02);
 8003a52:	2102      	movs	r1, #2
 8003a54:	f24d 5020 	movw	r0, #54560	; 0xd520
 8003a58:	f7fd f810 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD521, 0x84);
 8003a5c:	2184      	movs	r1, #132	; 0x84
 8003a5e:	f24d 5021 	movw	r0, #54561	; 0xd521
 8003a62:	f7fd f80b 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD522, 0x02);
 8003a66:	2102      	movs	r1, #2
 8003a68:	f24d 5022 	movw	r0, #54562	; 0xd522
 8003a6c:	f7fd f806 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD523, 0xA4);
 8003a70:	21a4      	movs	r1, #164	; 0xa4
 8003a72:	f24d 5023 	movw	r0, #54563	; 0xd523
 8003a76:	f7fd f801 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD524, 0x02);
 8003a7a:	2102      	movs	r1, #2
 8003a7c:	f24d 5024 	movw	r0, #54564	; 0xd524
 8003a80:	f7fc fffc 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD525, 0xB7);
 8003a84:	21b7      	movs	r1, #183	; 0xb7
 8003a86:	f24d 5025 	movw	r0, #54565	; 0xd525
 8003a8a:	f7fc fff7 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD526, 0x02);
 8003a8e:	2102      	movs	r1, #2
 8003a90:	f24d 5026 	movw	r0, #54566	; 0xd526
 8003a94:	f7fc fff2 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD527, 0xCF);
 8003a98:	21cf      	movs	r1, #207	; 0xcf
 8003a9a:	f24d 5027 	movw	r0, #54567	; 0xd527
 8003a9e:	f7fc ffed 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD528, 0x02);
 8003aa2:	2102      	movs	r1, #2
 8003aa4:	f24d 5028 	movw	r0, #54568	; 0xd528
 8003aa8:	f7fc ffe8 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD529, 0xDE);
 8003aac:	21de      	movs	r1, #222	; 0xde
 8003aae:	f24d 5029 	movw	r0, #54569	; 0xd529
 8003ab2:	f7fc ffe3 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD52A, 0x02);
 8003ab6:	2102      	movs	r1, #2
 8003ab8:	f24d 502a 	movw	r0, #54570	; 0xd52a
 8003abc:	f7fc ffde 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD52B, 0xF2);
 8003ac0:	21f2      	movs	r1, #242	; 0xf2
 8003ac2:	f24d 502b 	movw	r0, #54571	; 0xd52b
 8003ac6:	f7fc ffd9 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD52C, 0x02);
 8003aca:	2102      	movs	r1, #2
 8003acc:	f24d 502c 	movw	r0, #54572	; 0xd52c
 8003ad0:	f7fc ffd4 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD52D, 0xFE);
 8003ad4:	21fe      	movs	r1, #254	; 0xfe
 8003ad6:	f24d 502d 	movw	r0, #54573	; 0xd52d
 8003ada:	f7fc ffcf 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD52E, 0x03);
 8003ade:	2103      	movs	r1, #3
 8003ae0:	f24d 502e 	movw	r0, #54574	; 0xd52e
 8003ae4:	f7fc ffca 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD52F, 0x10);
 8003ae8:	2110      	movs	r1, #16
 8003aea:	f24d 502f 	movw	r0, #54575	; 0xd52f
 8003aee:	f7fc ffc5 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD530, 0x03);
 8003af2:	2103      	movs	r1, #3
 8003af4:	f24d 5030 	movw	r0, #54576	; 0xd530
 8003af8:	f7fc ffc0 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD531, 0x33);
 8003afc:	2133      	movs	r1, #51	; 0x33
 8003afe:	f24d 5031 	movw	r0, #54577	; 0xd531
 8003b02:	f7fc ffbb 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD532, 0x03);
 8003b06:	2103      	movs	r1, #3
 8003b08:	f24d 5032 	movw	r0, #54578	; 0xd532
 8003b0c:	f7fc ffb6 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD533, 0x6D);
 8003b10:	216d      	movs	r1, #109	; 0x6d
 8003b12:	f24d 5033 	movw	r0, #54579	; 0xd533
 8003b16:	f7fc ffb1 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD600, 0x00);
 8003b1a:	2100      	movs	r1, #0
 8003b1c:	f44f 4056 	mov.w	r0, #54784	; 0xd600
 8003b20:	f7fc ffac 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD601, 0x33);
 8003b24:	2133      	movs	r1, #51	; 0x33
 8003b26:	f24d 6001 	movw	r0, #54785	; 0xd601
 8003b2a:	f7fc ffa7 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD602, 0x00);
 8003b2e:	2100      	movs	r1, #0
 8003b30:	f24d 6002 	movw	r0, #54786	; 0xd602
 8003b34:	f7fc ffa2 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD603, 0x34);
 8003b38:	2134      	movs	r1, #52	; 0x34
 8003b3a:	f24d 6003 	movw	r0, #54787	; 0xd603
 8003b3e:	f7fc ff9d 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD604, 0x00);
 8003b42:	2100      	movs	r1, #0
 8003b44:	f24d 6004 	movw	r0, #54788	; 0xd604
 8003b48:	f7fc ff98 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD605, 0x3A);
 8003b4c:	213a      	movs	r1, #58	; 0x3a
 8003b4e:	f24d 6005 	movw	r0, #54789	; 0xd605
 8003b52:	f7fc ff93 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD606, 0x00);
 8003b56:	2100      	movs	r1, #0
 8003b58:	f24d 6006 	movw	r0, #54790	; 0xd606
 8003b5c:	f7fc ff8e 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD607, 0x4A);
 8003b60:	214a      	movs	r1, #74	; 0x4a
 8003b62:	f24d 6007 	movw	r0, #54791	; 0xd607
 8003b66:	f7fc ff89 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD608, 0x00);
 8003b6a:	2100      	movs	r1, #0
 8003b6c:	f24d 6008 	movw	r0, #54792	; 0xd608
 8003b70:	f7fc ff84 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD609, 0x5C);
 8003b74:	215c      	movs	r1, #92	; 0x5c
 8003b76:	f24d 6009 	movw	r0, #54793	; 0xd609
 8003b7a:	f7fc ff7f 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD60A, 0x00);
 8003b7e:	2100      	movs	r1, #0
 8003b80:	f24d 600a 	movw	r0, #54794	; 0xd60a
 8003b84:	f7fc ff7a 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD60B, 0x81);
 8003b88:	2181      	movs	r1, #129	; 0x81
 8003b8a:	f24d 600b 	movw	r0, #54795	; 0xd60b
 8003b8e:	f7fc ff75 	bl	8000a7c <LCD_WriteReg>

		LCD_WriteReg(0xD60C, 0x00);
 8003b92:	2100      	movs	r1, #0
 8003b94:	f24d 600c 	movw	r0, #54796	; 0xd60c
 8003b98:	f7fc ff70 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD60D, 0xA6);
 8003b9c:	21a6      	movs	r1, #166	; 0xa6
 8003b9e:	f24d 600d 	movw	r0, #54797	; 0xd60d
 8003ba2:	f7fc ff6b 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD60E, 0x00);
 8003ba6:	2100      	movs	r1, #0
 8003ba8:	f24d 600e 	movw	r0, #54798	; 0xd60e
 8003bac:	f7fc ff66 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD60F, 0xE5);
 8003bb0:	21e5      	movs	r1, #229	; 0xe5
 8003bb2:	f24d 600f 	movw	r0, #54799	; 0xd60f
 8003bb6:	f7fc ff61 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD610, 0x01);
 8003bba:	2101      	movs	r1, #1
 8003bbc:	f24d 6010 	movw	r0, #54800	; 0xd610
 8003bc0:	f7fc ff5c 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD611, 0x13);
 8003bc4:	2113      	movs	r1, #19
 8003bc6:	f24d 6011 	movw	r0, #54801	; 0xd611
 8003bca:	f7fc ff57 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD612, 0x01);
 8003bce:	2101      	movs	r1, #1
 8003bd0:	f24d 6012 	movw	r0, #54802	; 0xd612
 8003bd4:	f7fc ff52 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD613, 0x54);
 8003bd8:	2154      	movs	r1, #84	; 0x54
 8003bda:	f24d 6013 	movw	r0, #54803	; 0xd613
 8003bde:	f7fc ff4d 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD614, 0x01);
 8003be2:	2101      	movs	r1, #1
 8003be4:	f24d 6014 	movw	r0, #54804	; 0xd614
 8003be8:	f7fc ff48 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD615, 0x82);
 8003bec:	2182      	movs	r1, #130	; 0x82
 8003bee:	f24d 6015 	movw	r0, #54805	; 0xd615
 8003bf2:	f7fc ff43 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD616, 0x01);
 8003bf6:	2101      	movs	r1, #1
 8003bf8:	f24d 6016 	movw	r0, #54806	; 0xd616
 8003bfc:	f7fc ff3e 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD617, 0xCA);
 8003c00:	21ca      	movs	r1, #202	; 0xca
 8003c02:	f24d 6017 	movw	r0, #54807	; 0xd617
 8003c06:	f7fc ff39 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD618, 0x02);
 8003c0a:	2102      	movs	r1, #2
 8003c0c:	f24d 6018 	movw	r0, #54808	; 0xd618
 8003c10:	f7fc ff34 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD619, 0x00);
 8003c14:	2100      	movs	r1, #0
 8003c16:	f24d 6019 	movw	r0, #54809	; 0xd619
 8003c1a:	f7fc ff2f 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD61A, 0x02);
 8003c1e:	2102      	movs	r1, #2
 8003c20:	f24d 601a 	movw	r0, #54810	; 0xd61a
 8003c24:	f7fc ff2a 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD61B, 0x01);
 8003c28:	2101      	movs	r1, #1
 8003c2a:	f24d 601b 	movw	r0, #54811	; 0xd61b
 8003c2e:	f7fc ff25 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD61C, 0x02);
 8003c32:	2102      	movs	r1, #2
 8003c34:	f24d 601c 	movw	r0, #54812	; 0xd61c
 8003c38:	f7fc ff20 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD61D, 0x34);
 8003c3c:	2134      	movs	r1, #52	; 0x34
 8003c3e:	f24d 601d 	movw	r0, #54813	; 0xd61d
 8003c42:	f7fc ff1b 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD61E, 0x02);
 8003c46:	2102      	movs	r1, #2
 8003c48:	f24d 601e 	movw	r0, #54814	; 0xd61e
 8003c4c:	f7fc ff16 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD61F, 0x67);
 8003c50:	2167      	movs	r1, #103	; 0x67
 8003c52:	f24d 601f 	movw	r0, #54815	; 0xd61f
 8003c56:	f7fc ff11 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD620, 0x02);
 8003c5a:	2102      	movs	r1, #2
 8003c5c:	f24d 6020 	movw	r0, #54816	; 0xd620
 8003c60:	f7fc ff0c 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD621, 0x84);
 8003c64:	2184      	movs	r1, #132	; 0x84
 8003c66:	f24d 6021 	movw	r0, #54817	; 0xd621
 8003c6a:	f7fc ff07 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD622, 0x02);
 8003c6e:	2102      	movs	r1, #2
 8003c70:	f24d 6022 	movw	r0, #54818	; 0xd622
 8003c74:	f7fc ff02 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD623, 0xA4);
 8003c78:	21a4      	movs	r1, #164	; 0xa4
 8003c7a:	f24d 6023 	movw	r0, #54819	; 0xd623
 8003c7e:	f7fc fefd 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD624, 0x02);
 8003c82:	2102      	movs	r1, #2
 8003c84:	f24d 6024 	movw	r0, #54820	; 0xd624
 8003c88:	f7fc fef8 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD625, 0xB7);
 8003c8c:	21b7      	movs	r1, #183	; 0xb7
 8003c8e:	f24d 6025 	movw	r0, #54821	; 0xd625
 8003c92:	f7fc fef3 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD626, 0x02);
 8003c96:	2102      	movs	r1, #2
 8003c98:	f24d 6026 	movw	r0, #54822	; 0xd626
 8003c9c:	f7fc feee 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD627, 0xCF);
 8003ca0:	21cf      	movs	r1, #207	; 0xcf
 8003ca2:	f24d 6027 	movw	r0, #54823	; 0xd627
 8003ca6:	f7fc fee9 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD628, 0x02);
 8003caa:	2102      	movs	r1, #2
 8003cac:	f24d 6028 	movw	r0, #54824	; 0xd628
 8003cb0:	f7fc fee4 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD629, 0xDE);
 8003cb4:	21de      	movs	r1, #222	; 0xde
 8003cb6:	f24d 6029 	movw	r0, #54825	; 0xd629
 8003cba:	f7fc fedf 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD62A, 0x02);
 8003cbe:	2102      	movs	r1, #2
 8003cc0:	f24d 602a 	movw	r0, #54826	; 0xd62a
 8003cc4:	f7fc feda 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD62B, 0xF2);
 8003cc8:	21f2      	movs	r1, #242	; 0xf2
 8003cca:	f24d 602b 	movw	r0, #54827	; 0xd62b
 8003cce:	f7fc fed5 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD62C, 0x02);
 8003cd2:	2102      	movs	r1, #2
 8003cd4:	f24d 602c 	movw	r0, #54828	; 0xd62c
 8003cd8:	f7fc fed0 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD62D, 0xFE);
 8003cdc:	21fe      	movs	r1, #254	; 0xfe
 8003cde:	f24d 602d 	movw	r0, #54829	; 0xd62d
 8003ce2:	f7fc fecb 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD62E, 0x03);
 8003ce6:	2103      	movs	r1, #3
 8003ce8:	f24d 602e 	movw	r0, #54830	; 0xd62e
 8003cec:	f7fc fec6 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD62F, 0x10);
 8003cf0:	2110      	movs	r1, #16
 8003cf2:	f24d 602f 	movw	r0, #54831	; 0xd62f
 8003cf6:	f7fc fec1 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD630, 0x03);
 8003cfa:	2103      	movs	r1, #3
 8003cfc:	f24d 6030 	movw	r0, #54832	; 0xd630
 8003d00:	f7fc febc 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD631, 0x33);
 8003d04:	2133      	movs	r1, #51	; 0x33
 8003d06:	f24d 6031 	movw	r0, #54833	; 0xd631
 8003d0a:	f7fc feb7 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD632, 0x03);
 8003d0e:	2103      	movs	r1, #3
 8003d10:	f24d 6032 	movw	r0, #54834	; 0xd632
 8003d14:	f7fc feb2 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xD633, 0x6D);
 8003d18:	216d      	movs	r1, #109	; 0x6d
 8003d1a:	f24d 6033 	movw	r0, #54835	; 0xd633
 8003d1e:	f7fc fead 	bl	8000a7c <LCD_WriteReg>
		//LV2 Page 0 enable
		LCD_WriteReg(0xF000, 0x55);
 8003d22:	2155      	movs	r1, #85	; 0x55
 8003d24:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8003d28:	f7fc fea8 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 8003d2c:	21aa      	movs	r1, #170	; 0xaa
 8003d2e:	f24f 0001 	movw	r0, #61441	; 0xf001
 8003d32:	f7fc fea3 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 8003d36:	2152      	movs	r1, #82	; 0x52
 8003d38:	f24f 0002 	movw	r0, #61442	; 0xf002
 8003d3c:	f7fc fe9e 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 8003d40:	2108      	movs	r1, #8
 8003d42:	f24f 0003 	movw	r0, #61443	; 0xf003
 8003d46:	f7fc fe99 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x00);
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	f24f 0004 	movw	r0, #61444	; 0xf004
 8003d50:	f7fc fe94 	bl	8000a7c <LCD_WriteReg>
		//Display control
		LCD_WriteReg(0xB100, 0xCC);
 8003d54:	21cc      	movs	r1, #204	; 0xcc
 8003d56:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8003d5a:	f7fc fe8f 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x00);
 8003d5e:	2100      	movs	r1, #0
 8003d60:	f24b 1001 	movw	r0, #45313	; 0xb101
 8003d64:	f7fc fe8a 	bl	8000a7c <LCD_WriteReg>
		//Source hold time
		LCD_WriteReg(0xB600, 0x05);
 8003d68:	2105      	movs	r1, #5
 8003d6a:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8003d6e:	f7fc fe85 	bl	8000a7c <LCD_WriteReg>
		//Gate EQ control
		LCD_WriteReg(0xB700, 0x70);
 8003d72:	2170      	movs	r1, #112	; 0x70
 8003d74:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8003d78:	f7fc fe80 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x70);
 8003d7c:	2170      	movs	r1, #112	; 0x70
 8003d7e:	f24b 7001 	movw	r0, #46849	; 0xb701
 8003d82:	f7fc fe7b 	bl	8000a7c <LCD_WriteReg>
		//Source EQ control (Mode 2)
		LCD_WriteReg(0xB800, 0x01);
 8003d86:	2101      	movs	r1, #1
 8003d88:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8003d8c:	f7fc fe76 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x03);
 8003d90:	2103      	movs	r1, #3
 8003d92:	f64b 0001 	movw	r0, #47105	; 0xb801
 8003d96:	f7fc fe71 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x03);
 8003d9a:	2103      	movs	r1, #3
 8003d9c:	f64b 0002 	movw	r0, #47106	; 0xb802
 8003da0:	f7fc fe6c 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xB803, 0x03);
 8003da4:	2103      	movs	r1, #3
 8003da6:	f64b 0003 	movw	r0, #47107	; 0xb803
 8003daa:	f7fc fe67 	bl	8000a7c <LCD_WriteReg>
		//Inversion mode (2-dot)
		LCD_WriteReg(0xBC00, 0x02);
 8003dae:	2102      	movs	r1, #2
 8003db0:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8003db4:	f7fc fe62 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x00);
 8003db8:	2100      	movs	r1, #0
 8003dba:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8003dbe:	f7fc fe5d 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8003dc8:	f7fc fe58 	bl	8000a7c <LCD_WriteReg>
		//Timing control 4H w/ 4-delay
		LCD_WriteReg(0xC900, 0xD0);
 8003dcc:	21d0      	movs	r1, #208	; 0xd0
 8003dce:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 8003dd2:	f7fc fe53 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xC901, 0x02);
 8003dd6:	2102      	movs	r1, #2
 8003dd8:	f64c 1001 	movw	r0, #51457	; 0xc901
 8003ddc:	f7fc fe4e 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xC902, 0x50);
 8003de0:	2150      	movs	r1, #80	; 0x50
 8003de2:	f64c 1002 	movw	r0, #51458	; 0xc902
 8003de6:	f7fc fe49 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xC903, 0x50);
 8003dea:	2150      	movs	r1, #80	; 0x50
 8003dec:	f64c 1003 	movw	r0, #51459	; 0xc903
 8003df0:	f7fc fe44 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xC904, 0x50);
 8003df4:	2150      	movs	r1, #80	; 0x50
 8003df6:	f64c 1004 	movw	r0, #51460	; 0xc904
 8003dfa:	f7fc fe3f 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x3500, 0x00);
 8003dfe:	2100      	movs	r1, #0
 8003e00:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 8003e04:	f7fc fe3a 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x3A00, 0x55);  //16-bit/pixel
 8003e08:	2155      	movs	r1, #85	; 0x55
 8003e0a:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 8003e0e:	f7fc fe35 	bl	8000a7c <LCD_WriteReg>
		LCD_WR_REG(0x1100);
 8003e12:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 8003e16:	f7fc fda5 	bl	8000964 <LCD_WR_REG>
//		delay_us(120); // us
		HAL_Delay(1);
 8003e1a:	2001      	movs	r0, #1
 8003e1c:	f002 f882 	bl	8005f24 <HAL_Delay>
		LCD_WR_REG(0x2900);
 8003e20:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 8003e24:	f7fc fd9e 	bl	8000964 <LCD_WR_REG>
 8003e28:	f001 bd18 	b.w	800585c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9325)  //9325
 8003e2c:	4bec      	ldr	r3, [pc, #944]	; (80041e0 <LCD_Init+0x27b8>)
 8003e2e:	889b      	ldrh	r3, [r3, #4]
 8003e30:	f249 3225 	movw	r2, #37669	; 0x9325
 8003e34:	4293      	cmp	r3, r2
 8003e36:	f040 80d7 	bne.w	8003fe8 <LCD_Init+0x25c0>
			{
		LCD_WriteReg(0x00E5, 0x78F0);
 8003e3a:	f647 01f0 	movw	r1, #30960	; 0x78f0
 8003e3e:	20e5      	movs	r0, #229	; 0xe5
 8003e40:	f7fc fe1c 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100);
 8003e44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003e48:	2001      	movs	r0, #1
 8003e4a:	f7fc fe17 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8003e4e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8003e52:	2002      	movs	r0, #2
 8003e54:	f7fc fe12 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 8003e58:	f241 0130 	movw	r1, #4144	; 0x1030
 8003e5c:	2003      	movs	r0, #3
 8003e5e:	f7fc fe0d 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8003e62:	2100      	movs	r1, #0
 8003e64:	2004      	movs	r0, #4
 8003e66:	f7fc fe09 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8003e6a:	f240 2102 	movw	r1, #514	; 0x202
 8003e6e:	2008      	movs	r0, #8
 8003e70:	f7fc fe04 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 8003e74:	2100      	movs	r1, #0
 8003e76:	2009      	movs	r0, #9
 8003e78:	f7fc fe00 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000);
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	200a      	movs	r0, #10
 8003e80:	f7fc fdfc 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8003e84:	2100      	movs	r1, #0
 8003e86:	200c      	movs	r0, #12
 8003e88:	f7fc fdf8 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000);
 8003e8c:	2100      	movs	r1, #0
 8003e8e:	200d      	movs	r0, #13
 8003e90:	f7fc fdf4 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8003e94:	2100      	movs	r1, #0
 8003e96:	200f      	movs	r0, #15
 8003e98:	f7fc fdf0 	bl	8000a7c <LCD_WriteReg>
		//power on sequence VGHVGL
		LCD_WriteReg(0x0010, 0x0000);
 8003e9c:	2100      	movs	r1, #0
 8003e9e:	2010      	movs	r0, #16
 8003ea0:	f7fc fdec 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 8003ea4:	2107      	movs	r1, #7
 8003ea6:	2011      	movs	r0, #17
 8003ea8:	f7fc fde8 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 8003eac:	2100      	movs	r1, #0
 8003eae:	2012      	movs	r0, #18
 8003eb0:	f7fc fde4 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 8003eb4:	2100      	movs	r1, #0
 8003eb6:	2013      	movs	r0, #19
 8003eb8:	f7fc fde0 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0000);
 8003ebc:	2100      	movs	r1, #0
 8003ebe:	2007      	movs	r0, #7
 8003ec0:	f7fc fddc 	bl	8000a7c <LCD_WriteReg>
		//vgh 
		LCD_WriteReg(0x0010, 0x1690);
 8003ec4:	f241 6190 	movw	r1, #5776	; 0x1690
 8003ec8:	2010      	movs	r0, #16
 8003eca:	f7fc fdd7 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 8003ece:	f240 2127 	movw	r1, #551	; 0x227
 8003ed2:	2011      	movs	r0, #17
 8003ed4:	f7fc fdd2 	bl	8000a7c <LCD_WriteReg>
		//delayms(100);
		//vregiout 
		LCD_WriteReg(0x0012, 0x009D); //0x001b
 8003ed8:	219d      	movs	r1, #157	; 0x9d
 8003eda:	2012      	movs	r0, #18
 8003edc:	f7fc fdce 	bl	8000a7c <LCD_WriteReg>
		//delayms(100); 
		//vom amplitude
		LCD_WriteReg(0x0013, 0x1900);
 8003ee0:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 8003ee4:	2013      	movs	r0, #19
 8003ee6:	f7fc fdc9 	bl	8000a7c <LCD_WriteReg>
		//delayms(100); 
		//vom H
		LCD_WriteReg(0x0029, 0x0025);
 8003eea:	2125      	movs	r1, #37	; 0x25
 8003eec:	2029      	movs	r0, #41	; 0x29
 8003eee:	f7fc fdc5 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000D);
 8003ef2:	210d      	movs	r1, #13
 8003ef4:	202b      	movs	r0, #43	; 0x2b
 8003ef6:	f7fc fdc1 	bl	8000a7c <LCD_WriteReg>
		//gamma
		LCD_WriteReg(0x0030, 0x0007);
 8003efa:	2107      	movs	r1, #7
 8003efc:	2030      	movs	r0, #48	; 0x30
 8003efe:	f7fc fdbd 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0303);
 8003f02:	f240 3103 	movw	r1, #771	; 0x303
 8003f06:	2031      	movs	r0, #49	; 0x31
 8003f08:	f7fc fdb8 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0003);		// 0006
 8003f0c:	2103      	movs	r1, #3
 8003f0e:	2032      	movs	r0, #50	; 0x32
 8003f10:	f7fc fdb4 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0206);
 8003f14:	f240 2106 	movw	r1, #518	; 0x206
 8003f18:	2035      	movs	r0, #53	; 0x35
 8003f1a:	f7fc fdaf 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0008);
 8003f1e:	2108      	movs	r1, #8
 8003f20:	2036      	movs	r0, #54	; 0x36
 8003f22:	f7fc fdab 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0406);
 8003f26:	f240 4106 	movw	r1, #1030	; 0x406
 8003f2a:	2037      	movs	r0, #55	; 0x37
 8003f2c:	f7fc fda6 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0304);		//0200
 8003f30:	f44f 7141 	mov.w	r1, #772	; 0x304
 8003f34:	2038      	movs	r0, #56	; 0x38
 8003f36:	f7fc fda1 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0007);
 8003f3a:	2107      	movs	r1, #7
 8003f3c:	2039      	movs	r0, #57	; 0x39
 8003f3e:	f7fc fd9d 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0602);		// 0504
 8003f42:	f240 6102 	movw	r1, #1538	; 0x602
 8003f46:	203c      	movs	r0, #60	; 0x3c
 8003f48:	f7fc fd98 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0008);
 8003f4c:	2108      	movs	r1, #8
 8003f4e:	203d      	movs	r0, #61	; 0x3d
 8003f50:	f7fc fd94 	bl	8000a7c <LCD_WriteReg>
		//ram
		LCD_WriteReg(0x0050, 0x0000);
 8003f54:	2100      	movs	r1, #0
 8003f56:	2050      	movs	r0, #80	; 0x50
 8003f58:	f7fc fd90 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 8003f5c:	21ef      	movs	r1, #239	; 0xef
 8003f5e:	2051      	movs	r0, #81	; 0x51
 8003f60:	f7fc fd8c 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8003f64:	2100      	movs	r1, #0
 8003f66:	2052      	movs	r0, #82	; 0x52
 8003f68:	f7fc fd88 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8003f6c:	f240 113f 	movw	r1, #319	; 0x13f
 8003f70:	2053      	movs	r0, #83	; 0x53
 8003f72:	f7fc fd83 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0xA700);
 8003f76:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 8003f7a:	2060      	movs	r0, #96	; 0x60
 8003f7c:	f7fc fd7e 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8003f80:	2101      	movs	r1, #1
 8003f82:	2061      	movs	r0, #97	; 0x61
 8003f84:	f7fc fd7a 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8003f88:	2100      	movs	r1, #0
 8003f8a:	206a      	movs	r0, #106	; 0x6a
 8003f8c:	f7fc fd76 	bl	8000a7c <LCD_WriteReg>
		//
		LCD_WriteReg(0x0080, 0x0000);
 8003f90:	2100      	movs	r1, #0
 8003f92:	2080      	movs	r0, #128	; 0x80
 8003f94:	f7fc fd72 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8003f98:	2100      	movs	r1, #0
 8003f9a:	2081      	movs	r0, #129	; 0x81
 8003f9c:	f7fc fd6e 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8003fa0:	2100      	movs	r1, #0
 8003fa2:	2082      	movs	r0, #130	; 0x82
 8003fa4:	f7fc fd6a 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8003fa8:	2100      	movs	r1, #0
 8003faa:	2083      	movs	r0, #131	; 0x83
 8003fac:	f7fc fd66 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8003fb0:	2100      	movs	r1, #0
 8003fb2:	2084      	movs	r0, #132	; 0x84
 8003fb4:	f7fc fd62 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8003fb8:	2100      	movs	r1, #0
 8003fba:	2085      	movs	r0, #133	; 0x85
 8003fbc:	f7fc fd5e 	bl	8000a7c <LCD_WriteReg>
		//
		LCD_WriteReg(0x0090, 0x0010);
 8003fc0:	2110      	movs	r1, #16
 8003fc2:	2090      	movs	r0, #144	; 0x90
 8003fc4:	f7fc fd5a 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8003fc8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003fcc:	2092      	movs	r0, #146	; 0x92
 8003fce:	f7fc fd55 	bl	8000a7c <LCD_WriteReg>

		LCD_WriteReg(0x0007, 0x0133);
 8003fd2:	f240 1133 	movw	r1, #307	; 0x133
 8003fd6:	2007      	movs	r0, #7
 8003fd8:	f7fc fd50 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x0022);		//
 8003fdc:	2122      	movs	r1, #34	; 0x22
 8003fde:	2000      	movs	r0, #0
 8003fe0:	f7fc fd4c 	bl	8000a7c <LCD_WriteReg>
 8003fe4:	f001 bc3a 	b.w	800585c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9328)		//ILI9328   OK
 8003fe8:	4b7d      	ldr	r3, [pc, #500]	; (80041e0 <LCD_Init+0x27b8>)
 8003fea:	889b      	ldrh	r3, [r3, #4]
 8003fec:	f249 3228 	movw	r2, #37672	; 0x9328
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	f040 80f7 	bne.w	80041e4 <LCD_Init+0x27bc>
			{
		LCD_WriteReg(0x00EC, 0x108F);		// internal timeing
 8003ff6:	f241 018f 	movw	r1, #4239	; 0x108f
 8003ffa:	20ec      	movs	r0, #236	; 0xec
 8003ffc:	f7fc fd3e 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x00EF, 0x1234);		// ADD
 8004000:	f241 2134 	movw	r1, #4660	; 0x1234
 8004004:	20ef      	movs	r0, #239	; 0xef
 8004006:	f7fc fd39 	bl	8000a7c <LCD_WriteReg>
		//LCD_WriteReg(0x00e7,0x0010);      
		//LCD_WriteReg(0x0000,0x0001);//开启内部时钟
		LCD_WriteReg(0x0001, 0x0100);
 800400a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800400e:	2001      	movs	r0, #1
 8004010:	f7fc fd34 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);        //电源开启
 8004014:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004018:	2002      	movs	r0, #2
 800401a:	f7fc fd2f 	bl	8000a7c <LCD_WriteReg>
		// 1  1   0    D->U	L->R
		// 0  0   1	   R->L U->D
		// 1  0   1    U->D	R->L
		// 0  1   1    L->R U->D 正常就用这个.
		// 1  1   1	   U->D	L->R
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (0 << 3));		//65K
 800401e:	f241 0130 	movw	r1, #4144	; 0x1030
 8004022:	2003      	movs	r0, #3
 8004024:	f7fc fd2a 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8004028:	2100      	movs	r1, #0
 800402a:	2004      	movs	r0, #4
 800402c:	f7fc fd26 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8004030:	f240 2102 	movw	r1, #514	; 0x202
 8004034:	2008      	movs	r0, #8
 8004036:	f7fc fd21 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 800403a:	2100      	movs	r1, #0
 800403c:	2009      	movs	r0, #9
 800403e:	f7fc fd1d 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);		//display setting
 8004042:	2100      	movs	r1, #0
 8004044:	200a      	movs	r0, #10
 8004046:	f7fc fd19 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0001);		//display setting
 800404a:	2101      	movs	r1, #1
 800404c:	200c      	movs	r0, #12
 800404e:	f7fc fd15 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);		//0f3c
 8004052:	2100      	movs	r1, #0
 8004054:	200d      	movs	r0, #13
 8004056:	f7fc fd11 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x000f, 0x0000);
 800405a:	2100      	movs	r1, #0
 800405c:	200f      	movs	r0, #15
 800405e:	f7fc fd0d 	bl	8000a7c <LCD_WriteReg>
		//电源配置
		LCD_WriteReg(0x0010, 0x0000);
 8004062:	2100      	movs	r1, #0
 8004064:	2010      	movs	r0, #16
 8004066:	f7fc fd09 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 800406a:	2107      	movs	r1, #7
 800406c:	2011      	movs	r0, #17
 800406e:	f7fc fd05 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 8004072:	2100      	movs	r1, #0
 8004074:	2012      	movs	r0, #18
 8004076:	f7fc fd01 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 800407a:	2100      	movs	r1, #0
 800407c:	2013      	movs	r0, #19
 800407e:	f7fc fcfd 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0001);
 8004082:	2101      	movs	r1, #1
 8004084:	2007      	movs	r0, #7
 8004086:	f7fc fcf9 	bl	8000a7c <LCD_WriteReg>
		HAL_Delay(50);
 800408a:	2032      	movs	r0, #50	; 0x32
 800408c:	f001 ff4a 	bl	8005f24 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1490);
 8004090:	f241 4190 	movw	r1, #5264	; 0x1490
 8004094:	2010      	movs	r0, #16
 8004096:	f7fc fcf1 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 800409a:	f240 2127 	movw	r1, #551	; 0x227
 800409e:	2011      	movs	r0, #17
 80040a0:	f7fc fcec 	bl	8000a7c <LCD_WriteReg>
		HAL_Delay(50);
 80040a4:	2032      	movs	r0, #50	; 0x32
 80040a6:	f001 ff3d 	bl	8005f24 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x008A);
 80040aa:	218a      	movs	r1, #138	; 0x8a
 80040ac:	2012      	movs	r0, #18
 80040ae:	f7fc fce5 	bl	8000a7c <LCD_WriteReg>
		HAL_Delay(50);
 80040b2:	2032      	movs	r0, #50	; 0x32
 80040b4:	f001 ff36 	bl	8005f24 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x1a00);
 80040b8:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 80040bc:	2013      	movs	r0, #19
 80040be:	f7fc fcdd 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0006);
 80040c2:	2106      	movs	r1, #6
 80040c4:	2029      	movs	r0, #41	; 0x29
 80040c6:	f7fc fcd9 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x002b, 0x000d);
 80040ca:	210d      	movs	r1, #13
 80040cc:	202b      	movs	r0, #43	; 0x2b
 80040ce:	f7fc fcd5 	bl	8000a7c <LCD_WriteReg>
		HAL_Delay(50);
 80040d2:	2032      	movs	r0, #50	; 0x32
 80040d4:	f001 ff26 	bl	8005f24 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000);
 80040d8:	2100      	movs	r1, #0
 80040da:	2020      	movs	r0, #32
 80040dc:	f7fc fcce 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 80040e0:	2100      	movs	r1, #0
 80040e2:	2021      	movs	r0, #33	; 0x21
 80040e4:	f7fc fcca 	bl	8000a7c <LCD_WriteReg>
		HAL_Delay(50);
 80040e8:	2032      	movs	r0, #50	; 0x32
 80040ea:	f001 ff1b 	bl	8005f24 <HAL_Delay>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0000);
 80040ee:	2100      	movs	r1, #0
 80040f0:	2030      	movs	r0, #48	; 0x30
 80040f2:	f7fc fcc3 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0604);
 80040f6:	f240 6104 	movw	r1, #1540	; 0x604
 80040fa:	2031      	movs	r0, #49	; 0x31
 80040fc:	f7fc fcbe 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0305);
 8004100:	f240 3105 	movw	r1, #773	; 0x305
 8004104:	2032      	movs	r0, #50	; 0x32
 8004106:	f7fc fcb9 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0000);
 800410a:	2100      	movs	r1, #0
 800410c:	2035      	movs	r0, #53	; 0x35
 800410e:	f7fc fcb5 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0C09);
 8004112:	f640 4109 	movw	r1, #3081	; 0xc09
 8004116:	2036      	movs	r0, #54	; 0x36
 8004118:	f7fc fcb0 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0204);
 800411c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004120:	2037      	movs	r0, #55	; 0x37
 8004122:	f7fc fcab 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0301);
 8004126:	f240 3101 	movw	r1, #769	; 0x301
 800412a:	2038      	movs	r0, #56	; 0x38
 800412c:	f7fc fca6 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 8004130:	f240 7107 	movw	r1, #1799	; 0x707
 8004134:	2039      	movs	r0, #57	; 0x39
 8004136:	f7fc fca1 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x003c, 0x0000);
 800413a:	2100      	movs	r1, #0
 800413c:	203c      	movs	r0, #60	; 0x3c
 800413e:	f7fc fc9d 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x003d, 0x0a0a);
 8004142:	f640 210a 	movw	r1, #2570	; 0xa0a
 8004146:	203d      	movs	r0, #61	; 0x3d
 8004148:	f7fc fc98 	bl	8000a7c <LCD_WriteReg>
		HAL_Delay(50);
 800414c:	2032      	movs	r0, #50	; 0x32
 800414e:	f001 fee9 	bl	8005f24 <HAL_Delay>
		LCD_WriteReg(0x0050, 0x0000); //水平GRAM起始位置
 8004152:	2100      	movs	r1, #0
 8004154:	2050      	movs	r0, #80	; 0x50
 8004156:	f7fc fc91 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef); //水平GRAM终止位置
 800415a:	21ef      	movs	r1, #239	; 0xef
 800415c:	2051      	movs	r0, #81	; 0x51
 800415e:	f7fc fc8d 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); //垂直GRAM起始位置
 8004162:	2100      	movs	r1, #0
 8004164:	2052      	movs	r0, #82	; 0x52
 8004166:	f7fc fc89 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f); //垂直GRAM终止位置
 800416a:	f240 113f 	movw	r1, #319	; 0x13f
 800416e:	2053      	movs	r0, #83	; 0x53
 8004170:	f7fc fc84 	bl	8000a7c <LCD_WriteReg>

		LCD_WriteReg(0x0060, 0xa700);
 8004174:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 8004178:	2060      	movs	r0, #96	; 0x60
 800417a:	f7fc fc7f 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 800417e:	2101      	movs	r1, #1
 8004180:	2061      	movs	r0, #97	; 0x61
 8004182:	f7fc fc7b 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 8004186:	2100      	movs	r1, #0
 8004188:	206a      	movs	r0, #106	; 0x6a
 800418a:	f7fc fc77 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 800418e:	2100      	movs	r1, #0
 8004190:	2080      	movs	r0, #128	; 0x80
 8004192:	f7fc fc73 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8004196:	2100      	movs	r1, #0
 8004198:	2081      	movs	r0, #129	; 0x81
 800419a:	f7fc fc6f 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 800419e:	2100      	movs	r1, #0
 80041a0:	2082      	movs	r0, #130	; 0x82
 80041a2:	f7fc fc6b 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 80041a6:	2100      	movs	r1, #0
 80041a8:	2083      	movs	r0, #131	; 0x83
 80041aa:	f7fc fc67 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 80041ae:	2100      	movs	r1, #0
 80041b0:	2084      	movs	r0, #132	; 0x84
 80041b2:	f7fc fc63 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 80041b6:	2100      	movs	r1, #0
 80041b8:	2085      	movs	r0, #133	; 0x85
 80041ba:	f7fc fc5f 	bl	8000a7c <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0010);
 80041be:	2110      	movs	r1, #16
 80041c0:	2090      	movs	r0, #144	; 0x90
 80041c2:	f7fc fc5b 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 80041c6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80041ca:	2092      	movs	r0, #146	; 0x92
 80041cc:	f7fc fc56 	bl	8000a7c <LCD_WriteReg>
		//开启显示设置
		LCD_WriteReg(0x0007, 0x0133);
 80041d0:	f240 1133 	movw	r1, #307	; 0x133
 80041d4:	2007      	movs	r0, #7
 80041d6:	f7fc fc51 	bl	8000a7c <LCD_WriteReg>
 80041da:	f001 bb3f 	b.w	800585c <LCD_Init+0x3e34>
 80041de:	bf00      	nop
 80041e0:	20000080 	.word	0x20000080
	} else if (lcddev.id == 0x9320) //测试OK.
 80041e4:	4bce      	ldr	r3, [pc, #824]	; (8004520 <LCD_Init+0x2af8>)
 80041e6:	889b      	ldrh	r3, [r3, #4]
 80041e8:	f249 3220 	movw	r2, #37664	; 0x9320
 80041ec:	4293      	cmp	r3, r2
 80041ee:	f040 80ad 	bne.w	800434c <LCD_Init+0x2924>
			{
		LCD_WriteReg(0x00, 0x0000);
 80041f2:	2100      	movs	r1, #0
 80041f4:	2000      	movs	r0, #0
 80041f6:	f7fc fc41 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x01, 0x0100);	//Driver Output Contral.
 80041fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80041fe:	2001      	movs	r0, #1
 8004200:	f7fc fc3c 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700);	//LCD Driver Waveform Contral.
 8004204:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004208:	2002      	movs	r0, #2
 800420a:	f7fc fc37 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030);	//Entry Mode Set.
 800420e:	f241 0130 	movw	r1, #4144	; 0x1030
 8004212:	2003      	movs	r0, #3
 8004214:	f7fc fc32 	bl	8000a7c <LCD_WriteReg>
		//LCD_WriteReg(0x03,0x1018);	//Entry Mode Set.

		LCD_WriteReg(0x04, 0x0000);	//Scalling Contral.
 8004218:	2100      	movs	r1, #0
 800421a:	2004      	movs	r0, #4
 800421c:	f7fc fc2e 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0202);	//Display Contral 2.(0x0207)
 8004220:	f240 2102 	movw	r1, #514	; 0x202
 8004224:	2008      	movs	r0, #8
 8004226:	f7fc fc29 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000);	//Display Contral 3.(0x0000)
 800422a:	2100      	movs	r1, #0
 800422c:	2009      	movs	r0, #9
 800422e:	f7fc fc25 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0a, 0x0000);	//Frame Cycle Contal.(0x0000)
 8004232:	2100      	movs	r1, #0
 8004234:	200a      	movs	r0, #10
 8004236:	f7fc fc21 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0c, (1 << 0));	//Extern Display Interface Contral 1.(0x0000)
 800423a:	2101      	movs	r1, #1
 800423c:	200c      	movs	r0, #12
 800423e:	f7fc fc1d 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0d, 0x0000);	//Frame Maker Position.
 8004242:	2100      	movs	r1, #0
 8004244:	200d      	movs	r0, #13
 8004246:	f7fc fc19 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0f, 0x0000);	//Extern Display Interface Contral 2.
 800424a:	2100      	movs	r1, #0
 800424c:	200f      	movs	r0, #15
 800424e:	f7fc fc15 	bl	8000a7c <LCD_WriteReg>
		HAL_Delay(50);
 8004252:	2032      	movs	r0, #50	; 0x32
 8004254:	f001 fe66 	bl	8005f24 <HAL_Delay>
		LCD_WriteReg(0x07, 0x0101);	//Display Contral.
 8004258:	f240 1101 	movw	r1, #257	; 0x101
 800425c:	2007      	movs	r0, #7
 800425e:	f7fc fc0d 	bl	8000a7c <LCD_WriteReg>
		HAL_Delay(50);
 8004262:	2032      	movs	r0, #50	; 0x32
 8004264:	f001 fe5e 	bl	8005f24 <HAL_Delay>
		LCD_WriteReg(0x10, (1 << 12) | (0 << 8) | (1 << 7) | (1 << 6) | (0 << 4));//Power Control 1.(0x16b0)
 8004268:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 800426c:	2010      	movs	r0, #16
 800426e:	f7fc fc05 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0007);								//Power Control 2.(0x0001)
 8004272:	2107      	movs	r1, #7
 8004274:	2011      	movs	r0, #17
 8004276:	f7fc fc01 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x12, (1 << 8) | (1 << 4) | (0 << 0));	//Power Control 3.(0x0138)
 800427a:	f44f 7188 	mov.w	r1, #272	; 0x110
 800427e:	2012      	movs	r0, #18
 8004280:	f7fc fbfc 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0b00);								//Power Control 4.
 8004284:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 8004288:	2013      	movs	r0, #19
 800428a:	f7fc fbf7 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0000);								//Power Control 7.
 800428e:	2100      	movs	r1, #0
 8004290:	2029      	movs	r0, #41	; 0x29
 8004292:	f7fc fbf3 	bl	8000a7c <LCD_WriteReg>

		LCD_WriteReg(0x2b, (1 << 14) | (1 << 4));
 8004296:	f244 0110 	movw	r1, #16400	; 0x4010
 800429a:	202b      	movs	r0, #43	; 0x2b
 800429c:	f7fc fbee 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x50, 0);	//Set X Star
 80042a0:	2100      	movs	r1, #0
 80042a2:	2050      	movs	r0, #80	; 0x50
 80042a4:	f7fc fbea 	bl	8000a7c <LCD_WriteReg>
		//水平GRAM终止位置Set X End.
		LCD_WriteReg(0x51, 239);	//Set Y Star
 80042a8:	21ef      	movs	r1, #239	; 0xef
 80042aa:	2051      	movs	r0, #81	; 0x51
 80042ac:	f7fc fbe6 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x52, 0);	//Set Y End.t.
 80042b0:	2100      	movs	r1, #0
 80042b2:	2052      	movs	r0, #82	; 0x52
 80042b4:	f7fc fbe2 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x53, 319);	//
 80042b8:	f240 113f 	movw	r1, #319	; 0x13f
 80042bc:	2053      	movs	r0, #83	; 0x53
 80042be:	f7fc fbdd 	bl	8000a7c <LCD_WriteReg>

		LCD_WriteReg(0x60, 0x2700);	//Driver Output Control.
 80042c2:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80042c6:	2060      	movs	r0, #96	; 0x60
 80042c8:	f7fc fbd8 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x61, 0x0001);	//Driver Output Control.
 80042cc:	2101      	movs	r1, #1
 80042ce:	2061      	movs	r0, #97	; 0x61
 80042d0:	f7fc fbd4 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x6a, 0x0000);	//Vertical Srcoll Control.
 80042d4:	2100      	movs	r1, #0
 80042d6:	206a      	movs	r0, #106	; 0x6a
 80042d8:	f7fc fbd0 	bl	8000a7c <LCD_WriteReg>

		LCD_WriteReg(0x80, 0x0000);	//Display Position? Partial Display 1.
 80042dc:	2100      	movs	r1, #0
 80042de:	2080      	movs	r0, #128	; 0x80
 80042e0:	f7fc fbcc 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000);	//RAM Address Start? Partial Display 1.
 80042e4:	2100      	movs	r1, #0
 80042e6:	2081      	movs	r0, #129	; 0x81
 80042e8:	f7fc fbc8 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000);	//RAM Address End-Partial Display 1.
 80042ec:	2100      	movs	r1, #0
 80042ee:	2082      	movs	r0, #130	; 0x82
 80042f0:	f7fc fbc4 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000);	//Displsy Position? Partial Display 2.
 80042f4:	2100      	movs	r1, #0
 80042f6:	2083      	movs	r0, #131	; 0x83
 80042f8:	f7fc fbc0 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000);	//RAM Address Start? Partial Display 2.
 80042fc:	2100      	movs	r1, #0
 80042fe:	2084      	movs	r0, #132	; 0x84
 8004300:	f7fc fbbc 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000);	//RAM Address End? Partial Display 2.
 8004304:	2100      	movs	r1, #0
 8004306:	2085      	movs	r0, #133	; 0x85
 8004308:	f7fc fbb8 	bl	8000a7c <LCD_WriteReg>

		LCD_WriteReg(0x90, (0 << 7) | (16 << 0));	//Frame Cycle Contral.(0x0013)
 800430c:	2110      	movs	r1, #16
 800430e:	2090      	movs	r0, #144	; 0x90
 8004310:	f7fc fbb4 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);	//Panel Interface Contral 2.(0x0000)
 8004314:	2100      	movs	r1, #0
 8004316:	2092      	movs	r0, #146	; 0x92
 8004318:	f7fc fbb0 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0001);	//Panel Interface Contral 3.
 800431c:	2101      	movs	r1, #1
 800431e:	2093      	movs	r0, #147	; 0x93
 8004320:	f7fc fbac 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);	//Frame Cycle Contral.(0x0110)
 8004324:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004328:	2095      	movs	r0, #149	; 0x95
 800432a:	f7fc fba7 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x97, (0 << 8));	//
 800432e:	2100      	movs	r1, #0
 8004330:	2097      	movs	r0, #151	; 0x97
 8004332:	f7fc fba3 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x98, 0x0000);	//Frame Cycle Contral.
 8004336:	2100      	movs	r1, #0
 8004338:	2098      	movs	r0, #152	; 0x98
 800433a:	f7fc fb9f 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);	//(0x0173)
 800433e:	f240 1173 	movw	r1, #371	; 0x173
 8004342:	2007      	movs	r0, #7
 8004344:	f7fc fb9a 	bl	8000a7c <LCD_WriteReg>
 8004348:	f001 ba88 	b.w	800585c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0X9331)	//OK |/|/|
 800434c:	4b74      	ldr	r3, [pc, #464]	; (8004520 <LCD_Init+0x2af8>)
 800434e:	889b      	ldrh	r3, [r3, #4]
 8004350:	f249 3231 	movw	r2, #37681	; 0x9331
 8004354:	4293      	cmp	r3, r2
 8004356:	f040 80e5 	bne.w	8004524 <LCD_Init+0x2afc>
			{
		LCD_WriteReg(0x00E7, 0x1014);
 800435a:	f241 0114 	movw	r1, #4116	; 0x1014
 800435e:	20e7      	movs	r0, #231	; 0xe7
 8004360:	f7fc fb8c 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100); // set SS and SM bit
 8004364:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004368:	2001      	movs	r0, #1
 800436a:	f7fc fb87 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200); // set 1 line inversion
 800436e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004372:	2002      	movs	r0, #2
 8004374:	f7fc fb82 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (1 << 3)); //65K
 8004378:	f241 0138 	movw	r1, #4152	; 0x1038
 800437c:	2003      	movs	r0, #3
 800437e:	f7fc fb7d 	bl	8000a7c <LCD_WriteReg>
		//LCD_WriteReg(0x0003, 0x1030); // set GRAM write direction and BGR=1.
		LCD_WriteReg(0x0008, 0x0202); // set the back porch and front porch
 8004382:	f240 2102 	movw	r1, #514	; 0x202
 8004386:	2008      	movs	r0, #8
 8004388:	f7fc fb78 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000); // set non-display area refresh cycle ISC[3:0]
 800438c:	2100      	movs	r1, #0
 800438e:	2009      	movs	r0, #9
 8004390:	f7fc fb74 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000); // FMARK function
 8004394:	2100      	movs	r1, #0
 8004396:	200a      	movs	r0, #10
 8004398:	f7fc fb70 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000); // RGB interface setting
 800439c:	2100      	movs	r1, #0
 800439e:	200c      	movs	r0, #12
 80043a0:	f7fc fb6c 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000); // Frame marker Position
 80043a4:	2100      	movs	r1, #0
 80043a6:	200d      	movs	r0, #13
 80043a8:	f7fc fb68 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); // RGB interface polarity
 80043ac:	2100      	movs	r1, #0
 80043ae:	200f      	movs	r0, #15
 80043b0:	f7fc fb64 	bl	8000a7c <LCD_WriteReg>
		//*************Power On sequence ****************//
		LCD_WriteReg(0x0010, 0x0000); // SAP, BT[3:0], AP, DSTB, SLP, STB
 80043b4:	2100      	movs	r1, #0
 80043b6:	2010      	movs	r0, #16
 80043b8:	f7fc fb60 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007); // DC1[2:0], DC0[2:0], VC[2:0]
 80043bc:	2107      	movs	r1, #7
 80043be:	2011      	movs	r0, #17
 80043c0:	f7fc fb5c 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000); // VREG1OUT voltage
 80043c4:	2100      	movs	r1, #0
 80043c6:	2012      	movs	r0, #18
 80043c8:	f7fc fb58 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000); // VDV[4:0] for VCOM amplitude
 80043cc:	2100      	movs	r1, #0
 80043ce:	2013      	movs	r0, #19
 80043d0:	f7fc fb54 	bl	8000a7c <LCD_WriteReg>
		HAL_Delay(200); // Dis-charge capacitor power voltage
 80043d4:	20c8      	movs	r0, #200	; 0xc8
 80043d6:	f001 fda5 	bl	8005f24 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1690); // SAP, BT[3:0], AP, DSTB, SLP, STB
 80043da:	f241 6190 	movw	r1, #5776	; 0x1690
 80043de:	2010      	movs	r0, #16
 80043e0:	f7fc fb4c 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227); // DC1[2:0], DC0[2:0], VC[2:0]
 80043e4:	f240 2127 	movw	r1, #551	; 0x227
 80043e8:	2011      	movs	r0, #17
 80043ea:	f7fc fb47 	bl	8000a7c <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 80043ee:	2032      	movs	r0, #50	; 0x32
 80043f0:	f001 fd98 	bl	8005f24 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x000C); // Internal reference voltage= Vci;
 80043f4:	210c      	movs	r1, #12
 80043f6:	2012      	movs	r0, #18
 80043f8:	f7fc fb40 	bl	8000a7c <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 80043fc:	2032      	movs	r0, #50	; 0x32
 80043fe:	f001 fd91 	bl	8005f24 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x0800); // Set VDV[4:0] for VCOM amplitude
 8004402:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004406:	2013      	movs	r0, #19
 8004408:	f7fc fb38 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0011); // Set VCM[5:0] for VCOMH
 800440c:	2111      	movs	r1, #17
 800440e:	2029      	movs	r0, #41	; 0x29
 8004410:	f7fc fb34 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000B); // Set Frame Rate
 8004414:	210b      	movs	r1, #11
 8004416:	202b      	movs	r0, #43	; 0x2b
 8004418:	f7fc fb30 	bl	8000a7c <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 800441c:	2032      	movs	r0, #50	; 0x32
 800441e:	f001 fd81 	bl	8005f24 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000); // GRAM horizontal Address
 8004422:	2100      	movs	r1, #0
 8004424:	2020      	movs	r0, #32
 8004426:	f7fc fb29 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x013f); // GRAM Vertical Address
 800442a:	f240 113f 	movw	r1, #319	; 0x13f
 800442e:	2021      	movs	r0, #33	; 0x21
 8004430:	f7fc fb24 	bl	8000a7c <LCD_WriteReg>
		// ----------- Adjust the Gamma Curve ----------//
		LCD_WriteReg(0x0030, 0x0000);
 8004434:	2100      	movs	r1, #0
 8004436:	2030      	movs	r0, #48	; 0x30
 8004438:	f7fc fb20 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0106);
 800443c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004440:	2031      	movs	r0, #49	; 0x31
 8004442:	f7fc fb1b 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0000);
 8004446:	2100      	movs	r1, #0
 8004448:	2032      	movs	r0, #50	; 0x32
 800444a:	f7fc fb17 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 800444e:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004452:	2035      	movs	r0, #53	; 0x35
 8004454:	f7fc fb12 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x160A);
 8004458:	f241 610a 	movw	r1, #5642	; 0x160a
 800445c:	2036      	movs	r0, #54	; 0x36
 800445e:	f7fc fb0d 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707);
 8004462:	f240 7107 	movw	r1, #1799	; 0x707
 8004466:	2037      	movs	r0, #55	; 0x37
 8004468:	f7fc fb08 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0106);
 800446c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004470:	2038      	movs	r0, #56	; 0x38
 8004472:	f7fc fb03 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 8004476:	f240 7107 	movw	r1, #1799	; 0x707
 800447a:	2039      	movs	r0, #57	; 0x39
 800447c:	f7fc fafe 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0402);
 8004480:	f240 4102 	movw	r1, #1026	; 0x402
 8004484:	203c      	movs	r0, #60	; 0x3c
 8004486:	f7fc faf9 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0C0F);
 800448a:	f640 410f 	movw	r1, #3087	; 0xc0f
 800448e:	203d      	movs	r0, #61	; 0x3d
 8004490:	f7fc faf4 	bl	8000a7c <LCD_WriteReg>
		//------------------ Set GRAM area ---------------//
		LCD_WriteReg(0x0050, 0x0000); // Horizontal GRAM Start Address
 8004494:	2100      	movs	r1, #0
 8004496:	2050      	movs	r0, #80	; 0x50
 8004498:	f7fc faf0 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF); // Horizontal GRAM End Address
 800449c:	21ef      	movs	r1, #239	; 0xef
 800449e:	2051      	movs	r0, #81	; 0x51
 80044a0:	f7fc faec 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); // Vertical GRAM Start Address
 80044a4:	2100      	movs	r1, #0
 80044a6:	2052      	movs	r0, #82	; 0x52
 80044a8:	f7fc fae8 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F); // Vertical GRAM Start Address
 80044ac:	f240 113f 	movw	r1, #319	; 0x13f
 80044b0:	2053      	movs	r0, #83	; 0x53
 80044b2:	f7fc fae3 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700); // Gate Scan Line
 80044b6:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80044ba:	2060      	movs	r0, #96	; 0x60
 80044bc:	f7fc fade 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001); // NDL,VLE, REV 
 80044c0:	2101      	movs	r1, #1
 80044c2:	2061      	movs	r0, #97	; 0x61
 80044c4:	f7fc fada 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000); // set scrolling line
 80044c8:	2100      	movs	r1, #0
 80044ca:	206a      	movs	r0, #106	; 0x6a
 80044cc:	f7fc fad6 	bl	8000a7c <LCD_WriteReg>
		//-------------- Partial Display Control ---------//
		LCD_WriteReg(0x0080, 0x0000);
 80044d0:	2100      	movs	r1, #0
 80044d2:	2080      	movs	r0, #128	; 0x80
 80044d4:	f7fc fad2 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 80044d8:	2100      	movs	r1, #0
 80044da:	2081      	movs	r0, #129	; 0x81
 80044dc:	f7fc face 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 80044e0:	2100      	movs	r1, #0
 80044e2:	2082      	movs	r0, #130	; 0x82
 80044e4:	f7fc faca 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 80044e8:	2100      	movs	r1, #0
 80044ea:	2083      	movs	r0, #131	; 0x83
 80044ec:	f7fc fac6 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 80044f0:	2100      	movs	r1, #0
 80044f2:	2084      	movs	r0, #132	; 0x84
 80044f4:	f7fc fac2 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 80044f8:	2100      	movs	r1, #0
 80044fa:	2085      	movs	r0, #133	; 0x85
 80044fc:	f7fc fabe 	bl	8000a7c <LCD_WriteReg>
		//-------------- Panel Control -------------------//
		LCD_WriteReg(0x0090, 0x0010);
 8004500:	2110      	movs	r1, #16
 8004502:	2090      	movs	r0, #144	; 0x90
 8004504:	f7fc faba 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004508:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800450c:	2092      	movs	r0, #146	; 0x92
 800450e:	f7fc fab5 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0133); // 262K color and display ON
 8004512:	f240 1133 	movw	r1, #307	; 0x133
 8004516:	2007      	movs	r0, #7
 8004518:	f7fc fab0 	bl	8000a7c <LCD_WriteReg>
 800451c:	f001 b99e 	b.w	800585c <LCD_Init+0x3e34>
 8004520:	20000080 	.word	0x20000080
	} else if (lcddev.id == 0x5408) {
 8004524:	4be2      	ldr	r3, [pc, #904]	; (80048b0 <LCD_Init+0x2e88>)
 8004526:	889b      	ldrh	r3, [r3, #4]
 8004528:	f245 4208 	movw	r2, #21512	; 0x5408
 800452c:	4293      	cmp	r3, r2
 800452e:	f040 80a3 	bne.w	8004678 <LCD_Init+0x2c50>
		LCD_WriteReg(0x01, 0x0100);
 8004532:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004536:	2001      	movs	r0, #1
 8004538:	f7fc faa0 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700); //LCD Driving Waveform Contral
 800453c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004540:	2002      	movs	r0, #2
 8004542:	f7fc fa9b 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030); //Entry Mode设置
 8004546:	f241 0130 	movw	r1, #4144	; 0x1030
 800454a:	2003      	movs	r0, #3
 800454c:	f7fc fa96 	bl	8000a7c <LCD_WriteReg>
		//指针从左至右自上而下的自动增模式
		//Normal Mode(Window Mode disable)
		//RGB格式
		//16位数据2次传输的8总线设置
		LCD_WriteReg(0x04, 0x0000); //Scalling Control register
 8004550:	2100      	movs	r1, #0
 8004552:	2004      	movs	r0, #4
 8004554:	f7fc fa92 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0207); //Display Control 2
 8004558:	f240 2107 	movw	r1, #519	; 0x207
 800455c:	2008      	movs	r0, #8
 800455e:	f7fc fa8d 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000); //Display Control 3
 8004562:	2100      	movs	r1, #0
 8004564:	2009      	movs	r0, #9
 8004566:	f7fc fa89 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0A, 0x0000); //Frame Cycle Control
 800456a:	2100      	movs	r1, #0
 800456c:	200a      	movs	r0, #10
 800456e:	f7fc fa85 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0C, 0x0000); //External Display Interface Control 1
 8004572:	2100      	movs	r1, #0
 8004574:	200c      	movs	r0, #12
 8004576:	f7fc fa81 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0D, 0x0000); //Frame Maker Position
 800457a:	2100      	movs	r1, #0
 800457c:	200d      	movs	r0, #13
 800457e:	f7fc fa7d 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0F, 0x0000); //External Display Interface Control 2
 8004582:	2100      	movs	r1, #0
 8004584:	200f      	movs	r0, #15
 8004586:	f7fc fa79 	bl	8000a7c <LCD_WriteReg>
		HAL_Delay(20);
 800458a:	2014      	movs	r0, #20
 800458c:	f001 fcca 	bl	8005f24 <HAL_Delay>
		//TFT 液晶彩色图像显示方法14
		LCD_WriteReg(0x10, 0x16B0); //0x14B0 //Power Control 1
 8004590:	f241 61b0 	movw	r1, #5808	; 0x16b0
 8004594:	2010      	movs	r0, #16
 8004596:	f7fc fa71 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0001); //0x0007 //Power Control 2
 800459a:	2101      	movs	r1, #1
 800459c:	2011      	movs	r0, #17
 800459e:	f7fc fa6d 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x17, 0x0001); //0x0000 //Power Control 3
 80045a2:	2101      	movs	r1, #1
 80045a4:	2017      	movs	r0, #23
 80045a6:	f7fc fa69 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x12, 0x0138); //0x013B //Power Control 4
 80045aa:	f44f 719c 	mov.w	r1, #312	; 0x138
 80045ae:	2012      	movs	r0, #18
 80045b0:	f7fc fa64 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0800); //0x0800 //Power Control 5
 80045b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80045b8:	2013      	movs	r0, #19
 80045ba:	f7fc fa5f 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0009); //NVM read data 2
 80045be:	2109      	movs	r1, #9
 80045c0:	2029      	movs	r0, #41	; 0x29
 80045c2:	f7fc fa5b 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x2a, 0x0009); //NVM read data 3
 80045c6:	2109      	movs	r1, #9
 80045c8:	202a      	movs	r0, #42	; 0x2a
 80045ca:	f7fc fa57 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0xa4, 0x0000);
 80045ce:	2100      	movs	r1, #0
 80045d0:	20a4      	movs	r0, #164	; 0xa4
 80045d2:	f7fc fa53 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x50, 0x0000); //设置操作窗口的X轴开始列
 80045d6:	2100      	movs	r1, #0
 80045d8:	2050      	movs	r0, #80	; 0x50
 80045da:	f7fc fa4f 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x51, 0x00EF); //设置操作窗口的X轴结束列
 80045de:	21ef      	movs	r1, #239	; 0xef
 80045e0:	2051      	movs	r0, #81	; 0x51
 80045e2:	f7fc fa4b 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x52, 0x0000); //设置操作窗口的Y轴开始行
 80045e6:	2100      	movs	r1, #0
 80045e8:	2052      	movs	r0, #82	; 0x52
 80045ea:	f7fc fa47 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x53, 0x013F); //设置操作窗口的Y轴结束行
 80045ee:	f240 113f 	movw	r1, #319	; 0x13f
 80045f2:	2053      	movs	r0, #83	; 0x53
 80045f4:	f7fc fa42 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x60, 0x2700); //Driver Output Control
 80045f8:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80045fc:	2060      	movs	r0, #96	; 0x60
 80045fe:	f7fc fa3d 	bl	8000a7c <LCD_WriteReg>
		//设置屏幕的点数以及扫描的起始行
		LCD_WriteReg(0x61, 0x0001); //Driver Output Control
 8004602:	2101      	movs	r1, #1
 8004604:	2061      	movs	r0, #97	; 0x61
 8004606:	f7fc fa39 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x6A, 0x0000); //Vertical Scroll Control
 800460a:	2100      	movs	r1, #0
 800460c:	206a      	movs	r0, #106	; 0x6a
 800460e:	f7fc fa35 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x80, 0x0000); //Display Position – Partial Display 1
 8004612:	2100      	movs	r1, #0
 8004614:	2080      	movs	r0, #128	; 0x80
 8004616:	f7fc fa31 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000); //RAM Address Start – Partial Display 1
 800461a:	2100      	movs	r1, #0
 800461c:	2081      	movs	r0, #129	; 0x81
 800461e:	f7fc fa2d 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000); //RAM address End - Partial Display 1
 8004622:	2100      	movs	r1, #0
 8004624:	2082      	movs	r0, #130	; 0x82
 8004626:	f7fc fa29 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000); //Display Position – Partial Display 2
 800462a:	2100      	movs	r1, #0
 800462c:	2083      	movs	r0, #131	; 0x83
 800462e:	f7fc fa25 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000); //RAM Address Start – Partial Display 2
 8004632:	2100      	movs	r1, #0
 8004634:	2084      	movs	r0, #132	; 0x84
 8004636:	f7fc fa21 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000); //RAM address End – Partail Display2
 800463a:	2100      	movs	r1, #0
 800463c:	2085      	movs	r0, #133	; 0x85
 800463e:	f7fc fa1d 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x90, 0x0013); //Frame Cycle Control
 8004642:	2113      	movs	r1, #19
 8004644:	2090      	movs	r0, #144	; 0x90
 8004646:	f7fc fa19 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);  //Panel Interface Control 2
 800464a:	2100      	movs	r1, #0
 800464c:	2092      	movs	r0, #146	; 0x92
 800464e:	f7fc fa15 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0003); //Panel Interface control 3
 8004652:	2103      	movs	r1, #3
 8004654:	2093      	movs	r0, #147	; 0x93
 8004656:	f7fc fa11 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);  //Frame Cycle Control
 800465a:	f44f 7188 	mov.w	r1, #272	; 0x110
 800465e:	2095      	movs	r0, #149	; 0x95
 8004660:	f7fc fa0c 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);
 8004664:	f240 1173 	movw	r1, #371	; 0x173
 8004668:	2007      	movs	r0, #7
 800466a:	f7fc fa07 	bl	8000a7c <LCD_WriteReg>
		HAL_Delay(50);
 800466e:	2032      	movs	r0, #50	; 0x32
 8004670:	f001 fc58 	bl	8005f24 <HAL_Delay>
 8004674:	f001 b8f2 	b.w	800585c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x1505)  //OK
 8004678:	4b8d      	ldr	r3, [pc, #564]	; (80048b0 <LCD_Init+0x2e88>)
 800467a:	889b      	ldrh	r3, [r3, #4]
 800467c:	f241 5205 	movw	r2, #5381	; 0x1505
 8004680:	4293      	cmp	r3, r2
 8004682:	f040 8117 	bne.w	80048b4 <LCD_Init+0x2e8c>
			{
		// second release on 3/5  ,luminance is acceptable,water wave appear during camera preview
		LCD_WriteReg(0x0007, 0x0000);
 8004686:	2100      	movs	r1, #0
 8004688:	2007      	movs	r0, #7
 800468a:	f7fc f9f7 	bl	8000a7c <LCD_WriteReg>
		HAL_Delay(50);
 800468e:	2032      	movs	r0, #50	; 0x32
 8004690:	f001 fc48 	bl	8005f24 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x011C);  //0x011A   why need to set several times?
 8004694:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8004698:	2012      	movs	r0, #18
 800469a:	f7fc f9ef 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x00A4, 0x0001);  //NVM
 800469e:	2101      	movs	r1, #1
 80046a0:	20a4      	movs	r0, #164	; 0xa4
 80046a2:	f7fc f9eb 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x000F);
 80046a6:	210f      	movs	r1, #15
 80046a8:	2008      	movs	r0, #8
 80046aa:	f7fc f9e7 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0008);
 80046ae:	2108      	movs	r1, #8
 80046b0:	200a      	movs	r0, #10
 80046b2:	f7fc f9e3 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0008);
 80046b6:	2108      	movs	r1, #8
 80046b8:	200d      	movs	r0, #13
 80046ba:	f7fc f9df 	bl	8000a7c <LCD_WriteReg>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0707);
 80046be:	f240 7107 	movw	r1, #1799	; 0x707
 80046c2:	2030      	movs	r0, #48	; 0x30
 80046c4:	f7fc f9da 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0007); //0x0707
 80046c8:	2107      	movs	r1, #7
 80046ca:	2031      	movs	r0, #49	; 0x31
 80046cc:	f7fc f9d6 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0603);
 80046d0:	f240 6103 	movw	r1, #1539	; 0x603
 80046d4:	2032      	movs	r0, #50	; 0x32
 80046d6:	f7fc f9d1 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0700);
 80046da:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80046de:	2033      	movs	r0, #51	; 0x33
 80046e0:	f7fc f9cc 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0202);
 80046e4:	f240 2102 	movw	r1, #514	; 0x202
 80046e8:	2034      	movs	r0, #52	; 0x34
 80046ea:	f7fc f9c7 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0002); //?0x0606
 80046ee:	2102      	movs	r1, #2
 80046f0:	2035      	movs	r0, #53	; 0x35
 80046f2:	f7fc f9c3 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x1F0F);
 80046f6:	f641 710f 	movw	r1, #7951	; 0x1f0f
 80046fa:	2036      	movs	r0, #54	; 0x36
 80046fc:	f7fc f9be 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707); //0x0f0f  0x0105
 8004700:	f240 7107 	movw	r1, #1799	; 0x707
 8004704:	2037      	movs	r0, #55	; 0x37
 8004706:	f7fc f9b9 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0000);
 800470a:	2100      	movs	r1, #0
 800470c:	2038      	movs	r0, #56	; 0x38
 800470e:	f7fc f9b5 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0000);
 8004712:	2100      	movs	r1, #0
 8004714:	2039      	movs	r0, #57	; 0x39
 8004716:	f7fc f9b1 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0707);
 800471a:	f240 7107 	movw	r1, #1799	; 0x707
 800471e:	203a      	movs	r0, #58	; 0x3a
 8004720:	f7fc f9ac 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0000); //0x0303
 8004724:	2100      	movs	r1, #0
 8004726:	203b      	movs	r0, #59	; 0x3b
 8004728:	f7fc f9a8 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0007); //?0x0707
 800472c:	2107      	movs	r1, #7
 800472e:	203c      	movs	r0, #60	; 0x3c
 8004730:	f7fc f9a4 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0000); //0x1313//0x1f08
 8004734:	2100      	movs	r1, #0
 8004736:	203d      	movs	r0, #61	; 0x3d
 8004738:	f7fc f9a0 	bl	8000a7c <LCD_WriteReg>
		HAL_Delay(50);
 800473c:	2032      	movs	r0, #50	; 0x32
 800473e:	f001 fbf1 	bl	8005f24 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0001);
 8004742:	2101      	movs	r1, #1
 8004744:	2007      	movs	r0, #7
 8004746:	f7fc f999 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0001); //开启电源
 800474a:	2101      	movs	r1, #1
 800474c:	2017      	movs	r0, #23
 800474e:	f7fc f995 	bl	8000a7c <LCD_WriteReg>
		HAL_Delay(50);
 8004752:	2032      	movs	r0, #50	; 0x32
 8004754:	f001 fbe6 	bl	8005f24 <HAL_Delay>
		//电源配置
		LCD_WriteReg(0x0010, 0x17A0);
 8004758:	f44f 51bd 	mov.w	r1, #6048	; 0x17a0
 800475c:	2010      	movs	r0, #16
 800475e:	f7fc f98d 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0217); //reference voltage VC[2:0]   Vciout = 1.00*Vcivl
 8004762:	f240 2117 	movw	r1, #535	; 0x217
 8004766:	2011      	movs	r0, #17
 8004768:	f7fc f988 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x011E); //0x011c  //Vreg1out = Vcilvl*1.80   is it the same as Vgama1out ?
 800476c:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8004770:	2012      	movs	r0, #18
 8004772:	f7fc f983 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0F00); //VDV[4:0]-->VCOM Amplitude VcomL = VcomH - Vcom Ampl
 8004776:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 800477a:	2013      	movs	r0, #19
 800477c:	f7fc f97e 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x0000);
 8004780:	2100      	movs	r1, #0
 8004782:	202a      	movs	r0, #42	; 0x2a
 8004784:	f7fc f97a 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x000A); //0x0001F  Vcomh = VCM1[4:0]*Vreg1out    gate source voltage??
 8004788:	210a      	movs	r1, #10
 800478a:	2029      	movs	r0, #41	; 0x29
 800478c:	f7fc f976 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x013E); // 0x013C  power supply on
 8004790:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8004794:	2012      	movs	r0, #18
 8004796:	f7fc f971 	bl	8000a7c <LCD_WriteReg>
		//Coordinates Control//
		LCD_WriteReg(0x0050, 0x0000);        //0x0e00
 800479a:	2100      	movs	r1, #0
 800479c:	2050      	movs	r0, #80	; 0x50
 800479e:	f7fc f96d 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 80047a2:	21ef      	movs	r1, #239	; 0xef
 80047a4:	2051      	movs	r0, #81	; 0x51
 80047a6:	f7fc f969 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 80047aa:	2100      	movs	r1, #0
 80047ac:	2052      	movs	r0, #82	; 0x52
 80047ae:	f7fc f965 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 80047b2:	f240 113f 	movw	r1, #319	; 0x13f
 80047b6:	2053      	movs	r0, #83	; 0x53
 80047b8:	f7fc f960 	bl	8000a7c <LCD_WriteReg>
		//Pannel Image Control//
		LCD_WriteReg(0x0060, 0x2700);
 80047bc:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80047c0:	2060      	movs	r0, #96	; 0x60
 80047c2:	f7fc f95b 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 80047c6:	2101      	movs	r1, #1
 80047c8:	2061      	movs	r0, #97	; 0x61
 80047ca:	f7fc f957 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 80047ce:	2100      	movs	r1, #0
 80047d0:	206a      	movs	r0, #106	; 0x6a
 80047d2:	f7fc f953 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 80047d6:	2100      	movs	r1, #0
 80047d8:	2080      	movs	r0, #128	; 0x80
 80047da:	f7fc f94f 	bl	8000a7c <LCD_WriteReg>
		//Partial Image Control//
		LCD_WriteReg(0x0081, 0x0000);
 80047de:	2100      	movs	r1, #0
 80047e0:	2081      	movs	r0, #129	; 0x81
 80047e2:	f7fc f94b 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 80047e6:	2100      	movs	r1, #0
 80047e8:	2082      	movs	r0, #130	; 0x82
 80047ea:	f7fc f947 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 80047ee:	2100      	movs	r1, #0
 80047f0:	2083      	movs	r0, #131	; 0x83
 80047f2:	f7fc f943 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 80047f6:	2100      	movs	r1, #0
 80047f8:	2084      	movs	r0, #132	; 0x84
 80047fa:	f7fc f93f 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 80047fe:	2100      	movs	r1, #0
 8004800:	2085      	movs	r0, #133	; 0x85
 8004802:	f7fc f93b 	bl	8000a7c <LCD_WriteReg>
		//Panel Interface Control//
		LCD_WriteReg(0x0090, 0x0013);        //0x0010 frenqucy
 8004806:	2113      	movs	r1, #19
 8004808:	2090      	movs	r0, #144	; 0x90
 800480a:	f7fc f937 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 800480e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004812:	2092      	movs	r0, #146	; 0x92
 8004814:	f7fc f932 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0005);
 8004818:	2105      	movs	r1, #5
 800481a:	2093      	movs	r0, #147	; 0x93
 800481c:	f7fc f92e 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0095, 0x0000);
 8004820:	2100      	movs	r1, #0
 8004822:	2095      	movs	r0, #149	; 0x95
 8004824:	f7fc f92a 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0097, 0x0000);
 8004828:	2100      	movs	r1, #0
 800482a:	2097      	movs	r0, #151	; 0x97
 800482c:	f7fc f926 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0098, 0x0000);
 8004830:	2100      	movs	r1, #0
 8004832:	2098      	movs	r0, #152	; 0x98
 8004834:	f7fc f922 	bl	8000a7c <LCD_WriteReg>

		LCD_WriteReg(0x0001, 0x0100);
 8004838:	f44f 7180 	mov.w	r1, #256	; 0x100
 800483c:	2001      	movs	r0, #1
 800483e:	f7fc f91d 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8004842:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004846:	2002      	movs	r0, #2
 8004848:	f7fc f918 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 800484c:	f241 0138 	movw	r1, #4152	; 0x1038
 8004850:	2003      	movs	r0, #3
 8004852:	f7fc f913 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8004856:	2100      	movs	r1, #0
 8004858:	2004      	movs	r0, #4
 800485a:	f7fc f90f 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 800485e:	2100      	movs	r1, #0
 8004860:	200c      	movs	r0, #12
 8004862:	f7fc f90b 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8004866:	2100      	movs	r1, #0
 8004868:	200f      	movs	r0, #15
 800486a:	f7fc f907 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);
 800486e:	2100      	movs	r1, #0
 8004870:	2020      	movs	r0, #32
 8004872:	f7fc f903 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8004876:	2100      	movs	r1, #0
 8004878:	2021      	movs	r0, #33	; 0x21
 800487a:	f7fc f8ff 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0021);
 800487e:	2121      	movs	r1, #33	; 0x21
 8004880:	2007      	movs	r0, #7
 8004882:	f7fc f8fb 	bl	8000a7c <LCD_WriteReg>
		HAL_Delay(20);
 8004886:	2014      	movs	r0, #20
 8004888:	f001 fb4c 	bl	8005f24 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 800488c:	2161      	movs	r1, #97	; 0x61
 800488e:	2007      	movs	r0, #7
 8004890:	f7fc f8f4 	bl	8000a7c <LCD_WriteReg>
		HAL_Delay(20);
 8004894:	2014      	movs	r0, #20
 8004896:	f001 fb45 	bl	8005f24 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0173);
 800489a:	f240 1173 	movw	r1, #371	; 0x173
 800489e:	2007      	movs	r0, #7
 80048a0:	f7fc f8ec 	bl	8000a7c <LCD_WriteReg>
		HAL_Delay(20);
 80048a4:	2014      	movs	r0, #20
 80048a6:	f001 fb3d 	bl	8005f24 <HAL_Delay>
 80048aa:	f000 bfd7 	b.w	800585c <LCD_Init+0x3e34>
 80048ae:	bf00      	nop
 80048b0:	20000080 	.word	0x20000080
	} else if (lcddev.id == 0xB505) {
 80048b4:	4bf0      	ldr	r3, [pc, #960]	; (8004c78 <LCD_Init+0x3250>)
 80048b6:	889b      	ldrh	r3, [r3, #4]
 80048b8:	f24b 5205 	movw	r2, #46341	; 0xb505
 80048bc:	4293      	cmp	r3, r2
 80048be:	f040 8103 	bne.w	8004ac8 <LCD_Init+0x30a0>
		LCD_WriteReg(0x0000, 0x0000);
 80048c2:	2100      	movs	r1, #0
 80048c4:	2000      	movs	r0, #0
 80048c6:	f7fc f8d9 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 80048ca:	2100      	movs	r1, #0
 80048cc:	2000      	movs	r0, #0
 80048ce:	f7fc f8d5 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 80048d2:	2100      	movs	r1, #0
 80048d4:	2000      	movs	r0, #0
 80048d6:	f7fc f8d1 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 80048da:	2100      	movs	r1, #0
 80048dc:	2000      	movs	r0, #0
 80048de:	f7fc f8cd 	bl	8000a7c <LCD_WriteReg>

		LCD_WriteReg(0x00a4, 0x0001);
 80048e2:	2101      	movs	r1, #1
 80048e4:	20a4      	movs	r0, #164	; 0xa4
 80048e6:	f7fc f8c9 	bl	8000a7c <LCD_WriteReg>
		HAL_Delay(20);
 80048ea:	2014      	movs	r0, #20
 80048ec:	f001 fb1a 	bl	8005f24 <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 80048f0:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80048f4:	2060      	movs	r0, #96	; 0x60
 80048f6:	f7fc f8c1 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 80048fa:	f240 2102 	movw	r1, #514	; 0x202
 80048fe:	2008      	movs	r0, #8
 8004900:	f7fc f8bc 	bl	8000a7c <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0214);
 8004904:	f44f 7105 	mov.w	r1, #532	; 0x214
 8004908:	2030      	movs	r0, #48	; 0x30
 800490a:	f7fc f8b7 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x3715);
 800490e:	f243 7115 	movw	r1, #14101	; 0x3715
 8004912:	2031      	movs	r0, #49	; 0x31
 8004914:	f7fc f8b2 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0604);
 8004918:	f240 6104 	movw	r1, #1540	; 0x604
 800491c:	2032      	movs	r0, #50	; 0x32
 800491e:	f7fc f8ad 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0e16);
 8004922:	f640 6116 	movw	r1, #3606	; 0xe16
 8004926:	2033      	movs	r0, #51	; 0x33
 8004928:	f7fc f8a8 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x2211);
 800492c:	f242 2111 	movw	r1, #8721	; 0x2211
 8004930:	2034      	movs	r0, #52	; 0x34
 8004932:	f7fc f8a3 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x1500);
 8004936:	f44f 51a8 	mov.w	r1, #5376	; 0x1500
 800493a:	2035      	movs	r0, #53	; 0x35
 800493c:	f7fc f89e 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x8507);
 8004940:	f248 5107 	movw	r1, #34055	; 0x8507
 8004944:	2036      	movs	r0, #54	; 0x36
 8004946:	f7fc f899 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x1407);
 800494a:	f241 4107 	movw	r1, #5127	; 0x1407
 800494e:	2037      	movs	r0, #55	; 0x37
 8004950:	f7fc f894 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x1403);
 8004954:	f241 4103 	movw	r1, #5123	; 0x1403
 8004958:	2038      	movs	r0, #56	; 0x38
 800495a:	f7fc f88f 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0020);
 800495e:	2120      	movs	r1, #32
 8004960:	2039      	movs	r0, #57	; 0x39
 8004962:	f7fc f88b 	bl	8000a7c <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x001a);
 8004966:	211a      	movs	r1, #26
 8004968:	2090      	movs	r0, #144	; 0x90
 800496a:	f7fc f887 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 800496e:	2100      	movs	r1, #0
 8004970:	2010      	movs	r0, #16
 8004972:	f7fc f883 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 8004976:	2107      	movs	r1, #7
 8004978:	2011      	movs	r0, #17
 800497a:	f7fc f87f 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 800497e:	2100      	movs	r1, #0
 8004980:	2012      	movs	r0, #18
 8004982:	f7fc f87b 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 8004986:	2100      	movs	r1, #0
 8004988:	2013      	movs	r0, #19
 800498a:	f7fc f877 	bl	8000a7c <LCD_WriteReg>
		HAL_Delay(20);
 800498e:	2014      	movs	r0, #20
 8004990:	f001 fac8 	bl	8005f24 <HAL_Delay>

		LCD_WriteReg(0x0010, 0x0730);
 8004994:	f44f 61e6 	mov.w	r1, #1840	; 0x730
 8004998:	2010      	movs	r0, #16
 800499a:	f7fc f86f 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0137);
 800499e:	f240 1137 	movw	r1, #311	; 0x137
 80049a2:	2011      	movs	r0, #17
 80049a4:	f7fc f86a 	bl	8000a7c <LCD_WriteReg>
		HAL_Delay(20);
 80049a8:	2014      	movs	r0, #20
 80049aa:	f001 fabb 	bl	8005f24 <HAL_Delay>

		LCD_WriteReg(0x0012, 0x01b8);
 80049ae:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 80049b2:	2012      	movs	r0, #18
 80049b4:	f7fc f862 	bl	8000a7c <LCD_WriteReg>
		HAL_Delay(20);
 80049b8:	2014      	movs	r0, #20
 80049ba:	f001 fab3 	bl	8005f24 <HAL_Delay>

		LCD_WriteReg(0x0013, 0x0f00);
 80049be:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 80049c2:	2013      	movs	r0, #19
 80049c4:	f7fc f85a 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x002a, 0x0080);
 80049c8:	2180      	movs	r1, #128	; 0x80
 80049ca:	202a      	movs	r0, #42	; 0x2a
 80049cc:	f7fc f856 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0048);
 80049d0:	2148      	movs	r1, #72	; 0x48
 80049d2:	2029      	movs	r0, #41	; 0x29
 80049d4:	f7fc f852 	bl	8000a7c <LCD_WriteReg>
		HAL_Delay(20);
 80049d8:	2014      	movs	r0, #20
 80049da:	f001 faa3 	bl	8005f24 <HAL_Delay>

		LCD_WriteReg(0x0001, 0x0100);
 80049de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80049e2:	2001      	movs	r0, #1
 80049e4:	f7fc f84a 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 80049e8:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80049ec:	2002      	movs	r0, #2
 80049ee:	f7fc f845 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 80049f2:	f241 0138 	movw	r1, #4152	; 0x1038
 80049f6:	2003      	movs	r0, #3
 80049f8:	f7fc f840 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 80049fc:	f240 2102 	movw	r1, #514	; 0x202
 8004a00:	2008      	movs	r0, #8
 8004a02:	f7fc f83b 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);
 8004a06:	2100      	movs	r1, #0
 8004a08:	200a      	movs	r0, #10
 8004a0a:	f7fc f837 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0000);
 8004a0e:	2100      	movs	r1, #0
 8004a10:	200c      	movs	r0, #12
 8004a12:	f7fc f833 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);
 8004a16:	2100      	movs	r1, #0
 8004a18:	200d      	movs	r0, #13
 8004a1a:	f7fc f82f 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x000e, 0x0030);
 8004a1e:	2130      	movs	r1, #48	; 0x30
 8004a20:	200e      	movs	r0, #14
 8004a22:	f7fc f82b 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 8004a26:	2100      	movs	r1, #0
 8004a28:	2050      	movs	r0, #80	; 0x50
 8004a2a:	f7fc f827 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef);
 8004a2e:	21ef      	movs	r1, #239	; 0xef
 8004a30:	2051      	movs	r0, #81	; 0x51
 8004a32:	f7fc f823 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8004a36:	2100      	movs	r1, #0
 8004a38:	2052      	movs	r0, #82	; 0x52
 8004a3a:	f7fc f81f 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f);
 8004a3e:	f240 113f 	movw	r1, #319	; 0x13f
 8004a42:	2053      	movs	r0, #83	; 0x53
 8004a44:	f7fc f81a 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700);
 8004a48:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004a4c:	2060      	movs	r0, #96	; 0x60
 8004a4e:	f7fc f815 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8004a52:	2101      	movs	r1, #1
 8004a54:	2061      	movs	r0, #97	; 0x61
 8004a56:	f7fc f811 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 8004a5a:	2100      	movs	r1, #0
 8004a5c:	206a      	movs	r0, #106	; 0x6a
 8004a5e:	f7fc f80d 	bl	8000a7c <LCD_WriteReg>
		//LCD_WriteReg(0x0080,0x0000);
		//LCD_WriteReg(0x0081,0x0000);
		LCD_WriteReg(0x0090, 0X0011);
 8004a62:	2111      	movs	r1, #17
 8004a64:	2090      	movs	r0, #144	; 0x90
 8004a66:	f7fc f809 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004a6a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004a6e:	2092      	movs	r0, #146	; 0x92
 8004a70:	f7fc f804 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0402);
 8004a74:	f240 4102 	movw	r1, #1026	; 0x402
 8004a78:	2093      	movs	r0, #147	; 0x93
 8004a7a:	f7fb ffff 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0094, 0x0002);
 8004a7e:	2102      	movs	r1, #2
 8004a80:	2094      	movs	r0, #148	; 0x94
 8004a82:	f7fb fffb 	bl	8000a7c <LCD_WriteReg>
		HAL_Delay(20);
 8004a86:	2014      	movs	r0, #20
 8004a88:	f001 fa4c 	bl	8005f24 <HAL_Delay>

		LCD_WriteReg(0x0007, 0x0001);
 8004a8c:	2101      	movs	r1, #1
 8004a8e:	2007      	movs	r0, #7
 8004a90:	f7fb fff4 	bl	8000a7c <LCD_WriteReg>
		HAL_Delay(20);
 8004a94:	2014      	movs	r0, #20
 8004a96:	f001 fa45 	bl	8005f24 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 8004a9a:	2161      	movs	r1, #97	; 0x61
 8004a9c:	2007      	movs	r0, #7
 8004a9e:	f7fb ffed 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0173);
 8004aa2:	f240 1173 	movw	r1, #371	; 0x173
 8004aa6:	2007      	movs	r0, #7
 8004aa8:	f7fb ffe8 	bl	8000a7c <LCD_WriteReg>

		LCD_WriteReg(0x0020, 0x0000);
 8004aac:	2100      	movs	r1, #0
 8004aae:	2020      	movs	r0, #32
 8004ab0:	f7fb ffe4 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8004ab4:	2100      	movs	r1, #0
 8004ab6:	2021      	movs	r0, #33	; 0x21
 8004ab8:	f7fb ffe0 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x22);
 8004abc:	2122      	movs	r1, #34	; 0x22
 8004abe:	2000      	movs	r0, #0
 8004ac0:	f7fb ffdc 	bl	8000a7c <LCD_WriteReg>
 8004ac4:	f000 beca 	b.w	800585c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0xC505) {
 8004ac8:	4b6b      	ldr	r3, [pc, #428]	; (8004c78 <LCD_Init+0x3250>)
 8004aca:	889b      	ldrh	r3, [r3, #4]
 8004acc:	f24c 5205 	movw	r2, #50437	; 0xc505
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	f040 80d3 	bne.w	8004c7c <LCD_Init+0x3254>
		LCD_WriteReg(0x0000, 0x0000);
 8004ad6:	2100      	movs	r1, #0
 8004ad8:	2000      	movs	r0, #0
 8004ada:	f7fb ffcf 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004ade:	2100      	movs	r1, #0
 8004ae0:	2000      	movs	r0, #0
 8004ae2:	f7fb ffcb 	bl	8000a7c <LCD_WriteReg>
		HAL_Delay(20);
 8004ae6:	2014      	movs	r0, #20
 8004ae8:	f001 fa1c 	bl	8005f24 <HAL_Delay>
		LCD_WriteReg(0x0000, 0x0000);
 8004aec:	2100      	movs	r1, #0
 8004aee:	2000      	movs	r0, #0
 8004af0:	f7fb ffc4 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004af4:	2100      	movs	r1, #0
 8004af6:	2000      	movs	r0, #0
 8004af8:	f7fb ffc0 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004afc:	2100      	movs	r1, #0
 8004afe:	2000      	movs	r0, #0
 8004b00:	f7fb ffbc 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004b04:	2100      	movs	r1, #0
 8004b06:	2000      	movs	r0, #0
 8004b08:	f7fb ffb8 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x00a4, 0x0001);
 8004b0c:	2101      	movs	r1, #1
 8004b0e:	20a4      	movs	r0, #164	; 0xa4
 8004b10:	f7fb ffb4 	bl	8000a7c <LCD_WriteReg>
		HAL_Delay(20);
 8004b14:	2014      	movs	r0, #20
 8004b16:	f001 fa05 	bl	8005f24 <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 8004b1a:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004b1e:	2060      	movs	r0, #96	; 0x60
 8004b20:	f7fb ffac 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0806);
 8004b24:	f640 0106 	movw	r1, #2054	; 0x806
 8004b28:	2008      	movs	r0, #8
 8004b2a:	f7fb ffa7 	bl	8000a7c <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0703);		//gamma setting
 8004b2e:	f240 7103 	movw	r1, #1795	; 0x703
 8004b32:	2030      	movs	r0, #48	; 0x30
 8004b34:	f7fb ffa2 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0001);
 8004b38:	2101      	movs	r1, #1
 8004b3a:	2031      	movs	r0, #49	; 0x31
 8004b3c:	f7fb ff9e 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0004);
 8004b40:	2104      	movs	r1, #4
 8004b42:	2032      	movs	r0, #50	; 0x32
 8004b44:	f7fb ff9a 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0102);
 8004b48:	f44f 7181 	mov.w	r1, #258	; 0x102
 8004b4c:	2033      	movs	r0, #51	; 0x33
 8004b4e:	f7fb ff95 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0300);
 8004b52:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004b56:	2034      	movs	r0, #52	; 0x34
 8004b58:	f7fb ff90 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0103);
 8004b5c:	f240 1103 	movw	r1, #259	; 0x103
 8004b60:	2035      	movs	r0, #53	; 0x35
 8004b62:	f7fb ff8b 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x001F);
 8004b66:	211f      	movs	r1, #31
 8004b68:	2036      	movs	r0, #54	; 0x36
 8004b6a:	f7fb ff87 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0703);
 8004b6e:	f240 7103 	movw	r1, #1795	; 0x703
 8004b72:	2037      	movs	r0, #55	; 0x37
 8004b74:	f7fb ff82 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0001);
 8004b78:	2101      	movs	r1, #1
 8004b7a:	2038      	movs	r0, #56	; 0x38
 8004b7c:	f7fb ff7e 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0004);
 8004b80:	2104      	movs	r1, #4
 8004b82:	2039      	movs	r0, #57	; 0x39
 8004b84:	f7fb ff7a 	bl	8000a7c <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0015);	//80Hz
 8004b88:	2115      	movs	r1, #21
 8004b8a:	2090      	movs	r0, #144	; 0x90
 8004b8c:	f7fb ff76 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0X0410);	//BT,AP
 8004b90:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8004b94:	2010      	movs	r0, #16
 8004b96:	f7fb ff71 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0247);	//DC1,DC0,VC
 8004b9a:	f240 2147 	movw	r1, #583	; 0x247
 8004b9e:	2011      	movs	r0, #17
 8004ba0:	f7fb ff6c 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x01BC);
 8004ba4:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8004ba8:	2012      	movs	r0, #18
 8004baa:	f7fb ff67 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0e00);
 8004bae:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 8004bb2:	2013      	movs	r0, #19
 8004bb4:	f7fb ff62 	bl	8000a7c <LCD_WriteReg>
		HAL_Delay(120);
 8004bb8:	2078      	movs	r0, #120	; 0x78
 8004bba:	f001 f9b3 	bl	8005f24 <HAL_Delay>
		LCD_WriteReg(0x0001, 0x0100);
 8004bbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004bc2:	2001      	movs	r0, #1
 8004bc4:	f7fb ff5a 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200);
 8004bc8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004bcc:	2002      	movs	r0, #2
 8004bce:	f7fb ff55 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 8004bd2:	f241 0130 	movw	r1, #4144	; 0x1030
 8004bd6:	2003      	movs	r0, #3
 8004bd8:	f7fb ff50 	bl	8000a7c <LCD_WriteReg>

		LCD_WriteReg(0x000A, 0x0008);
 8004bdc:	2108      	movs	r1, #8
 8004bde:	200a      	movs	r0, #10
 8004be0:	f7fb ff4c 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8004be4:	2100      	movs	r1, #0
 8004be6:	200c      	movs	r0, #12
 8004be8:	f7fb ff48 	bl	8000a7c <LCD_WriteReg>

		LCD_WriteReg(0x000E, 0x0020);
 8004bec:	2120      	movs	r1, #32
 8004bee:	200e      	movs	r0, #14
 8004bf0:	f7fb ff44 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8004bf4:	2100      	movs	r1, #0
 8004bf6:	200f      	movs	r0, #15
 8004bf8:	f7fb ff40 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);	//H Start
 8004bfc:	2100      	movs	r1, #0
 8004bfe:	2020      	movs	r0, #32
 8004c00:	f7fb ff3c 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);	//V Start
 8004c04:	2100      	movs	r1, #0
 8004c06:	2021      	movs	r0, #33	; 0x21
 8004c08:	f7fb ff38 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x003D);	//vcom2
 8004c0c:	213d      	movs	r1, #61	; 0x3d
 8004c0e:	202a      	movs	r0, #42	; 0x2a
 8004c10:	f7fb ff34 	bl	8000a7c <LCD_WriteReg>
		HAL_Delay(20);
 8004c14:	2014      	movs	r0, #20
 8004c16:	f001 f985 	bl	8005f24 <HAL_Delay>
		LCD_WriteReg(0x0029, 0x002d);
 8004c1a:	212d      	movs	r1, #45	; 0x2d
 8004c1c:	2029      	movs	r0, #41	; 0x29
 8004c1e:	f7fb ff2d 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 8004c22:	2100      	movs	r1, #0
 8004c24:	2050      	movs	r0, #80	; 0x50
 8004c26:	f7fb ff29 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0xD0EF);
 8004c2a:	f24d 01ef 	movw	r1, #53487	; 0xd0ef
 8004c2e:	2051      	movs	r0, #81	; 0x51
 8004c30:	f7fb ff24 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8004c34:	2100      	movs	r1, #0
 8004c36:	2052      	movs	r0, #82	; 0x52
 8004c38:	f7fb ff20 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8004c3c:	f240 113f 	movw	r1, #319	; 0x13f
 8004c40:	2053      	movs	r0, #83	; 0x53
 8004c42:	f7fb ff1b 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0000);
 8004c46:	2100      	movs	r1, #0
 8004c48:	2061      	movs	r0, #97	; 0x61
 8004c4a:	f7fb ff17 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8004c4e:	2100      	movs	r1, #0
 8004c50:	206a      	movs	r0, #106	; 0x6a
 8004c52:	f7fb ff13 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 8004c56:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004c5a:	2092      	movs	r0, #146	; 0x92
 8004c5c:	f7fb ff0e 	bl	8000a7c <LCD_WriteReg>

		LCD_WriteReg(0x0093, 0x0005);
 8004c60:	2105      	movs	r1, #5
 8004c62:	2093      	movs	r0, #147	; 0x93
 8004c64:	f7fb ff0a 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0100);
 8004c68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004c6c:	2007      	movs	r0, #7
 8004c6e:	f7fb ff05 	bl	8000a7c <LCD_WriteReg>
 8004c72:	f000 bdf3 	b.w	800585c <LCD_Init+0x3e34>
 8004c76:	bf00      	nop
 8004c78:	20000080 	.word	0x20000080
	} else if (lcddev.id == 0x8989)	//OK |/|/|
 8004c7c:	4bc2      	ldr	r3, [pc, #776]	; (8004f88 <LCD_Init+0x3560>)
 8004c7e:	889b      	ldrh	r3, [r3, #4]
 8004c80:	f648 1289 	movw	r2, #35209	; 0x8989
 8004c84:	4293      	cmp	r3, r2
 8004c86:	f040 80bc 	bne.w	8004e02 <LCD_Init+0x33da>
			{
		LCD_WriteReg(0x0000, 0x0001);	//打开晶振
 8004c8a:	2101      	movs	r1, #1
 8004c8c:	2000      	movs	r0, #0
 8004c8e:	f7fb fef5 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0xA8A4);	//0xA8A4
 8004c92:	f64a 01a4 	movw	r1, #43172	; 0xa8a4
 8004c96:	2003      	movs	r0, #3
 8004c98:	f7fb fef0 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8004c9c:	2100      	movs	r1, #0
 8004c9e:	200c      	movs	r0, #12
 8004ca0:	f7fb feec 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x080C);
 8004ca4:	f640 010c 	movw	r1, #2060	; 0x80c
 8004ca8:	200d      	movs	r0, #13
 8004caa:	f7fb fee7 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x000E, 0x2B00);
 8004cae:	f44f 512c 	mov.w	r1, #11008	; 0x2b00
 8004cb2:	200e      	movs	r0, #14
 8004cb4:	f7fb fee2 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x001E, 0x00B0);
 8004cb8:	21b0      	movs	r1, #176	; 0xb0
 8004cba:	201e      	movs	r0, #30
 8004cbc:	f7fb fede 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x2B3F);	//驱动输出控制320*240  0x6B3F
 8004cc0:	f642 313f 	movw	r1, #11071	; 0x2b3f
 8004cc4:	2001      	movs	r0, #1
 8004cc6:	f7fb fed9 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0600);
 8004cca:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004cce:	2002      	movs	r0, #2
 8004cd0:	f7fb fed4 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 8004cd4:	2100      	movs	r1, #0
 8004cd6:	2010      	movs	r0, #16
 8004cd8:	f7fb fed0 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x6078); //定义数据格式  16位色 		横屏 0x6058
 8004cdc:	f246 0178 	movw	r1, #24696	; 0x6078
 8004ce0:	2011      	movs	r0, #17
 8004ce2:	f7fb fecb 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0005, 0x0000);
 8004ce6:	2100      	movs	r1, #0
 8004ce8:	2005      	movs	r0, #5
 8004cea:	f7fb fec7 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0006, 0x0000);
 8004cee:	2100      	movs	r1, #0
 8004cf0:	2006      	movs	r0, #6
 8004cf2:	f7fb fec3 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0016, 0xEF1C);
 8004cf6:	f64e 711c 	movw	r1, #61212	; 0xef1c
 8004cfa:	2016      	movs	r0, #22
 8004cfc:	f7fb febe 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0003);
 8004d00:	2103      	movs	r1, #3
 8004d02:	2017      	movs	r0, #23
 8004d04:	f7fb feba 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0233); //0x0233
 8004d08:	f240 2133 	movw	r1, #563	; 0x233
 8004d0c:	2007      	movs	r0, #7
 8004d0e:	f7fb feb5 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x000B, 0x0000);
 8004d12:	2100      	movs	r1, #0
 8004d14:	200b      	movs	r0, #11
 8004d16:	f7fb feb1 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); //扫描开始地址
 8004d1a:	2100      	movs	r1, #0
 8004d1c:	200f      	movs	r0, #15
 8004d1e:	f7fb fead 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0041, 0x0000);
 8004d22:	2100      	movs	r1, #0
 8004d24:	2041      	movs	r0, #65	; 0x41
 8004d26:	f7fb fea9 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0042, 0x0000);
 8004d2a:	2100      	movs	r1, #0
 8004d2c:	2042      	movs	r0, #66	; 0x42
 8004d2e:	f7fb fea5 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0048, 0x0000);
 8004d32:	2100      	movs	r1, #0
 8004d34:	2048      	movs	r0, #72	; 0x48
 8004d36:	f7fb fea1 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0049, 0x013F);
 8004d3a:	f240 113f 	movw	r1, #319	; 0x13f
 8004d3e:	2049      	movs	r0, #73	; 0x49
 8004d40:	f7fb fe9c 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x004A, 0x0000);
 8004d44:	2100      	movs	r1, #0
 8004d46:	204a      	movs	r0, #74	; 0x4a
 8004d48:	f7fb fe98 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x004B, 0x0000);
 8004d4c:	2100      	movs	r1, #0
 8004d4e:	204b      	movs	r0, #75	; 0x4b
 8004d50:	f7fb fe94 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0044, 0xEF00);
 8004d54:	f44f 416f 	mov.w	r1, #61184	; 0xef00
 8004d58:	2044      	movs	r0, #68	; 0x44
 8004d5a:	f7fb fe8f 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0045, 0x0000);
 8004d5e:	2100      	movs	r1, #0
 8004d60:	2045      	movs	r0, #69	; 0x45
 8004d62:	f7fb fe8b 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0046, 0x013F);
 8004d66:	f240 113f 	movw	r1, #319	; 0x13f
 8004d6a:	2046      	movs	r0, #70	; 0x46
 8004d6c:	f7fb fe86 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0030, 0x0707);
 8004d70:	f240 7107 	movw	r1, #1799	; 0x707
 8004d74:	2030      	movs	r0, #48	; 0x30
 8004d76:	f7fb fe81 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0204);
 8004d7a:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004d7e:	2031      	movs	r0, #49	; 0x31
 8004d80:	f7fb fe7c 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0204);
 8004d84:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004d88:	2032      	movs	r0, #50	; 0x32
 8004d8a:	f7fb fe77 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0502);
 8004d8e:	f240 5102 	movw	r1, #1282	; 0x502
 8004d92:	2033      	movs	r0, #51	; 0x33
 8004d94:	f7fb fe72 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0507);
 8004d98:	f240 5107 	movw	r1, #1287	; 0x507
 8004d9c:	2034      	movs	r0, #52	; 0x34
 8004d9e:	f7fb fe6d 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 8004da2:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004da6:	2035      	movs	r0, #53	; 0x35
 8004da8:	f7fb fe68 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0204);
 8004dac:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004db0:	2036      	movs	r0, #54	; 0x36
 8004db2:	f7fb fe63 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0502);
 8004db6:	f240 5102 	movw	r1, #1282	; 0x502
 8004dba:	2037      	movs	r0, #55	; 0x37
 8004dbc:	f7fb fe5e 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0302);
 8004dc0:	f240 3102 	movw	r1, #770	; 0x302
 8004dc4:	203a      	movs	r0, #58	; 0x3a
 8004dc6:	f7fb fe59 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0302);
 8004dca:	f240 3102 	movw	r1, #770	; 0x302
 8004dce:	203b      	movs	r0, #59	; 0x3b
 8004dd0:	f7fb fe54 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0023, 0x0000);
 8004dd4:	2100      	movs	r1, #0
 8004dd6:	2023      	movs	r0, #35	; 0x23
 8004dd8:	f7fb fe50 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0024, 0x0000);
 8004ddc:	2100      	movs	r1, #0
 8004dde:	2024      	movs	r0, #36	; 0x24
 8004de0:	f7fb fe4c 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x0025, 0x8000);
 8004de4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004de8:	2025      	movs	r0, #37	; 0x25
 8004dea:	f7fb fe47 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x004f, 0);        //行首址0
 8004dee:	2100      	movs	r1, #0
 8004df0:	204f      	movs	r0, #79	; 0x4f
 8004df2:	f7fb fe43 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0x004e, 0);        //列首址0
 8004df6:	2100      	movs	r1, #0
 8004df8:	204e      	movs	r0, #78	; 0x4e
 8004dfa:	f7fb fe3f 	bl	8000a7c <LCD_WriteReg>
 8004dfe:	f000 bd2d 	b.w	800585c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x4531)        //OK |/|/|
 8004e02:	4b61      	ldr	r3, [pc, #388]	; (8004f88 <LCD_Init+0x3560>)
 8004e04:	889b      	ldrh	r3, [r3, #4]
 8004e06:	f244 5231 	movw	r2, #17713	; 0x4531
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	f040 80be 	bne.w	8004f8c <LCD_Init+0x3564>
			{
		LCD_WriteReg(0X00, 0X0001);
 8004e10:	2101      	movs	r1, #1
 8004e12:	2000      	movs	r0, #0
 8004e14:	f7fb fe32 	bl	8000a7c <LCD_WriteReg>
		HAL_Delay(10);
 8004e18:	200a      	movs	r0, #10
 8004e1a:	f001 f883 	bl	8005f24 <HAL_Delay>
		LCD_WriteReg(0X10, 0X1628);
 8004e1e:	f241 6128 	movw	r1, #5672	; 0x1628
 8004e22:	2010      	movs	r0, #16
 8004e24:	f7fb fe2a 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X000e);        //0x0006
 8004e28:	210e      	movs	r1, #14
 8004e2a:	2012      	movs	r0, #18
 8004e2c:	f7fb fe26 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X0A39);
 8004e30:	f640 2139 	movw	r1, #2617	; 0xa39
 8004e34:	2013      	movs	r0, #19
 8004e36:	f7fb fe21 	bl	8000a7c <LCD_WriteReg>
		HAL_Delay(10);
 8004e3a:	200a      	movs	r0, #10
 8004e3c:	f001 f872 	bl	8005f24 <HAL_Delay>
		LCD_WriteReg(0X11, 0X0040);
 8004e40:	2140      	movs	r1, #64	; 0x40
 8004e42:	2011      	movs	r0, #17
 8004e44:	f7fb fe1a 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0X15, 0X0050);
 8004e48:	2150      	movs	r1, #80	; 0x50
 8004e4a:	2015      	movs	r0, #21
 8004e4c:	f7fb fe16 	bl	8000a7c <LCD_WriteReg>
		HAL_Delay(10);
 8004e50:	200a      	movs	r0, #10
 8004e52:	f001 f867 	bl	8005f24 <HAL_Delay>
		LCD_WriteReg(0X12, 0X001e);        //16
 8004e56:	211e      	movs	r1, #30
 8004e58:	2012      	movs	r0, #18
 8004e5a:	f7fb fe0f 	bl	8000a7c <LCD_WriteReg>
		HAL_Delay(10);
 8004e5e:	200a      	movs	r0, #10
 8004e60:	f001 f860 	bl	8005f24 <HAL_Delay>
		LCD_WriteReg(0X10, 0X1620);
 8004e64:	f44f 51b1 	mov.w	r1, #5664	; 0x1620
 8004e68:	2010      	movs	r0, #16
 8004e6a:	f7fb fe07 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X2A39);
 8004e6e:	f642 2139 	movw	r1, #10809	; 0x2a39
 8004e72:	2013      	movs	r0, #19
 8004e74:	f7fb fe02 	bl	8000a7c <LCD_WriteReg>
		HAL_Delay(10);
 8004e78:	200a      	movs	r0, #10
 8004e7a:	f001 f853 	bl	8005f24 <HAL_Delay>
		LCD_WriteReg(0X01, 0X0100);
 8004e7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004e82:	2001      	movs	r0, #1
 8004e84:	f7fb fdfa 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 8004e88:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004e8c:	2002      	movs	r0, #2
 8004e8e:	f7fb fdf5 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1038);        //改变方向的
 8004e92:	f241 0138 	movw	r1, #4152	; 0x1038
 8004e96:	2003      	movs	r0, #3
 8004e98:	f7fb fdf0 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0202);
 8004e9c:	f240 2102 	movw	r1, #514	; 0x202
 8004ea0:	2008      	movs	r0, #8
 8004ea2:	f7fb fdeb 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 8004ea6:	2108      	movs	r1, #8
 8004ea8:	200a      	movs	r0, #10
 8004eaa:	f7fb fde7 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0X30, 0X0000);
 8004eae:	2100      	movs	r1, #0
 8004eb0:	2030      	movs	r0, #48	; 0x30
 8004eb2:	f7fb fde3 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 8004eb6:	f240 4102 	movw	r1, #1026	; 0x402
 8004eba:	2031      	movs	r0, #49	; 0x31
 8004ebc:	f7fb fdde 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0106);
 8004ec0:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004ec4:	2032      	movs	r0, #50	; 0x32
 8004ec6:	f7fb fdd9 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0503);
 8004eca:	f240 5103 	movw	r1, #1283	; 0x503
 8004ece:	2033      	movs	r0, #51	; 0x33
 8004ed0:	f7fb fdd4 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0104);
 8004ed4:	f44f 7182 	mov.w	r1, #260	; 0x104
 8004ed8:	2034      	movs	r0, #52	; 0x34
 8004eda:	f7fb fdcf 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0301);
 8004ede:	f240 3101 	movw	r1, #769	; 0x301
 8004ee2:	2035      	movs	r0, #53	; 0x35
 8004ee4:	f7fb fdca 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 8004ee8:	f240 7107 	movw	r1, #1799	; 0x707
 8004eec:	2036      	movs	r0, #54	; 0x36
 8004eee:	f7fb fdc5 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 8004ef2:	f240 3105 	movw	r1, #773	; 0x305
 8004ef6:	2037      	movs	r0, #55	; 0x37
 8004ef8:	f7fb fdc0 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0208);
 8004efc:	f44f 7102 	mov.w	r1, #520	; 0x208
 8004f00:	2038      	movs	r0, #56	; 0x38
 8004f02:	f7fb fdbb 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0F0B);
 8004f06:	f640 710b 	movw	r1, #3851	; 0xf0b
 8004f0a:	2039      	movs	r0, #57	; 0x39
 8004f0c:	f7fb fdb6 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0X41, 0X0002);
 8004f10:	2102      	movs	r1, #2
 8004f12:	2041      	movs	r0, #65	; 0x41
 8004f14:	f7fb fdb2 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 8004f18:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004f1c:	2060      	movs	r0, #96	; 0x60
 8004f1e:	f7fb fdad 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 8004f22:	2101      	movs	r1, #1
 8004f24:	2061      	movs	r0, #97	; 0x61
 8004f26:	f7fb fda9 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X0210);
 8004f2a:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004f2e:	2090      	movs	r0, #144	; 0x90
 8004f30:	f7fb fda4 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X010A);
 8004f34:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8004f38:	2092      	movs	r0, #146	; 0x92
 8004f3a:	f7fb fd9f 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0004);
 8004f3e:	2104      	movs	r1, #4
 8004f40:	2093      	movs	r0, #147	; 0x93
 8004f42:	f7fb fd9b 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0100);
 8004f46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004f4a:	20a0      	movs	r0, #160	; 0xa0
 8004f4c:	f7fb fd96 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 8004f50:	2101      	movs	r1, #1
 8004f52:	2007      	movs	r0, #7
 8004f54:	f7fb fd92 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 8004f58:	2121      	movs	r1, #33	; 0x21
 8004f5a:	2007      	movs	r0, #7
 8004f5c:	f7fb fd8e 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 8004f60:	2123      	movs	r1, #35	; 0x23
 8004f62:	2007      	movs	r0, #7
 8004f64:	f7fb fd8a 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 8004f68:	2133      	movs	r1, #51	; 0x33
 8004f6a:	2007      	movs	r0, #7
 8004f6c:	f7fb fd86 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 8004f70:	f240 1133 	movw	r1, #307	; 0x133
 8004f74:	2007      	movs	r0, #7
 8004f76:	f7fb fd81 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0000);
 8004f7a:	2100      	movs	r1, #0
 8004f7c:	20a0      	movs	r0, #160	; 0xa0
 8004f7e:	f7fb fd7d 	bl	8000a7c <LCD_WriteReg>
 8004f82:	f000 bc6b 	b.w	800585c <LCD_Init+0x3e34>
 8004f86:	bf00      	nop
 8004f88:	20000080 	.word	0x20000080
	} else if (lcddev.id == 0x4535) {
 8004f8c:	4b5b      	ldr	r3, [pc, #364]	; (80050fc <LCD_Init+0x36d4>)
 8004f8e:	889b      	ldrh	r3, [r3, #4]
 8004f90:	f244 5235 	movw	r2, #17717	; 0x4535
 8004f94:	4293      	cmp	r3, r2
 8004f96:	f040 80b3 	bne.w	8005100 <LCD_Init+0x36d8>
		LCD_WriteReg(0X15, 0X0030);
 8004f9a:	2130      	movs	r1, #48	; 0x30
 8004f9c:	2015      	movs	r0, #21
 8004f9e:	f7fb fd6d 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0X9A, 0X0010);
 8004fa2:	2110      	movs	r1, #16
 8004fa4:	209a      	movs	r0, #154	; 0x9a
 8004fa6:	f7fb fd69 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0X11, 0X0020);
 8004faa:	2120      	movs	r1, #32
 8004fac:	2011      	movs	r0, #17
 8004fae:	f7fb fd65 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0X10, 0X3428);
 8004fb2:	f243 4128 	movw	r1, #13352	; 0x3428
 8004fb6:	2010      	movs	r0, #16
 8004fb8:	f7fb fd60 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X0002);        //16
 8004fbc:	2102      	movs	r1, #2
 8004fbe:	2012      	movs	r0, #18
 8004fc0:	f7fb fd5c 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X1038);
 8004fc4:	f241 0138 	movw	r1, #4152	; 0x1038
 8004fc8:	2013      	movs	r0, #19
 8004fca:	f7fb fd57 	bl	8000a7c <LCD_WriteReg>
		HAL_Delay(40);
 8004fce:	2028      	movs	r0, #40	; 0x28
 8004fd0:	f000 ffa8 	bl	8005f24 <HAL_Delay>
		LCD_WriteReg(0X12, 0X0012);        //16
 8004fd4:	2112      	movs	r1, #18
 8004fd6:	2012      	movs	r0, #18
 8004fd8:	f7fb fd50 	bl	8000a7c <LCD_WriteReg>
		HAL_Delay(40);
 8004fdc:	2028      	movs	r0, #40	; 0x28
 8004fde:	f000 ffa1 	bl	8005f24 <HAL_Delay>
		LCD_WriteReg(0X10, 0X3420);
 8004fe2:	f243 4120 	movw	r1, #13344	; 0x3420
 8004fe6:	2010      	movs	r0, #16
 8004fe8:	f7fb fd48 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X3038);
 8004fec:	f243 0138 	movw	r1, #12344	; 0x3038
 8004ff0:	2013      	movs	r0, #19
 8004ff2:	f7fb fd43 	bl	8000a7c <LCD_WriteReg>
		HAL_Delay(70);
 8004ff6:	2046      	movs	r0, #70	; 0x46
 8004ff8:	f000 ff94 	bl	8005f24 <HAL_Delay>
		LCD_WriteReg(0X30, 0X0000);
 8004ffc:	2100      	movs	r1, #0
 8004ffe:	2030      	movs	r0, #48	; 0x30
 8005000:	f7fb fd3c 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 8005004:	f240 4102 	movw	r1, #1026	; 0x402
 8005008:	2031      	movs	r0, #49	; 0x31
 800500a:	f7fb fd37 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0307);
 800500e:	f240 3107 	movw	r1, #775	; 0x307
 8005012:	2032      	movs	r0, #50	; 0x32
 8005014:	f7fb fd32 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0304);
 8005018:	f44f 7141 	mov.w	r1, #772	; 0x304
 800501c:	2033      	movs	r0, #51	; 0x33
 800501e:	f7fb fd2d 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0004);
 8005022:	2104      	movs	r1, #4
 8005024:	2034      	movs	r0, #52	; 0x34
 8005026:	f7fb fd29 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0401);
 800502a:	f240 4101 	movw	r1, #1025	; 0x401
 800502e:	2035      	movs	r0, #53	; 0x35
 8005030:	f7fb fd24 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 8005034:	f240 7107 	movw	r1, #1799	; 0x707
 8005038:	2036      	movs	r0, #54	; 0x36
 800503a:	f7fb fd1f 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 800503e:	f240 3105 	movw	r1, #773	; 0x305
 8005042:	2037      	movs	r0, #55	; 0x37
 8005044:	f7fb fd1a 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0610);
 8005048:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 800504c:	2038      	movs	r0, #56	; 0x38
 800504e:	f7fb fd15 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0610);
 8005052:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8005056:	2039      	movs	r0, #57	; 0x39
 8005058:	f7fb fd10 	bl	8000a7c <LCD_WriteReg>

		LCD_WriteReg(0X01, 0X0100);
 800505c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005060:	2001      	movs	r0, #1
 8005062:	f7fb fd0b 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 8005066:	f44f 7140 	mov.w	r1, #768	; 0x300
 800506a:	2002      	movs	r0, #2
 800506c:	f7fb fd06 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1030);        //改变方向的
 8005070:	f241 0130 	movw	r1, #4144	; 0x1030
 8005074:	2003      	movs	r0, #3
 8005076:	f7fb fd01 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0808);
 800507a:	f640 0108 	movw	r1, #2056	; 0x808
 800507e:	2008      	movs	r0, #8
 8005080:	f7fb fcfc 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 8005084:	2108      	movs	r1, #8
 8005086:	200a      	movs	r0, #10
 8005088:	f7fb fcf8 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 800508c:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005090:	2060      	movs	r0, #96	; 0x60
 8005092:	f7fb fcf3 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 8005096:	2101      	movs	r1, #1
 8005098:	2061      	movs	r0, #97	; 0x61
 800509a:	f7fb fcef 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X013E);
 800509e:	f44f 719f 	mov.w	r1, #318	; 0x13e
 80050a2:	2090      	movs	r0, #144	; 0x90
 80050a4:	f7fb fcea 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X0100);
 80050a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80050ac:	2092      	movs	r0, #146	; 0x92
 80050ae:	f7fb fce5 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0100);
 80050b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80050b6:	2093      	movs	r0, #147	; 0x93
 80050b8:	f7fb fce0 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X3000);
 80050bc:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80050c0:	20a0      	movs	r0, #160	; 0xa0
 80050c2:	f7fb fcdb 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0XA3, 0X0010);
 80050c6:	2110      	movs	r1, #16
 80050c8:	20a3      	movs	r0, #163	; 0xa3
 80050ca:	f7fb fcd7 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 80050ce:	2101      	movs	r1, #1
 80050d0:	2007      	movs	r0, #7
 80050d2:	f7fb fcd3 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 80050d6:	2121      	movs	r1, #33	; 0x21
 80050d8:	2007      	movs	r0, #7
 80050da:	f7fb fccf 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 80050de:	2123      	movs	r1, #35	; 0x23
 80050e0:	2007      	movs	r0, #7
 80050e2:	f7fb fccb 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 80050e6:	2133      	movs	r1, #51	; 0x33
 80050e8:	2007      	movs	r0, #7
 80050ea:	f7fb fcc7 	bl	8000a7c <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 80050ee:	f240 1133 	movw	r1, #307	; 0x133
 80050f2:	2007      	movs	r0, #7
 80050f4:	f7fb fcc2 	bl	8000a7c <LCD_WriteReg>
 80050f8:	e3b0      	b.n	800585c <LCD_Init+0x3e34>
 80050fa:	bf00      	nop
 80050fc:	20000080 	.word	0x20000080
	} else if (lcddev.id == 0X1963) {
 8005100:	4ba8      	ldr	r3, [pc, #672]	; (80053a4 <LCD_Init+0x397c>)
 8005102:	889b      	ldrh	r3, [r3, #4]
 8005104:	f641 1263 	movw	r2, #6499	; 0x1963
 8005108:	4293      	cmp	r3, r2
 800510a:	f040 83a7 	bne.w	800585c <LCD_Init+0x3e34>
		LCD_WR_REG(0xE2);	//Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz
 800510e:	20e2      	movs	r0, #226	; 0xe2
 8005110:	f7fb fc28 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATA(0x1D);		//参数1 
 8005114:	4ba4      	ldr	r3, [pc, #656]	; (80053a8 <LCD_Init+0x3980>)
 8005116:	f44f 7280 	mov.w	r2, #256	; 0x100
 800511a:	611a      	str	r2, [r3, #16]
 800511c:	4ba2      	ldr	r3, [pc, #648]	; (80053a8 <LCD_Init+0x3980>)
 800511e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005122:	615a      	str	r2, [r3, #20]
 8005124:	4ba1      	ldr	r3, [pc, #644]	; (80053ac <LCD_Init+0x3984>)
 8005126:	221d      	movs	r2, #29
 8005128:	60da      	str	r2, [r3, #12]
 800512a:	4b9f      	ldr	r3, [pc, #636]	; (80053a8 <LCD_Init+0x3980>)
 800512c:	2280      	movs	r2, #128	; 0x80
 800512e:	615a      	str	r2, [r3, #20]
 8005130:	4b9d      	ldr	r3, [pc, #628]	; (80053a8 <LCD_Init+0x3980>)
 8005132:	2280      	movs	r2, #128	; 0x80
 8005134:	611a      	str	r2, [r3, #16]
 8005136:	4b9c      	ldr	r3, [pc, #624]	; (80053a8 <LCD_Init+0x3980>)
 8005138:	f44f 7200 	mov.w	r2, #512	; 0x200
 800513c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x02);		//参数2 Divider M = 2, PLL = 300/(M+1) = 100MHz
 800513e:	4b9a      	ldr	r3, [pc, #616]	; (80053a8 <LCD_Init+0x3980>)
 8005140:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005144:	611a      	str	r2, [r3, #16]
 8005146:	4b98      	ldr	r3, [pc, #608]	; (80053a8 <LCD_Init+0x3980>)
 8005148:	f44f 7200 	mov.w	r2, #512	; 0x200
 800514c:	615a      	str	r2, [r3, #20]
 800514e:	4b97      	ldr	r3, [pc, #604]	; (80053ac <LCD_Init+0x3984>)
 8005150:	2202      	movs	r2, #2
 8005152:	60da      	str	r2, [r3, #12]
 8005154:	4b94      	ldr	r3, [pc, #592]	; (80053a8 <LCD_Init+0x3980>)
 8005156:	2280      	movs	r2, #128	; 0x80
 8005158:	615a      	str	r2, [r3, #20]
 800515a:	4b93      	ldr	r3, [pc, #588]	; (80053a8 <LCD_Init+0x3980>)
 800515c:	2280      	movs	r2, #128	; 0x80
 800515e:	611a      	str	r2, [r3, #16]
 8005160:	4b91      	ldr	r3, [pc, #580]	; (80053a8 <LCD_Init+0x3980>)
 8005162:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005166:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x04);		//参数3 Validate M and N values   
 8005168:	4b8f      	ldr	r3, [pc, #572]	; (80053a8 <LCD_Init+0x3980>)
 800516a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800516e:	611a      	str	r2, [r3, #16]
 8005170:	4b8d      	ldr	r3, [pc, #564]	; (80053a8 <LCD_Init+0x3980>)
 8005172:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005176:	615a      	str	r2, [r3, #20]
 8005178:	4b8c      	ldr	r3, [pc, #560]	; (80053ac <LCD_Init+0x3984>)
 800517a:	2204      	movs	r2, #4
 800517c:	60da      	str	r2, [r3, #12]
 800517e:	4b8a      	ldr	r3, [pc, #552]	; (80053a8 <LCD_Init+0x3980>)
 8005180:	2280      	movs	r2, #128	; 0x80
 8005182:	615a      	str	r2, [r3, #20]
 8005184:	4b88      	ldr	r3, [pc, #544]	; (80053a8 <LCD_Init+0x3980>)
 8005186:	2280      	movs	r2, #128	; 0x80
 8005188:	611a      	str	r2, [r3, #16]
 800518a:	4b87      	ldr	r3, [pc, #540]	; (80053a8 <LCD_Init+0x3980>)
 800518c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005190:	611a      	str	r2, [r3, #16]
//		delay_us(100);
		HAL_Delay(1);
 8005192:	2001      	movs	r0, #1
 8005194:	f000 fec6 	bl	8005f24 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command
 8005198:	20e0      	movs	r0, #224	; 0xe0
 800519a:	f7fb fbe3 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATA(0x01);		// enable PLL
 800519e:	4b82      	ldr	r3, [pc, #520]	; (80053a8 <LCD_Init+0x3980>)
 80051a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80051a4:	611a      	str	r2, [r3, #16]
 80051a6:	4b80      	ldr	r3, [pc, #512]	; (80053a8 <LCD_Init+0x3980>)
 80051a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051ac:	615a      	str	r2, [r3, #20]
 80051ae:	4b7f      	ldr	r3, [pc, #508]	; (80053ac <LCD_Init+0x3984>)
 80051b0:	2201      	movs	r2, #1
 80051b2:	60da      	str	r2, [r3, #12]
 80051b4:	4b7c      	ldr	r3, [pc, #496]	; (80053a8 <LCD_Init+0x3980>)
 80051b6:	2280      	movs	r2, #128	; 0x80
 80051b8:	615a      	str	r2, [r3, #20]
 80051ba:	4b7b      	ldr	r3, [pc, #492]	; (80053a8 <LCD_Init+0x3980>)
 80051bc:	2280      	movs	r2, #128	; 0x80
 80051be:	611a      	str	r2, [r3, #16]
 80051c0:	4b79      	ldr	r3, [pc, #484]	; (80053a8 <LCD_Init+0x3980>)
 80051c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051c6:	611a      	str	r2, [r3, #16]
		HAL_Delay(10);
 80051c8:	200a      	movs	r0, #10
 80051ca:	f000 feab 	bl	8005f24 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command again
 80051ce:	20e0      	movs	r0, #224	; 0xe0
 80051d0:	f7fb fbc8 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATA(0x03);		// now, use PLL output as system clock	
 80051d4:	4b74      	ldr	r3, [pc, #464]	; (80053a8 <LCD_Init+0x3980>)
 80051d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80051da:	611a      	str	r2, [r3, #16]
 80051dc:	4b72      	ldr	r3, [pc, #456]	; (80053a8 <LCD_Init+0x3980>)
 80051de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051e2:	615a      	str	r2, [r3, #20]
 80051e4:	4b71      	ldr	r3, [pc, #452]	; (80053ac <LCD_Init+0x3984>)
 80051e6:	2203      	movs	r2, #3
 80051e8:	60da      	str	r2, [r3, #12]
 80051ea:	4b6f      	ldr	r3, [pc, #444]	; (80053a8 <LCD_Init+0x3980>)
 80051ec:	2280      	movs	r2, #128	; 0x80
 80051ee:	615a      	str	r2, [r3, #20]
 80051f0:	4b6d      	ldr	r3, [pc, #436]	; (80053a8 <LCD_Init+0x3980>)
 80051f2:	2280      	movs	r2, #128	; 0x80
 80051f4:	611a      	str	r2, [r3, #16]
 80051f6:	4b6c      	ldr	r3, [pc, #432]	; (80053a8 <LCD_Init+0x3980>)
 80051f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051fc:	611a      	str	r2, [r3, #16]
		HAL_Delay(12);
 80051fe:	200c      	movs	r0, #12
 8005200:	f000 fe90 	bl	8005f24 <HAL_Delay>
		LCD_WR_REG(0x01);		//软复位
 8005204:	2001      	movs	r0, #1
 8005206:	f7fb fbad 	bl	8000964 <LCD_WR_REG>
		HAL_Delay(10);
 800520a:	200a      	movs	r0, #10
 800520c:	f000 fe8a 	bl	8005f24 <HAL_Delay>

		LCD_WR_REG(0xE6);		//设置像素频率,33Mhz
 8005210:	20e6      	movs	r0, #230	; 0xe6
 8005212:	f7fb fba7 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATA(0x2F);
 8005216:	4b64      	ldr	r3, [pc, #400]	; (80053a8 <LCD_Init+0x3980>)
 8005218:	f44f 7280 	mov.w	r2, #256	; 0x100
 800521c:	611a      	str	r2, [r3, #16]
 800521e:	4b62      	ldr	r3, [pc, #392]	; (80053a8 <LCD_Init+0x3980>)
 8005220:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005224:	615a      	str	r2, [r3, #20]
 8005226:	4b61      	ldr	r3, [pc, #388]	; (80053ac <LCD_Init+0x3984>)
 8005228:	222f      	movs	r2, #47	; 0x2f
 800522a:	60da      	str	r2, [r3, #12]
 800522c:	4b5e      	ldr	r3, [pc, #376]	; (80053a8 <LCD_Init+0x3980>)
 800522e:	2280      	movs	r2, #128	; 0x80
 8005230:	615a      	str	r2, [r3, #20]
 8005232:	4b5d      	ldr	r3, [pc, #372]	; (80053a8 <LCD_Init+0x3980>)
 8005234:	2280      	movs	r2, #128	; 0x80
 8005236:	611a      	str	r2, [r3, #16]
 8005238:	4b5b      	ldr	r3, [pc, #364]	; (80053a8 <LCD_Init+0x3980>)
 800523a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800523e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 8005240:	4b59      	ldr	r3, [pc, #356]	; (80053a8 <LCD_Init+0x3980>)
 8005242:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005246:	611a      	str	r2, [r3, #16]
 8005248:	4b57      	ldr	r3, [pc, #348]	; (80053a8 <LCD_Init+0x3980>)
 800524a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800524e:	615a      	str	r2, [r3, #20]
 8005250:	4b56      	ldr	r3, [pc, #344]	; (80053ac <LCD_Init+0x3984>)
 8005252:	22ff      	movs	r2, #255	; 0xff
 8005254:	60da      	str	r2, [r3, #12]
 8005256:	4b54      	ldr	r3, [pc, #336]	; (80053a8 <LCD_Init+0x3980>)
 8005258:	2280      	movs	r2, #128	; 0x80
 800525a:	615a      	str	r2, [r3, #20]
 800525c:	4b52      	ldr	r3, [pc, #328]	; (80053a8 <LCD_Init+0x3980>)
 800525e:	2280      	movs	r2, #128	; 0x80
 8005260:	611a      	str	r2, [r3, #16]
 8005262:	4b51      	ldr	r3, [pc, #324]	; (80053a8 <LCD_Init+0x3980>)
 8005264:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005268:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 800526a:	4b4f      	ldr	r3, [pc, #316]	; (80053a8 <LCD_Init+0x3980>)
 800526c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005270:	611a      	str	r2, [r3, #16]
 8005272:	4b4d      	ldr	r3, [pc, #308]	; (80053a8 <LCD_Init+0x3980>)
 8005274:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005278:	615a      	str	r2, [r3, #20]
 800527a:	4b4c      	ldr	r3, [pc, #304]	; (80053ac <LCD_Init+0x3984>)
 800527c:	22ff      	movs	r2, #255	; 0xff
 800527e:	60da      	str	r2, [r3, #12]
 8005280:	4b49      	ldr	r3, [pc, #292]	; (80053a8 <LCD_Init+0x3980>)
 8005282:	2280      	movs	r2, #128	; 0x80
 8005284:	615a      	str	r2, [r3, #20]
 8005286:	4b48      	ldr	r3, [pc, #288]	; (80053a8 <LCD_Init+0x3980>)
 8005288:	2280      	movs	r2, #128	; 0x80
 800528a:	611a      	str	r2, [r3, #16]
 800528c:	4b46      	ldr	r3, [pc, #280]	; (80053a8 <LCD_Init+0x3980>)
 800528e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005292:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB0);		//设置LCD模式
 8005294:	20b0      	movs	r0, #176	; 0xb0
 8005296:	f7fb fb65 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATA(0x20);		//24位模式
 800529a:	4b43      	ldr	r3, [pc, #268]	; (80053a8 <LCD_Init+0x3980>)
 800529c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052a0:	611a      	str	r2, [r3, #16]
 80052a2:	4b41      	ldr	r3, [pc, #260]	; (80053a8 <LCD_Init+0x3980>)
 80052a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052a8:	615a      	str	r2, [r3, #20]
 80052aa:	4b40      	ldr	r3, [pc, #256]	; (80053ac <LCD_Init+0x3984>)
 80052ac:	2220      	movs	r2, #32
 80052ae:	60da      	str	r2, [r3, #12]
 80052b0:	4b3d      	ldr	r3, [pc, #244]	; (80053a8 <LCD_Init+0x3980>)
 80052b2:	2280      	movs	r2, #128	; 0x80
 80052b4:	615a      	str	r2, [r3, #20]
 80052b6:	4b3c      	ldr	r3, [pc, #240]	; (80053a8 <LCD_Init+0x3980>)
 80052b8:	2280      	movs	r2, #128	; 0x80
 80052ba:	611a      	str	r2, [r3, #16]
 80052bc:	4b3a      	ldr	r3, [pc, #232]	; (80053a8 <LCD_Init+0x3980>)
 80052be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052c2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//TFT 模式 
 80052c4:	4b38      	ldr	r3, [pc, #224]	; (80053a8 <LCD_Init+0x3980>)
 80052c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052ca:	611a      	str	r2, [r3, #16]
 80052cc:	4b36      	ldr	r3, [pc, #216]	; (80053a8 <LCD_Init+0x3980>)
 80052ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052d2:	615a      	str	r2, [r3, #20]
 80052d4:	4b35      	ldr	r3, [pc, #212]	; (80053ac <LCD_Init+0x3984>)
 80052d6:	2200      	movs	r2, #0
 80052d8:	60da      	str	r2, [r3, #12]
 80052da:	4b33      	ldr	r3, [pc, #204]	; (80053a8 <LCD_Init+0x3980>)
 80052dc:	2280      	movs	r2, #128	; 0x80
 80052de:	615a      	str	r2, [r3, #20]
 80052e0:	4b31      	ldr	r3, [pc, #196]	; (80053a8 <LCD_Init+0x3980>)
 80052e2:	2280      	movs	r2, #128	; 0x80
 80052e4:	611a      	str	r2, [r3, #16]
 80052e6:	4b30      	ldr	r3, [pc, #192]	; (80053a8 <LCD_Init+0x3980>)
 80052e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052ec:	611a      	str	r2, [r3, #16]

		LCD_WR_DATA((SSD_HOR_RESOLUTION-1)>>8);		//设置LCD水平像素
 80052ee:	4b2e      	ldr	r3, [pc, #184]	; (80053a8 <LCD_Init+0x3980>)
 80052f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052f4:	611a      	str	r2, [r3, #16]
 80052f6:	4b2c      	ldr	r3, [pc, #176]	; (80053a8 <LCD_Init+0x3980>)
 80052f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052fc:	615a      	str	r2, [r3, #20]
 80052fe:	4b2b      	ldr	r3, [pc, #172]	; (80053ac <LCD_Init+0x3984>)
 8005300:	2203      	movs	r2, #3
 8005302:	60da      	str	r2, [r3, #12]
 8005304:	4b28      	ldr	r3, [pc, #160]	; (80053a8 <LCD_Init+0x3980>)
 8005306:	2280      	movs	r2, #128	; 0x80
 8005308:	615a      	str	r2, [r3, #20]
 800530a:	4b27      	ldr	r3, [pc, #156]	; (80053a8 <LCD_Init+0x3980>)
 800530c:	2280      	movs	r2, #128	; 0x80
 800530e:	611a      	str	r2, [r3, #16]
 8005310:	4b25      	ldr	r3, [pc, #148]	; (80053a8 <LCD_Init+0x3980>)
 8005312:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005316:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_RESOLUTION-1);
 8005318:	4b23      	ldr	r3, [pc, #140]	; (80053a8 <LCD_Init+0x3980>)
 800531a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800531e:	611a      	str	r2, [r3, #16]
 8005320:	4b21      	ldr	r3, [pc, #132]	; (80053a8 <LCD_Init+0x3980>)
 8005322:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005326:	615a      	str	r2, [r3, #20]
 8005328:	4b20      	ldr	r3, [pc, #128]	; (80053ac <LCD_Init+0x3984>)
 800532a:	f240 321f 	movw	r2, #799	; 0x31f
 800532e:	60da      	str	r2, [r3, #12]
 8005330:	4b1d      	ldr	r3, [pc, #116]	; (80053a8 <LCD_Init+0x3980>)
 8005332:	2280      	movs	r2, #128	; 0x80
 8005334:	615a      	str	r2, [r3, #20]
 8005336:	4b1c      	ldr	r3, [pc, #112]	; (80053a8 <LCD_Init+0x3980>)
 8005338:	2280      	movs	r2, #128	; 0x80
 800533a:	611a      	str	r2, [r3, #16]
 800533c:	4b1a      	ldr	r3, [pc, #104]	; (80053a8 <LCD_Init+0x3980>)
 800533e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005342:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((SSD_VER_RESOLUTION-1)>>8);		//设置LCD垂直像素
 8005344:	4b18      	ldr	r3, [pc, #96]	; (80053a8 <LCD_Init+0x3980>)
 8005346:	f44f 7280 	mov.w	r2, #256	; 0x100
 800534a:	611a      	str	r2, [r3, #16]
 800534c:	4b16      	ldr	r3, [pc, #88]	; (80053a8 <LCD_Init+0x3980>)
 800534e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005352:	615a      	str	r2, [r3, #20]
 8005354:	4b15      	ldr	r3, [pc, #84]	; (80053ac <LCD_Init+0x3984>)
 8005356:	2201      	movs	r2, #1
 8005358:	60da      	str	r2, [r3, #12]
 800535a:	4b13      	ldr	r3, [pc, #76]	; (80053a8 <LCD_Init+0x3980>)
 800535c:	2280      	movs	r2, #128	; 0x80
 800535e:	615a      	str	r2, [r3, #20]
 8005360:	4b11      	ldr	r3, [pc, #68]	; (80053a8 <LCD_Init+0x3980>)
 8005362:	2280      	movs	r2, #128	; 0x80
 8005364:	611a      	str	r2, [r3, #16]
 8005366:	4b10      	ldr	r3, [pc, #64]	; (80053a8 <LCD_Init+0x3980>)
 8005368:	f44f 7200 	mov.w	r2, #512	; 0x200
 800536c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_RESOLUTION-1);
 800536e:	4b0e      	ldr	r3, [pc, #56]	; (80053a8 <LCD_Init+0x3980>)
 8005370:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005374:	611a      	str	r2, [r3, #16]
 8005376:	4b0c      	ldr	r3, [pc, #48]	; (80053a8 <LCD_Init+0x3980>)
 8005378:	f44f 7200 	mov.w	r2, #512	; 0x200
 800537c:	615a      	str	r2, [r3, #20]
 800537e:	4b0b      	ldr	r3, [pc, #44]	; (80053ac <LCD_Init+0x3984>)
 8005380:	f240 12df 	movw	r2, #479	; 0x1df
 8005384:	60da      	str	r2, [r3, #12]
 8005386:	4b08      	ldr	r3, [pc, #32]	; (80053a8 <LCD_Init+0x3980>)
 8005388:	2280      	movs	r2, #128	; 0x80
 800538a:	615a      	str	r2, [r3, #20]
 800538c:	4b06      	ldr	r3, [pc, #24]	; (80053a8 <LCD_Init+0x3980>)
 800538e:	2280      	movs	r2, #128	; 0x80
 8005390:	611a      	str	r2, [r3, #16]
 8005392:	4b05      	ldr	r3, [pc, #20]	; (80053a8 <LCD_Init+0x3980>)
 8005394:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005398:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//RGB序列 
 800539a:	4b03      	ldr	r3, [pc, #12]	; (80053a8 <LCD_Init+0x3980>)
 800539c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80053a0:	e006      	b.n	80053b0 <LCD_Init+0x3988>
 80053a2:	bf00      	nop
 80053a4:	20000080 	.word	0x20000080
 80053a8:	40011000 	.word	0x40011000
 80053ac:	40010c00 	.word	0x40010c00
 80053b0:	611a      	str	r2, [r3, #16]
 80053b2:	4ba3      	ldr	r3, [pc, #652]	; (8005640 <LCD_Init+0x3c18>)
 80053b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053b8:	615a      	str	r2, [r3, #20]
 80053ba:	4ba2      	ldr	r3, [pc, #648]	; (8005644 <LCD_Init+0x3c1c>)
 80053bc:	2200      	movs	r2, #0
 80053be:	60da      	str	r2, [r3, #12]
 80053c0:	4b9f      	ldr	r3, [pc, #636]	; (8005640 <LCD_Init+0x3c18>)
 80053c2:	2280      	movs	r2, #128	; 0x80
 80053c4:	615a      	str	r2, [r3, #20]
 80053c6:	4b9e      	ldr	r3, [pc, #632]	; (8005640 <LCD_Init+0x3c18>)
 80053c8:	2280      	movs	r2, #128	; 0x80
 80053ca:	611a      	str	r2, [r3, #16]
 80053cc:	4b9c      	ldr	r3, [pc, #624]	; (8005640 <LCD_Init+0x3c18>)
 80053ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053d2:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB4);		//Set horizontal period
 80053d4:	20b4      	movs	r0, #180	; 0xb4
 80053d6:	f7fb fac5 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATA((SSD_HT-1)>>8);
 80053da:	4b99      	ldr	r3, [pc, #612]	; (8005640 <LCD_Init+0x3c18>)
 80053dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80053e0:	611a      	str	r2, [r3, #16]
 80053e2:	4b97      	ldr	r3, [pc, #604]	; (8005640 <LCD_Init+0x3c18>)
 80053e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053e8:	615a      	str	r2, [r3, #20]
 80053ea:	4b96      	ldr	r3, [pc, #600]	; (8005644 <LCD_Init+0x3c1c>)
 80053ec:	2204      	movs	r2, #4
 80053ee:	60da      	str	r2, [r3, #12]
 80053f0:	4b93      	ldr	r3, [pc, #588]	; (8005640 <LCD_Init+0x3c18>)
 80053f2:	2280      	movs	r2, #128	; 0x80
 80053f4:	615a      	str	r2, [r3, #20]
 80053f6:	4b92      	ldr	r3, [pc, #584]	; (8005640 <LCD_Init+0x3c18>)
 80053f8:	2280      	movs	r2, #128	; 0x80
 80053fa:	611a      	str	r2, [r3, #16]
 80053fc:	4b90      	ldr	r3, [pc, #576]	; (8005640 <LCD_Init+0x3c18>)
 80053fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005402:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HT-1);
 8005404:	4b8e      	ldr	r3, [pc, #568]	; (8005640 <LCD_Init+0x3c18>)
 8005406:	f44f 7280 	mov.w	r2, #256	; 0x100
 800540a:	611a      	str	r2, [r3, #16]
 800540c:	4b8c      	ldr	r3, [pc, #560]	; (8005640 <LCD_Init+0x3c18>)
 800540e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005412:	615a      	str	r2, [r3, #20]
 8005414:	4b8b      	ldr	r3, [pc, #556]	; (8005644 <LCD_Init+0x3c1c>)
 8005416:	f240 421f 	movw	r2, #1055	; 0x41f
 800541a:	60da      	str	r2, [r3, #12]
 800541c:	4b88      	ldr	r3, [pc, #544]	; (8005640 <LCD_Init+0x3c18>)
 800541e:	2280      	movs	r2, #128	; 0x80
 8005420:	615a      	str	r2, [r3, #20]
 8005422:	4b87      	ldr	r3, [pc, #540]	; (8005640 <LCD_Init+0x3c18>)
 8005424:	2280      	movs	r2, #128	; 0x80
 8005426:	611a      	str	r2, [r3, #16]
 8005428:	4b85      	ldr	r3, [pc, #532]	; (8005640 <LCD_Init+0x3c18>)
 800542a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800542e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS>>8);
 8005430:	4b83      	ldr	r3, [pc, #524]	; (8005640 <LCD_Init+0x3c18>)
 8005432:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005436:	611a      	str	r2, [r3, #16]
 8005438:	4b81      	ldr	r3, [pc, #516]	; (8005640 <LCD_Init+0x3c18>)
 800543a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800543e:	615a      	str	r2, [r3, #20]
 8005440:	4b80      	ldr	r3, [pc, #512]	; (8005644 <LCD_Init+0x3c1c>)
 8005442:	2200      	movs	r2, #0
 8005444:	60da      	str	r2, [r3, #12]
 8005446:	4b7e      	ldr	r3, [pc, #504]	; (8005640 <LCD_Init+0x3c18>)
 8005448:	2280      	movs	r2, #128	; 0x80
 800544a:	615a      	str	r2, [r3, #20]
 800544c:	4b7c      	ldr	r3, [pc, #496]	; (8005640 <LCD_Init+0x3c18>)
 800544e:	2280      	movs	r2, #128	; 0x80
 8005450:	611a      	str	r2, [r3, #16]
 8005452:	4b7b      	ldr	r3, [pc, #492]	; (8005640 <LCD_Init+0x3c18>)
 8005454:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005458:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS);
 800545a:	4b79      	ldr	r3, [pc, #484]	; (8005640 <LCD_Init+0x3c18>)
 800545c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005460:	611a      	str	r2, [r3, #16]
 8005462:	4b77      	ldr	r3, [pc, #476]	; (8005640 <LCD_Init+0x3c18>)
 8005464:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005468:	615a      	str	r2, [r3, #20]
 800546a:	4b76      	ldr	r3, [pc, #472]	; (8005644 <LCD_Init+0x3c1c>)
 800546c:	222e      	movs	r2, #46	; 0x2e
 800546e:	60da      	str	r2, [r3, #12]
 8005470:	4b73      	ldr	r3, [pc, #460]	; (8005640 <LCD_Init+0x3c18>)
 8005472:	2280      	movs	r2, #128	; 0x80
 8005474:	615a      	str	r2, [r3, #20]
 8005476:	4b72      	ldr	r3, [pc, #456]	; (8005640 <LCD_Init+0x3c18>)
 8005478:	2280      	movs	r2, #128	; 0x80
 800547a:	611a      	str	r2, [r3, #16]
 800547c:	4b70      	ldr	r3, [pc, #448]	; (8005640 <LCD_Init+0x3c18>)
 800547e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005482:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_PULSE_WIDTH-1);
 8005484:	4b6e      	ldr	r3, [pc, #440]	; (8005640 <LCD_Init+0x3c18>)
 8005486:	f44f 7280 	mov.w	r2, #256	; 0x100
 800548a:	611a      	str	r2, [r3, #16]
 800548c:	4b6c      	ldr	r3, [pc, #432]	; (8005640 <LCD_Init+0x3c18>)
 800548e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005492:	615a      	str	r2, [r3, #20]
 8005494:	4b6b      	ldr	r3, [pc, #428]	; (8005644 <LCD_Init+0x3c1c>)
 8005496:	2200      	movs	r2, #0
 8005498:	60da      	str	r2, [r3, #12]
 800549a:	4b69      	ldr	r3, [pc, #420]	; (8005640 <LCD_Init+0x3c18>)
 800549c:	2280      	movs	r2, #128	; 0x80
 800549e:	615a      	str	r2, [r3, #20]
 80054a0:	4b67      	ldr	r3, [pc, #412]	; (8005640 <LCD_Init+0x3c18>)
 80054a2:	2280      	movs	r2, #128	; 0x80
 80054a4:	611a      	str	r2, [r3, #16]
 80054a6:	4b66      	ldr	r3, [pc, #408]	; (8005640 <LCD_Init+0x3c18>)
 80054a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054ac:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 80054ae:	4b64      	ldr	r3, [pc, #400]	; (8005640 <LCD_Init+0x3c18>)
 80054b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80054b4:	611a      	str	r2, [r3, #16]
 80054b6:	4b62      	ldr	r3, [pc, #392]	; (8005640 <LCD_Init+0x3c18>)
 80054b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054bc:	615a      	str	r2, [r3, #20]
 80054be:	4b61      	ldr	r3, [pc, #388]	; (8005644 <LCD_Init+0x3c1c>)
 80054c0:	2200      	movs	r2, #0
 80054c2:	60da      	str	r2, [r3, #12]
 80054c4:	4b5e      	ldr	r3, [pc, #376]	; (8005640 <LCD_Init+0x3c18>)
 80054c6:	2280      	movs	r2, #128	; 0x80
 80054c8:	615a      	str	r2, [r3, #20]
 80054ca:	4b5d      	ldr	r3, [pc, #372]	; (8005640 <LCD_Init+0x3c18>)
 80054cc:	2280      	movs	r2, #128	; 0x80
 80054ce:	611a      	str	r2, [r3, #16]
 80054d0:	4b5b      	ldr	r3, [pc, #364]	; (8005640 <LCD_Init+0x3c18>)
 80054d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054d6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 80054d8:	4b59      	ldr	r3, [pc, #356]	; (8005640 <LCD_Init+0x3c18>)
 80054da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80054de:	611a      	str	r2, [r3, #16]
 80054e0:	4b57      	ldr	r3, [pc, #348]	; (8005640 <LCD_Init+0x3c18>)
 80054e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054e6:	615a      	str	r2, [r3, #20]
 80054e8:	4b56      	ldr	r3, [pc, #344]	; (8005644 <LCD_Init+0x3c1c>)
 80054ea:	2200      	movs	r2, #0
 80054ec:	60da      	str	r2, [r3, #12]
 80054ee:	4b54      	ldr	r3, [pc, #336]	; (8005640 <LCD_Init+0x3c18>)
 80054f0:	2280      	movs	r2, #128	; 0x80
 80054f2:	615a      	str	r2, [r3, #20]
 80054f4:	4b52      	ldr	r3, [pc, #328]	; (8005640 <LCD_Init+0x3c18>)
 80054f6:	2280      	movs	r2, #128	; 0x80
 80054f8:	611a      	str	r2, [r3, #16]
 80054fa:	4b51      	ldr	r3, [pc, #324]	; (8005640 <LCD_Init+0x3c18>)
 80054fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005500:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005502:	4b4f      	ldr	r3, [pc, #316]	; (8005640 <LCD_Init+0x3c18>)
 8005504:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005508:	611a      	str	r2, [r3, #16]
 800550a:	4b4d      	ldr	r3, [pc, #308]	; (8005640 <LCD_Init+0x3c18>)
 800550c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005510:	615a      	str	r2, [r3, #20]
 8005512:	4b4c      	ldr	r3, [pc, #304]	; (8005644 <LCD_Init+0x3c1c>)
 8005514:	2200      	movs	r2, #0
 8005516:	60da      	str	r2, [r3, #12]
 8005518:	4b49      	ldr	r3, [pc, #292]	; (8005640 <LCD_Init+0x3c18>)
 800551a:	2280      	movs	r2, #128	; 0x80
 800551c:	615a      	str	r2, [r3, #20]
 800551e:	4b48      	ldr	r3, [pc, #288]	; (8005640 <LCD_Init+0x3c18>)
 8005520:	2280      	movs	r2, #128	; 0x80
 8005522:	611a      	str	r2, [r3, #16]
 8005524:	4b46      	ldr	r3, [pc, #280]	; (8005640 <LCD_Init+0x3c18>)
 8005526:	f44f 7200 	mov.w	r2, #512	; 0x200
 800552a:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xB6);		//Set vertical period
 800552c:	20b6      	movs	r0, #182	; 0xb6
 800552e:	f7fb fa19 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATA((SSD_VT-1)>>8);
 8005532:	4b43      	ldr	r3, [pc, #268]	; (8005640 <LCD_Init+0x3c18>)
 8005534:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005538:	611a      	str	r2, [r3, #16]
 800553a:	4b41      	ldr	r3, [pc, #260]	; (8005640 <LCD_Init+0x3c18>)
 800553c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005540:	615a      	str	r2, [r3, #20]
 8005542:	4b40      	ldr	r3, [pc, #256]	; (8005644 <LCD_Init+0x3c1c>)
 8005544:	2202      	movs	r2, #2
 8005546:	60da      	str	r2, [r3, #12]
 8005548:	4b3d      	ldr	r3, [pc, #244]	; (8005640 <LCD_Init+0x3c18>)
 800554a:	2280      	movs	r2, #128	; 0x80
 800554c:	615a      	str	r2, [r3, #20]
 800554e:	4b3c      	ldr	r3, [pc, #240]	; (8005640 <LCD_Init+0x3c18>)
 8005550:	2280      	movs	r2, #128	; 0x80
 8005552:	611a      	str	r2, [r3, #16]
 8005554:	4b3a      	ldr	r3, [pc, #232]	; (8005640 <LCD_Init+0x3c18>)
 8005556:	f44f 7200 	mov.w	r2, #512	; 0x200
 800555a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VT-1);
 800555c:	4b38      	ldr	r3, [pc, #224]	; (8005640 <LCD_Init+0x3c18>)
 800555e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005562:	611a      	str	r2, [r3, #16]
 8005564:	4b36      	ldr	r3, [pc, #216]	; (8005640 <LCD_Init+0x3c18>)
 8005566:	f44f 7200 	mov.w	r2, #512	; 0x200
 800556a:	615a      	str	r2, [r3, #20]
 800556c:	4b35      	ldr	r3, [pc, #212]	; (8005644 <LCD_Init+0x3c1c>)
 800556e:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8005572:	60da      	str	r2, [r3, #12]
 8005574:	4b32      	ldr	r3, [pc, #200]	; (8005640 <LCD_Init+0x3c18>)
 8005576:	2280      	movs	r2, #128	; 0x80
 8005578:	615a      	str	r2, [r3, #20]
 800557a:	4b31      	ldr	r3, [pc, #196]	; (8005640 <LCD_Init+0x3c18>)
 800557c:	2280      	movs	r2, #128	; 0x80
 800557e:	611a      	str	r2, [r3, #16]
 8005580:	4b2f      	ldr	r3, [pc, #188]	; (8005640 <LCD_Init+0x3c18>)
 8005582:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005586:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS>>8);
 8005588:	4b2d      	ldr	r3, [pc, #180]	; (8005640 <LCD_Init+0x3c18>)
 800558a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800558e:	611a      	str	r2, [r3, #16]
 8005590:	4b2b      	ldr	r3, [pc, #172]	; (8005640 <LCD_Init+0x3c18>)
 8005592:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005596:	615a      	str	r2, [r3, #20]
 8005598:	4b2a      	ldr	r3, [pc, #168]	; (8005644 <LCD_Init+0x3c1c>)
 800559a:	2200      	movs	r2, #0
 800559c:	60da      	str	r2, [r3, #12]
 800559e:	4b28      	ldr	r3, [pc, #160]	; (8005640 <LCD_Init+0x3c18>)
 80055a0:	2280      	movs	r2, #128	; 0x80
 80055a2:	615a      	str	r2, [r3, #20]
 80055a4:	4b26      	ldr	r3, [pc, #152]	; (8005640 <LCD_Init+0x3c18>)
 80055a6:	2280      	movs	r2, #128	; 0x80
 80055a8:	611a      	str	r2, [r3, #16]
 80055aa:	4b25      	ldr	r3, [pc, #148]	; (8005640 <LCD_Init+0x3c18>)
 80055ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055b0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS);
 80055b2:	4b23      	ldr	r3, [pc, #140]	; (8005640 <LCD_Init+0x3c18>)
 80055b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80055b8:	611a      	str	r2, [r3, #16]
 80055ba:	4b21      	ldr	r3, [pc, #132]	; (8005640 <LCD_Init+0x3c18>)
 80055bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055c0:	615a      	str	r2, [r3, #20]
 80055c2:	4b20      	ldr	r3, [pc, #128]	; (8005644 <LCD_Init+0x3c1c>)
 80055c4:	2217      	movs	r2, #23
 80055c6:	60da      	str	r2, [r3, #12]
 80055c8:	4b1d      	ldr	r3, [pc, #116]	; (8005640 <LCD_Init+0x3c18>)
 80055ca:	2280      	movs	r2, #128	; 0x80
 80055cc:	615a      	str	r2, [r3, #20]
 80055ce:	4b1c      	ldr	r3, [pc, #112]	; (8005640 <LCD_Init+0x3c18>)
 80055d0:	2280      	movs	r2, #128	; 0x80
 80055d2:	611a      	str	r2, [r3, #16]
 80055d4:	4b1a      	ldr	r3, [pc, #104]	; (8005640 <LCD_Init+0x3c18>)
 80055d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055da:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_FRONT_PORCH-1);
 80055dc:	4b18      	ldr	r3, [pc, #96]	; (8005640 <LCD_Init+0x3c18>)
 80055de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80055e2:	611a      	str	r2, [r3, #16]
 80055e4:	4b16      	ldr	r3, [pc, #88]	; (8005640 <LCD_Init+0x3c18>)
 80055e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055ea:	615a      	str	r2, [r3, #20]
 80055ec:	4b15      	ldr	r3, [pc, #84]	; (8005644 <LCD_Init+0x3c1c>)
 80055ee:	2215      	movs	r2, #21
 80055f0:	60da      	str	r2, [r3, #12]
 80055f2:	4b13      	ldr	r3, [pc, #76]	; (8005640 <LCD_Init+0x3c18>)
 80055f4:	2280      	movs	r2, #128	; 0x80
 80055f6:	615a      	str	r2, [r3, #20]
 80055f8:	4b11      	ldr	r3, [pc, #68]	; (8005640 <LCD_Init+0x3c18>)
 80055fa:	2280      	movs	r2, #128	; 0x80
 80055fc:	611a      	str	r2, [r3, #16]
 80055fe:	4b10      	ldr	r3, [pc, #64]	; (8005640 <LCD_Init+0x3c18>)
 8005600:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005604:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005606:	4b0e      	ldr	r3, [pc, #56]	; (8005640 <LCD_Init+0x3c18>)
 8005608:	f44f 7280 	mov.w	r2, #256	; 0x100
 800560c:	611a      	str	r2, [r3, #16]
 800560e:	4b0c      	ldr	r3, [pc, #48]	; (8005640 <LCD_Init+0x3c18>)
 8005610:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005614:	615a      	str	r2, [r3, #20]
 8005616:	4b0b      	ldr	r3, [pc, #44]	; (8005644 <LCD_Init+0x3c1c>)
 8005618:	2200      	movs	r2, #0
 800561a:	60da      	str	r2, [r3, #12]
 800561c:	4b08      	ldr	r3, [pc, #32]	; (8005640 <LCD_Init+0x3c18>)
 800561e:	2280      	movs	r2, #128	; 0x80
 8005620:	615a      	str	r2, [r3, #20]
 8005622:	4b07      	ldr	r3, [pc, #28]	; (8005640 <LCD_Init+0x3c18>)
 8005624:	2280      	movs	r2, #128	; 0x80
 8005626:	611a      	str	r2, [r3, #16]
 8005628:	4b05      	ldr	r3, [pc, #20]	; (8005640 <LCD_Init+0x3c18>)
 800562a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800562e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005630:	4b03      	ldr	r3, [pc, #12]	; (8005640 <LCD_Init+0x3c18>)
 8005632:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005636:	611a      	str	r2, [r3, #16]
 8005638:	4b01      	ldr	r3, [pc, #4]	; (8005640 <LCD_Init+0x3c18>)
 800563a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800563e:	e003      	b.n	8005648 <LCD_Init+0x3c20>
 8005640:	40011000 	.word	0x40011000
 8005644:	40010c00 	.word	0x40010c00
 8005648:	615a      	str	r2, [r3, #20]
 800564a:	4b8b      	ldr	r3, [pc, #556]	; (8005878 <LCD_Init+0x3e50>)
 800564c:	2200      	movs	r2, #0
 800564e:	60da      	str	r2, [r3, #12]
 8005650:	4b8a      	ldr	r3, [pc, #552]	; (800587c <LCD_Init+0x3e54>)
 8005652:	2280      	movs	r2, #128	; 0x80
 8005654:	615a      	str	r2, [r3, #20]
 8005656:	4b89      	ldr	r3, [pc, #548]	; (800587c <LCD_Init+0x3e54>)
 8005658:	2280      	movs	r2, #128	; 0x80
 800565a:	611a      	str	r2, [r3, #16]
 800565c:	4b87      	ldr	r3, [pc, #540]	; (800587c <LCD_Init+0x3e54>)
 800565e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005662:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xF0);	//设置SSD1963与CPU接口为16bit  
 8005664:	20f0      	movs	r0, #240	; 0xf0
 8005666:	f7fb f97d 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//16-bit(565 format) data for 16bpp 
 800566a:	4b84      	ldr	r3, [pc, #528]	; (800587c <LCD_Init+0x3e54>)
 800566c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005670:	611a      	str	r2, [r3, #16]
 8005672:	4b82      	ldr	r3, [pc, #520]	; (800587c <LCD_Init+0x3e54>)
 8005674:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005678:	615a      	str	r2, [r3, #20]
 800567a:	4b7f      	ldr	r3, [pc, #508]	; (8005878 <LCD_Init+0x3e50>)
 800567c:	2203      	movs	r2, #3
 800567e:	60da      	str	r2, [r3, #12]
 8005680:	4b7e      	ldr	r3, [pc, #504]	; (800587c <LCD_Init+0x3e54>)
 8005682:	2280      	movs	r2, #128	; 0x80
 8005684:	615a      	str	r2, [r3, #20]
 8005686:	4b7d      	ldr	r3, [pc, #500]	; (800587c <LCD_Init+0x3e54>)
 8005688:	2280      	movs	r2, #128	; 0x80
 800568a:	611a      	str	r2, [r3, #16]
 800568c:	4b7b      	ldr	r3, [pc, #492]	; (800587c <LCD_Init+0x3e54>)
 800568e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005692:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0x29);	//开启显示
 8005694:	2029      	movs	r0, #41	; 0x29
 8005696:	f7fb f965 	bl	8000964 <LCD_WR_REG>
		//设置PWM输出  背光通过占空比可调 
		LCD_WR_REG(0xD0);	//设置自动白平衡DBC
 800569a:	20d0      	movs	r0, #208	; 0xd0
 800569c:	f7fb f962 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATA(0x00);	//disable
 80056a0:	4b76      	ldr	r3, [pc, #472]	; (800587c <LCD_Init+0x3e54>)
 80056a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056a6:	611a      	str	r2, [r3, #16]
 80056a8:	4b74      	ldr	r3, [pc, #464]	; (800587c <LCD_Init+0x3e54>)
 80056aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056ae:	615a      	str	r2, [r3, #20]
 80056b0:	4b71      	ldr	r3, [pc, #452]	; (8005878 <LCD_Init+0x3e50>)
 80056b2:	2200      	movs	r2, #0
 80056b4:	60da      	str	r2, [r3, #12]
 80056b6:	4b71      	ldr	r3, [pc, #452]	; (800587c <LCD_Init+0x3e54>)
 80056b8:	2280      	movs	r2, #128	; 0x80
 80056ba:	615a      	str	r2, [r3, #20]
 80056bc:	4b6f      	ldr	r3, [pc, #444]	; (800587c <LCD_Init+0x3e54>)
 80056be:	2280      	movs	r2, #128	; 0x80
 80056c0:	611a      	str	r2, [r3, #16]
 80056c2:	4b6e      	ldr	r3, [pc, #440]	; (800587c <LCD_Init+0x3e54>)
 80056c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056c8:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xBE);	//配置PWM输出
 80056ca:	20be      	movs	r0, #190	; 0xbe
 80056cc:	f7fb f94a 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATA(0x05);	//1设置PWM频率
 80056d0:	4b6a      	ldr	r3, [pc, #424]	; (800587c <LCD_Init+0x3e54>)
 80056d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056d6:	611a      	str	r2, [r3, #16]
 80056d8:	4b68      	ldr	r3, [pc, #416]	; (800587c <LCD_Init+0x3e54>)
 80056da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056de:	615a      	str	r2, [r3, #20]
 80056e0:	4b65      	ldr	r3, [pc, #404]	; (8005878 <LCD_Init+0x3e50>)
 80056e2:	2205      	movs	r2, #5
 80056e4:	60da      	str	r2, [r3, #12]
 80056e6:	4b65      	ldr	r3, [pc, #404]	; (800587c <LCD_Init+0x3e54>)
 80056e8:	2280      	movs	r2, #128	; 0x80
 80056ea:	615a      	str	r2, [r3, #20]
 80056ec:	4b63      	ldr	r3, [pc, #396]	; (800587c <LCD_Init+0x3e54>)
 80056ee:	2280      	movs	r2, #128	; 0x80
 80056f0:	611a      	str	r2, [r3, #16]
 80056f2:	4b62      	ldr	r3, [pc, #392]	; (800587c <LCD_Init+0x3e54>)
 80056f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056f8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFE);	//2设置PWM占空比
 80056fa:	4b60      	ldr	r3, [pc, #384]	; (800587c <LCD_Init+0x3e54>)
 80056fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005700:	611a      	str	r2, [r3, #16]
 8005702:	4b5e      	ldr	r3, [pc, #376]	; (800587c <LCD_Init+0x3e54>)
 8005704:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005708:	615a      	str	r2, [r3, #20]
 800570a:	4b5b      	ldr	r3, [pc, #364]	; (8005878 <LCD_Init+0x3e50>)
 800570c:	22fe      	movs	r2, #254	; 0xfe
 800570e:	60da      	str	r2, [r3, #12]
 8005710:	4b5a      	ldr	r3, [pc, #360]	; (800587c <LCD_Init+0x3e54>)
 8005712:	2280      	movs	r2, #128	; 0x80
 8005714:	615a      	str	r2, [r3, #20]
 8005716:	4b59      	ldr	r3, [pc, #356]	; (800587c <LCD_Init+0x3e54>)
 8005718:	2280      	movs	r2, #128	; 0x80
 800571a:	611a      	str	r2, [r3, #16]
 800571c:	4b57      	ldr	r3, [pc, #348]	; (800587c <LCD_Init+0x3e54>)
 800571e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005722:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//3设置C
 8005724:	4b55      	ldr	r3, [pc, #340]	; (800587c <LCD_Init+0x3e54>)
 8005726:	f44f 7280 	mov.w	r2, #256	; 0x100
 800572a:	611a      	str	r2, [r3, #16]
 800572c:	4b53      	ldr	r3, [pc, #332]	; (800587c <LCD_Init+0x3e54>)
 800572e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005732:	615a      	str	r2, [r3, #20]
 8005734:	4b50      	ldr	r3, [pc, #320]	; (8005878 <LCD_Init+0x3e50>)
 8005736:	2201      	movs	r2, #1
 8005738:	60da      	str	r2, [r3, #12]
 800573a:	4b50      	ldr	r3, [pc, #320]	; (800587c <LCD_Init+0x3e54>)
 800573c:	2280      	movs	r2, #128	; 0x80
 800573e:	615a      	str	r2, [r3, #20]
 8005740:	4b4e      	ldr	r3, [pc, #312]	; (800587c <LCD_Init+0x3e54>)
 8005742:	2280      	movs	r2, #128	; 0x80
 8005744:	611a      	str	r2, [r3, #16]
 8005746:	4b4d      	ldr	r3, [pc, #308]	; (800587c <LCD_Init+0x3e54>)
 8005748:	f44f 7200 	mov.w	r2, #512	; 0x200
 800574c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//4设置D
 800574e:	4b4b      	ldr	r3, [pc, #300]	; (800587c <LCD_Init+0x3e54>)
 8005750:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005754:	611a      	str	r2, [r3, #16]
 8005756:	4b49      	ldr	r3, [pc, #292]	; (800587c <LCD_Init+0x3e54>)
 8005758:	f44f 7200 	mov.w	r2, #512	; 0x200
 800575c:	615a      	str	r2, [r3, #20]
 800575e:	4b46      	ldr	r3, [pc, #280]	; (8005878 <LCD_Init+0x3e50>)
 8005760:	2200      	movs	r2, #0
 8005762:	60da      	str	r2, [r3, #12]
 8005764:	4b45      	ldr	r3, [pc, #276]	; (800587c <LCD_Init+0x3e54>)
 8005766:	2280      	movs	r2, #128	; 0x80
 8005768:	615a      	str	r2, [r3, #20]
 800576a:	4b44      	ldr	r3, [pc, #272]	; (800587c <LCD_Init+0x3e54>)
 800576c:	2280      	movs	r2, #128	; 0x80
 800576e:	611a      	str	r2, [r3, #16]
 8005770:	4b42      	ldr	r3, [pc, #264]	; (800587c <LCD_Init+0x3e54>)
 8005772:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005776:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//5设置E 
 8005778:	4b40      	ldr	r3, [pc, #256]	; (800587c <LCD_Init+0x3e54>)
 800577a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800577e:	611a      	str	r2, [r3, #16]
 8005780:	4b3e      	ldr	r3, [pc, #248]	; (800587c <LCD_Init+0x3e54>)
 8005782:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005786:	615a      	str	r2, [r3, #20]
 8005788:	4b3b      	ldr	r3, [pc, #236]	; (8005878 <LCD_Init+0x3e50>)
 800578a:	2200      	movs	r2, #0
 800578c:	60da      	str	r2, [r3, #12]
 800578e:	4b3b      	ldr	r3, [pc, #236]	; (800587c <LCD_Init+0x3e54>)
 8005790:	2280      	movs	r2, #128	; 0x80
 8005792:	615a      	str	r2, [r3, #20]
 8005794:	4b39      	ldr	r3, [pc, #228]	; (800587c <LCD_Init+0x3e54>)
 8005796:	2280      	movs	r2, #128	; 0x80
 8005798:	611a      	str	r2, [r3, #16]
 800579a:	4b38      	ldr	r3, [pc, #224]	; (800587c <LCD_Init+0x3e54>)
 800579c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057a0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//6设置F 
 80057a2:	4b36      	ldr	r3, [pc, #216]	; (800587c <LCD_Init+0x3e54>)
 80057a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057a8:	611a      	str	r2, [r3, #16]
 80057aa:	4b34      	ldr	r3, [pc, #208]	; (800587c <LCD_Init+0x3e54>)
 80057ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057b0:	615a      	str	r2, [r3, #20]
 80057b2:	4b31      	ldr	r3, [pc, #196]	; (8005878 <LCD_Init+0x3e50>)
 80057b4:	2200      	movs	r2, #0
 80057b6:	60da      	str	r2, [r3, #12]
 80057b8:	4b30      	ldr	r3, [pc, #192]	; (800587c <LCD_Init+0x3e54>)
 80057ba:	2280      	movs	r2, #128	; 0x80
 80057bc:	615a      	str	r2, [r3, #20]
 80057be:	4b2f      	ldr	r3, [pc, #188]	; (800587c <LCD_Init+0x3e54>)
 80057c0:	2280      	movs	r2, #128	; 0x80
 80057c2:	611a      	str	r2, [r3, #16]
 80057c4:	4b2d      	ldr	r3, [pc, #180]	; (800587c <LCD_Init+0x3e54>)
 80057c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057ca:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB8);	//设置GPIO配置
 80057cc:	20b8      	movs	r0, #184	; 0xb8
 80057ce:	f7fb f8c9 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//2个IO口设置成输出
 80057d2:	4b2a      	ldr	r3, [pc, #168]	; (800587c <LCD_Init+0x3e54>)
 80057d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057d8:	611a      	str	r2, [r3, #16]
 80057da:	4b28      	ldr	r3, [pc, #160]	; (800587c <LCD_Init+0x3e54>)
 80057dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057e0:	615a      	str	r2, [r3, #20]
 80057e2:	4b25      	ldr	r3, [pc, #148]	; (8005878 <LCD_Init+0x3e50>)
 80057e4:	2203      	movs	r2, #3
 80057e6:	60da      	str	r2, [r3, #12]
 80057e8:	4b24      	ldr	r3, [pc, #144]	; (800587c <LCD_Init+0x3e54>)
 80057ea:	2280      	movs	r2, #128	; 0x80
 80057ec:	615a      	str	r2, [r3, #20]
 80057ee:	4b23      	ldr	r3, [pc, #140]	; (800587c <LCD_Init+0x3e54>)
 80057f0:	2280      	movs	r2, #128	; 0x80
 80057f2:	611a      	str	r2, [r3, #16]
 80057f4:	4b21      	ldr	r3, [pc, #132]	; (800587c <LCD_Init+0x3e54>)
 80057f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057fa:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//GPIO使用正常的IO功能 
 80057fc:	4b1f      	ldr	r3, [pc, #124]	; (800587c <LCD_Init+0x3e54>)
 80057fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005802:	611a      	str	r2, [r3, #16]
 8005804:	4b1d      	ldr	r3, [pc, #116]	; (800587c <LCD_Init+0x3e54>)
 8005806:	f44f 7200 	mov.w	r2, #512	; 0x200
 800580a:	615a      	str	r2, [r3, #20]
 800580c:	4b1a      	ldr	r3, [pc, #104]	; (8005878 <LCD_Init+0x3e50>)
 800580e:	2201      	movs	r2, #1
 8005810:	60da      	str	r2, [r3, #12]
 8005812:	4b1a      	ldr	r3, [pc, #104]	; (800587c <LCD_Init+0x3e54>)
 8005814:	2280      	movs	r2, #128	; 0x80
 8005816:	615a      	str	r2, [r3, #20]
 8005818:	4b18      	ldr	r3, [pc, #96]	; (800587c <LCD_Init+0x3e54>)
 800581a:	2280      	movs	r2, #128	; 0x80
 800581c:	611a      	str	r2, [r3, #16]
 800581e:	4b17      	ldr	r3, [pc, #92]	; (800587c <LCD_Init+0x3e54>)
 8005820:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005824:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xBA);
 8005826:	20ba      	movs	r0, #186	; 0xba
 8005828:	f7fb f89c 	bl	8000964 <LCD_WR_REG>
		LCD_WR_DATA(0X01);	//GPIO[1:0]=01,控制LCD方向
 800582c:	4b13      	ldr	r3, [pc, #76]	; (800587c <LCD_Init+0x3e54>)
 800582e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005832:	611a      	str	r2, [r3, #16]
 8005834:	4b11      	ldr	r3, [pc, #68]	; (800587c <LCD_Init+0x3e54>)
 8005836:	f44f 7200 	mov.w	r2, #512	; 0x200
 800583a:	615a      	str	r2, [r3, #20]
 800583c:	4b0e      	ldr	r3, [pc, #56]	; (8005878 <LCD_Init+0x3e50>)
 800583e:	2201      	movs	r2, #1
 8005840:	60da      	str	r2, [r3, #12]
 8005842:	4b0e      	ldr	r3, [pc, #56]	; (800587c <LCD_Init+0x3e54>)
 8005844:	2280      	movs	r2, #128	; 0x80
 8005846:	615a      	str	r2, [r3, #20]
 8005848:	4b0c      	ldr	r3, [pc, #48]	; (800587c <LCD_Init+0x3e54>)
 800584a:	2280      	movs	r2, #128	; 0x80
 800584c:	611a      	str	r2, [r3, #16]
 800584e:	4b0b      	ldr	r3, [pc, #44]	; (800587c <LCD_Init+0x3e54>)
 8005850:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005854:	611a      	str	r2, [r3, #16]

		LCD_SSD_BackLightSet(100);	//背光设置为最亮
 8005856:	2064      	movs	r0, #100	; 0x64
 8005858:	f7fb ff36 	bl	80016c8 <LCD_SSD_BackLightSet>
	}
	LCD_Display_Dir(0);		 	//默认为竖屏
 800585c:	2000      	movs	r0, #0
 800585e:	f7fb ffd7 	bl	8001810 <LCD_Display_Dir>
	LCD_LED = 1;					//点亮背光
 8005862:	4b07      	ldr	r3, [pc, #28]	; (8005880 <LCD_Init+0x3e58>)
 8005864:	2201      	movs	r2, #1
 8005866:	601a      	str	r2, [r3, #0]
	LCD_Clear(WHITE);
 8005868:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800586c:	f000 f80a 	bl	8005884 <LCD_Clear>
}
 8005870:	bf00      	nop
 8005872:	3718      	adds	r7, #24
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}
 8005878:	40010c00 	.word	0x40010c00
 800587c:	40011000 	.word	0x40011000
 8005880:	422201a8 	.word	0x422201a8

08005884 <LCD_Clear>:

// Clear the screen with specific color
void LCD_Clear(uint16_t color) {
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	4603      	mov	r3, r0
 800588c:	80fb      	strh	r3, [r7, #6]
	uint32_t index = 0;
 800588e:	2300      	movs	r3, #0
 8005890:	60fb      	str	r3, [r7, #12]
	uint32_t totalpoint = lcddev.width;
 8005892:	4b2a      	ldr	r3, [pc, #168]	; (800593c <LCD_Clear+0xb8>)
 8005894:	881b      	ldrh	r3, [r3, #0]
 8005896:	60bb      	str	r3, [r7, #8]
	totalpoint *= lcddev.height; 			//得到总点数
 8005898:	4b28      	ldr	r3, [pc, #160]	; (800593c <LCD_Clear+0xb8>)
 800589a:	885b      	ldrh	r3, [r3, #2]
 800589c:	461a      	mov	r2, r3
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	fb02 f303 	mul.w	r3, r2, r3
 80058a4:	60bb      	str	r3, [r7, #8]
	if ((lcddev.id == 0X6804) && (lcddev.dir == 1)) 			//6804横屏的时候特殊处理
 80058a6:	4b25      	ldr	r3, [pc, #148]	; (800593c <LCD_Clear+0xb8>)
 80058a8:	889b      	ldrh	r3, [r3, #4]
 80058aa:	f646 0204 	movw	r2, #26628	; 0x6804
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d11a      	bne.n	80058e8 <LCD_Clear+0x64>
 80058b2:	4b22      	ldr	r3, [pc, #136]	; (800593c <LCD_Clear+0xb8>)
 80058b4:	799b      	ldrb	r3, [r3, #6]
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d116      	bne.n	80058e8 <LCD_Clear+0x64>
			{
		lcddev.dir = 0;
 80058ba:	4b20      	ldr	r3, [pc, #128]	; (800593c <LCD_Clear+0xb8>)
 80058bc:	2200      	movs	r2, #0
 80058be:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2A;
 80058c0:	4b1e      	ldr	r3, [pc, #120]	; (800593c <LCD_Clear+0xb8>)
 80058c2:	222a      	movs	r2, #42	; 0x2a
 80058c4:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2B;
 80058c6:	4b1d      	ldr	r3, [pc, #116]	; (800593c <LCD_Clear+0xb8>)
 80058c8:	222b      	movs	r2, #43	; 0x2b
 80058ca:	819a      	strh	r2, [r3, #12]
		LCD_SetCursor(0x00, 0x0000);		//设置光标位置
 80058cc:	2100      	movs	r1, #0
 80058ce:	2000      	movs	r0, #0
 80058d0:	f7fb f91a 	bl	8000b08 <LCD_SetCursor>
		lcddev.dir = 1;
 80058d4:	4b19      	ldr	r3, [pc, #100]	; (800593c <LCD_Clear+0xb8>)
 80058d6:	2201      	movs	r2, #1
 80058d8:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2B;
 80058da:	4b18      	ldr	r3, [pc, #96]	; (800593c <LCD_Clear+0xb8>)
 80058dc:	222b      	movs	r2, #43	; 0x2b
 80058de:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2A;
 80058e0:	4b16      	ldr	r3, [pc, #88]	; (800593c <LCD_Clear+0xb8>)
 80058e2:	222a      	movs	r2, #42	; 0x2a
 80058e4:	819a      	strh	r2, [r3, #12]
 80058e6:	e003      	b.n	80058f0 <LCD_Clear+0x6c>
	} else
		LCD_SetCursor(0x00, 0x0000);	//设置光标位置
 80058e8:	2100      	movs	r1, #0
 80058ea:	2000      	movs	r0, #0
 80058ec:	f7fb f90c 	bl	8000b08 <LCD_SetCursor>
	LCD_WriteRAM_Prepare();     		//开始写入GRAM	  	  
 80058f0:	f7fb f8fe 	bl	8000af0 <LCD_WriteRAM_Prepare>
	for (index = 0; index < totalpoint; index++)
 80058f4:	2300      	movs	r3, #0
 80058f6:	60fb      	str	r3, [r7, #12]
 80058f8:	e017      	b.n	800592a <LCD_Clear+0xa6>
		LCD_WR_DATA(color);
 80058fa:	4b11      	ldr	r3, [pc, #68]	; (8005940 <LCD_Clear+0xbc>)
 80058fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005900:	611a      	str	r2, [r3, #16]
 8005902:	4b0f      	ldr	r3, [pc, #60]	; (8005940 <LCD_Clear+0xbc>)
 8005904:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005908:	615a      	str	r2, [r3, #20]
 800590a:	4a0e      	ldr	r2, [pc, #56]	; (8005944 <LCD_Clear+0xc0>)
 800590c:	88fb      	ldrh	r3, [r7, #6]
 800590e:	60d3      	str	r3, [r2, #12]
 8005910:	4b0b      	ldr	r3, [pc, #44]	; (8005940 <LCD_Clear+0xbc>)
 8005912:	2280      	movs	r2, #128	; 0x80
 8005914:	615a      	str	r2, [r3, #20]
 8005916:	4b0a      	ldr	r3, [pc, #40]	; (8005940 <LCD_Clear+0xbc>)
 8005918:	2280      	movs	r2, #128	; 0x80
 800591a:	611a      	str	r2, [r3, #16]
 800591c:	4b08      	ldr	r3, [pc, #32]	; (8005940 <LCD_Clear+0xbc>)
 800591e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005922:	611a      	str	r2, [r3, #16]
	for (index = 0; index < totalpoint; index++)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	3301      	adds	r3, #1
 8005928:	60fb      	str	r3, [r7, #12]
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	429a      	cmp	r2, r3
 8005930:	d3e3      	bcc.n	80058fa <LCD_Clear+0x76>
}
 8005932:	bf00      	nop
 8005934:	bf00      	nop
 8005936:	3710      	adds	r7, #16
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	20000080 	.word	0x20000080
 8005940:	40011000 	.word	0x40011000
 8005944:	40010c00 	.word	0x40010c00

08005948 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800594c:	f000 fa88 	bl	8005e60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005950:	f000 f812 	bl	8005978 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  LCD_Init();
 8005954:	f7fc f868 	bl	8001a28 <LCD_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005958:	f7fa ff76 	bl	8000848 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800595c:	f000 f9dc 	bl	8005d18 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8005960:	f000 f968 	bl	8005c34 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1,(uint8_t*)rxBuffer,1);
 8005964:	2201      	movs	r2, #1
 8005966:	4902      	ldr	r1, [pc, #8]	; (8005970 <main+0x28>)
 8005968:	4802      	ldr	r0, [pc, #8]	; (8005974 <main+0x2c>)
 800596a:	f001 ff5a 	bl	8007822 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  Question();
  while (1)
 800596e:	e7fe      	b.n	800596e <main+0x26>
 8005970:	20000138 	.word	0x20000138
 8005974:	20000090 	.word	0x20000090

08005978 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b090      	sub	sp, #64	; 0x40
 800597c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800597e:	f107 0318 	add.w	r3, r7, #24
 8005982:	2228      	movs	r2, #40	; 0x28
 8005984:	2100      	movs	r1, #0
 8005986:	4618      	mov	r0, r3
 8005988:	f002 fb7e 	bl	8008088 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800598c:	1d3b      	adds	r3, r7, #4
 800598e:	2200      	movs	r2, #0
 8005990:	601a      	str	r2, [r3, #0]
 8005992:	605a      	str	r2, [r3, #4]
 8005994:	609a      	str	r2, [r3, #8]
 8005996:	60da      	str	r2, [r3, #12]
 8005998:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800599a:	2301      	movs	r3, #1
 800599c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800599e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80059a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80059a4:	2300      	movs	r3, #0
 80059a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80059a8:	2301      	movs	r3, #1
 80059aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80059ac:	2302      	movs	r3, #2
 80059ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80059b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80059b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80059b6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80059ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80059bc:	f107 0318 	add.w	r3, r7, #24
 80059c0:	4618      	mov	r0, r3
 80059c2:	f000 fef1 	bl	80067a8 <HAL_RCC_OscConfig>
 80059c6:	4603      	mov	r3, r0
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d001      	beq.n	80059d0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80059cc:	f000 f819 	bl	8005a02 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80059d0:	230f      	movs	r3, #15
 80059d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80059d4:	2302      	movs	r3, #2
 80059d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80059d8:	2300      	movs	r3, #0
 80059da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80059dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80059e2:	2300      	movs	r3, #0
 80059e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80059e6:	1d3b      	adds	r3, r7, #4
 80059e8:	2102      	movs	r1, #2
 80059ea:	4618      	mov	r0, r3
 80059ec:	f001 f95c 	bl	8006ca8 <HAL_RCC_ClockConfig>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d001      	beq.n	80059fa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80059f6:	f000 f804 	bl	8005a02 <Error_Handler>
  }
}
 80059fa:	bf00      	nop
 80059fc:	3740      	adds	r7, #64	; 0x40
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}

08005a02 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005a02:	b480      	push	{r7}
 8005a04:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005a06:	b672      	cpsid	i
}
 8005a08:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005a0a:	e7fe      	b.n	8005a0a <Error_Handler+0x8>

08005a0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005a12:	4b16      	ldr	r3, [pc, #88]	; (8005a6c <HAL_MspInit+0x60>)
 8005a14:	699b      	ldr	r3, [r3, #24]
 8005a16:	4a15      	ldr	r2, [pc, #84]	; (8005a6c <HAL_MspInit+0x60>)
 8005a18:	f043 0301 	orr.w	r3, r3, #1
 8005a1c:	6193      	str	r3, [r2, #24]
 8005a1e:	4b13      	ldr	r3, [pc, #76]	; (8005a6c <HAL_MspInit+0x60>)
 8005a20:	699b      	ldr	r3, [r3, #24]
 8005a22:	f003 0301 	and.w	r3, r3, #1
 8005a26:	60bb      	str	r3, [r7, #8]
 8005a28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005a2a:	4b10      	ldr	r3, [pc, #64]	; (8005a6c <HAL_MspInit+0x60>)
 8005a2c:	69db      	ldr	r3, [r3, #28]
 8005a2e:	4a0f      	ldr	r2, [pc, #60]	; (8005a6c <HAL_MspInit+0x60>)
 8005a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a34:	61d3      	str	r3, [r2, #28]
 8005a36:	4b0d      	ldr	r3, [pc, #52]	; (8005a6c <HAL_MspInit+0x60>)
 8005a38:	69db      	ldr	r3, [r3, #28]
 8005a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a3e:	607b      	str	r3, [r7, #4]
 8005a40:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8005a42:	2005      	movs	r0, #5
 8005a44:	f000 fb5e 	bl	8006104 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8005a48:	4b09      	ldr	r3, [pc, #36]	; (8005a70 <HAL_MspInit+0x64>)
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	60fb      	str	r3, [r7, #12]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005a54:	60fb      	str	r3, [r7, #12]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a5c:	60fb      	str	r3, [r7, #12]
 8005a5e:	4a04      	ldr	r2, [pc, #16]	; (8005a70 <HAL_MspInit+0x64>)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005a64:	bf00      	nop
 8005a66:	3710      	adds	r7, #16
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}
 8005a6c:	40021000 	.word	0x40021000
 8005a70:	40010000 	.word	0x40010000

08005a74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005a74:	b480      	push	{r7}
 8005a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005a78:	e7fe      	b.n	8005a78 <NMI_Handler+0x4>

08005a7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005a7a:	b480      	push	{r7}
 8005a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005a7e:	e7fe      	b.n	8005a7e <HardFault_Handler+0x4>

08005a80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005a80:	b480      	push	{r7}
 8005a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005a84:	e7fe      	b.n	8005a84 <MemManage_Handler+0x4>

08005a86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005a86:	b480      	push	{r7}
 8005a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005a8a:	e7fe      	b.n	8005a8a <BusFault_Handler+0x4>

08005a8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005a90:	e7fe      	b.n	8005a90 <UsageFault_Handler+0x4>

08005a92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005a92:	b480      	push	{r7}
 8005a94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005a96:	bf00      	nop
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bc80      	pop	{r7}
 8005a9c:	4770      	bx	lr

08005a9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005a9e:	b480      	push	{r7}
 8005aa0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005aa2:	bf00      	nop
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bc80      	pop	{r7}
 8005aa8:	4770      	bx	lr

08005aaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005aaa:	b480      	push	{r7}
 8005aac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005aae:	bf00      	nop
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bc80      	pop	{r7}
 8005ab4:	4770      	bx	lr

08005ab6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005ab6:	b580      	push	{r7, lr}
 8005ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005aba:	f000 fa17 	bl	8005eec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005abe:	bf00      	nop
 8005ac0:	bd80      	pop	{r7, pc}

08005ac2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005ac2:	b580      	push	{r7, lr}
 8005ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8005ac6:	2020      	movs	r0, #32
 8005ac8:	f000 fe4c 	bl	8006764 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005acc:	bf00      	nop
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005ad4:	4802      	ldr	r0, [pc, #8]	; (8005ae0 <TIM2_IRQHandler+0x10>)
 8005ad6:	f001 fad0 	bl	800707a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005ada:	bf00      	nop
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	2000014c 	.word	0x2000014c

08005ae4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005ae8:	4804      	ldr	r0, [pc, #16]	; (8005afc <USART1_IRQHandler+0x18>)
 8005aea:	f001 fecb 	bl	8007884 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  HAL_UART_Receive_IT(&huart1,(uint8_t*)rxBuffer,1);
 8005aee:	2201      	movs	r2, #1
 8005af0:	4903      	ldr	r1, [pc, #12]	; (8005b00 <USART1_IRQHandler+0x1c>)
 8005af2:	4802      	ldr	r0, [pc, #8]	; (8005afc <USART1_IRQHandler+0x18>)
 8005af4:	f001 fe95 	bl	8007822 <HAL_UART_Receive_IT>
  /* USER CODE END USART1_IRQn 1 */
}
 8005af8:	bf00      	nop
 8005afa:	bd80      	pop	{r7, pc}
 8005afc:	20000090 	.word	0x20000090
 8005b00:	20000138 	.word	0x20000138

08005b04 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8005b08:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005b0c:	f000 fe2a 	bl	8006764 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005b10:	bf00      	nop
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <HAL_UART_RxCpltCallback>:
unsigned char T_on_0[] = "Turn on LED0";
unsigned char T_on_1[] = "Turn on LED1";
unsigned char T_off_0[] = "Turn off LED0";
unsigned char T_off_1[] = "Turn off LED1";
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b084      	sub	sp, #16
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART1){
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a37      	ldr	r2, [pc, #220]	; (8005c00 <HAL_UART_RxCpltCallback+0xec>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d168      	bne.n	8005bf8 <HAL_UART_RxCpltCallback+0xe4>
		static unsigned char uRx_Data[20] = {0};
		static unsigned char uLength = 0;
		if(rxBuffer[0] == '\n'){
 8005b26:	4b37      	ldr	r3, [pc, #220]	; (8005c04 <HAL_UART_RxCpltCallback+0xf0>)
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	2b0a      	cmp	r3, #10
 8005b2c:	d153      	bne.n	8005bd6 <HAL_UART_RxCpltCallback+0xc2>
			if (strcmp(T_on_0, uRx_Data) == 0) {
 8005b2e:	4936      	ldr	r1, [pc, #216]	; (8005c08 <HAL_UART_RxCpltCallback+0xf4>)
 8005b30:	4836      	ldr	r0, [pc, #216]	; (8005c0c <HAL_UART_RxCpltCallback+0xf8>)
 8005b32:	f7fa fb79 	bl	8000228 <strcmp>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d105      	bne.n	8005b48 <HAL_UART_RxCpltCallback+0x34>
				HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005b42:	4833      	ldr	r0, [pc, #204]	; (8005c10 <HAL_UART_RxCpltCallback+0xfc>)
 8005b44:	f000 fdf6 	bl	8006734 <HAL_GPIO_WritePin>
			}
			if (strcmp(T_on_1, uRx_Data) == 0) {
 8005b48:	492f      	ldr	r1, [pc, #188]	; (8005c08 <HAL_UART_RxCpltCallback+0xf4>)
 8005b4a:	4832      	ldr	r0, [pc, #200]	; (8005c14 <HAL_UART_RxCpltCallback+0x100>)
 8005b4c:	f7fa fb6c 	bl	8000228 <strcmp>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d105      	bne.n	8005b62 <HAL_UART_RxCpltCallback+0x4e>
							HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8005b56:	2200      	movs	r2, #0
 8005b58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005b5c:	482e      	ldr	r0, [pc, #184]	; (8005c18 <HAL_UART_RxCpltCallback+0x104>)
 8005b5e:	f000 fde9 	bl	8006734 <HAL_GPIO_WritePin>
						}
			if (strcmp(T_off_0, uRx_Data) == 0) {
 8005b62:	4929      	ldr	r1, [pc, #164]	; (8005c08 <HAL_UART_RxCpltCallback+0xf4>)
 8005b64:	482d      	ldr	r0, [pc, #180]	; (8005c1c <HAL_UART_RxCpltCallback+0x108>)
 8005b66:	f7fa fb5f 	bl	8000228 <strcmp>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d105      	bne.n	8005b7c <HAL_UART_RxCpltCallback+0x68>
							HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8005b70:	2201      	movs	r2, #1
 8005b72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005b76:	4826      	ldr	r0, [pc, #152]	; (8005c10 <HAL_UART_RxCpltCallback+0xfc>)
 8005b78:	f000 fddc 	bl	8006734 <HAL_GPIO_WritePin>
						}
			if (strcmp(T_off_1, uRx_Data) == 0) {
 8005b7c:	4922      	ldr	r1, [pc, #136]	; (8005c08 <HAL_UART_RxCpltCallback+0xf4>)
 8005b7e:	4828      	ldr	r0, [pc, #160]	; (8005c20 <HAL_UART_RxCpltCallback+0x10c>)
 8005b80:	f7fa fb52 	bl	8000228 <strcmp>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d105      	bne.n	8005b96 <HAL_UART_RxCpltCallback+0x82>
							HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005b90:	4821      	ldr	r0, [pc, #132]	; (8005c18 <HAL_UART_RxCpltCallback+0x104>)
 8005b92:	f000 fdcf 	bl	8006734 <HAL_GPIO_WritePin>
						}
			uLength = 0;
 8005b96:	4b23      	ldr	r3, [pc, #140]	; (8005c24 <HAL_UART_RxCpltCallback+0x110>)
 8005b98:	2200      	movs	r2, #0
 8005b9a:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < 20; i++){
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	60fb      	str	r3, [r7, #12]
 8005ba0:	e007      	b.n	8005bb2 <HAL_UART_RxCpltCallback+0x9e>
				uRx_Data[i] = 0;
 8005ba2:	4a19      	ldr	r2, [pc, #100]	; (8005c08 <HAL_UART_RxCpltCallback+0xf4>)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	2200      	movs	r2, #0
 8005baa:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < 20; i++){
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	3301      	adds	r3, #1
 8005bb0:	60fb      	str	r3, [r7, #12]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2b13      	cmp	r3, #19
 8005bb6:	ddf4      	ble.n	8005ba2 <HAL_UART_RxCpltCallback+0x8e>
			}
			for(int i = 0; i < 20; i++){
 8005bb8:	2300      	movs	r3, #0
 8005bba:	60bb      	str	r3, [r7, #8]
 8005bbc:	e007      	b.n	8005bce <HAL_UART_RxCpltCallback+0xba>
				rxBuffer[i] = 0;
 8005bbe:	4a11      	ldr	r2, [pc, #68]	; (8005c04 <HAL_UART_RxCpltCallback+0xf0>)
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < 20; i++){
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	3301      	adds	r3, #1
 8005bcc:	60bb      	str	r3, [r7, #8]
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	2b13      	cmp	r3, #19
 8005bd2:	ddf4      	ble.n	8005bbe <HAL_UART_RxCpltCallback+0xaa>
		else{
			uRx_Data[uLength] = rxBuffer[0];
			uLength++;
		}
	}
}
 8005bd4:	e010      	b.n	8005bf8 <HAL_UART_RxCpltCallback+0xe4>
		else if (rxBuffer[0] == '\r') {
 8005bd6:	4b0b      	ldr	r3, [pc, #44]	; (8005c04 <HAL_UART_RxCpltCallback+0xf0>)
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	2b0d      	cmp	r3, #13
 8005bdc:	d00c      	beq.n	8005bf8 <HAL_UART_RxCpltCallback+0xe4>
			uRx_Data[uLength] = rxBuffer[0];
 8005bde:	4b11      	ldr	r3, [pc, #68]	; (8005c24 <HAL_UART_RxCpltCallback+0x110>)
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	461a      	mov	r2, r3
 8005be4:	4b07      	ldr	r3, [pc, #28]	; (8005c04 <HAL_UART_RxCpltCallback+0xf0>)
 8005be6:	7819      	ldrb	r1, [r3, #0]
 8005be8:	4b07      	ldr	r3, [pc, #28]	; (8005c08 <HAL_UART_RxCpltCallback+0xf4>)
 8005bea:	5499      	strb	r1, [r3, r2]
			uLength++;
 8005bec:	4b0d      	ldr	r3, [pc, #52]	; (8005c24 <HAL_UART_RxCpltCallback+0x110>)
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	3301      	adds	r3, #1
 8005bf2:	b2da      	uxtb	r2, r3
 8005bf4:	4b0b      	ldr	r3, [pc, #44]	; (8005c24 <HAL_UART_RxCpltCallback+0x110>)
 8005bf6:	701a      	strb	r2, [r3, #0]
}
 8005bf8:	bf00      	nop
 8005bfa:	3710      	adds	r7, #16
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	40013800 	.word	0x40013800
 8005c04:	20000138 	.word	0x20000138
 8005c08:	20000068 	.word	0x20000068
 8005c0c:	20000000 	.word	0x20000000
 8005c10:	40010800 	.word	0x40010800
 8005c14:	20000010 	.word	0x20000010
 8005c18:	40011000 	.word	0x40011000
 8005c1c:	20000020 	.word	0x20000020
 8005c20:	20000030 	.word	0x20000030
 8005c24:	2000007c 	.word	0x2000007c

08005c28 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005c2c:	bf00      	nop
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bc80      	pop	{r7}
 8005c32:	4770      	bx	lr

08005c34 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b086      	sub	sp, #24
 8005c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005c3a:	f107 0308 	add.w	r3, r7, #8
 8005c3e:	2200      	movs	r2, #0
 8005c40:	601a      	str	r2, [r3, #0]
 8005c42:	605a      	str	r2, [r3, #4]
 8005c44:	609a      	str	r2, [r3, #8]
 8005c46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005c48:	463b      	mov	r3, r7
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	601a      	str	r2, [r3, #0]
 8005c4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005c50:	4b1e      	ldr	r3, [pc, #120]	; (8005ccc <MX_TIM2_Init+0x98>)
 8005c52:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005c56:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35999;
 8005c58:	4b1c      	ldr	r3, [pc, #112]	; (8005ccc <MX_TIM2_Init+0x98>)
 8005c5a:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8005c5e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c60:	4b1a      	ldr	r3, [pc, #104]	; (8005ccc <MX_TIM2_Init+0x98>)
 8005c62:	2200      	movs	r2, #0
 8005c64:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8005c66:	4b19      	ldr	r3, [pc, #100]	; (8005ccc <MX_TIM2_Init+0x98>)
 8005c68:	f242 720f 	movw	r2, #9999	; 0x270f
 8005c6c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c6e:	4b17      	ldr	r3, [pc, #92]	; (8005ccc <MX_TIM2_Init+0x98>)
 8005c70:	2200      	movs	r2, #0
 8005c72:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005c74:	4b15      	ldr	r3, [pc, #84]	; (8005ccc <MX_TIM2_Init+0x98>)
 8005c76:	2200      	movs	r2, #0
 8005c78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005c7a:	4814      	ldr	r0, [pc, #80]	; (8005ccc <MX_TIM2_Init+0x98>)
 8005c7c:	f001 f9ae 	bl	8006fdc <HAL_TIM_Base_Init>
 8005c80:	4603      	mov	r3, r0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d001      	beq.n	8005c8a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8005c86:	f7ff febc 	bl	8005a02 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005c8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c8e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005c90:	f107 0308 	add.w	r3, r7, #8
 8005c94:	4619      	mov	r1, r3
 8005c96:	480d      	ldr	r0, [pc, #52]	; (8005ccc <MX_TIM2_Init+0x98>)
 8005c98:	f001 faf7 	bl	800728a <HAL_TIM_ConfigClockSource>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d001      	beq.n	8005ca6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8005ca2:	f7ff feae 	bl	8005a02 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005caa:	2300      	movs	r3, #0
 8005cac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005cae:	463b      	mov	r3, r7
 8005cb0:	4619      	mov	r1, r3
 8005cb2:	4806      	ldr	r0, [pc, #24]	; (8005ccc <MX_TIM2_Init+0x98>)
 8005cb4:	f001 fcea 	bl	800768c <HAL_TIMEx_MasterConfigSynchronization>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d001      	beq.n	8005cc2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8005cbe:	f7ff fea0 	bl	8005a02 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005cc2:	bf00      	nop
 8005cc4:	3718      	adds	r7, #24
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	2000014c 	.word	0x2000014c

08005cd0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b084      	sub	sp, #16
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ce0:	d113      	bne.n	8005d0a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005ce2:	4b0c      	ldr	r3, [pc, #48]	; (8005d14 <HAL_TIM_Base_MspInit+0x44>)
 8005ce4:	69db      	ldr	r3, [r3, #28]
 8005ce6:	4a0b      	ldr	r2, [pc, #44]	; (8005d14 <HAL_TIM_Base_MspInit+0x44>)
 8005ce8:	f043 0301 	orr.w	r3, r3, #1
 8005cec:	61d3      	str	r3, [r2, #28]
 8005cee:	4b09      	ldr	r3, [pc, #36]	; (8005d14 <HAL_TIM_Base_MspInit+0x44>)
 8005cf0:	69db      	ldr	r3, [r3, #28]
 8005cf2:	f003 0301 	and.w	r3, r3, #1
 8005cf6:	60fb      	str	r3, [r7, #12]
 8005cf8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	2101      	movs	r1, #1
 8005cfe:	201c      	movs	r0, #28
 8005d00:	f000 fa0b 	bl	800611a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005d04:	201c      	movs	r0, #28
 8005d06:	f000 fa24 	bl	8006152 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8005d0a:	bf00      	nop
 8005d0c:	3710      	adds	r7, #16
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	40021000 	.word	0x40021000

08005d18 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005d1c:	4b11      	ldr	r3, [pc, #68]	; (8005d64 <MX_USART1_UART_Init+0x4c>)
 8005d1e:	4a12      	ldr	r2, [pc, #72]	; (8005d68 <MX_USART1_UART_Init+0x50>)
 8005d20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005d22:	4b10      	ldr	r3, [pc, #64]	; (8005d64 <MX_USART1_UART_Init+0x4c>)
 8005d24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005d28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005d2a:	4b0e      	ldr	r3, [pc, #56]	; (8005d64 <MX_USART1_UART_Init+0x4c>)
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005d30:	4b0c      	ldr	r3, [pc, #48]	; (8005d64 <MX_USART1_UART_Init+0x4c>)
 8005d32:	2200      	movs	r2, #0
 8005d34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005d36:	4b0b      	ldr	r3, [pc, #44]	; (8005d64 <MX_USART1_UART_Init+0x4c>)
 8005d38:	2200      	movs	r2, #0
 8005d3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005d3c:	4b09      	ldr	r3, [pc, #36]	; (8005d64 <MX_USART1_UART_Init+0x4c>)
 8005d3e:	220c      	movs	r2, #12
 8005d40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005d42:	4b08      	ldr	r3, [pc, #32]	; (8005d64 <MX_USART1_UART_Init+0x4c>)
 8005d44:	2200      	movs	r2, #0
 8005d46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005d48:	4b06      	ldr	r3, [pc, #24]	; (8005d64 <MX_USART1_UART_Init+0x4c>)
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005d4e:	4805      	ldr	r0, [pc, #20]	; (8005d64 <MX_USART1_UART_Init+0x4c>)
 8005d50:	f001 fd1a 	bl	8007788 <HAL_UART_Init>
 8005d54:	4603      	mov	r3, r0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d001      	beq.n	8005d5e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005d5a:	f7ff fe52 	bl	8005a02 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005d5e:	bf00      	nop
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	bf00      	nop
 8005d64:	20000090 	.word	0x20000090
 8005d68:	40013800 	.word	0x40013800

08005d6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b088      	sub	sp, #32
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d74:	f107 0310 	add.w	r3, r7, #16
 8005d78:	2200      	movs	r2, #0
 8005d7a:	601a      	str	r2, [r3, #0]
 8005d7c:	605a      	str	r2, [r3, #4]
 8005d7e:	609a      	str	r2, [r3, #8]
 8005d80:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a20      	ldr	r2, [pc, #128]	; (8005e08 <HAL_UART_MspInit+0x9c>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d139      	bne.n	8005e00 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005d8c:	4b1f      	ldr	r3, [pc, #124]	; (8005e0c <HAL_UART_MspInit+0xa0>)
 8005d8e:	699b      	ldr	r3, [r3, #24]
 8005d90:	4a1e      	ldr	r2, [pc, #120]	; (8005e0c <HAL_UART_MspInit+0xa0>)
 8005d92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d96:	6193      	str	r3, [r2, #24]
 8005d98:	4b1c      	ldr	r3, [pc, #112]	; (8005e0c <HAL_UART_MspInit+0xa0>)
 8005d9a:	699b      	ldr	r3, [r3, #24]
 8005d9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005da0:	60fb      	str	r3, [r7, #12]
 8005da2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005da4:	4b19      	ldr	r3, [pc, #100]	; (8005e0c <HAL_UART_MspInit+0xa0>)
 8005da6:	699b      	ldr	r3, [r3, #24]
 8005da8:	4a18      	ldr	r2, [pc, #96]	; (8005e0c <HAL_UART_MspInit+0xa0>)
 8005daa:	f043 0304 	orr.w	r3, r3, #4
 8005dae:	6193      	str	r3, [r2, #24]
 8005db0:	4b16      	ldr	r3, [pc, #88]	; (8005e0c <HAL_UART_MspInit+0xa0>)
 8005db2:	699b      	ldr	r3, [r3, #24]
 8005db4:	f003 0304 	and.w	r3, r3, #4
 8005db8:	60bb      	str	r3, [r7, #8]
 8005dba:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005dbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005dc0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005dc2:	2302      	movs	r3, #2
 8005dc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005dca:	f107 0310 	add.w	r3, r7, #16
 8005dce:	4619      	mov	r1, r3
 8005dd0:	480f      	ldr	r0, [pc, #60]	; (8005e10 <HAL_UART_MspInit+0xa4>)
 8005dd2:	f000 fb1b 	bl	800640c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005dd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005dda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005de0:	2300      	movs	r3, #0
 8005de2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005de4:	f107 0310 	add.w	r3, r7, #16
 8005de8:	4619      	mov	r1, r3
 8005dea:	4809      	ldr	r0, [pc, #36]	; (8005e10 <HAL_UART_MspInit+0xa4>)
 8005dec:	f000 fb0e 	bl	800640c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8005df0:	2200      	movs	r2, #0
 8005df2:	2101      	movs	r1, #1
 8005df4:	2025      	movs	r0, #37	; 0x25
 8005df6:	f000 f990 	bl	800611a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005dfa:	2025      	movs	r0, #37	; 0x25
 8005dfc:	f000 f9a9 	bl	8006152 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8005e00:	bf00      	nop
 8005e02:	3720      	adds	r7, #32
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}
 8005e08:	40013800 	.word	0x40013800
 8005e0c:	40021000 	.word	0x40021000
 8005e10:	40010800 	.word	0x40010800

08005e14 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005e14:	480c      	ldr	r0, [pc, #48]	; (8005e48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005e16:	490d      	ldr	r1, [pc, #52]	; (8005e4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005e18:	4a0d      	ldr	r2, [pc, #52]	; (8005e50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005e1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005e1c:	e002      	b.n	8005e24 <LoopCopyDataInit>

08005e1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005e1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005e20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005e22:	3304      	adds	r3, #4

08005e24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005e24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005e26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005e28:	d3f9      	bcc.n	8005e1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005e2a:	4a0a      	ldr	r2, [pc, #40]	; (8005e54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005e2c:	4c0a      	ldr	r4, [pc, #40]	; (8005e58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005e2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005e30:	e001      	b.n	8005e36 <LoopFillZerobss>

08005e32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005e32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005e34:	3204      	adds	r2, #4

08005e36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005e36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005e38:	d3fb      	bcc.n	8005e32 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005e3a:	f7ff fef5 	bl	8005c28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005e3e:	f002 f8ff 	bl	8008040 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005e42:	f7ff fd81 	bl	8005948 <main>
  bx lr
 8005e46:	4770      	bx	lr
  ldr r0, =_sdata
 8005e48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005e4c:	2000004c 	.word	0x2000004c
  ldr r2, =_sidata
 8005e50:	080080e0 	.word	0x080080e0
  ldr r2, =_sbss
 8005e54:	2000004c 	.word	0x2000004c
  ldr r4, =_ebss
 8005e58:	20000198 	.word	0x20000198

08005e5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005e5c:	e7fe      	b.n	8005e5c <ADC1_2_IRQHandler>
	...

08005e60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005e64:	4b08      	ldr	r3, [pc, #32]	; (8005e88 <HAL_Init+0x28>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a07      	ldr	r2, [pc, #28]	; (8005e88 <HAL_Init+0x28>)
 8005e6a:	f043 0310 	orr.w	r3, r3, #16
 8005e6e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005e70:	2003      	movs	r0, #3
 8005e72:	f000 f947 	bl	8006104 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005e76:	2001      	movs	r0, #1
 8005e78:	f000 f808 	bl	8005e8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005e7c:	f7ff fdc6 	bl	8005a0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop
 8005e88:	40022000 	.word	0x40022000

08005e8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b082      	sub	sp, #8
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005e94:	4b12      	ldr	r3, [pc, #72]	; (8005ee0 <HAL_InitTick+0x54>)
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	4b12      	ldr	r3, [pc, #72]	; (8005ee4 <HAL_InitTick+0x58>)
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005ea2:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f000 f95f 	bl	800616e <HAL_SYSTICK_Config>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d001      	beq.n	8005eba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e00e      	b.n	8005ed8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2b0f      	cmp	r3, #15
 8005ebe:	d80a      	bhi.n	8005ed6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	6879      	ldr	r1, [r7, #4]
 8005ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ec8:	f000 f927 	bl	800611a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005ecc:	4a06      	ldr	r2, [pc, #24]	; (8005ee8 <HAL_InitTick+0x5c>)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	e000      	b.n	8005ed8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3708      	adds	r7, #8
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}
 8005ee0:	20000040 	.word	0x20000040
 8005ee4:	20000048 	.word	0x20000048
 8005ee8:	20000044 	.word	0x20000044

08005eec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005eec:	b480      	push	{r7}
 8005eee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005ef0:	4b05      	ldr	r3, [pc, #20]	; (8005f08 <HAL_IncTick+0x1c>)
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	4b05      	ldr	r3, [pc, #20]	; (8005f0c <HAL_IncTick+0x20>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4413      	add	r3, r2
 8005efc:	4a03      	ldr	r2, [pc, #12]	; (8005f0c <HAL_IncTick+0x20>)
 8005efe:	6013      	str	r3, [r2, #0]
}
 8005f00:	bf00      	nop
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bc80      	pop	{r7}
 8005f06:	4770      	bx	lr
 8005f08:	20000048 	.word	0x20000048
 8005f0c:	20000194 	.word	0x20000194

08005f10 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005f10:	b480      	push	{r7}
 8005f12:	af00      	add	r7, sp, #0
  return uwTick;
 8005f14:	4b02      	ldr	r3, [pc, #8]	; (8005f20 <HAL_GetTick+0x10>)
 8005f16:	681b      	ldr	r3, [r3, #0]
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bc80      	pop	{r7}
 8005f1e:	4770      	bx	lr
 8005f20:	20000194 	.word	0x20000194

08005f24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005f2c:	f7ff fff0 	bl	8005f10 <HAL_GetTick>
 8005f30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f3c:	d005      	beq.n	8005f4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005f3e:	4b0a      	ldr	r3, [pc, #40]	; (8005f68 <HAL_Delay+0x44>)
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	461a      	mov	r2, r3
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	4413      	add	r3, r2
 8005f48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005f4a:	bf00      	nop
 8005f4c:	f7ff ffe0 	bl	8005f10 <HAL_GetTick>
 8005f50:	4602      	mov	r2, r0
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	1ad3      	subs	r3, r2, r3
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d8f7      	bhi.n	8005f4c <HAL_Delay+0x28>
  {
  }
}
 8005f5c:	bf00      	nop
 8005f5e:	bf00      	nop
 8005f60:	3710      	adds	r7, #16
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	20000048 	.word	0x20000048

08005f6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b085      	sub	sp, #20
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f003 0307 	and.w	r3, r3, #7
 8005f7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f7c:	4b0c      	ldr	r3, [pc, #48]	; (8005fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005f82:	68ba      	ldr	r2, [r7, #8]
 8005f84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005f88:	4013      	ands	r3, r2
 8005f8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005f94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005f98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005f9e:	4a04      	ldr	r2, [pc, #16]	; (8005fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	60d3      	str	r3, [r2, #12]
}
 8005fa4:	bf00      	nop
 8005fa6:	3714      	adds	r7, #20
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bc80      	pop	{r7}
 8005fac:	4770      	bx	lr
 8005fae:	bf00      	nop
 8005fb0:	e000ed00 	.word	0xe000ed00

08005fb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005fb8:	4b04      	ldr	r3, [pc, #16]	; (8005fcc <__NVIC_GetPriorityGrouping+0x18>)
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	0a1b      	lsrs	r3, r3, #8
 8005fbe:	f003 0307 	and.w	r3, r3, #7
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bc80      	pop	{r7}
 8005fc8:	4770      	bx	lr
 8005fca:	bf00      	nop
 8005fcc:	e000ed00 	.word	0xe000ed00

08005fd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	db0b      	blt.n	8005ffa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005fe2:	79fb      	ldrb	r3, [r7, #7]
 8005fe4:	f003 021f 	and.w	r2, r3, #31
 8005fe8:	4906      	ldr	r1, [pc, #24]	; (8006004 <__NVIC_EnableIRQ+0x34>)
 8005fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fee:	095b      	lsrs	r3, r3, #5
 8005ff0:	2001      	movs	r0, #1
 8005ff2:	fa00 f202 	lsl.w	r2, r0, r2
 8005ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005ffa:	bf00      	nop
 8005ffc:	370c      	adds	r7, #12
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bc80      	pop	{r7}
 8006002:	4770      	bx	lr
 8006004:	e000e100 	.word	0xe000e100

08006008 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	4603      	mov	r3, r0
 8006010:	6039      	str	r1, [r7, #0]
 8006012:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006018:	2b00      	cmp	r3, #0
 800601a:	db0a      	blt.n	8006032 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	b2da      	uxtb	r2, r3
 8006020:	490c      	ldr	r1, [pc, #48]	; (8006054 <__NVIC_SetPriority+0x4c>)
 8006022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006026:	0112      	lsls	r2, r2, #4
 8006028:	b2d2      	uxtb	r2, r2
 800602a:	440b      	add	r3, r1
 800602c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006030:	e00a      	b.n	8006048 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	b2da      	uxtb	r2, r3
 8006036:	4908      	ldr	r1, [pc, #32]	; (8006058 <__NVIC_SetPriority+0x50>)
 8006038:	79fb      	ldrb	r3, [r7, #7]
 800603a:	f003 030f 	and.w	r3, r3, #15
 800603e:	3b04      	subs	r3, #4
 8006040:	0112      	lsls	r2, r2, #4
 8006042:	b2d2      	uxtb	r2, r2
 8006044:	440b      	add	r3, r1
 8006046:	761a      	strb	r2, [r3, #24]
}
 8006048:	bf00      	nop
 800604a:	370c      	adds	r7, #12
 800604c:	46bd      	mov	sp, r7
 800604e:	bc80      	pop	{r7}
 8006050:	4770      	bx	lr
 8006052:	bf00      	nop
 8006054:	e000e100 	.word	0xe000e100
 8006058:	e000ed00 	.word	0xe000ed00

0800605c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800605c:	b480      	push	{r7}
 800605e:	b089      	sub	sp, #36	; 0x24
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f003 0307 	and.w	r3, r3, #7
 800606e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006070:	69fb      	ldr	r3, [r7, #28]
 8006072:	f1c3 0307 	rsb	r3, r3, #7
 8006076:	2b04      	cmp	r3, #4
 8006078:	bf28      	it	cs
 800607a:	2304      	movcs	r3, #4
 800607c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	3304      	adds	r3, #4
 8006082:	2b06      	cmp	r3, #6
 8006084:	d902      	bls.n	800608c <NVIC_EncodePriority+0x30>
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	3b03      	subs	r3, #3
 800608a:	e000      	b.n	800608e <NVIC_EncodePriority+0x32>
 800608c:	2300      	movs	r3, #0
 800608e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006090:	f04f 32ff 	mov.w	r2, #4294967295
 8006094:	69bb      	ldr	r3, [r7, #24]
 8006096:	fa02 f303 	lsl.w	r3, r2, r3
 800609a:	43da      	mvns	r2, r3
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	401a      	ands	r2, r3
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80060a4:	f04f 31ff 	mov.w	r1, #4294967295
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	fa01 f303 	lsl.w	r3, r1, r3
 80060ae:	43d9      	mvns	r1, r3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80060b4:	4313      	orrs	r3, r2
         );
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3724      	adds	r7, #36	; 0x24
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bc80      	pop	{r7}
 80060be:	4770      	bx	lr

080060c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b082      	sub	sp, #8
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	3b01      	subs	r3, #1
 80060cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80060d0:	d301      	bcc.n	80060d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80060d2:	2301      	movs	r3, #1
 80060d4:	e00f      	b.n	80060f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80060d6:	4a0a      	ldr	r2, [pc, #40]	; (8006100 <SysTick_Config+0x40>)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	3b01      	subs	r3, #1
 80060dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80060de:	210f      	movs	r1, #15
 80060e0:	f04f 30ff 	mov.w	r0, #4294967295
 80060e4:	f7ff ff90 	bl	8006008 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80060e8:	4b05      	ldr	r3, [pc, #20]	; (8006100 <SysTick_Config+0x40>)
 80060ea:	2200      	movs	r2, #0
 80060ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80060ee:	4b04      	ldr	r3, [pc, #16]	; (8006100 <SysTick_Config+0x40>)
 80060f0:	2207      	movs	r2, #7
 80060f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3708      	adds	r7, #8
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	e000e010 	.word	0xe000e010

08006104 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b082      	sub	sp, #8
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f7ff ff2d 	bl	8005f6c <__NVIC_SetPriorityGrouping>
}
 8006112:	bf00      	nop
 8006114:	3708      	adds	r7, #8
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}

0800611a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800611a:	b580      	push	{r7, lr}
 800611c:	b086      	sub	sp, #24
 800611e:	af00      	add	r7, sp, #0
 8006120:	4603      	mov	r3, r0
 8006122:	60b9      	str	r1, [r7, #8]
 8006124:	607a      	str	r2, [r7, #4]
 8006126:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006128:	2300      	movs	r3, #0
 800612a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800612c:	f7ff ff42 	bl	8005fb4 <__NVIC_GetPriorityGrouping>
 8006130:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	68b9      	ldr	r1, [r7, #8]
 8006136:	6978      	ldr	r0, [r7, #20]
 8006138:	f7ff ff90 	bl	800605c <NVIC_EncodePriority>
 800613c:	4602      	mov	r2, r0
 800613e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006142:	4611      	mov	r1, r2
 8006144:	4618      	mov	r0, r3
 8006146:	f7ff ff5f 	bl	8006008 <__NVIC_SetPriority>
}
 800614a:	bf00      	nop
 800614c:	3718      	adds	r7, #24
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}

08006152 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006152:	b580      	push	{r7, lr}
 8006154:	b082      	sub	sp, #8
 8006156:	af00      	add	r7, sp, #0
 8006158:	4603      	mov	r3, r0
 800615a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800615c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006160:	4618      	mov	r0, r3
 8006162:	f7ff ff35 	bl	8005fd0 <__NVIC_EnableIRQ>
}
 8006166:	bf00      	nop
 8006168:	3708      	adds	r7, #8
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}

0800616e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800616e:	b580      	push	{r7, lr}
 8006170:	b082      	sub	sp, #8
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f7ff ffa2 	bl	80060c0 <SysTick_Config>
 800617c:	4603      	mov	r3, r0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3708      	adds	r7, #8
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}

08006186 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006186:	b480      	push	{r7}
 8006188:	b085      	sub	sp, #20
 800618a:	af00      	add	r7, sp, #0
 800618c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800618e:	2300      	movs	r3, #0
 8006190:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006198:	2b02      	cmp	r3, #2
 800619a:	d008      	beq.n	80061ae <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2204      	movs	r2, #4
 80061a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	e020      	b.n	80061f0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f022 020e 	bic.w	r2, r2, #14
 80061bc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f022 0201 	bic.w	r2, r2, #1
 80061cc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061d6:	2101      	movs	r1, #1
 80061d8:	fa01 f202 	lsl.w	r2, r1, r2
 80061dc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2201      	movs	r2, #1
 80061e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80061ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3714      	adds	r7, #20
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bc80      	pop	{r7}
 80061f8:	4770      	bx	lr
	...

080061fc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006204:	2300      	movs	r3, #0
 8006206:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800620e:	2b02      	cmp	r3, #2
 8006210:	d005      	beq.n	800621e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2204      	movs	r2, #4
 8006216:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	73fb      	strb	r3, [r7, #15]
 800621c:	e0d6      	b.n	80063cc <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f022 020e 	bic.w	r2, r2, #14
 800622c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f022 0201 	bic.w	r2, r2, #1
 800623c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	461a      	mov	r2, r3
 8006244:	4b64      	ldr	r3, [pc, #400]	; (80063d8 <HAL_DMA_Abort_IT+0x1dc>)
 8006246:	429a      	cmp	r2, r3
 8006248:	d958      	bls.n	80062fc <HAL_DMA_Abort_IT+0x100>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a63      	ldr	r2, [pc, #396]	; (80063dc <HAL_DMA_Abort_IT+0x1e0>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d04f      	beq.n	80062f4 <HAL_DMA_Abort_IT+0xf8>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a61      	ldr	r2, [pc, #388]	; (80063e0 <HAL_DMA_Abort_IT+0x1e4>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d048      	beq.n	80062f0 <HAL_DMA_Abort_IT+0xf4>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a60      	ldr	r2, [pc, #384]	; (80063e4 <HAL_DMA_Abort_IT+0x1e8>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d040      	beq.n	80062ea <HAL_DMA_Abort_IT+0xee>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a5e      	ldr	r2, [pc, #376]	; (80063e8 <HAL_DMA_Abort_IT+0x1ec>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d038      	beq.n	80062e4 <HAL_DMA_Abort_IT+0xe8>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a5d      	ldr	r2, [pc, #372]	; (80063ec <HAL_DMA_Abort_IT+0x1f0>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d030      	beq.n	80062de <HAL_DMA_Abort_IT+0xe2>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a5b      	ldr	r2, [pc, #364]	; (80063f0 <HAL_DMA_Abort_IT+0x1f4>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d028      	beq.n	80062d8 <HAL_DMA_Abort_IT+0xdc>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a53      	ldr	r2, [pc, #332]	; (80063d8 <HAL_DMA_Abort_IT+0x1dc>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d020      	beq.n	80062d2 <HAL_DMA_Abort_IT+0xd6>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a57      	ldr	r2, [pc, #348]	; (80063f4 <HAL_DMA_Abort_IT+0x1f8>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d019      	beq.n	80062ce <HAL_DMA_Abort_IT+0xd2>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a56      	ldr	r2, [pc, #344]	; (80063f8 <HAL_DMA_Abort_IT+0x1fc>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d012      	beq.n	80062ca <HAL_DMA_Abort_IT+0xce>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a54      	ldr	r2, [pc, #336]	; (80063fc <HAL_DMA_Abort_IT+0x200>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d00a      	beq.n	80062c4 <HAL_DMA_Abort_IT+0xc8>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a53      	ldr	r2, [pc, #332]	; (8006400 <HAL_DMA_Abort_IT+0x204>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d102      	bne.n	80062be <HAL_DMA_Abort_IT+0xc2>
 80062b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80062bc:	e01b      	b.n	80062f6 <HAL_DMA_Abort_IT+0xfa>
 80062be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80062c2:	e018      	b.n	80062f6 <HAL_DMA_Abort_IT+0xfa>
 80062c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80062c8:	e015      	b.n	80062f6 <HAL_DMA_Abort_IT+0xfa>
 80062ca:	2310      	movs	r3, #16
 80062cc:	e013      	b.n	80062f6 <HAL_DMA_Abort_IT+0xfa>
 80062ce:	2301      	movs	r3, #1
 80062d0:	e011      	b.n	80062f6 <HAL_DMA_Abort_IT+0xfa>
 80062d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80062d6:	e00e      	b.n	80062f6 <HAL_DMA_Abort_IT+0xfa>
 80062d8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80062dc:	e00b      	b.n	80062f6 <HAL_DMA_Abort_IT+0xfa>
 80062de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80062e2:	e008      	b.n	80062f6 <HAL_DMA_Abort_IT+0xfa>
 80062e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80062e8:	e005      	b.n	80062f6 <HAL_DMA_Abort_IT+0xfa>
 80062ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80062ee:	e002      	b.n	80062f6 <HAL_DMA_Abort_IT+0xfa>
 80062f0:	2310      	movs	r3, #16
 80062f2:	e000      	b.n	80062f6 <HAL_DMA_Abort_IT+0xfa>
 80062f4:	2301      	movs	r3, #1
 80062f6:	4a43      	ldr	r2, [pc, #268]	; (8006404 <HAL_DMA_Abort_IT+0x208>)
 80062f8:	6053      	str	r3, [r2, #4]
 80062fa:	e057      	b.n	80063ac <HAL_DMA_Abort_IT+0x1b0>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a36      	ldr	r2, [pc, #216]	; (80063dc <HAL_DMA_Abort_IT+0x1e0>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d04f      	beq.n	80063a6 <HAL_DMA_Abort_IT+0x1aa>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a35      	ldr	r2, [pc, #212]	; (80063e0 <HAL_DMA_Abort_IT+0x1e4>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d048      	beq.n	80063a2 <HAL_DMA_Abort_IT+0x1a6>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a33      	ldr	r2, [pc, #204]	; (80063e4 <HAL_DMA_Abort_IT+0x1e8>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d040      	beq.n	800639c <HAL_DMA_Abort_IT+0x1a0>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a32      	ldr	r2, [pc, #200]	; (80063e8 <HAL_DMA_Abort_IT+0x1ec>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d038      	beq.n	8006396 <HAL_DMA_Abort_IT+0x19a>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a30      	ldr	r2, [pc, #192]	; (80063ec <HAL_DMA_Abort_IT+0x1f0>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d030      	beq.n	8006390 <HAL_DMA_Abort_IT+0x194>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a2f      	ldr	r2, [pc, #188]	; (80063f0 <HAL_DMA_Abort_IT+0x1f4>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d028      	beq.n	800638a <HAL_DMA_Abort_IT+0x18e>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a26      	ldr	r2, [pc, #152]	; (80063d8 <HAL_DMA_Abort_IT+0x1dc>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d020      	beq.n	8006384 <HAL_DMA_Abort_IT+0x188>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a2b      	ldr	r2, [pc, #172]	; (80063f4 <HAL_DMA_Abort_IT+0x1f8>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d019      	beq.n	8006380 <HAL_DMA_Abort_IT+0x184>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a29      	ldr	r2, [pc, #164]	; (80063f8 <HAL_DMA_Abort_IT+0x1fc>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d012      	beq.n	800637c <HAL_DMA_Abort_IT+0x180>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a28      	ldr	r2, [pc, #160]	; (80063fc <HAL_DMA_Abort_IT+0x200>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d00a      	beq.n	8006376 <HAL_DMA_Abort_IT+0x17a>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a26      	ldr	r2, [pc, #152]	; (8006400 <HAL_DMA_Abort_IT+0x204>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d102      	bne.n	8006370 <HAL_DMA_Abort_IT+0x174>
 800636a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800636e:	e01b      	b.n	80063a8 <HAL_DMA_Abort_IT+0x1ac>
 8006370:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006374:	e018      	b.n	80063a8 <HAL_DMA_Abort_IT+0x1ac>
 8006376:	f44f 7380 	mov.w	r3, #256	; 0x100
 800637a:	e015      	b.n	80063a8 <HAL_DMA_Abort_IT+0x1ac>
 800637c:	2310      	movs	r3, #16
 800637e:	e013      	b.n	80063a8 <HAL_DMA_Abort_IT+0x1ac>
 8006380:	2301      	movs	r3, #1
 8006382:	e011      	b.n	80063a8 <HAL_DMA_Abort_IT+0x1ac>
 8006384:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006388:	e00e      	b.n	80063a8 <HAL_DMA_Abort_IT+0x1ac>
 800638a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800638e:	e00b      	b.n	80063a8 <HAL_DMA_Abort_IT+0x1ac>
 8006390:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006394:	e008      	b.n	80063a8 <HAL_DMA_Abort_IT+0x1ac>
 8006396:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800639a:	e005      	b.n	80063a8 <HAL_DMA_Abort_IT+0x1ac>
 800639c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80063a0:	e002      	b.n	80063a8 <HAL_DMA_Abort_IT+0x1ac>
 80063a2:	2310      	movs	r3, #16
 80063a4:	e000      	b.n	80063a8 <HAL_DMA_Abort_IT+0x1ac>
 80063a6:	2301      	movs	r3, #1
 80063a8:	4a17      	ldr	r2, [pc, #92]	; (8006408 <HAL_DMA_Abort_IT+0x20c>)
 80063aa:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d003      	beq.n	80063cc <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	4798      	blx	r3
    } 
  }
  return status;
 80063cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3710      	adds	r7, #16
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	40020080 	.word	0x40020080
 80063dc:	40020008 	.word	0x40020008
 80063e0:	4002001c 	.word	0x4002001c
 80063e4:	40020030 	.word	0x40020030
 80063e8:	40020044 	.word	0x40020044
 80063ec:	40020058 	.word	0x40020058
 80063f0:	4002006c 	.word	0x4002006c
 80063f4:	40020408 	.word	0x40020408
 80063f8:	4002041c 	.word	0x4002041c
 80063fc:	40020430 	.word	0x40020430
 8006400:	40020444 	.word	0x40020444
 8006404:	40020400 	.word	0x40020400
 8006408:	40020000 	.word	0x40020000

0800640c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800640c:	b480      	push	{r7}
 800640e:	b08b      	sub	sp, #44	; 0x2c
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006416:	2300      	movs	r3, #0
 8006418:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800641a:	2300      	movs	r3, #0
 800641c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800641e:	e179      	b.n	8006714 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8006420:	2201      	movs	r2, #1
 8006422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006424:	fa02 f303 	lsl.w	r3, r2, r3
 8006428:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	69fa      	ldr	r2, [r7, #28]
 8006430:	4013      	ands	r3, r2
 8006432:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006434:	69ba      	ldr	r2, [r7, #24]
 8006436:	69fb      	ldr	r3, [r7, #28]
 8006438:	429a      	cmp	r2, r3
 800643a:	f040 8168 	bne.w	800670e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	4aa0      	ldr	r2, [pc, #640]	; (80066c4 <HAL_GPIO_Init+0x2b8>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d05e      	beq.n	8006506 <HAL_GPIO_Init+0xfa>
 8006448:	4a9e      	ldr	r2, [pc, #632]	; (80066c4 <HAL_GPIO_Init+0x2b8>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d875      	bhi.n	800653a <HAL_GPIO_Init+0x12e>
 800644e:	4a9e      	ldr	r2, [pc, #632]	; (80066c8 <HAL_GPIO_Init+0x2bc>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d058      	beq.n	8006506 <HAL_GPIO_Init+0xfa>
 8006454:	4a9c      	ldr	r2, [pc, #624]	; (80066c8 <HAL_GPIO_Init+0x2bc>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d86f      	bhi.n	800653a <HAL_GPIO_Init+0x12e>
 800645a:	4a9c      	ldr	r2, [pc, #624]	; (80066cc <HAL_GPIO_Init+0x2c0>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d052      	beq.n	8006506 <HAL_GPIO_Init+0xfa>
 8006460:	4a9a      	ldr	r2, [pc, #616]	; (80066cc <HAL_GPIO_Init+0x2c0>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d869      	bhi.n	800653a <HAL_GPIO_Init+0x12e>
 8006466:	4a9a      	ldr	r2, [pc, #616]	; (80066d0 <HAL_GPIO_Init+0x2c4>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d04c      	beq.n	8006506 <HAL_GPIO_Init+0xfa>
 800646c:	4a98      	ldr	r2, [pc, #608]	; (80066d0 <HAL_GPIO_Init+0x2c4>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d863      	bhi.n	800653a <HAL_GPIO_Init+0x12e>
 8006472:	4a98      	ldr	r2, [pc, #608]	; (80066d4 <HAL_GPIO_Init+0x2c8>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d046      	beq.n	8006506 <HAL_GPIO_Init+0xfa>
 8006478:	4a96      	ldr	r2, [pc, #600]	; (80066d4 <HAL_GPIO_Init+0x2c8>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d85d      	bhi.n	800653a <HAL_GPIO_Init+0x12e>
 800647e:	2b12      	cmp	r3, #18
 8006480:	d82a      	bhi.n	80064d8 <HAL_GPIO_Init+0xcc>
 8006482:	2b12      	cmp	r3, #18
 8006484:	d859      	bhi.n	800653a <HAL_GPIO_Init+0x12e>
 8006486:	a201      	add	r2, pc, #4	; (adr r2, 800648c <HAL_GPIO_Init+0x80>)
 8006488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800648c:	08006507 	.word	0x08006507
 8006490:	080064e1 	.word	0x080064e1
 8006494:	080064f3 	.word	0x080064f3
 8006498:	08006535 	.word	0x08006535
 800649c:	0800653b 	.word	0x0800653b
 80064a0:	0800653b 	.word	0x0800653b
 80064a4:	0800653b 	.word	0x0800653b
 80064a8:	0800653b 	.word	0x0800653b
 80064ac:	0800653b 	.word	0x0800653b
 80064b0:	0800653b 	.word	0x0800653b
 80064b4:	0800653b 	.word	0x0800653b
 80064b8:	0800653b 	.word	0x0800653b
 80064bc:	0800653b 	.word	0x0800653b
 80064c0:	0800653b 	.word	0x0800653b
 80064c4:	0800653b 	.word	0x0800653b
 80064c8:	0800653b 	.word	0x0800653b
 80064cc:	0800653b 	.word	0x0800653b
 80064d0:	080064e9 	.word	0x080064e9
 80064d4:	080064fd 	.word	0x080064fd
 80064d8:	4a7f      	ldr	r2, [pc, #508]	; (80066d8 <HAL_GPIO_Init+0x2cc>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d013      	beq.n	8006506 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80064de:	e02c      	b.n	800653a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	623b      	str	r3, [r7, #32]
          break;
 80064e6:	e029      	b.n	800653c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	3304      	adds	r3, #4
 80064ee:	623b      	str	r3, [r7, #32]
          break;
 80064f0:	e024      	b.n	800653c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	3308      	adds	r3, #8
 80064f8:	623b      	str	r3, [r7, #32]
          break;
 80064fa:	e01f      	b.n	800653c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	330c      	adds	r3, #12
 8006502:	623b      	str	r3, [r7, #32]
          break;
 8006504:	e01a      	b.n	800653c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d102      	bne.n	8006514 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800650e:	2304      	movs	r3, #4
 8006510:	623b      	str	r3, [r7, #32]
          break;
 8006512:	e013      	b.n	800653c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	2b01      	cmp	r3, #1
 800651a:	d105      	bne.n	8006528 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800651c:	2308      	movs	r3, #8
 800651e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	69fa      	ldr	r2, [r7, #28]
 8006524:	611a      	str	r2, [r3, #16]
          break;
 8006526:	e009      	b.n	800653c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006528:	2308      	movs	r3, #8
 800652a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	69fa      	ldr	r2, [r7, #28]
 8006530:	615a      	str	r2, [r3, #20]
          break;
 8006532:	e003      	b.n	800653c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006534:	2300      	movs	r3, #0
 8006536:	623b      	str	r3, [r7, #32]
          break;
 8006538:	e000      	b.n	800653c <HAL_GPIO_Init+0x130>
          break;
 800653a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800653c:	69bb      	ldr	r3, [r7, #24]
 800653e:	2bff      	cmp	r3, #255	; 0xff
 8006540:	d801      	bhi.n	8006546 <HAL_GPIO_Init+0x13a>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	e001      	b.n	800654a <HAL_GPIO_Init+0x13e>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	3304      	adds	r3, #4
 800654a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800654c:	69bb      	ldr	r3, [r7, #24]
 800654e:	2bff      	cmp	r3, #255	; 0xff
 8006550:	d802      	bhi.n	8006558 <HAL_GPIO_Init+0x14c>
 8006552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	e002      	b.n	800655e <HAL_GPIO_Init+0x152>
 8006558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655a:	3b08      	subs	r3, #8
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	210f      	movs	r1, #15
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	fa01 f303 	lsl.w	r3, r1, r3
 800656c:	43db      	mvns	r3, r3
 800656e:	401a      	ands	r2, r3
 8006570:	6a39      	ldr	r1, [r7, #32]
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	fa01 f303 	lsl.w	r3, r1, r3
 8006578:	431a      	orrs	r2, r3
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006586:	2b00      	cmp	r3, #0
 8006588:	f000 80c1 	beq.w	800670e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800658c:	4b53      	ldr	r3, [pc, #332]	; (80066dc <HAL_GPIO_Init+0x2d0>)
 800658e:	699b      	ldr	r3, [r3, #24]
 8006590:	4a52      	ldr	r2, [pc, #328]	; (80066dc <HAL_GPIO_Init+0x2d0>)
 8006592:	f043 0301 	orr.w	r3, r3, #1
 8006596:	6193      	str	r3, [r2, #24]
 8006598:	4b50      	ldr	r3, [pc, #320]	; (80066dc <HAL_GPIO_Init+0x2d0>)
 800659a:	699b      	ldr	r3, [r3, #24]
 800659c:	f003 0301 	and.w	r3, r3, #1
 80065a0:	60bb      	str	r3, [r7, #8]
 80065a2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80065a4:	4a4e      	ldr	r2, [pc, #312]	; (80066e0 <HAL_GPIO_Init+0x2d4>)
 80065a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a8:	089b      	lsrs	r3, r3, #2
 80065aa:	3302      	adds	r3, #2
 80065ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065b0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80065b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b4:	f003 0303 	and.w	r3, r3, #3
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	220f      	movs	r2, #15
 80065bc:	fa02 f303 	lsl.w	r3, r2, r3
 80065c0:	43db      	mvns	r3, r3
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	4013      	ands	r3, r2
 80065c6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4a46      	ldr	r2, [pc, #280]	; (80066e4 <HAL_GPIO_Init+0x2d8>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d01f      	beq.n	8006610 <HAL_GPIO_Init+0x204>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a45      	ldr	r2, [pc, #276]	; (80066e8 <HAL_GPIO_Init+0x2dc>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d019      	beq.n	800660c <HAL_GPIO_Init+0x200>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	4a44      	ldr	r2, [pc, #272]	; (80066ec <HAL_GPIO_Init+0x2e0>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d013      	beq.n	8006608 <HAL_GPIO_Init+0x1fc>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4a43      	ldr	r2, [pc, #268]	; (80066f0 <HAL_GPIO_Init+0x2e4>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d00d      	beq.n	8006604 <HAL_GPIO_Init+0x1f8>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	4a42      	ldr	r2, [pc, #264]	; (80066f4 <HAL_GPIO_Init+0x2e8>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d007      	beq.n	8006600 <HAL_GPIO_Init+0x1f4>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	4a41      	ldr	r2, [pc, #260]	; (80066f8 <HAL_GPIO_Init+0x2ec>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d101      	bne.n	80065fc <HAL_GPIO_Init+0x1f0>
 80065f8:	2305      	movs	r3, #5
 80065fa:	e00a      	b.n	8006612 <HAL_GPIO_Init+0x206>
 80065fc:	2306      	movs	r3, #6
 80065fe:	e008      	b.n	8006612 <HAL_GPIO_Init+0x206>
 8006600:	2304      	movs	r3, #4
 8006602:	e006      	b.n	8006612 <HAL_GPIO_Init+0x206>
 8006604:	2303      	movs	r3, #3
 8006606:	e004      	b.n	8006612 <HAL_GPIO_Init+0x206>
 8006608:	2302      	movs	r3, #2
 800660a:	e002      	b.n	8006612 <HAL_GPIO_Init+0x206>
 800660c:	2301      	movs	r3, #1
 800660e:	e000      	b.n	8006612 <HAL_GPIO_Init+0x206>
 8006610:	2300      	movs	r3, #0
 8006612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006614:	f002 0203 	and.w	r2, r2, #3
 8006618:	0092      	lsls	r2, r2, #2
 800661a:	4093      	lsls	r3, r2
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	4313      	orrs	r3, r2
 8006620:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006622:	492f      	ldr	r1, [pc, #188]	; (80066e0 <HAL_GPIO_Init+0x2d4>)
 8006624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006626:	089b      	lsrs	r3, r3, #2
 8006628:	3302      	adds	r3, #2
 800662a:	68fa      	ldr	r2, [r7, #12]
 800662c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006638:	2b00      	cmp	r3, #0
 800663a:	d006      	beq.n	800664a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800663c:	4b2f      	ldr	r3, [pc, #188]	; (80066fc <HAL_GPIO_Init+0x2f0>)
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	492e      	ldr	r1, [pc, #184]	; (80066fc <HAL_GPIO_Init+0x2f0>)
 8006642:	69bb      	ldr	r3, [r7, #24]
 8006644:	4313      	orrs	r3, r2
 8006646:	600b      	str	r3, [r1, #0]
 8006648:	e006      	b.n	8006658 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800664a:	4b2c      	ldr	r3, [pc, #176]	; (80066fc <HAL_GPIO_Init+0x2f0>)
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	69bb      	ldr	r3, [r7, #24]
 8006650:	43db      	mvns	r3, r3
 8006652:	492a      	ldr	r1, [pc, #168]	; (80066fc <HAL_GPIO_Init+0x2f0>)
 8006654:	4013      	ands	r3, r2
 8006656:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006660:	2b00      	cmp	r3, #0
 8006662:	d006      	beq.n	8006672 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006664:	4b25      	ldr	r3, [pc, #148]	; (80066fc <HAL_GPIO_Init+0x2f0>)
 8006666:	685a      	ldr	r2, [r3, #4]
 8006668:	4924      	ldr	r1, [pc, #144]	; (80066fc <HAL_GPIO_Init+0x2f0>)
 800666a:	69bb      	ldr	r3, [r7, #24]
 800666c:	4313      	orrs	r3, r2
 800666e:	604b      	str	r3, [r1, #4]
 8006670:	e006      	b.n	8006680 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006672:	4b22      	ldr	r3, [pc, #136]	; (80066fc <HAL_GPIO_Init+0x2f0>)
 8006674:	685a      	ldr	r2, [r3, #4]
 8006676:	69bb      	ldr	r3, [r7, #24]
 8006678:	43db      	mvns	r3, r3
 800667a:	4920      	ldr	r1, [pc, #128]	; (80066fc <HAL_GPIO_Init+0x2f0>)
 800667c:	4013      	ands	r3, r2
 800667e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006688:	2b00      	cmp	r3, #0
 800668a:	d006      	beq.n	800669a <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800668c:	4b1b      	ldr	r3, [pc, #108]	; (80066fc <HAL_GPIO_Init+0x2f0>)
 800668e:	689a      	ldr	r2, [r3, #8]
 8006690:	491a      	ldr	r1, [pc, #104]	; (80066fc <HAL_GPIO_Init+0x2f0>)
 8006692:	69bb      	ldr	r3, [r7, #24]
 8006694:	4313      	orrs	r3, r2
 8006696:	608b      	str	r3, [r1, #8]
 8006698:	e006      	b.n	80066a8 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800669a:	4b18      	ldr	r3, [pc, #96]	; (80066fc <HAL_GPIO_Init+0x2f0>)
 800669c:	689a      	ldr	r2, [r3, #8]
 800669e:	69bb      	ldr	r3, [r7, #24]
 80066a0:	43db      	mvns	r3, r3
 80066a2:	4916      	ldr	r1, [pc, #88]	; (80066fc <HAL_GPIO_Init+0x2f0>)
 80066a4:	4013      	ands	r3, r2
 80066a6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d025      	beq.n	8006700 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80066b4:	4b11      	ldr	r3, [pc, #68]	; (80066fc <HAL_GPIO_Init+0x2f0>)
 80066b6:	68da      	ldr	r2, [r3, #12]
 80066b8:	4910      	ldr	r1, [pc, #64]	; (80066fc <HAL_GPIO_Init+0x2f0>)
 80066ba:	69bb      	ldr	r3, [r7, #24]
 80066bc:	4313      	orrs	r3, r2
 80066be:	60cb      	str	r3, [r1, #12]
 80066c0:	e025      	b.n	800670e <HAL_GPIO_Init+0x302>
 80066c2:	bf00      	nop
 80066c4:	10320000 	.word	0x10320000
 80066c8:	10310000 	.word	0x10310000
 80066cc:	10220000 	.word	0x10220000
 80066d0:	10210000 	.word	0x10210000
 80066d4:	10120000 	.word	0x10120000
 80066d8:	10110000 	.word	0x10110000
 80066dc:	40021000 	.word	0x40021000
 80066e0:	40010000 	.word	0x40010000
 80066e4:	40010800 	.word	0x40010800
 80066e8:	40010c00 	.word	0x40010c00
 80066ec:	40011000 	.word	0x40011000
 80066f0:	40011400 	.word	0x40011400
 80066f4:	40011800 	.word	0x40011800
 80066f8:	40011c00 	.word	0x40011c00
 80066fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006700:	4b0b      	ldr	r3, [pc, #44]	; (8006730 <HAL_GPIO_Init+0x324>)
 8006702:	68da      	ldr	r2, [r3, #12]
 8006704:	69bb      	ldr	r3, [r7, #24]
 8006706:	43db      	mvns	r3, r3
 8006708:	4909      	ldr	r1, [pc, #36]	; (8006730 <HAL_GPIO_Init+0x324>)
 800670a:	4013      	ands	r3, r2
 800670c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800670e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006710:	3301      	adds	r3, #1
 8006712:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671a:	fa22 f303 	lsr.w	r3, r2, r3
 800671e:	2b00      	cmp	r3, #0
 8006720:	f47f ae7e 	bne.w	8006420 <HAL_GPIO_Init+0x14>
  }
}
 8006724:	bf00      	nop
 8006726:	bf00      	nop
 8006728:	372c      	adds	r7, #44	; 0x2c
 800672a:	46bd      	mov	sp, r7
 800672c:	bc80      	pop	{r7}
 800672e:	4770      	bx	lr
 8006730:	40010400 	.word	0x40010400

08006734 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	460b      	mov	r3, r1
 800673e:	807b      	strh	r3, [r7, #2]
 8006740:	4613      	mov	r3, r2
 8006742:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006744:	787b      	ldrb	r3, [r7, #1]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d003      	beq.n	8006752 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800674a:	887a      	ldrh	r2, [r7, #2]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006750:	e003      	b.n	800675a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006752:	887b      	ldrh	r3, [r7, #2]
 8006754:	041a      	lsls	r2, r3, #16
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	611a      	str	r2, [r3, #16]
}
 800675a:	bf00      	nop
 800675c:	370c      	adds	r7, #12
 800675e:	46bd      	mov	sp, r7
 8006760:	bc80      	pop	{r7}
 8006762:	4770      	bx	lr

08006764 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b082      	sub	sp, #8
 8006768:	af00      	add	r7, sp, #0
 800676a:	4603      	mov	r3, r0
 800676c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800676e:	4b08      	ldr	r3, [pc, #32]	; (8006790 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006770:	695a      	ldr	r2, [r3, #20]
 8006772:	88fb      	ldrh	r3, [r7, #6]
 8006774:	4013      	ands	r3, r2
 8006776:	2b00      	cmp	r3, #0
 8006778:	d006      	beq.n	8006788 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800677a:	4a05      	ldr	r2, [pc, #20]	; (8006790 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800677c:	88fb      	ldrh	r3, [r7, #6]
 800677e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006780:	88fb      	ldrh	r3, [r7, #6]
 8006782:	4618      	mov	r0, r3
 8006784:	f000 f806 	bl	8006794 <HAL_GPIO_EXTI_Callback>
  }
}
 8006788:	bf00      	nop
 800678a:	3708      	adds	r7, #8
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}
 8006790:	40010400 	.word	0x40010400

08006794 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006794:	b480      	push	{r7}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
 800679a:	4603      	mov	r3, r0
 800679c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800679e:	bf00      	nop
 80067a0:	370c      	adds	r7, #12
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bc80      	pop	{r7}
 80067a6:	4770      	bx	lr

080067a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b086      	sub	sp, #24
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d101      	bne.n	80067ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	e26c      	b.n	8006c94 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f003 0301 	and.w	r3, r3, #1
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	f000 8087 	beq.w	80068d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80067c8:	4b92      	ldr	r3, [pc, #584]	; (8006a14 <HAL_RCC_OscConfig+0x26c>)
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	f003 030c 	and.w	r3, r3, #12
 80067d0:	2b04      	cmp	r3, #4
 80067d2:	d00c      	beq.n	80067ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80067d4:	4b8f      	ldr	r3, [pc, #572]	; (8006a14 <HAL_RCC_OscConfig+0x26c>)
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	f003 030c 	and.w	r3, r3, #12
 80067dc:	2b08      	cmp	r3, #8
 80067de:	d112      	bne.n	8006806 <HAL_RCC_OscConfig+0x5e>
 80067e0:	4b8c      	ldr	r3, [pc, #560]	; (8006a14 <HAL_RCC_OscConfig+0x26c>)
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067ec:	d10b      	bne.n	8006806 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067ee:	4b89      	ldr	r3, [pc, #548]	; (8006a14 <HAL_RCC_OscConfig+0x26c>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d06c      	beq.n	80068d4 <HAL_RCC_OscConfig+0x12c>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d168      	bne.n	80068d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	e246      	b.n	8006c94 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800680e:	d106      	bne.n	800681e <HAL_RCC_OscConfig+0x76>
 8006810:	4b80      	ldr	r3, [pc, #512]	; (8006a14 <HAL_RCC_OscConfig+0x26c>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a7f      	ldr	r2, [pc, #508]	; (8006a14 <HAL_RCC_OscConfig+0x26c>)
 8006816:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800681a:	6013      	str	r3, [r2, #0]
 800681c:	e02e      	b.n	800687c <HAL_RCC_OscConfig+0xd4>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d10c      	bne.n	8006840 <HAL_RCC_OscConfig+0x98>
 8006826:	4b7b      	ldr	r3, [pc, #492]	; (8006a14 <HAL_RCC_OscConfig+0x26c>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a7a      	ldr	r2, [pc, #488]	; (8006a14 <HAL_RCC_OscConfig+0x26c>)
 800682c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006830:	6013      	str	r3, [r2, #0]
 8006832:	4b78      	ldr	r3, [pc, #480]	; (8006a14 <HAL_RCC_OscConfig+0x26c>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a77      	ldr	r2, [pc, #476]	; (8006a14 <HAL_RCC_OscConfig+0x26c>)
 8006838:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800683c:	6013      	str	r3, [r2, #0]
 800683e:	e01d      	b.n	800687c <HAL_RCC_OscConfig+0xd4>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006848:	d10c      	bne.n	8006864 <HAL_RCC_OscConfig+0xbc>
 800684a:	4b72      	ldr	r3, [pc, #456]	; (8006a14 <HAL_RCC_OscConfig+0x26c>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a71      	ldr	r2, [pc, #452]	; (8006a14 <HAL_RCC_OscConfig+0x26c>)
 8006850:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006854:	6013      	str	r3, [r2, #0]
 8006856:	4b6f      	ldr	r3, [pc, #444]	; (8006a14 <HAL_RCC_OscConfig+0x26c>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a6e      	ldr	r2, [pc, #440]	; (8006a14 <HAL_RCC_OscConfig+0x26c>)
 800685c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006860:	6013      	str	r3, [r2, #0]
 8006862:	e00b      	b.n	800687c <HAL_RCC_OscConfig+0xd4>
 8006864:	4b6b      	ldr	r3, [pc, #428]	; (8006a14 <HAL_RCC_OscConfig+0x26c>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a6a      	ldr	r2, [pc, #424]	; (8006a14 <HAL_RCC_OscConfig+0x26c>)
 800686a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800686e:	6013      	str	r3, [r2, #0]
 8006870:	4b68      	ldr	r3, [pc, #416]	; (8006a14 <HAL_RCC_OscConfig+0x26c>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a67      	ldr	r2, [pc, #412]	; (8006a14 <HAL_RCC_OscConfig+0x26c>)
 8006876:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800687a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d013      	beq.n	80068ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006884:	f7ff fb44 	bl	8005f10 <HAL_GetTick>
 8006888:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800688a:	e008      	b.n	800689e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800688c:	f7ff fb40 	bl	8005f10 <HAL_GetTick>
 8006890:	4602      	mov	r2, r0
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	1ad3      	subs	r3, r2, r3
 8006896:	2b64      	cmp	r3, #100	; 0x64
 8006898:	d901      	bls.n	800689e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800689a:	2303      	movs	r3, #3
 800689c:	e1fa      	b.n	8006c94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800689e:	4b5d      	ldr	r3, [pc, #372]	; (8006a14 <HAL_RCC_OscConfig+0x26c>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d0f0      	beq.n	800688c <HAL_RCC_OscConfig+0xe4>
 80068aa:	e014      	b.n	80068d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068ac:	f7ff fb30 	bl	8005f10 <HAL_GetTick>
 80068b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068b2:	e008      	b.n	80068c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068b4:	f7ff fb2c 	bl	8005f10 <HAL_GetTick>
 80068b8:	4602      	mov	r2, r0
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	1ad3      	subs	r3, r2, r3
 80068be:	2b64      	cmp	r3, #100	; 0x64
 80068c0:	d901      	bls.n	80068c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80068c2:	2303      	movs	r3, #3
 80068c4:	e1e6      	b.n	8006c94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068c6:	4b53      	ldr	r3, [pc, #332]	; (8006a14 <HAL_RCC_OscConfig+0x26c>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d1f0      	bne.n	80068b4 <HAL_RCC_OscConfig+0x10c>
 80068d2:	e000      	b.n	80068d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f003 0302 	and.w	r3, r3, #2
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d063      	beq.n	80069aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80068e2:	4b4c      	ldr	r3, [pc, #304]	; (8006a14 <HAL_RCC_OscConfig+0x26c>)
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	f003 030c 	and.w	r3, r3, #12
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d00b      	beq.n	8006906 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80068ee:	4b49      	ldr	r3, [pc, #292]	; (8006a14 <HAL_RCC_OscConfig+0x26c>)
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	f003 030c 	and.w	r3, r3, #12
 80068f6:	2b08      	cmp	r3, #8
 80068f8:	d11c      	bne.n	8006934 <HAL_RCC_OscConfig+0x18c>
 80068fa:	4b46      	ldr	r3, [pc, #280]	; (8006a14 <HAL_RCC_OscConfig+0x26c>)
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006902:	2b00      	cmp	r3, #0
 8006904:	d116      	bne.n	8006934 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006906:	4b43      	ldr	r3, [pc, #268]	; (8006a14 <HAL_RCC_OscConfig+0x26c>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f003 0302 	and.w	r3, r3, #2
 800690e:	2b00      	cmp	r3, #0
 8006910:	d005      	beq.n	800691e <HAL_RCC_OscConfig+0x176>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	691b      	ldr	r3, [r3, #16]
 8006916:	2b01      	cmp	r3, #1
 8006918:	d001      	beq.n	800691e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	e1ba      	b.n	8006c94 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800691e:	4b3d      	ldr	r3, [pc, #244]	; (8006a14 <HAL_RCC_OscConfig+0x26c>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	695b      	ldr	r3, [r3, #20]
 800692a:	00db      	lsls	r3, r3, #3
 800692c:	4939      	ldr	r1, [pc, #228]	; (8006a14 <HAL_RCC_OscConfig+0x26c>)
 800692e:	4313      	orrs	r3, r2
 8006930:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006932:	e03a      	b.n	80069aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	691b      	ldr	r3, [r3, #16]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d020      	beq.n	800697e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800693c:	4b36      	ldr	r3, [pc, #216]	; (8006a18 <HAL_RCC_OscConfig+0x270>)
 800693e:	2201      	movs	r2, #1
 8006940:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006942:	f7ff fae5 	bl	8005f10 <HAL_GetTick>
 8006946:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006948:	e008      	b.n	800695c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800694a:	f7ff fae1 	bl	8005f10 <HAL_GetTick>
 800694e:	4602      	mov	r2, r0
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	1ad3      	subs	r3, r2, r3
 8006954:	2b02      	cmp	r3, #2
 8006956:	d901      	bls.n	800695c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006958:	2303      	movs	r3, #3
 800695a:	e19b      	b.n	8006c94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800695c:	4b2d      	ldr	r3, [pc, #180]	; (8006a14 <HAL_RCC_OscConfig+0x26c>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f003 0302 	and.w	r3, r3, #2
 8006964:	2b00      	cmp	r3, #0
 8006966:	d0f0      	beq.n	800694a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006968:	4b2a      	ldr	r3, [pc, #168]	; (8006a14 <HAL_RCC_OscConfig+0x26c>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	695b      	ldr	r3, [r3, #20]
 8006974:	00db      	lsls	r3, r3, #3
 8006976:	4927      	ldr	r1, [pc, #156]	; (8006a14 <HAL_RCC_OscConfig+0x26c>)
 8006978:	4313      	orrs	r3, r2
 800697a:	600b      	str	r3, [r1, #0]
 800697c:	e015      	b.n	80069aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800697e:	4b26      	ldr	r3, [pc, #152]	; (8006a18 <HAL_RCC_OscConfig+0x270>)
 8006980:	2200      	movs	r2, #0
 8006982:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006984:	f7ff fac4 	bl	8005f10 <HAL_GetTick>
 8006988:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800698a:	e008      	b.n	800699e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800698c:	f7ff fac0 	bl	8005f10 <HAL_GetTick>
 8006990:	4602      	mov	r2, r0
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	1ad3      	subs	r3, r2, r3
 8006996:	2b02      	cmp	r3, #2
 8006998:	d901      	bls.n	800699e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800699a:	2303      	movs	r3, #3
 800699c:	e17a      	b.n	8006c94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800699e:	4b1d      	ldr	r3, [pc, #116]	; (8006a14 <HAL_RCC_OscConfig+0x26c>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f003 0302 	and.w	r3, r3, #2
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d1f0      	bne.n	800698c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 0308 	and.w	r3, r3, #8
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d03a      	beq.n	8006a2c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	699b      	ldr	r3, [r3, #24]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d019      	beq.n	80069f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069be:	4b17      	ldr	r3, [pc, #92]	; (8006a1c <HAL_RCC_OscConfig+0x274>)
 80069c0:	2201      	movs	r2, #1
 80069c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069c4:	f7ff faa4 	bl	8005f10 <HAL_GetTick>
 80069c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069ca:	e008      	b.n	80069de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069cc:	f7ff faa0 	bl	8005f10 <HAL_GetTick>
 80069d0:	4602      	mov	r2, r0
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	1ad3      	subs	r3, r2, r3
 80069d6:	2b02      	cmp	r3, #2
 80069d8:	d901      	bls.n	80069de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80069da:	2303      	movs	r3, #3
 80069dc:	e15a      	b.n	8006c94 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069de:	4b0d      	ldr	r3, [pc, #52]	; (8006a14 <HAL_RCC_OscConfig+0x26c>)
 80069e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e2:	f003 0302 	and.w	r3, r3, #2
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d0f0      	beq.n	80069cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80069ea:	2001      	movs	r0, #1
 80069ec:	f000 fad8 	bl	8006fa0 <RCC_Delay>
 80069f0:	e01c      	b.n	8006a2c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80069f2:	4b0a      	ldr	r3, [pc, #40]	; (8006a1c <HAL_RCC_OscConfig+0x274>)
 80069f4:	2200      	movs	r2, #0
 80069f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069f8:	f7ff fa8a 	bl	8005f10 <HAL_GetTick>
 80069fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069fe:	e00f      	b.n	8006a20 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a00:	f7ff fa86 	bl	8005f10 <HAL_GetTick>
 8006a04:	4602      	mov	r2, r0
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	1ad3      	subs	r3, r2, r3
 8006a0a:	2b02      	cmp	r3, #2
 8006a0c:	d908      	bls.n	8006a20 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006a0e:	2303      	movs	r3, #3
 8006a10:	e140      	b.n	8006c94 <HAL_RCC_OscConfig+0x4ec>
 8006a12:	bf00      	nop
 8006a14:	40021000 	.word	0x40021000
 8006a18:	42420000 	.word	0x42420000
 8006a1c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a20:	4b9e      	ldr	r3, [pc, #632]	; (8006c9c <HAL_RCC_OscConfig+0x4f4>)
 8006a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a24:	f003 0302 	and.w	r3, r3, #2
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d1e9      	bne.n	8006a00 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f003 0304 	and.w	r3, r3, #4
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	f000 80a6 	beq.w	8006b86 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a3e:	4b97      	ldr	r3, [pc, #604]	; (8006c9c <HAL_RCC_OscConfig+0x4f4>)
 8006a40:	69db      	ldr	r3, [r3, #28]
 8006a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d10d      	bne.n	8006a66 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a4a:	4b94      	ldr	r3, [pc, #592]	; (8006c9c <HAL_RCC_OscConfig+0x4f4>)
 8006a4c:	69db      	ldr	r3, [r3, #28]
 8006a4e:	4a93      	ldr	r2, [pc, #588]	; (8006c9c <HAL_RCC_OscConfig+0x4f4>)
 8006a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a54:	61d3      	str	r3, [r2, #28]
 8006a56:	4b91      	ldr	r3, [pc, #580]	; (8006c9c <HAL_RCC_OscConfig+0x4f4>)
 8006a58:	69db      	ldr	r3, [r3, #28]
 8006a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a5e:	60bb      	str	r3, [r7, #8]
 8006a60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a62:	2301      	movs	r3, #1
 8006a64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a66:	4b8e      	ldr	r3, [pc, #568]	; (8006ca0 <HAL_RCC_OscConfig+0x4f8>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d118      	bne.n	8006aa4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a72:	4b8b      	ldr	r3, [pc, #556]	; (8006ca0 <HAL_RCC_OscConfig+0x4f8>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a8a      	ldr	r2, [pc, #552]	; (8006ca0 <HAL_RCC_OscConfig+0x4f8>)
 8006a78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a7e:	f7ff fa47 	bl	8005f10 <HAL_GetTick>
 8006a82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a84:	e008      	b.n	8006a98 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a86:	f7ff fa43 	bl	8005f10 <HAL_GetTick>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	1ad3      	subs	r3, r2, r3
 8006a90:	2b64      	cmp	r3, #100	; 0x64
 8006a92:	d901      	bls.n	8006a98 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006a94:	2303      	movs	r3, #3
 8006a96:	e0fd      	b.n	8006c94 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a98:	4b81      	ldr	r3, [pc, #516]	; (8006ca0 <HAL_RCC_OscConfig+0x4f8>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d0f0      	beq.n	8006a86 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d106      	bne.n	8006aba <HAL_RCC_OscConfig+0x312>
 8006aac:	4b7b      	ldr	r3, [pc, #492]	; (8006c9c <HAL_RCC_OscConfig+0x4f4>)
 8006aae:	6a1b      	ldr	r3, [r3, #32]
 8006ab0:	4a7a      	ldr	r2, [pc, #488]	; (8006c9c <HAL_RCC_OscConfig+0x4f4>)
 8006ab2:	f043 0301 	orr.w	r3, r3, #1
 8006ab6:	6213      	str	r3, [r2, #32]
 8006ab8:	e02d      	b.n	8006b16 <HAL_RCC_OscConfig+0x36e>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	68db      	ldr	r3, [r3, #12]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d10c      	bne.n	8006adc <HAL_RCC_OscConfig+0x334>
 8006ac2:	4b76      	ldr	r3, [pc, #472]	; (8006c9c <HAL_RCC_OscConfig+0x4f4>)
 8006ac4:	6a1b      	ldr	r3, [r3, #32]
 8006ac6:	4a75      	ldr	r2, [pc, #468]	; (8006c9c <HAL_RCC_OscConfig+0x4f4>)
 8006ac8:	f023 0301 	bic.w	r3, r3, #1
 8006acc:	6213      	str	r3, [r2, #32]
 8006ace:	4b73      	ldr	r3, [pc, #460]	; (8006c9c <HAL_RCC_OscConfig+0x4f4>)
 8006ad0:	6a1b      	ldr	r3, [r3, #32]
 8006ad2:	4a72      	ldr	r2, [pc, #456]	; (8006c9c <HAL_RCC_OscConfig+0x4f4>)
 8006ad4:	f023 0304 	bic.w	r3, r3, #4
 8006ad8:	6213      	str	r3, [r2, #32]
 8006ada:	e01c      	b.n	8006b16 <HAL_RCC_OscConfig+0x36e>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	68db      	ldr	r3, [r3, #12]
 8006ae0:	2b05      	cmp	r3, #5
 8006ae2:	d10c      	bne.n	8006afe <HAL_RCC_OscConfig+0x356>
 8006ae4:	4b6d      	ldr	r3, [pc, #436]	; (8006c9c <HAL_RCC_OscConfig+0x4f4>)
 8006ae6:	6a1b      	ldr	r3, [r3, #32]
 8006ae8:	4a6c      	ldr	r2, [pc, #432]	; (8006c9c <HAL_RCC_OscConfig+0x4f4>)
 8006aea:	f043 0304 	orr.w	r3, r3, #4
 8006aee:	6213      	str	r3, [r2, #32]
 8006af0:	4b6a      	ldr	r3, [pc, #424]	; (8006c9c <HAL_RCC_OscConfig+0x4f4>)
 8006af2:	6a1b      	ldr	r3, [r3, #32]
 8006af4:	4a69      	ldr	r2, [pc, #420]	; (8006c9c <HAL_RCC_OscConfig+0x4f4>)
 8006af6:	f043 0301 	orr.w	r3, r3, #1
 8006afa:	6213      	str	r3, [r2, #32]
 8006afc:	e00b      	b.n	8006b16 <HAL_RCC_OscConfig+0x36e>
 8006afe:	4b67      	ldr	r3, [pc, #412]	; (8006c9c <HAL_RCC_OscConfig+0x4f4>)
 8006b00:	6a1b      	ldr	r3, [r3, #32]
 8006b02:	4a66      	ldr	r2, [pc, #408]	; (8006c9c <HAL_RCC_OscConfig+0x4f4>)
 8006b04:	f023 0301 	bic.w	r3, r3, #1
 8006b08:	6213      	str	r3, [r2, #32]
 8006b0a:	4b64      	ldr	r3, [pc, #400]	; (8006c9c <HAL_RCC_OscConfig+0x4f4>)
 8006b0c:	6a1b      	ldr	r3, [r3, #32]
 8006b0e:	4a63      	ldr	r2, [pc, #396]	; (8006c9c <HAL_RCC_OscConfig+0x4f4>)
 8006b10:	f023 0304 	bic.w	r3, r3, #4
 8006b14:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	68db      	ldr	r3, [r3, #12]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d015      	beq.n	8006b4a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b1e:	f7ff f9f7 	bl	8005f10 <HAL_GetTick>
 8006b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b24:	e00a      	b.n	8006b3c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b26:	f7ff f9f3 	bl	8005f10 <HAL_GetTick>
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	1ad3      	subs	r3, r2, r3
 8006b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d901      	bls.n	8006b3c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006b38:	2303      	movs	r3, #3
 8006b3a:	e0ab      	b.n	8006c94 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b3c:	4b57      	ldr	r3, [pc, #348]	; (8006c9c <HAL_RCC_OscConfig+0x4f4>)
 8006b3e:	6a1b      	ldr	r3, [r3, #32]
 8006b40:	f003 0302 	and.w	r3, r3, #2
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d0ee      	beq.n	8006b26 <HAL_RCC_OscConfig+0x37e>
 8006b48:	e014      	b.n	8006b74 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b4a:	f7ff f9e1 	bl	8005f10 <HAL_GetTick>
 8006b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b50:	e00a      	b.n	8006b68 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b52:	f7ff f9dd 	bl	8005f10 <HAL_GetTick>
 8006b56:	4602      	mov	r2, r0
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	1ad3      	subs	r3, r2, r3
 8006b5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d901      	bls.n	8006b68 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006b64:	2303      	movs	r3, #3
 8006b66:	e095      	b.n	8006c94 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b68:	4b4c      	ldr	r3, [pc, #304]	; (8006c9c <HAL_RCC_OscConfig+0x4f4>)
 8006b6a:	6a1b      	ldr	r3, [r3, #32]
 8006b6c:	f003 0302 	and.w	r3, r3, #2
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d1ee      	bne.n	8006b52 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006b74:	7dfb      	ldrb	r3, [r7, #23]
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d105      	bne.n	8006b86 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b7a:	4b48      	ldr	r3, [pc, #288]	; (8006c9c <HAL_RCC_OscConfig+0x4f4>)
 8006b7c:	69db      	ldr	r3, [r3, #28]
 8006b7e:	4a47      	ldr	r2, [pc, #284]	; (8006c9c <HAL_RCC_OscConfig+0x4f4>)
 8006b80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b84:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	69db      	ldr	r3, [r3, #28]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	f000 8081 	beq.w	8006c92 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006b90:	4b42      	ldr	r3, [pc, #264]	; (8006c9c <HAL_RCC_OscConfig+0x4f4>)
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	f003 030c 	and.w	r3, r3, #12
 8006b98:	2b08      	cmp	r3, #8
 8006b9a:	d061      	beq.n	8006c60 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	69db      	ldr	r3, [r3, #28]
 8006ba0:	2b02      	cmp	r3, #2
 8006ba2:	d146      	bne.n	8006c32 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ba4:	4b3f      	ldr	r3, [pc, #252]	; (8006ca4 <HAL_RCC_OscConfig+0x4fc>)
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006baa:	f7ff f9b1 	bl	8005f10 <HAL_GetTick>
 8006bae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006bb0:	e008      	b.n	8006bc4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bb2:	f7ff f9ad 	bl	8005f10 <HAL_GetTick>
 8006bb6:	4602      	mov	r2, r0
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	1ad3      	subs	r3, r2, r3
 8006bbc:	2b02      	cmp	r3, #2
 8006bbe:	d901      	bls.n	8006bc4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006bc0:	2303      	movs	r3, #3
 8006bc2:	e067      	b.n	8006c94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006bc4:	4b35      	ldr	r3, [pc, #212]	; (8006c9c <HAL_RCC_OscConfig+0x4f4>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d1f0      	bne.n	8006bb2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6a1b      	ldr	r3, [r3, #32]
 8006bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bd8:	d108      	bne.n	8006bec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006bda:	4b30      	ldr	r3, [pc, #192]	; (8006c9c <HAL_RCC_OscConfig+0x4f4>)
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	689b      	ldr	r3, [r3, #8]
 8006be6:	492d      	ldr	r1, [pc, #180]	; (8006c9c <HAL_RCC_OscConfig+0x4f4>)
 8006be8:	4313      	orrs	r3, r2
 8006bea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006bec:	4b2b      	ldr	r3, [pc, #172]	; (8006c9c <HAL_RCC_OscConfig+0x4f4>)
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6a19      	ldr	r1, [r3, #32]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfc:	430b      	orrs	r3, r1
 8006bfe:	4927      	ldr	r1, [pc, #156]	; (8006c9c <HAL_RCC_OscConfig+0x4f4>)
 8006c00:	4313      	orrs	r3, r2
 8006c02:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c04:	4b27      	ldr	r3, [pc, #156]	; (8006ca4 <HAL_RCC_OscConfig+0x4fc>)
 8006c06:	2201      	movs	r2, #1
 8006c08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c0a:	f7ff f981 	bl	8005f10 <HAL_GetTick>
 8006c0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006c10:	e008      	b.n	8006c24 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c12:	f7ff f97d 	bl	8005f10 <HAL_GetTick>
 8006c16:	4602      	mov	r2, r0
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	1ad3      	subs	r3, r2, r3
 8006c1c:	2b02      	cmp	r3, #2
 8006c1e:	d901      	bls.n	8006c24 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006c20:	2303      	movs	r3, #3
 8006c22:	e037      	b.n	8006c94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006c24:	4b1d      	ldr	r3, [pc, #116]	; (8006c9c <HAL_RCC_OscConfig+0x4f4>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d0f0      	beq.n	8006c12 <HAL_RCC_OscConfig+0x46a>
 8006c30:	e02f      	b.n	8006c92 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c32:	4b1c      	ldr	r3, [pc, #112]	; (8006ca4 <HAL_RCC_OscConfig+0x4fc>)
 8006c34:	2200      	movs	r2, #0
 8006c36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c38:	f7ff f96a 	bl	8005f10 <HAL_GetTick>
 8006c3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c3e:	e008      	b.n	8006c52 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c40:	f7ff f966 	bl	8005f10 <HAL_GetTick>
 8006c44:	4602      	mov	r2, r0
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	1ad3      	subs	r3, r2, r3
 8006c4a:	2b02      	cmp	r3, #2
 8006c4c:	d901      	bls.n	8006c52 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006c4e:	2303      	movs	r3, #3
 8006c50:	e020      	b.n	8006c94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c52:	4b12      	ldr	r3, [pc, #72]	; (8006c9c <HAL_RCC_OscConfig+0x4f4>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d1f0      	bne.n	8006c40 <HAL_RCC_OscConfig+0x498>
 8006c5e:	e018      	b.n	8006c92 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	69db      	ldr	r3, [r3, #28]
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d101      	bne.n	8006c6c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e013      	b.n	8006c94 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006c6c:	4b0b      	ldr	r3, [pc, #44]	; (8006c9c <HAL_RCC_OscConfig+0x4f4>)
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6a1b      	ldr	r3, [r3, #32]
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d106      	bne.n	8006c8e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d001      	beq.n	8006c92 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	e000      	b.n	8006c94 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8006c92:	2300      	movs	r3, #0
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3718      	adds	r7, #24
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}
 8006c9c:	40021000 	.word	0x40021000
 8006ca0:	40007000 	.word	0x40007000
 8006ca4:	42420060 	.word	0x42420060

08006ca8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b084      	sub	sp, #16
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d101      	bne.n	8006cbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	e0d0      	b.n	8006e5e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006cbc:	4b6a      	ldr	r3, [pc, #424]	; (8006e68 <HAL_RCC_ClockConfig+0x1c0>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f003 0307 	and.w	r3, r3, #7
 8006cc4:	683a      	ldr	r2, [r7, #0]
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d910      	bls.n	8006cec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cca:	4b67      	ldr	r3, [pc, #412]	; (8006e68 <HAL_RCC_ClockConfig+0x1c0>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f023 0207 	bic.w	r2, r3, #7
 8006cd2:	4965      	ldr	r1, [pc, #404]	; (8006e68 <HAL_RCC_ClockConfig+0x1c0>)
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cda:	4b63      	ldr	r3, [pc, #396]	; (8006e68 <HAL_RCC_ClockConfig+0x1c0>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f003 0307 	and.w	r3, r3, #7
 8006ce2:	683a      	ldr	r2, [r7, #0]
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d001      	beq.n	8006cec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	e0b8      	b.n	8006e5e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f003 0302 	and.w	r3, r3, #2
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d020      	beq.n	8006d3a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f003 0304 	and.w	r3, r3, #4
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d005      	beq.n	8006d10 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d04:	4b59      	ldr	r3, [pc, #356]	; (8006e6c <HAL_RCC_ClockConfig+0x1c4>)
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	4a58      	ldr	r2, [pc, #352]	; (8006e6c <HAL_RCC_ClockConfig+0x1c4>)
 8006d0a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006d0e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f003 0308 	and.w	r3, r3, #8
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d005      	beq.n	8006d28 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006d1c:	4b53      	ldr	r3, [pc, #332]	; (8006e6c <HAL_RCC_ClockConfig+0x1c4>)
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	4a52      	ldr	r2, [pc, #328]	; (8006e6c <HAL_RCC_ClockConfig+0x1c4>)
 8006d22:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006d26:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d28:	4b50      	ldr	r3, [pc, #320]	; (8006e6c <HAL_RCC_ClockConfig+0x1c4>)
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	494d      	ldr	r1, [pc, #308]	; (8006e6c <HAL_RCC_ClockConfig+0x1c4>)
 8006d36:	4313      	orrs	r3, r2
 8006d38:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f003 0301 	and.w	r3, r3, #1
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d040      	beq.n	8006dc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d107      	bne.n	8006d5e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d4e:	4b47      	ldr	r3, [pc, #284]	; (8006e6c <HAL_RCC_ClockConfig+0x1c4>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d115      	bne.n	8006d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e07f      	b.n	8006e5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	2b02      	cmp	r3, #2
 8006d64:	d107      	bne.n	8006d76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d66:	4b41      	ldr	r3, [pc, #260]	; (8006e6c <HAL_RCC_ClockConfig+0x1c4>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d109      	bne.n	8006d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	e073      	b.n	8006e5e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d76:	4b3d      	ldr	r3, [pc, #244]	; (8006e6c <HAL_RCC_ClockConfig+0x1c4>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f003 0302 	and.w	r3, r3, #2
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d101      	bne.n	8006d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	e06b      	b.n	8006e5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006d86:	4b39      	ldr	r3, [pc, #228]	; (8006e6c <HAL_RCC_ClockConfig+0x1c4>)
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	f023 0203 	bic.w	r2, r3, #3
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	4936      	ldr	r1, [pc, #216]	; (8006e6c <HAL_RCC_ClockConfig+0x1c4>)
 8006d94:	4313      	orrs	r3, r2
 8006d96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006d98:	f7ff f8ba 	bl	8005f10 <HAL_GetTick>
 8006d9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d9e:	e00a      	b.n	8006db6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006da0:	f7ff f8b6 	bl	8005f10 <HAL_GetTick>
 8006da4:	4602      	mov	r2, r0
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	1ad3      	subs	r3, r2, r3
 8006daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d901      	bls.n	8006db6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006db2:	2303      	movs	r3, #3
 8006db4:	e053      	b.n	8006e5e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006db6:	4b2d      	ldr	r3, [pc, #180]	; (8006e6c <HAL_RCC_ClockConfig+0x1c4>)
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	f003 020c 	and.w	r2, r3, #12
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	009b      	lsls	r3, r3, #2
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d1eb      	bne.n	8006da0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006dc8:	4b27      	ldr	r3, [pc, #156]	; (8006e68 <HAL_RCC_ClockConfig+0x1c0>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f003 0307 	and.w	r3, r3, #7
 8006dd0:	683a      	ldr	r2, [r7, #0]
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d210      	bcs.n	8006df8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dd6:	4b24      	ldr	r3, [pc, #144]	; (8006e68 <HAL_RCC_ClockConfig+0x1c0>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f023 0207 	bic.w	r2, r3, #7
 8006dde:	4922      	ldr	r1, [pc, #136]	; (8006e68 <HAL_RCC_ClockConfig+0x1c0>)
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	4313      	orrs	r3, r2
 8006de4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006de6:	4b20      	ldr	r3, [pc, #128]	; (8006e68 <HAL_RCC_ClockConfig+0x1c0>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f003 0307 	and.w	r3, r3, #7
 8006dee:	683a      	ldr	r2, [r7, #0]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d001      	beq.n	8006df8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	e032      	b.n	8006e5e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f003 0304 	and.w	r3, r3, #4
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d008      	beq.n	8006e16 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e04:	4b19      	ldr	r3, [pc, #100]	; (8006e6c <HAL_RCC_ClockConfig+0x1c4>)
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	4916      	ldr	r1, [pc, #88]	; (8006e6c <HAL_RCC_ClockConfig+0x1c4>)
 8006e12:	4313      	orrs	r3, r2
 8006e14:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f003 0308 	and.w	r3, r3, #8
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d009      	beq.n	8006e36 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006e22:	4b12      	ldr	r3, [pc, #72]	; (8006e6c <HAL_RCC_ClockConfig+0x1c4>)
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	691b      	ldr	r3, [r3, #16]
 8006e2e:	00db      	lsls	r3, r3, #3
 8006e30:	490e      	ldr	r1, [pc, #56]	; (8006e6c <HAL_RCC_ClockConfig+0x1c4>)
 8006e32:	4313      	orrs	r3, r2
 8006e34:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006e36:	f000 f821 	bl	8006e7c <HAL_RCC_GetSysClockFreq>
 8006e3a:	4602      	mov	r2, r0
 8006e3c:	4b0b      	ldr	r3, [pc, #44]	; (8006e6c <HAL_RCC_ClockConfig+0x1c4>)
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	091b      	lsrs	r3, r3, #4
 8006e42:	f003 030f 	and.w	r3, r3, #15
 8006e46:	490a      	ldr	r1, [pc, #40]	; (8006e70 <HAL_RCC_ClockConfig+0x1c8>)
 8006e48:	5ccb      	ldrb	r3, [r1, r3]
 8006e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8006e4e:	4a09      	ldr	r2, [pc, #36]	; (8006e74 <HAL_RCC_ClockConfig+0x1cc>)
 8006e50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006e52:	4b09      	ldr	r3, [pc, #36]	; (8006e78 <HAL_RCC_ClockConfig+0x1d0>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4618      	mov	r0, r3
 8006e58:	f7ff f818 	bl	8005e8c <HAL_InitTick>

  return HAL_OK;
 8006e5c:	2300      	movs	r3, #0
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3710      	adds	r7, #16
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
 8006e66:	bf00      	nop
 8006e68:	40022000 	.word	0x40022000
 8006e6c:	40021000 	.word	0x40021000
 8006e70:	080080c0 	.word	0x080080c0
 8006e74:	20000040 	.word	0x20000040
 8006e78:	20000044 	.word	0x20000044

08006e7c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e7c:	b490      	push	{r4, r7}
 8006e7e:	b08a      	sub	sp, #40	; 0x28
 8006e80:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006e82:	4b2a      	ldr	r3, [pc, #168]	; (8006f2c <HAL_RCC_GetSysClockFreq+0xb0>)
 8006e84:	1d3c      	adds	r4, r7, #4
 8006e86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006e88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006e8c:	f240 2301 	movw	r3, #513	; 0x201
 8006e90:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006e92:	2300      	movs	r3, #0
 8006e94:	61fb      	str	r3, [r7, #28]
 8006e96:	2300      	movs	r3, #0
 8006e98:	61bb      	str	r3, [r7, #24]
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006ea6:	4b22      	ldr	r3, [pc, #136]	; (8006f30 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006eac:	69fb      	ldr	r3, [r7, #28]
 8006eae:	f003 030c 	and.w	r3, r3, #12
 8006eb2:	2b04      	cmp	r3, #4
 8006eb4:	d002      	beq.n	8006ebc <HAL_RCC_GetSysClockFreq+0x40>
 8006eb6:	2b08      	cmp	r3, #8
 8006eb8:	d003      	beq.n	8006ec2 <HAL_RCC_GetSysClockFreq+0x46>
 8006eba:	e02d      	b.n	8006f18 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006ebc:	4b1d      	ldr	r3, [pc, #116]	; (8006f34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ebe:	623b      	str	r3, [r7, #32]
      break;
 8006ec0:	e02d      	b.n	8006f1e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	0c9b      	lsrs	r3, r3, #18
 8006ec6:	f003 030f 	and.w	r3, r3, #15
 8006eca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006ece:	4413      	add	r3, r2
 8006ed0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006ed4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006ed6:	69fb      	ldr	r3, [r7, #28]
 8006ed8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d013      	beq.n	8006f08 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006ee0:	4b13      	ldr	r3, [pc, #76]	; (8006f30 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	0c5b      	lsrs	r3, r3, #17
 8006ee6:	f003 0301 	and.w	r3, r3, #1
 8006eea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006eee:	4413      	add	r3, r2
 8006ef0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006ef4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	4a0e      	ldr	r2, [pc, #56]	; (8006f34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006efa:	fb02 f203 	mul.w	r2, r2, r3
 8006efe:	69bb      	ldr	r3, [r7, #24]
 8006f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f04:	627b      	str	r3, [r7, #36]	; 0x24
 8006f06:	e004      	b.n	8006f12 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	4a0b      	ldr	r2, [pc, #44]	; (8006f38 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006f0c:	fb02 f303 	mul.w	r3, r2, r3
 8006f10:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f14:	623b      	str	r3, [r7, #32]
      break;
 8006f16:	e002      	b.n	8006f1e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006f18:	4b06      	ldr	r3, [pc, #24]	; (8006f34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006f1a:	623b      	str	r3, [r7, #32]
      break;
 8006f1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006f1e:	6a3b      	ldr	r3, [r7, #32]
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3728      	adds	r7, #40	; 0x28
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bc90      	pop	{r4, r7}
 8006f28:	4770      	bx	lr
 8006f2a:	bf00      	nop
 8006f2c:	080080b0 	.word	0x080080b0
 8006f30:	40021000 	.word	0x40021000
 8006f34:	007a1200 	.word	0x007a1200
 8006f38:	003d0900 	.word	0x003d0900

08006f3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f40:	4b02      	ldr	r3, [pc, #8]	; (8006f4c <HAL_RCC_GetHCLKFreq+0x10>)
 8006f42:	681b      	ldr	r3, [r3, #0]
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bc80      	pop	{r7}
 8006f4a:	4770      	bx	lr
 8006f4c:	20000040 	.word	0x20000040

08006f50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006f54:	f7ff fff2 	bl	8006f3c <HAL_RCC_GetHCLKFreq>
 8006f58:	4602      	mov	r2, r0
 8006f5a:	4b05      	ldr	r3, [pc, #20]	; (8006f70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	0a1b      	lsrs	r3, r3, #8
 8006f60:	f003 0307 	and.w	r3, r3, #7
 8006f64:	4903      	ldr	r1, [pc, #12]	; (8006f74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f66:	5ccb      	ldrb	r3, [r1, r3]
 8006f68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	bd80      	pop	{r7, pc}
 8006f70:	40021000 	.word	0x40021000
 8006f74:	080080d0 	.word	0x080080d0

08006f78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006f7c:	f7ff ffde 	bl	8006f3c <HAL_RCC_GetHCLKFreq>
 8006f80:	4602      	mov	r2, r0
 8006f82:	4b05      	ldr	r3, [pc, #20]	; (8006f98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	0adb      	lsrs	r3, r3, #11
 8006f88:	f003 0307 	and.w	r3, r3, #7
 8006f8c:	4903      	ldr	r1, [pc, #12]	; (8006f9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f8e:	5ccb      	ldrb	r3, [r1, r3]
 8006f90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	bd80      	pop	{r7, pc}
 8006f98:	40021000 	.word	0x40021000
 8006f9c:	080080d0 	.word	0x080080d0

08006fa0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b085      	sub	sp, #20
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006fa8:	4b0a      	ldr	r3, [pc, #40]	; (8006fd4 <RCC_Delay+0x34>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a0a      	ldr	r2, [pc, #40]	; (8006fd8 <RCC_Delay+0x38>)
 8006fae:	fba2 2303 	umull	r2, r3, r2, r3
 8006fb2:	0a5b      	lsrs	r3, r3, #9
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	fb02 f303 	mul.w	r3, r2, r3
 8006fba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006fbc:	bf00      	nop
  }
  while (Delay --);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	1e5a      	subs	r2, r3, #1
 8006fc2:	60fa      	str	r2, [r7, #12]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d1f9      	bne.n	8006fbc <RCC_Delay+0x1c>
}
 8006fc8:	bf00      	nop
 8006fca:	bf00      	nop
 8006fcc:	3714      	adds	r7, #20
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bc80      	pop	{r7}
 8006fd2:	4770      	bx	lr
 8006fd4:	20000040 	.word	0x20000040
 8006fd8:	10624dd3 	.word	0x10624dd3

08006fdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b082      	sub	sp, #8
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d101      	bne.n	8006fee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	e041      	b.n	8007072 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d106      	bne.n	8007008 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f7fe fe64 	bl	8005cd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2202      	movs	r2, #2
 800700c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	3304      	adds	r3, #4
 8007018:	4619      	mov	r1, r3
 800701a:	4610      	mov	r0, r2
 800701c:	f000 fa26 	bl	800746c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2201      	movs	r2, #1
 8007024:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2201      	movs	r2, #1
 800702c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2201      	movs	r2, #1
 8007034:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2201      	movs	r2, #1
 800703c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2201      	movs	r2, #1
 8007044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2201      	movs	r2, #1
 800704c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2201      	movs	r2, #1
 8007054:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2201      	movs	r2, #1
 800706c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007070:	2300      	movs	r3, #0
}
 8007072:	4618      	mov	r0, r3
 8007074:	3708      	adds	r7, #8
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}

0800707a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800707a:	b580      	push	{r7, lr}
 800707c:	b082      	sub	sp, #8
 800707e:	af00      	add	r7, sp, #0
 8007080:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	691b      	ldr	r3, [r3, #16]
 8007088:	f003 0302 	and.w	r3, r3, #2
 800708c:	2b02      	cmp	r3, #2
 800708e:	d122      	bne.n	80070d6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	68db      	ldr	r3, [r3, #12]
 8007096:	f003 0302 	and.w	r3, r3, #2
 800709a:	2b02      	cmp	r3, #2
 800709c:	d11b      	bne.n	80070d6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f06f 0202 	mvn.w	r2, #2
 80070a6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2201      	movs	r2, #1
 80070ac:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	699b      	ldr	r3, [r3, #24]
 80070b4:	f003 0303 	and.w	r3, r3, #3
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d003      	beq.n	80070c4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f000 f9ba 	bl	8007436 <HAL_TIM_IC_CaptureCallback>
 80070c2:	e005      	b.n	80070d0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 f9ad 	bl	8007424 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f000 f9bc 	bl	8007448 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	691b      	ldr	r3, [r3, #16]
 80070dc:	f003 0304 	and.w	r3, r3, #4
 80070e0:	2b04      	cmp	r3, #4
 80070e2:	d122      	bne.n	800712a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	68db      	ldr	r3, [r3, #12]
 80070ea:	f003 0304 	and.w	r3, r3, #4
 80070ee:	2b04      	cmp	r3, #4
 80070f0:	d11b      	bne.n	800712a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f06f 0204 	mvn.w	r2, #4
 80070fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2202      	movs	r2, #2
 8007100:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	699b      	ldr	r3, [r3, #24]
 8007108:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800710c:	2b00      	cmp	r3, #0
 800710e:	d003      	beq.n	8007118 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 f990 	bl	8007436 <HAL_TIM_IC_CaptureCallback>
 8007116:	e005      	b.n	8007124 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f000 f983 	bl	8007424 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 f992 	bl	8007448 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	691b      	ldr	r3, [r3, #16]
 8007130:	f003 0308 	and.w	r3, r3, #8
 8007134:	2b08      	cmp	r3, #8
 8007136:	d122      	bne.n	800717e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	68db      	ldr	r3, [r3, #12]
 800713e:	f003 0308 	and.w	r3, r3, #8
 8007142:	2b08      	cmp	r3, #8
 8007144:	d11b      	bne.n	800717e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f06f 0208 	mvn.w	r2, #8
 800714e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2204      	movs	r2, #4
 8007154:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	69db      	ldr	r3, [r3, #28]
 800715c:	f003 0303 	and.w	r3, r3, #3
 8007160:	2b00      	cmp	r3, #0
 8007162:	d003      	beq.n	800716c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 f966 	bl	8007436 <HAL_TIM_IC_CaptureCallback>
 800716a:	e005      	b.n	8007178 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 f959 	bl	8007424 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 f968 	bl	8007448 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	691b      	ldr	r3, [r3, #16]
 8007184:	f003 0310 	and.w	r3, r3, #16
 8007188:	2b10      	cmp	r3, #16
 800718a:	d122      	bne.n	80071d2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	68db      	ldr	r3, [r3, #12]
 8007192:	f003 0310 	and.w	r3, r3, #16
 8007196:	2b10      	cmp	r3, #16
 8007198:	d11b      	bne.n	80071d2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f06f 0210 	mvn.w	r2, #16
 80071a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2208      	movs	r2, #8
 80071a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	69db      	ldr	r3, [r3, #28]
 80071b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d003      	beq.n	80071c0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 f93c 	bl	8007436 <HAL_TIM_IC_CaptureCallback>
 80071be:	e005      	b.n	80071cc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 f92f 	bl	8007424 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f000 f93e 	bl	8007448 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2200      	movs	r2, #0
 80071d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	691b      	ldr	r3, [r3, #16]
 80071d8:	f003 0301 	and.w	r3, r3, #1
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d10e      	bne.n	80071fe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	68db      	ldr	r3, [r3, #12]
 80071e6:	f003 0301 	and.w	r3, r3, #1
 80071ea:	2b01      	cmp	r3, #1
 80071ec:	d107      	bne.n	80071fe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f06f 0201 	mvn.w	r2, #1
 80071f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 f90a 	bl	8007412 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	691b      	ldr	r3, [r3, #16]
 8007204:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007208:	2b80      	cmp	r3, #128	; 0x80
 800720a:	d10e      	bne.n	800722a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	68db      	ldr	r3, [r3, #12]
 8007212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007216:	2b80      	cmp	r3, #128	; 0x80
 8007218:	d107      	bne.n	800722a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007222:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f000 faa6 	bl	8007776 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	691b      	ldr	r3, [r3, #16]
 8007230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007234:	2b40      	cmp	r3, #64	; 0x40
 8007236:	d10e      	bne.n	8007256 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	68db      	ldr	r3, [r3, #12]
 800723e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007242:	2b40      	cmp	r3, #64	; 0x40
 8007244:	d107      	bne.n	8007256 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800724e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f000 f902 	bl	800745a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	691b      	ldr	r3, [r3, #16]
 800725c:	f003 0320 	and.w	r3, r3, #32
 8007260:	2b20      	cmp	r3, #32
 8007262:	d10e      	bne.n	8007282 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	68db      	ldr	r3, [r3, #12]
 800726a:	f003 0320 	and.w	r3, r3, #32
 800726e:	2b20      	cmp	r3, #32
 8007270:	d107      	bne.n	8007282 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f06f 0220 	mvn.w	r2, #32
 800727a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f000 fa71 	bl	8007764 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007282:	bf00      	nop
 8007284:	3708      	adds	r7, #8
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}

0800728a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800728a:	b580      	push	{r7, lr}
 800728c:	b084      	sub	sp, #16
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
 8007292:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800729a:	2b01      	cmp	r3, #1
 800729c:	d101      	bne.n	80072a2 <HAL_TIM_ConfigClockSource+0x18>
 800729e:	2302      	movs	r3, #2
 80072a0:	e0b3      	b.n	800740a <HAL_TIM_ConfigClockSource+0x180>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2201      	movs	r2, #1
 80072a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2202      	movs	r2, #2
 80072ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80072c0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80072c8:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	68fa      	ldr	r2, [r7, #12]
 80072d0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072da:	d03e      	beq.n	800735a <HAL_TIM_ConfigClockSource+0xd0>
 80072dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072e0:	f200 8087 	bhi.w	80073f2 <HAL_TIM_ConfigClockSource+0x168>
 80072e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072e8:	f000 8085 	beq.w	80073f6 <HAL_TIM_ConfigClockSource+0x16c>
 80072ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072f0:	d87f      	bhi.n	80073f2 <HAL_TIM_ConfigClockSource+0x168>
 80072f2:	2b70      	cmp	r3, #112	; 0x70
 80072f4:	d01a      	beq.n	800732c <HAL_TIM_ConfigClockSource+0xa2>
 80072f6:	2b70      	cmp	r3, #112	; 0x70
 80072f8:	d87b      	bhi.n	80073f2 <HAL_TIM_ConfigClockSource+0x168>
 80072fa:	2b60      	cmp	r3, #96	; 0x60
 80072fc:	d050      	beq.n	80073a0 <HAL_TIM_ConfigClockSource+0x116>
 80072fe:	2b60      	cmp	r3, #96	; 0x60
 8007300:	d877      	bhi.n	80073f2 <HAL_TIM_ConfigClockSource+0x168>
 8007302:	2b50      	cmp	r3, #80	; 0x50
 8007304:	d03c      	beq.n	8007380 <HAL_TIM_ConfigClockSource+0xf6>
 8007306:	2b50      	cmp	r3, #80	; 0x50
 8007308:	d873      	bhi.n	80073f2 <HAL_TIM_ConfigClockSource+0x168>
 800730a:	2b40      	cmp	r3, #64	; 0x40
 800730c:	d058      	beq.n	80073c0 <HAL_TIM_ConfigClockSource+0x136>
 800730e:	2b40      	cmp	r3, #64	; 0x40
 8007310:	d86f      	bhi.n	80073f2 <HAL_TIM_ConfigClockSource+0x168>
 8007312:	2b30      	cmp	r3, #48	; 0x30
 8007314:	d064      	beq.n	80073e0 <HAL_TIM_ConfigClockSource+0x156>
 8007316:	2b30      	cmp	r3, #48	; 0x30
 8007318:	d86b      	bhi.n	80073f2 <HAL_TIM_ConfigClockSource+0x168>
 800731a:	2b20      	cmp	r3, #32
 800731c:	d060      	beq.n	80073e0 <HAL_TIM_ConfigClockSource+0x156>
 800731e:	2b20      	cmp	r3, #32
 8007320:	d867      	bhi.n	80073f2 <HAL_TIM_ConfigClockSource+0x168>
 8007322:	2b00      	cmp	r3, #0
 8007324:	d05c      	beq.n	80073e0 <HAL_TIM_ConfigClockSource+0x156>
 8007326:	2b10      	cmp	r3, #16
 8007328:	d05a      	beq.n	80073e0 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800732a:	e062      	b.n	80073f2 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6818      	ldr	r0, [r3, #0]
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	6899      	ldr	r1, [r3, #8]
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	685a      	ldr	r2, [r3, #4]
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	68db      	ldr	r3, [r3, #12]
 800733c:	f000 f987 	bl	800764e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800734e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	68fa      	ldr	r2, [r7, #12]
 8007356:	609a      	str	r2, [r3, #8]
      break;
 8007358:	e04e      	b.n	80073f8 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6818      	ldr	r0, [r3, #0]
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	6899      	ldr	r1, [r3, #8]
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	685a      	ldr	r2, [r3, #4]
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	68db      	ldr	r3, [r3, #12]
 800736a:	f000 f970 	bl	800764e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	689a      	ldr	r2, [r3, #8]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800737c:	609a      	str	r2, [r3, #8]
      break;
 800737e:	e03b      	b.n	80073f8 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6818      	ldr	r0, [r3, #0]
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	6859      	ldr	r1, [r3, #4]
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	68db      	ldr	r3, [r3, #12]
 800738c:	461a      	mov	r2, r3
 800738e:	f000 f8e7 	bl	8007560 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	2150      	movs	r1, #80	; 0x50
 8007398:	4618      	mov	r0, r3
 800739a:	f000 f93e 	bl	800761a <TIM_ITRx_SetConfig>
      break;
 800739e:	e02b      	b.n	80073f8 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6818      	ldr	r0, [r3, #0]
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	6859      	ldr	r1, [r3, #4]
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	68db      	ldr	r3, [r3, #12]
 80073ac:	461a      	mov	r2, r3
 80073ae:	f000 f905 	bl	80075bc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	2160      	movs	r1, #96	; 0x60
 80073b8:	4618      	mov	r0, r3
 80073ba:	f000 f92e 	bl	800761a <TIM_ITRx_SetConfig>
      break;
 80073be:	e01b      	b.n	80073f8 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6818      	ldr	r0, [r3, #0]
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	6859      	ldr	r1, [r3, #4]
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	68db      	ldr	r3, [r3, #12]
 80073cc:	461a      	mov	r2, r3
 80073ce:	f000 f8c7 	bl	8007560 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	2140      	movs	r1, #64	; 0x40
 80073d8:	4618      	mov	r0, r3
 80073da:	f000 f91e 	bl	800761a <TIM_ITRx_SetConfig>
      break;
 80073de:	e00b      	b.n	80073f8 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4619      	mov	r1, r3
 80073ea:	4610      	mov	r0, r2
 80073ec:	f000 f915 	bl	800761a <TIM_ITRx_SetConfig>
        break;
 80073f0:	e002      	b.n	80073f8 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80073f2:	bf00      	nop
 80073f4:	e000      	b.n	80073f8 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80073f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2201      	movs	r2, #1
 80073fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007408:	2300      	movs	r3, #0
}
 800740a:	4618      	mov	r0, r3
 800740c:	3710      	adds	r7, #16
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}

08007412 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007412:	b480      	push	{r7}
 8007414:	b083      	sub	sp, #12
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800741a:	bf00      	nop
 800741c:	370c      	adds	r7, #12
 800741e:	46bd      	mov	sp, r7
 8007420:	bc80      	pop	{r7}
 8007422:	4770      	bx	lr

08007424 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007424:	b480      	push	{r7}
 8007426:	b083      	sub	sp, #12
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800742c:	bf00      	nop
 800742e:	370c      	adds	r7, #12
 8007430:	46bd      	mov	sp, r7
 8007432:	bc80      	pop	{r7}
 8007434:	4770      	bx	lr

08007436 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007436:	b480      	push	{r7}
 8007438:	b083      	sub	sp, #12
 800743a:	af00      	add	r7, sp, #0
 800743c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800743e:	bf00      	nop
 8007440:	370c      	adds	r7, #12
 8007442:	46bd      	mov	sp, r7
 8007444:	bc80      	pop	{r7}
 8007446:	4770      	bx	lr

08007448 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007448:	b480      	push	{r7}
 800744a:	b083      	sub	sp, #12
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007450:	bf00      	nop
 8007452:	370c      	adds	r7, #12
 8007454:	46bd      	mov	sp, r7
 8007456:	bc80      	pop	{r7}
 8007458:	4770      	bx	lr

0800745a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800745a:	b480      	push	{r7}
 800745c:	b083      	sub	sp, #12
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007462:	bf00      	nop
 8007464:	370c      	adds	r7, #12
 8007466:	46bd      	mov	sp, r7
 8007468:	bc80      	pop	{r7}
 800746a:	4770      	bx	lr

0800746c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800746c:	b480      	push	{r7}
 800746e:	b085      	sub	sp, #20
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	4a33      	ldr	r2, [pc, #204]	; (800754c <TIM_Base_SetConfig+0xe0>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d013      	beq.n	80074ac <TIM_Base_SetConfig+0x40>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	4a32      	ldr	r2, [pc, #200]	; (8007550 <TIM_Base_SetConfig+0xe4>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d00f      	beq.n	80074ac <TIM_Base_SetConfig+0x40>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007492:	d00b      	beq.n	80074ac <TIM_Base_SetConfig+0x40>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	4a2f      	ldr	r2, [pc, #188]	; (8007554 <TIM_Base_SetConfig+0xe8>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d007      	beq.n	80074ac <TIM_Base_SetConfig+0x40>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	4a2e      	ldr	r2, [pc, #184]	; (8007558 <TIM_Base_SetConfig+0xec>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d003      	beq.n	80074ac <TIM_Base_SetConfig+0x40>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	4a2d      	ldr	r2, [pc, #180]	; (800755c <TIM_Base_SetConfig+0xf0>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d108      	bne.n	80074be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	68fa      	ldr	r2, [r7, #12]
 80074ba:	4313      	orrs	r3, r2
 80074bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	4a22      	ldr	r2, [pc, #136]	; (800754c <TIM_Base_SetConfig+0xe0>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d013      	beq.n	80074ee <TIM_Base_SetConfig+0x82>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	4a21      	ldr	r2, [pc, #132]	; (8007550 <TIM_Base_SetConfig+0xe4>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d00f      	beq.n	80074ee <TIM_Base_SetConfig+0x82>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074d4:	d00b      	beq.n	80074ee <TIM_Base_SetConfig+0x82>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	4a1e      	ldr	r2, [pc, #120]	; (8007554 <TIM_Base_SetConfig+0xe8>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d007      	beq.n	80074ee <TIM_Base_SetConfig+0x82>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	4a1d      	ldr	r2, [pc, #116]	; (8007558 <TIM_Base_SetConfig+0xec>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d003      	beq.n	80074ee <TIM_Base_SetConfig+0x82>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	4a1c      	ldr	r2, [pc, #112]	; (800755c <TIM_Base_SetConfig+0xf0>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d108      	bne.n	8007500 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	68db      	ldr	r3, [r3, #12]
 80074fa:	68fa      	ldr	r2, [r7, #12]
 80074fc:	4313      	orrs	r3, r2
 80074fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	695b      	ldr	r3, [r3, #20]
 800750a:	4313      	orrs	r3, r2
 800750c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	68fa      	ldr	r2, [r7, #12]
 8007512:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	689a      	ldr	r2, [r3, #8]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	4a09      	ldr	r2, [pc, #36]	; (800754c <TIM_Base_SetConfig+0xe0>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d003      	beq.n	8007534 <TIM_Base_SetConfig+0xc8>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	4a08      	ldr	r2, [pc, #32]	; (8007550 <TIM_Base_SetConfig+0xe4>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d103      	bne.n	800753c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	691a      	ldr	r2, [r3, #16]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2201      	movs	r2, #1
 8007540:	615a      	str	r2, [r3, #20]
}
 8007542:	bf00      	nop
 8007544:	3714      	adds	r7, #20
 8007546:	46bd      	mov	sp, r7
 8007548:	bc80      	pop	{r7}
 800754a:	4770      	bx	lr
 800754c:	40012c00 	.word	0x40012c00
 8007550:	40013400 	.word	0x40013400
 8007554:	40000400 	.word	0x40000400
 8007558:	40000800 	.word	0x40000800
 800755c:	40000c00 	.word	0x40000c00

08007560 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007560:	b480      	push	{r7}
 8007562:	b087      	sub	sp, #28
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	6a1b      	ldr	r3, [r3, #32]
 8007570:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	6a1b      	ldr	r3, [r3, #32]
 8007576:	f023 0201 	bic.w	r2, r3, #1
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	699b      	ldr	r3, [r3, #24]
 8007582:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800758a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	011b      	lsls	r3, r3, #4
 8007590:	693a      	ldr	r2, [r7, #16]
 8007592:	4313      	orrs	r3, r2
 8007594:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	f023 030a 	bic.w	r3, r3, #10
 800759c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800759e:	697a      	ldr	r2, [r7, #20]
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	4313      	orrs	r3, r2
 80075a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	693a      	ldr	r2, [r7, #16]
 80075aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	697a      	ldr	r2, [r7, #20]
 80075b0:	621a      	str	r2, [r3, #32]
}
 80075b2:	bf00      	nop
 80075b4:	371c      	adds	r7, #28
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bc80      	pop	{r7}
 80075ba:	4770      	bx	lr

080075bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80075bc:	b480      	push	{r7}
 80075be:	b087      	sub	sp, #28
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	6a1b      	ldr	r3, [r3, #32]
 80075cc:	f023 0210 	bic.w	r2, r3, #16
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	699b      	ldr	r3, [r3, #24]
 80075d8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	6a1b      	ldr	r3, [r3, #32]
 80075de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80075e6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	031b      	lsls	r3, r3, #12
 80075ec:	697a      	ldr	r2, [r7, #20]
 80075ee:	4313      	orrs	r3, r2
 80075f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80075f8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	011b      	lsls	r3, r3, #4
 80075fe:	693a      	ldr	r2, [r7, #16]
 8007600:	4313      	orrs	r3, r2
 8007602:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	697a      	ldr	r2, [r7, #20]
 8007608:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	693a      	ldr	r2, [r7, #16]
 800760e:	621a      	str	r2, [r3, #32]
}
 8007610:	bf00      	nop
 8007612:	371c      	adds	r7, #28
 8007614:	46bd      	mov	sp, r7
 8007616:	bc80      	pop	{r7}
 8007618:	4770      	bx	lr

0800761a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800761a:	b480      	push	{r7}
 800761c:	b085      	sub	sp, #20
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]
 8007622:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	689b      	ldr	r3, [r3, #8]
 8007628:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007630:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007632:	683a      	ldr	r2, [r7, #0]
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	4313      	orrs	r3, r2
 8007638:	f043 0307 	orr.w	r3, r3, #7
 800763c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	68fa      	ldr	r2, [r7, #12]
 8007642:	609a      	str	r2, [r3, #8]
}
 8007644:	bf00      	nop
 8007646:	3714      	adds	r7, #20
 8007648:	46bd      	mov	sp, r7
 800764a:	bc80      	pop	{r7}
 800764c:	4770      	bx	lr

0800764e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800764e:	b480      	push	{r7}
 8007650:	b087      	sub	sp, #28
 8007652:	af00      	add	r7, sp, #0
 8007654:	60f8      	str	r0, [r7, #12]
 8007656:	60b9      	str	r1, [r7, #8]
 8007658:	607a      	str	r2, [r7, #4]
 800765a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007668:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	021a      	lsls	r2, r3, #8
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	431a      	orrs	r2, r3
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	4313      	orrs	r3, r2
 8007676:	697a      	ldr	r2, [r7, #20]
 8007678:	4313      	orrs	r3, r2
 800767a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	697a      	ldr	r2, [r7, #20]
 8007680:	609a      	str	r2, [r3, #8]
}
 8007682:	bf00      	nop
 8007684:	371c      	adds	r7, #28
 8007686:	46bd      	mov	sp, r7
 8007688:	bc80      	pop	{r7}
 800768a:	4770      	bx	lr

0800768c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800768c:	b480      	push	{r7}
 800768e:	b085      	sub	sp, #20
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800769c:	2b01      	cmp	r3, #1
 800769e:	d101      	bne.n	80076a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80076a0:	2302      	movs	r3, #2
 80076a2:	e050      	b.n	8007746 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2201      	movs	r2, #1
 80076a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2202      	movs	r2, #2
 80076b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	68fa      	ldr	r2, [r7, #12]
 80076d2:	4313      	orrs	r3, r2
 80076d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	68fa      	ldr	r2, [r7, #12]
 80076dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a1b      	ldr	r2, [pc, #108]	; (8007750 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d018      	beq.n	800771a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a19      	ldr	r2, [pc, #100]	; (8007754 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d013      	beq.n	800771a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076fa:	d00e      	beq.n	800771a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a15      	ldr	r2, [pc, #84]	; (8007758 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d009      	beq.n	800771a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a14      	ldr	r2, [pc, #80]	; (800775c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d004      	beq.n	800771a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a12      	ldr	r2, [pc, #72]	; (8007760 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d10c      	bne.n	8007734 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007720:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	68ba      	ldr	r2, [r7, #8]
 8007728:	4313      	orrs	r3, r2
 800772a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	68ba      	ldr	r2, [r7, #8]
 8007732:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2201      	movs	r2, #1
 8007738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2200      	movs	r2, #0
 8007740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007744:	2300      	movs	r3, #0
}
 8007746:	4618      	mov	r0, r3
 8007748:	3714      	adds	r7, #20
 800774a:	46bd      	mov	sp, r7
 800774c:	bc80      	pop	{r7}
 800774e:	4770      	bx	lr
 8007750:	40012c00 	.word	0x40012c00
 8007754:	40013400 	.word	0x40013400
 8007758:	40000400 	.word	0x40000400
 800775c:	40000800 	.word	0x40000800
 8007760:	40000c00 	.word	0x40000c00

08007764 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007764:	b480      	push	{r7}
 8007766:	b083      	sub	sp, #12
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800776c:	bf00      	nop
 800776e:	370c      	adds	r7, #12
 8007770:	46bd      	mov	sp, r7
 8007772:	bc80      	pop	{r7}
 8007774:	4770      	bx	lr

08007776 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007776:	b480      	push	{r7}
 8007778:	b083      	sub	sp, #12
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800777e:	bf00      	nop
 8007780:	370c      	adds	r7, #12
 8007782:	46bd      	mov	sp, r7
 8007784:	bc80      	pop	{r7}
 8007786:	4770      	bx	lr

08007788 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b082      	sub	sp, #8
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d101      	bne.n	800779a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007796:	2301      	movs	r3, #1
 8007798:	e03f      	b.n	800781a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d106      	bne.n	80077b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2200      	movs	r2, #0
 80077aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f7fe fadc 	bl	8005d6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2224      	movs	r2, #36	; 0x24
 80077b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	68da      	ldr	r2, [r3, #12]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80077ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f000 fba9 	bl	8007f24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	691a      	ldr	r2, [r3, #16]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80077e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	695a      	ldr	r2, [r3, #20]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80077f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	68da      	ldr	r2, [r3, #12]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007800:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2200      	movs	r2, #0
 8007806:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2220      	movs	r2, #32
 800780c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2220      	movs	r2, #32
 8007814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007818:	2300      	movs	r3, #0
}
 800781a:	4618      	mov	r0, r3
 800781c:	3708      	adds	r7, #8
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}

08007822 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007822:	b580      	push	{r7, lr}
 8007824:	b084      	sub	sp, #16
 8007826:	af00      	add	r7, sp, #0
 8007828:	60f8      	str	r0, [r7, #12]
 800782a:	60b9      	str	r1, [r7, #8]
 800782c:	4613      	mov	r3, r2
 800782e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007836:	b2db      	uxtb	r3, r3
 8007838:	2b20      	cmp	r3, #32
 800783a:	d11d      	bne.n	8007878 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d002      	beq.n	8007848 <HAL_UART_Receive_IT+0x26>
 8007842:	88fb      	ldrh	r3, [r7, #6]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d101      	bne.n	800784c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007848:	2301      	movs	r3, #1
 800784a:	e016      	b.n	800787a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007852:	2b01      	cmp	r3, #1
 8007854:	d101      	bne.n	800785a <HAL_UART_Receive_IT+0x38>
 8007856:	2302      	movs	r3, #2
 8007858:	e00f      	b.n	800787a <HAL_UART_Receive_IT+0x58>
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2201      	movs	r2, #1
 800785e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2200      	movs	r2, #0
 8007866:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8007868:	88fb      	ldrh	r3, [r7, #6]
 800786a:	461a      	mov	r2, r3
 800786c:	68b9      	ldr	r1, [r7, #8]
 800786e:	68f8      	ldr	r0, [r7, #12]
 8007870:	f000 f9cf 	bl	8007c12 <UART_Start_Receive_IT>
 8007874:	4603      	mov	r3, r0
 8007876:	e000      	b.n	800787a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007878:	2302      	movs	r3, #2
  }
}
 800787a:	4618      	mov	r0, r3
 800787c:	3710      	adds	r7, #16
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}
	...

08007884 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b08a      	sub	sp, #40	; 0x28
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	68db      	ldr	r3, [r3, #12]
 800789a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	695b      	ldr	r3, [r3, #20]
 80078a2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80078a4:	2300      	movs	r3, #0
 80078a6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80078a8:	2300      	movs	r3, #0
 80078aa:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80078ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ae:	f003 030f 	and.w	r3, r3, #15
 80078b2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80078b4:	69bb      	ldr	r3, [r7, #24]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d10d      	bne.n	80078d6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80078ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078bc:	f003 0320 	and.w	r3, r3, #32
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d008      	beq.n	80078d6 <HAL_UART_IRQHandler+0x52>
 80078c4:	6a3b      	ldr	r3, [r7, #32]
 80078c6:	f003 0320 	and.w	r3, r3, #32
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d003      	beq.n	80078d6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 fa7f 	bl	8007dd2 <UART_Receive_IT>
      return;
 80078d4:	e17b      	b.n	8007bce <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80078d6:	69bb      	ldr	r3, [r7, #24]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	f000 80b1 	beq.w	8007a40 <HAL_UART_IRQHandler+0x1bc>
 80078de:	69fb      	ldr	r3, [r7, #28]
 80078e0:	f003 0301 	and.w	r3, r3, #1
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d105      	bne.n	80078f4 <HAL_UART_IRQHandler+0x70>
 80078e8:	6a3b      	ldr	r3, [r7, #32]
 80078ea:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	f000 80a6 	beq.w	8007a40 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80078f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f6:	f003 0301 	and.w	r3, r3, #1
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d00a      	beq.n	8007914 <HAL_UART_IRQHandler+0x90>
 80078fe:	6a3b      	ldr	r3, [r7, #32]
 8007900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007904:	2b00      	cmp	r3, #0
 8007906:	d005      	beq.n	8007914 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800790c:	f043 0201 	orr.w	r2, r3, #1
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007916:	f003 0304 	and.w	r3, r3, #4
 800791a:	2b00      	cmp	r3, #0
 800791c:	d00a      	beq.n	8007934 <HAL_UART_IRQHandler+0xb0>
 800791e:	69fb      	ldr	r3, [r7, #28]
 8007920:	f003 0301 	and.w	r3, r3, #1
 8007924:	2b00      	cmp	r3, #0
 8007926:	d005      	beq.n	8007934 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800792c:	f043 0202 	orr.w	r2, r3, #2
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007936:	f003 0302 	and.w	r3, r3, #2
 800793a:	2b00      	cmp	r3, #0
 800793c:	d00a      	beq.n	8007954 <HAL_UART_IRQHandler+0xd0>
 800793e:	69fb      	ldr	r3, [r7, #28]
 8007940:	f003 0301 	and.w	r3, r3, #1
 8007944:	2b00      	cmp	r3, #0
 8007946:	d005      	beq.n	8007954 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800794c:	f043 0204 	orr.w	r2, r3, #4
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007956:	f003 0308 	and.w	r3, r3, #8
 800795a:	2b00      	cmp	r3, #0
 800795c:	d00f      	beq.n	800797e <HAL_UART_IRQHandler+0xfa>
 800795e:	6a3b      	ldr	r3, [r7, #32]
 8007960:	f003 0320 	and.w	r3, r3, #32
 8007964:	2b00      	cmp	r3, #0
 8007966:	d104      	bne.n	8007972 <HAL_UART_IRQHandler+0xee>
 8007968:	69fb      	ldr	r3, [r7, #28]
 800796a:	f003 0301 	and.w	r3, r3, #1
 800796e:	2b00      	cmp	r3, #0
 8007970:	d005      	beq.n	800797e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007976:	f043 0208 	orr.w	r2, r3, #8
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007982:	2b00      	cmp	r3, #0
 8007984:	f000 811e 	beq.w	8007bc4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798a:	f003 0320 	and.w	r3, r3, #32
 800798e:	2b00      	cmp	r3, #0
 8007990:	d007      	beq.n	80079a2 <HAL_UART_IRQHandler+0x11e>
 8007992:	6a3b      	ldr	r3, [r7, #32]
 8007994:	f003 0320 	and.w	r3, r3, #32
 8007998:	2b00      	cmp	r3, #0
 800799a:	d002      	beq.n	80079a2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 fa18 	bl	8007dd2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	695b      	ldr	r3, [r3, #20]
 80079a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	bf14      	ite	ne
 80079b0:	2301      	movne	r3, #1
 80079b2:	2300      	moveq	r3, #0
 80079b4:	b2db      	uxtb	r3, r3
 80079b6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079bc:	f003 0308 	and.w	r3, r3, #8
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d102      	bne.n	80079ca <HAL_UART_IRQHandler+0x146>
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d031      	beq.n	8007a2e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 f95a 	bl	8007c84 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	695b      	ldr	r3, [r3, #20]
 80079d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d023      	beq.n	8007a26 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	695a      	ldr	r2, [r3, #20]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079ec:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d013      	beq.n	8007a1e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079fa:	4a76      	ldr	r2, [pc, #472]	; (8007bd4 <HAL_UART_IRQHandler+0x350>)
 80079fc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a02:	4618      	mov	r0, r3
 8007a04:	f7fe fbfa 	bl	80061fc <HAL_DMA_Abort_IT>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d016      	beq.n	8007a3c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a14:	687a      	ldr	r2, [r7, #4]
 8007a16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007a18:	4610      	mov	r0, r2
 8007a1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a1c:	e00e      	b.n	8007a3c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 f8e3 	bl	8007bea <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a24:	e00a      	b.n	8007a3c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 f8df 	bl	8007bea <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a2c:	e006      	b.n	8007a3c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 f8db 	bl	8007bea <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2200      	movs	r2, #0
 8007a38:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007a3a:	e0c3      	b.n	8007bc4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a3c:	bf00      	nop
    return;
 8007a3e:	e0c1      	b.n	8007bc4 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	f040 80a1 	bne.w	8007b8c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8007a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4c:	f003 0310 	and.w	r3, r3, #16
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	f000 809b 	beq.w	8007b8c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8007a56:	6a3b      	ldr	r3, [r7, #32]
 8007a58:	f003 0310 	and.w	r3, r3, #16
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	f000 8095 	beq.w	8007b8c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007a62:	2300      	movs	r3, #0
 8007a64:	60fb      	str	r3, [r7, #12]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	60fb      	str	r3, [r7, #12]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	60fb      	str	r3, [r7, #12]
 8007a76:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	695b      	ldr	r3, [r3, #20]
 8007a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d04e      	beq.n	8007b24 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8007a90:	8a3b      	ldrh	r3, [r7, #16]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	f000 8098 	beq.w	8007bc8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007a9c:	8a3a      	ldrh	r2, [r7, #16]
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	f080 8092 	bcs.w	8007bc8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	8a3a      	ldrh	r2, [r7, #16]
 8007aa8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aae:	699b      	ldr	r3, [r3, #24]
 8007ab0:	2b20      	cmp	r3, #32
 8007ab2:	d02b      	beq.n	8007b0c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	68da      	ldr	r2, [r3, #12]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007ac2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	695a      	ldr	r2, [r3, #20]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f022 0201 	bic.w	r2, r2, #1
 8007ad2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	695a      	ldr	r2, [r3, #20]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ae2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2220      	movs	r2, #32
 8007ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2200      	movs	r2, #0
 8007af0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	68da      	ldr	r2, [r3, #12]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f022 0210 	bic.w	r2, r2, #16
 8007b00:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b06:	4618      	mov	r0, r3
 8007b08:	f7fe fb3d 	bl	8006186 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	1ad3      	subs	r3, r2, r3
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	4619      	mov	r1, r3
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f000 f86d 	bl	8007bfc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007b22:	e051      	b.n	8007bc8 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	1ad3      	subs	r3, r2, r3
 8007b30:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d047      	beq.n	8007bcc <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8007b3c:	8a7b      	ldrh	r3, [r7, #18]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d044      	beq.n	8007bcc <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	68da      	ldr	r2, [r3, #12]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007b50:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	695a      	ldr	r2, [r3, #20]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f022 0201 	bic.w	r2, r2, #1
 8007b60:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2220      	movs	r2, #32
 8007b66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	68da      	ldr	r2, [r3, #12]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f022 0210 	bic.w	r2, r2, #16
 8007b7e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007b80:	8a7b      	ldrh	r3, [r7, #18]
 8007b82:	4619      	mov	r1, r3
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f000 f839 	bl	8007bfc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007b8a:	e01f      	b.n	8007bcc <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d008      	beq.n	8007ba8 <HAL_UART_IRQHandler+0x324>
 8007b96:	6a3b      	ldr	r3, [r7, #32]
 8007b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d003      	beq.n	8007ba8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f000 f8af 	bl	8007d04 <UART_Transmit_IT>
    return;
 8007ba6:	e012      	b.n	8007bce <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d00d      	beq.n	8007bce <HAL_UART_IRQHandler+0x34a>
 8007bb2:	6a3b      	ldr	r3, [r7, #32]
 8007bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d008      	beq.n	8007bce <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f000 f8f0 	bl	8007da2 <UART_EndTransmit_IT>
    return;
 8007bc2:	e004      	b.n	8007bce <HAL_UART_IRQHandler+0x34a>
    return;
 8007bc4:	bf00      	nop
 8007bc6:	e002      	b.n	8007bce <HAL_UART_IRQHandler+0x34a>
      return;
 8007bc8:	bf00      	nop
 8007bca:	e000      	b.n	8007bce <HAL_UART_IRQHandler+0x34a>
      return;
 8007bcc:	bf00      	nop
  }
}
 8007bce:	3728      	adds	r7, #40	; 0x28
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}
 8007bd4:	08007cdd 	.word	0x08007cdd

08007bd8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b083      	sub	sp, #12
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007be0:	bf00      	nop
 8007be2:	370c      	adds	r7, #12
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bc80      	pop	{r7}
 8007be8:	4770      	bx	lr

08007bea <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007bea:	b480      	push	{r7}
 8007bec:	b083      	sub	sp, #12
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007bf2:	bf00      	nop
 8007bf4:	370c      	adds	r7, #12
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bc80      	pop	{r7}
 8007bfa:	4770      	bx	lr

08007bfc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b083      	sub	sp, #12
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	460b      	mov	r3, r1
 8007c06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007c08:	bf00      	nop
 8007c0a:	370c      	adds	r7, #12
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bc80      	pop	{r7}
 8007c10:	4770      	bx	lr

08007c12 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c12:	b480      	push	{r7}
 8007c14:	b085      	sub	sp, #20
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	60f8      	str	r0, [r7, #12]
 8007c1a:	60b9      	str	r1, [r7, #8]
 8007c1c:	4613      	mov	r3, r2
 8007c1e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	68ba      	ldr	r2, [r7, #8]
 8007c24:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	88fa      	ldrh	r2, [r7, #6]
 8007c2a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	88fa      	ldrh	r2, [r7, #6]
 8007c30:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2200      	movs	r2, #0
 8007c36:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2222      	movs	r2, #34	; 0x22
 8007c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2200      	movs	r2, #0
 8007c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	68da      	ldr	r2, [r3, #12]
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c56:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	695a      	ldr	r2, [r3, #20]
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f042 0201 	orr.w	r2, r2, #1
 8007c66:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	68da      	ldr	r2, [r3, #12]
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f042 0220 	orr.w	r2, r2, #32
 8007c76:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007c78:	2300      	movs	r3, #0
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3714      	adds	r7, #20
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bc80      	pop	{r7}
 8007c82:	4770      	bx	lr

08007c84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	68da      	ldr	r2, [r3, #12]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007c9a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	695a      	ldr	r2, [r3, #20]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f022 0201 	bic.w	r2, r2, #1
 8007caa:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d107      	bne.n	8007cc4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	68da      	ldr	r2, [r3, #12]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f022 0210 	bic.w	r2, r2, #16
 8007cc2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2220      	movs	r2, #32
 8007cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007cd2:	bf00      	nop
 8007cd4:	370c      	adds	r7, #12
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bc80      	pop	{r7}
 8007cda:	4770      	bx	lr

08007cdc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b084      	sub	sp, #16
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2200      	movs	r2, #0
 8007cee:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007cf6:	68f8      	ldr	r0, [r7, #12]
 8007cf8:	f7ff ff77 	bl	8007bea <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007cfc:	bf00      	nop
 8007cfe:	3710      	adds	r7, #16
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b085      	sub	sp, #20
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d12:	b2db      	uxtb	r3, r3
 8007d14:	2b21      	cmp	r3, #33	; 0x21
 8007d16:	d13e      	bne.n	8007d96 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	689b      	ldr	r3, [r3, #8]
 8007d1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d20:	d114      	bne.n	8007d4c <UART_Transmit_IT+0x48>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	691b      	ldr	r3, [r3, #16]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d110      	bne.n	8007d4c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6a1b      	ldr	r3, [r3, #32]
 8007d2e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	881b      	ldrh	r3, [r3, #0]
 8007d34:	461a      	mov	r2, r3
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d3e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6a1b      	ldr	r3, [r3, #32]
 8007d44:	1c9a      	adds	r2, r3, #2
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	621a      	str	r2, [r3, #32]
 8007d4a:	e008      	b.n	8007d5e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6a1b      	ldr	r3, [r3, #32]
 8007d50:	1c59      	adds	r1, r3, #1
 8007d52:	687a      	ldr	r2, [r7, #4]
 8007d54:	6211      	str	r1, [r2, #32]
 8007d56:	781a      	ldrb	r2, [r3, #0]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	3b01      	subs	r3, #1
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	687a      	ldr	r2, [r7, #4]
 8007d6a:	4619      	mov	r1, r3
 8007d6c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d10f      	bne.n	8007d92 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	68da      	ldr	r2, [r3, #12]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d80:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	68da      	ldr	r2, [r3, #12]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d90:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007d92:	2300      	movs	r3, #0
 8007d94:	e000      	b.n	8007d98 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007d96:	2302      	movs	r3, #2
  }
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3714      	adds	r7, #20
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bc80      	pop	{r7}
 8007da0:	4770      	bx	lr

08007da2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007da2:	b580      	push	{r7, lr}
 8007da4:	b082      	sub	sp, #8
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	68da      	ldr	r2, [r3, #12]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007db8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2220      	movs	r2, #32
 8007dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f7ff ff08 	bl	8007bd8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007dc8:	2300      	movs	r3, #0
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3708      	adds	r7, #8
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}

08007dd2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007dd2:	b580      	push	{r7, lr}
 8007dd4:	b086      	sub	sp, #24
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	2b22      	cmp	r3, #34	; 0x22
 8007de4:	f040 8099 	bne.w	8007f1a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007df0:	d117      	bne.n	8007e22 <UART_Receive_IT+0x50>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	691b      	ldr	r3, [r3, #16]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d113      	bne.n	8007e22 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e02:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e10:	b29a      	uxth	r2, r3
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e1a:	1c9a      	adds	r2, r3, #2
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	629a      	str	r2, [r3, #40]	; 0x28
 8007e20:	e026      	b.n	8007e70 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e26:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	689b      	ldr	r3, [r3, #8]
 8007e30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e34:	d007      	beq.n	8007e46 <UART_Receive_IT+0x74>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	689b      	ldr	r3, [r3, #8]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d10a      	bne.n	8007e54 <UART_Receive_IT+0x82>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	691b      	ldr	r3, [r3, #16]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d106      	bne.n	8007e54 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	b2da      	uxtb	r2, r3
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	701a      	strb	r2, [r3, #0]
 8007e52:	e008      	b.n	8007e66 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e60:	b2da      	uxtb	r2, r3
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e6a:	1c5a      	adds	r2, r3, #1
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007e74:	b29b      	uxth	r3, r3
 8007e76:	3b01      	subs	r3, #1
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	687a      	ldr	r2, [r7, #4]
 8007e7c:	4619      	mov	r1, r3
 8007e7e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d148      	bne.n	8007f16 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	68da      	ldr	r2, [r3, #12]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f022 0220 	bic.w	r2, r2, #32
 8007e92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	68da      	ldr	r2, [r3, #12]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007ea2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	695a      	ldr	r2, [r3, #20]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f022 0201 	bic.w	r2, r2, #1
 8007eb2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2220      	movs	r2, #32
 8007eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	d123      	bne.n	8007f0c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	68da      	ldr	r2, [r3, #12]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f022 0210 	bic.w	r2, r2, #16
 8007ed8:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f003 0310 	and.w	r3, r3, #16
 8007ee4:	2b10      	cmp	r3, #16
 8007ee6:	d10a      	bne.n	8007efe <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007ee8:	2300      	movs	r3, #0
 8007eea:	60fb      	str	r3, [r7, #12]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	60fb      	str	r3, [r7, #12]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	60fb      	str	r3, [r7, #12]
 8007efc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007f02:	4619      	mov	r1, r3
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f7ff fe79 	bl	8007bfc <HAL_UARTEx_RxEventCallback>
 8007f0a:	e002      	b.n	8007f12 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f7fd fe01 	bl	8005b14 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007f12:	2300      	movs	r3, #0
 8007f14:	e002      	b.n	8007f1c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8007f16:	2300      	movs	r3, #0
 8007f18:	e000      	b.n	8007f1c <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8007f1a:	2302      	movs	r3, #2
  }
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3718      	adds	r7, #24
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b084      	sub	sp, #16
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	691b      	ldr	r3, [r3, #16]
 8007f32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	68da      	ldr	r2, [r3, #12]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	430a      	orrs	r2, r1
 8007f40:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	689a      	ldr	r2, [r3, #8]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	691b      	ldr	r3, [r3, #16]
 8007f4a:	431a      	orrs	r2, r3
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	695b      	ldr	r3, [r3, #20]
 8007f50:	4313      	orrs	r3, r2
 8007f52:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	68db      	ldr	r3, [r3, #12]
 8007f5a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007f5e:	f023 030c 	bic.w	r3, r3, #12
 8007f62:	687a      	ldr	r2, [r7, #4]
 8007f64:	6812      	ldr	r2, [r2, #0]
 8007f66:	68b9      	ldr	r1, [r7, #8]
 8007f68:	430b      	orrs	r3, r1
 8007f6a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	695b      	ldr	r3, [r3, #20]
 8007f72:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	699a      	ldr	r2, [r3, #24]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	430a      	orrs	r2, r1
 8007f80:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a2c      	ldr	r2, [pc, #176]	; (8008038 <UART_SetConfig+0x114>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d103      	bne.n	8007f94 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007f8c:	f7fe fff4 	bl	8006f78 <HAL_RCC_GetPCLK2Freq>
 8007f90:	60f8      	str	r0, [r7, #12]
 8007f92:	e002      	b.n	8007f9a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007f94:	f7fe ffdc 	bl	8006f50 <HAL_RCC_GetPCLK1Freq>
 8007f98:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007f9a:	68fa      	ldr	r2, [r7, #12]
 8007f9c:	4613      	mov	r3, r2
 8007f9e:	009b      	lsls	r3, r3, #2
 8007fa0:	4413      	add	r3, r2
 8007fa2:	009a      	lsls	r2, r3, #2
 8007fa4:	441a      	add	r2, r3
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	009b      	lsls	r3, r3, #2
 8007fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fb0:	4a22      	ldr	r2, [pc, #136]	; (800803c <UART_SetConfig+0x118>)
 8007fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8007fb6:	095b      	lsrs	r3, r3, #5
 8007fb8:	0119      	lsls	r1, r3, #4
 8007fba:	68fa      	ldr	r2, [r7, #12]
 8007fbc:	4613      	mov	r3, r2
 8007fbe:	009b      	lsls	r3, r3, #2
 8007fc0:	4413      	add	r3, r2
 8007fc2:	009a      	lsls	r2, r3, #2
 8007fc4:	441a      	add	r2, r3
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	009b      	lsls	r3, r3, #2
 8007fcc:	fbb2 f2f3 	udiv	r2, r2, r3
 8007fd0:	4b1a      	ldr	r3, [pc, #104]	; (800803c <UART_SetConfig+0x118>)
 8007fd2:	fba3 0302 	umull	r0, r3, r3, r2
 8007fd6:	095b      	lsrs	r3, r3, #5
 8007fd8:	2064      	movs	r0, #100	; 0x64
 8007fda:	fb00 f303 	mul.w	r3, r0, r3
 8007fde:	1ad3      	subs	r3, r2, r3
 8007fe0:	011b      	lsls	r3, r3, #4
 8007fe2:	3332      	adds	r3, #50	; 0x32
 8007fe4:	4a15      	ldr	r2, [pc, #84]	; (800803c <UART_SetConfig+0x118>)
 8007fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8007fea:	095b      	lsrs	r3, r3, #5
 8007fec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007ff0:	4419      	add	r1, r3
 8007ff2:	68fa      	ldr	r2, [r7, #12]
 8007ff4:	4613      	mov	r3, r2
 8007ff6:	009b      	lsls	r3, r3, #2
 8007ff8:	4413      	add	r3, r2
 8007ffa:	009a      	lsls	r2, r3, #2
 8007ffc:	441a      	add	r2, r3
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	009b      	lsls	r3, r3, #2
 8008004:	fbb2 f2f3 	udiv	r2, r2, r3
 8008008:	4b0c      	ldr	r3, [pc, #48]	; (800803c <UART_SetConfig+0x118>)
 800800a:	fba3 0302 	umull	r0, r3, r3, r2
 800800e:	095b      	lsrs	r3, r3, #5
 8008010:	2064      	movs	r0, #100	; 0x64
 8008012:	fb00 f303 	mul.w	r3, r0, r3
 8008016:	1ad3      	subs	r3, r2, r3
 8008018:	011b      	lsls	r3, r3, #4
 800801a:	3332      	adds	r3, #50	; 0x32
 800801c:	4a07      	ldr	r2, [pc, #28]	; (800803c <UART_SetConfig+0x118>)
 800801e:	fba2 2303 	umull	r2, r3, r2, r3
 8008022:	095b      	lsrs	r3, r3, #5
 8008024:	f003 020f 	and.w	r2, r3, #15
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	440a      	add	r2, r1
 800802e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008030:	bf00      	nop
 8008032:	3710      	adds	r7, #16
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}
 8008038:	40013800 	.word	0x40013800
 800803c:	51eb851f 	.word	0x51eb851f

08008040 <__libc_init_array>:
 8008040:	b570      	push	{r4, r5, r6, lr}
 8008042:	2600      	movs	r6, #0
 8008044:	4d0c      	ldr	r5, [pc, #48]	; (8008078 <__libc_init_array+0x38>)
 8008046:	4c0d      	ldr	r4, [pc, #52]	; (800807c <__libc_init_array+0x3c>)
 8008048:	1b64      	subs	r4, r4, r5
 800804a:	10a4      	asrs	r4, r4, #2
 800804c:	42a6      	cmp	r6, r4
 800804e:	d109      	bne.n	8008064 <__libc_init_array+0x24>
 8008050:	f000 f822 	bl	8008098 <_init>
 8008054:	2600      	movs	r6, #0
 8008056:	4d0a      	ldr	r5, [pc, #40]	; (8008080 <__libc_init_array+0x40>)
 8008058:	4c0a      	ldr	r4, [pc, #40]	; (8008084 <__libc_init_array+0x44>)
 800805a:	1b64      	subs	r4, r4, r5
 800805c:	10a4      	asrs	r4, r4, #2
 800805e:	42a6      	cmp	r6, r4
 8008060:	d105      	bne.n	800806e <__libc_init_array+0x2e>
 8008062:	bd70      	pop	{r4, r5, r6, pc}
 8008064:	f855 3b04 	ldr.w	r3, [r5], #4
 8008068:	4798      	blx	r3
 800806a:	3601      	adds	r6, #1
 800806c:	e7ee      	b.n	800804c <__libc_init_array+0xc>
 800806e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008072:	4798      	blx	r3
 8008074:	3601      	adds	r6, #1
 8008076:	e7f2      	b.n	800805e <__libc_init_array+0x1e>
 8008078:	080080d8 	.word	0x080080d8
 800807c:	080080d8 	.word	0x080080d8
 8008080:	080080d8 	.word	0x080080d8
 8008084:	080080dc 	.word	0x080080dc

08008088 <memset>:
 8008088:	4603      	mov	r3, r0
 800808a:	4402      	add	r2, r0
 800808c:	4293      	cmp	r3, r2
 800808e:	d100      	bne.n	8008092 <memset+0xa>
 8008090:	4770      	bx	lr
 8008092:	f803 1b01 	strb.w	r1, [r3], #1
 8008096:	e7f9      	b.n	800808c <memset+0x4>

08008098 <_init>:
 8008098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800809a:	bf00      	nop
 800809c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800809e:	bc08      	pop	{r3}
 80080a0:	469e      	mov	lr, r3
 80080a2:	4770      	bx	lr

080080a4 <_fini>:
 80080a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080a6:	bf00      	nop
 80080a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080aa:	bc08      	pop	{r3}
 80080ac:	469e      	mov	lr, r3
 80080ae:	4770      	bx	lr
