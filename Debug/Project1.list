
Project1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095f4  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a20  080097dc  080097dc  000197dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b1fc  0800b1fc  0002009c  2**0
                  CONTENTS
  4 .ARM          00000000  0800b1fc  0800b1fc  0002009c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b1fc  0800b1fc  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b1fc  0800b1fc  0001b1fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b200  0800b200  0001b200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  0800b204  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  2000009c  0800b2a0  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  0800b2a0  0002021c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ed9b  00000000  00000000  000200c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024b5  00000000  00000000  0002ee60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d88  00000000  00000000  00031318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cb8  00000000  00000000  000320a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a726  00000000  00000000  00032d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010a77  00000000  00000000  0004d47e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000998e7  00000000  00000000  0005def5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f77dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d48  00000000  00000000  000f7830  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	2000009c 	.word	0x2000009c
 8000204:	00000000 	.word	0x00000000
 8000208:	080097c4 	.word	0x080097c4

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200000a0 	.word	0x200000a0
 8000224:	080097c4 	.word	0x080097c4

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_dmul>:
 8000238:	b570      	push	{r4, r5, r6, lr}
 800023a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800023e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000242:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000246:	bf1d      	ittte	ne
 8000248:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800024c:	ea94 0f0c 	teqne	r4, ip
 8000250:	ea95 0f0c 	teqne	r5, ip
 8000254:	f000 f8de 	bleq	8000414 <__aeabi_dmul+0x1dc>
 8000258:	442c      	add	r4, r5
 800025a:	ea81 0603 	eor.w	r6, r1, r3
 800025e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000262:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000266:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800026a:	bf18      	it	ne
 800026c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000270:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000274:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000278:	d038      	beq.n	80002ec <__aeabi_dmul+0xb4>
 800027a:	fba0 ce02 	umull	ip, lr, r0, r2
 800027e:	f04f 0500 	mov.w	r5, #0
 8000282:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000286:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800028a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800028e:	f04f 0600 	mov.w	r6, #0
 8000292:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000296:	f09c 0f00 	teq	ip, #0
 800029a:	bf18      	it	ne
 800029c:	f04e 0e01 	orrne.w	lr, lr, #1
 80002a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002ac:	d204      	bcs.n	80002b8 <__aeabi_dmul+0x80>
 80002ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002b2:	416d      	adcs	r5, r5
 80002b4:	eb46 0606 	adc.w	r6, r6, r6
 80002b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002d0:	bf88      	it	hi
 80002d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002d6:	d81e      	bhi.n	8000316 <__aeabi_dmul+0xde>
 80002d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002dc:	bf08      	it	eq
 80002de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002e2:	f150 0000 	adcs.w	r0, r0, #0
 80002e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002f0:	ea46 0101 	orr.w	r1, r6, r1
 80002f4:	ea40 0002 	orr.w	r0, r0, r2
 80002f8:	ea81 0103 	eor.w	r1, r1, r3
 80002fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000300:	bfc2      	ittt	gt
 8000302:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000306:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800030a:	bd70      	popgt	{r4, r5, r6, pc}
 800030c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000310:	f04f 0e00 	mov.w	lr, #0
 8000314:	3c01      	subs	r4, #1
 8000316:	f300 80ab 	bgt.w	8000470 <__aeabi_dmul+0x238>
 800031a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800031e:	bfde      	ittt	le
 8000320:	2000      	movle	r0, #0
 8000322:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000326:	bd70      	pople	{r4, r5, r6, pc}
 8000328:	f1c4 0400 	rsb	r4, r4, #0
 800032c:	3c20      	subs	r4, #32
 800032e:	da35      	bge.n	800039c <__aeabi_dmul+0x164>
 8000330:	340c      	adds	r4, #12
 8000332:	dc1b      	bgt.n	800036c <__aeabi_dmul+0x134>
 8000334:	f104 0414 	add.w	r4, r4, #20
 8000338:	f1c4 0520 	rsb	r5, r4, #32
 800033c:	fa00 f305 	lsl.w	r3, r0, r5
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f205 	lsl.w	r2, r1, r5
 8000348:	ea40 0002 	orr.w	r0, r0, r2
 800034c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000350:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000354:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000358:	fa21 f604 	lsr.w	r6, r1, r4
 800035c:	eb42 0106 	adc.w	r1, r2, r6
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f1c4 040c 	rsb	r4, r4, #12
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f304 	lsl.w	r3, r0, r4
 8000378:	fa20 f005 	lsr.w	r0, r0, r5
 800037c:	fa01 f204 	lsl.w	r2, r1, r4
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000388:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000394:	bf08      	it	eq
 8000396:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800039a:	bd70      	pop	{r4, r5, r6, pc}
 800039c:	f1c4 0520 	rsb	r5, r4, #32
 80003a0:	fa00 f205 	lsl.w	r2, r0, r5
 80003a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80003a8:	fa20 f304 	lsr.w	r3, r0, r4
 80003ac:	fa01 f205 	lsl.w	r2, r1, r5
 80003b0:	ea43 0302 	orr.w	r3, r3, r2
 80003b4:	fa21 f004 	lsr.w	r0, r1, r4
 80003b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003bc:	fa21 f204 	lsr.w	r2, r1, r4
 80003c0:	ea20 0002 	bic.w	r0, r0, r2
 80003c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f094 0f00 	teq	r4, #0
 80003d8:	d10f      	bne.n	80003fa <__aeabi_dmul+0x1c2>
 80003da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003de:	0040      	lsls	r0, r0, #1
 80003e0:	eb41 0101 	adc.w	r1, r1, r1
 80003e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3c01      	subeq	r4, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1a6>
 80003ee:	ea41 0106 	orr.w	r1, r1, r6
 80003f2:	f095 0f00 	teq	r5, #0
 80003f6:	bf18      	it	ne
 80003f8:	4770      	bxne	lr
 80003fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003fe:	0052      	lsls	r2, r2, #1
 8000400:	eb43 0303 	adc.w	r3, r3, r3
 8000404:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000408:	bf08      	it	eq
 800040a:	3d01      	subeq	r5, #1
 800040c:	d0f7      	beq.n	80003fe <__aeabi_dmul+0x1c6>
 800040e:	ea43 0306 	orr.w	r3, r3, r6
 8000412:	4770      	bx	lr
 8000414:	ea94 0f0c 	teq	r4, ip
 8000418:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800041c:	bf18      	it	ne
 800041e:	ea95 0f0c 	teqne	r5, ip
 8000422:	d00c      	beq.n	800043e <__aeabi_dmul+0x206>
 8000424:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000428:	bf18      	it	ne
 800042a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042e:	d1d1      	bne.n	80003d4 <__aeabi_dmul+0x19c>
 8000430:	ea81 0103 	eor.w	r1, r1, r3
 8000434:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000438:	f04f 0000 	mov.w	r0, #0
 800043c:	bd70      	pop	{r4, r5, r6, pc}
 800043e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000442:	bf06      	itte	eq
 8000444:	4610      	moveq	r0, r2
 8000446:	4619      	moveq	r1, r3
 8000448:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800044c:	d019      	beq.n	8000482 <__aeabi_dmul+0x24a>
 800044e:	ea94 0f0c 	teq	r4, ip
 8000452:	d102      	bne.n	800045a <__aeabi_dmul+0x222>
 8000454:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000458:	d113      	bne.n	8000482 <__aeabi_dmul+0x24a>
 800045a:	ea95 0f0c 	teq	r5, ip
 800045e:	d105      	bne.n	800046c <__aeabi_dmul+0x234>
 8000460:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000464:	bf1c      	itt	ne
 8000466:	4610      	movne	r0, r2
 8000468:	4619      	movne	r1, r3
 800046a:	d10a      	bne.n	8000482 <__aeabi_dmul+0x24a>
 800046c:	ea81 0103 	eor.w	r1, r1, r3
 8000470:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000474:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd70      	pop	{r4, r5, r6, pc}
 8000482:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000486:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800048a:	bd70      	pop	{r4, r5, r6, pc}

0800048c <__aeabi_drsub>:
 800048c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e002      	b.n	8000498 <__adddf3>
 8000492:	bf00      	nop

08000494 <__aeabi_dsub>:
 8000494:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000498 <__adddf3>:
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800049e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004a2:	ea94 0f05 	teq	r4, r5
 80004a6:	bf08      	it	eq
 80004a8:	ea90 0f02 	teqeq	r0, r2
 80004ac:	bf1f      	itttt	ne
 80004ae:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004b2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004b6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004ba:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004be:	f000 80e2 	beq.w	8000686 <__adddf3+0x1ee>
 80004c2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004c6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004ca:	bfb8      	it	lt
 80004cc:	426d      	neglt	r5, r5
 80004ce:	dd0c      	ble.n	80004ea <__adddf3+0x52>
 80004d0:	442c      	add	r4, r5
 80004d2:	ea80 0202 	eor.w	r2, r0, r2
 80004d6:	ea81 0303 	eor.w	r3, r1, r3
 80004da:	ea82 0000 	eor.w	r0, r2, r0
 80004de:	ea83 0101 	eor.w	r1, r3, r1
 80004e2:	ea80 0202 	eor.w	r2, r0, r2
 80004e6:	ea81 0303 	eor.w	r3, r1, r3
 80004ea:	2d36      	cmp	r5, #54	; 0x36
 80004ec:	bf88      	it	hi
 80004ee:	bd30      	pophi	{r4, r5, pc}
 80004f0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004f8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004fc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000500:	d002      	beq.n	8000508 <__adddf3+0x70>
 8000502:	4240      	negs	r0, r0
 8000504:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000508:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800050c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000510:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000514:	d002      	beq.n	800051c <__adddf3+0x84>
 8000516:	4252      	negs	r2, r2
 8000518:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800051c:	ea94 0f05 	teq	r4, r5
 8000520:	f000 80a7 	beq.w	8000672 <__adddf3+0x1da>
 8000524:	f1a4 0401 	sub.w	r4, r4, #1
 8000528:	f1d5 0e20 	rsbs	lr, r5, #32
 800052c:	db0d      	blt.n	800054a <__adddf3+0xb2>
 800052e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000532:	fa22 f205 	lsr.w	r2, r2, r5
 8000536:	1880      	adds	r0, r0, r2
 8000538:	f141 0100 	adc.w	r1, r1, #0
 800053c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000540:	1880      	adds	r0, r0, r2
 8000542:	fa43 f305 	asr.w	r3, r3, r5
 8000546:	4159      	adcs	r1, r3
 8000548:	e00e      	b.n	8000568 <__adddf3+0xd0>
 800054a:	f1a5 0520 	sub.w	r5, r5, #32
 800054e:	f10e 0e20 	add.w	lr, lr, #32
 8000552:	2a01      	cmp	r2, #1
 8000554:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000558:	bf28      	it	cs
 800055a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800055e:	fa43 f305 	asr.w	r3, r3, r5
 8000562:	18c0      	adds	r0, r0, r3
 8000564:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000568:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800056c:	d507      	bpl.n	800057e <__adddf3+0xe6>
 800056e:	f04f 0e00 	mov.w	lr, #0
 8000572:	f1dc 0c00 	rsbs	ip, ip, #0
 8000576:	eb7e 0000 	sbcs.w	r0, lr, r0
 800057a:	eb6e 0101 	sbc.w	r1, lr, r1
 800057e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000582:	d31b      	bcc.n	80005bc <__adddf3+0x124>
 8000584:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000588:	d30c      	bcc.n	80005a4 <__adddf3+0x10c>
 800058a:	0849      	lsrs	r1, r1, #1
 800058c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000590:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000594:	f104 0401 	add.w	r4, r4, #1
 8000598:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800059c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005a0:	f080 809a 	bcs.w	80006d8 <__adddf3+0x240>
 80005a4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005a8:	bf08      	it	eq
 80005aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005ae:	f150 0000 	adcs.w	r0, r0, #0
 80005b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005b6:	ea41 0105 	orr.w	r1, r1, r5
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005c0:	4140      	adcs	r0, r0
 80005c2:	eb41 0101 	adc.w	r1, r1, r1
 80005c6:	3c01      	subs	r4, #1
 80005c8:	bf28      	it	cs
 80005ca:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005ce:	d2e9      	bcs.n	80005a4 <__adddf3+0x10c>
 80005d0:	f091 0f00 	teq	r1, #0
 80005d4:	bf04      	itt	eq
 80005d6:	4601      	moveq	r1, r0
 80005d8:	2000      	moveq	r0, #0
 80005da:	fab1 f381 	clz	r3, r1
 80005de:	bf08      	it	eq
 80005e0:	3320      	addeq	r3, #32
 80005e2:	f1a3 030b 	sub.w	r3, r3, #11
 80005e6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ea:	da0c      	bge.n	8000606 <__adddf3+0x16e>
 80005ec:	320c      	adds	r2, #12
 80005ee:	dd08      	ble.n	8000602 <__adddf3+0x16a>
 80005f0:	f102 0c14 	add.w	ip, r2, #20
 80005f4:	f1c2 020c 	rsb	r2, r2, #12
 80005f8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005fc:	fa21 f102 	lsr.w	r1, r1, r2
 8000600:	e00c      	b.n	800061c <__adddf3+0x184>
 8000602:	f102 0214 	add.w	r2, r2, #20
 8000606:	bfd8      	it	le
 8000608:	f1c2 0c20 	rsble	ip, r2, #32
 800060c:	fa01 f102 	lsl.w	r1, r1, r2
 8000610:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000614:	bfdc      	itt	le
 8000616:	ea41 010c 	orrle.w	r1, r1, ip
 800061a:	4090      	lslle	r0, r2
 800061c:	1ae4      	subs	r4, r4, r3
 800061e:	bfa2      	ittt	ge
 8000620:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000624:	4329      	orrge	r1, r5
 8000626:	bd30      	popge	{r4, r5, pc}
 8000628:	ea6f 0404 	mvn.w	r4, r4
 800062c:	3c1f      	subs	r4, #31
 800062e:	da1c      	bge.n	800066a <__adddf3+0x1d2>
 8000630:	340c      	adds	r4, #12
 8000632:	dc0e      	bgt.n	8000652 <__adddf3+0x1ba>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0220 	rsb	r2, r4, #32
 800063c:	fa20 f004 	lsr.w	r0, r0, r4
 8000640:	fa01 f302 	lsl.w	r3, r1, r2
 8000644:	ea40 0003 	orr.w	r0, r0, r3
 8000648:	fa21 f304 	lsr.w	r3, r1, r4
 800064c:	ea45 0103 	orr.w	r1, r5, r3
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f1c4 040c 	rsb	r4, r4, #12
 8000656:	f1c4 0220 	rsb	r2, r4, #32
 800065a:	fa20 f002 	lsr.w	r0, r0, r2
 800065e:	fa01 f304 	lsl.w	r3, r1, r4
 8000662:	ea40 0003 	orr.w	r0, r0, r3
 8000666:	4629      	mov	r1, r5
 8000668:	bd30      	pop	{r4, r5, pc}
 800066a:	fa21 f004 	lsr.w	r0, r1, r4
 800066e:	4629      	mov	r1, r5
 8000670:	bd30      	pop	{r4, r5, pc}
 8000672:	f094 0f00 	teq	r4, #0
 8000676:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800067a:	bf06      	itte	eq
 800067c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000680:	3401      	addeq	r4, #1
 8000682:	3d01      	subne	r5, #1
 8000684:	e74e      	b.n	8000524 <__adddf3+0x8c>
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf18      	it	ne
 800068c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000690:	d029      	beq.n	80006e6 <__adddf3+0x24e>
 8000692:	ea94 0f05 	teq	r4, r5
 8000696:	bf08      	it	eq
 8000698:	ea90 0f02 	teqeq	r0, r2
 800069c:	d005      	beq.n	80006aa <__adddf3+0x212>
 800069e:	ea54 0c00 	orrs.w	ip, r4, r0
 80006a2:	bf04      	itt	eq
 80006a4:	4619      	moveq	r1, r3
 80006a6:	4610      	moveq	r0, r2
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	ea91 0f03 	teq	r1, r3
 80006ae:	bf1e      	ittt	ne
 80006b0:	2100      	movne	r1, #0
 80006b2:	2000      	movne	r0, #0
 80006b4:	bd30      	popne	{r4, r5, pc}
 80006b6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006ba:	d105      	bne.n	80006c8 <__adddf3+0x230>
 80006bc:	0040      	lsls	r0, r0, #1
 80006be:	4149      	adcs	r1, r1
 80006c0:	bf28      	it	cs
 80006c2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006c6:	bd30      	pop	{r4, r5, pc}
 80006c8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006cc:	bf3c      	itt	cc
 80006ce:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006d2:	bd30      	popcc	{r4, r5, pc}
 80006d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006d8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006dc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006e0:	f04f 0000 	mov.w	r0, #0
 80006e4:	bd30      	pop	{r4, r5, pc}
 80006e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ea:	bf1a      	itte	ne
 80006ec:	4619      	movne	r1, r3
 80006ee:	4610      	movne	r0, r2
 80006f0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006f4:	bf1c      	itt	ne
 80006f6:	460b      	movne	r3, r1
 80006f8:	4602      	movne	r2, r0
 80006fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006fe:	bf06      	itte	eq
 8000700:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000704:	ea91 0f03 	teqeq	r1, r3
 8000708:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800070c:	bd30      	pop	{r4, r5, pc}
 800070e:	bf00      	nop

08000710 <__aeabi_ui2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000724:	f04f 0500 	mov.w	r5, #0
 8000728:	f04f 0100 	mov.w	r1, #0
 800072c:	e750      	b.n	80005d0 <__adddf3+0x138>
 800072e:	bf00      	nop

08000730 <__aeabi_i2d>:
 8000730:	f090 0f00 	teq	r0, #0
 8000734:	bf04      	itt	eq
 8000736:	2100      	moveq	r1, #0
 8000738:	4770      	bxeq	lr
 800073a:	b530      	push	{r4, r5, lr}
 800073c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000740:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000744:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000748:	bf48      	it	mi
 800074a:	4240      	negmi	r0, r0
 800074c:	f04f 0100 	mov.w	r1, #0
 8000750:	e73e      	b.n	80005d0 <__adddf3+0x138>
 8000752:	bf00      	nop

08000754 <__aeabi_f2d>:
 8000754:	0042      	lsls	r2, r0, #1
 8000756:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800075a:	ea4f 0131 	mov.w	r1, r1, rrx
 800075e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000762:	bf1f      	itttt	ne
 8000764:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000768:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800076c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000770:	4770      	bxne	lr
 8000772:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000776:	bf08      	it	eq
 8000778:	4770      	bxeq	lr
 800077a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800077e:	bf04      	itt	eq
 8000780:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000784:	4770      	bxeq	lr
 8000786:	b530      	push	{r4, r5, lr}
 8000788:	f44f 7460 	mov.w	r4, #896	; 0x380
 800078c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000790:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000794:	e71c      	b.n	80005d0 <__adddf3+0x138>
 8000796:	bf00      	nop

08000798 <__aeabi_ul2d>:
 8000798:	ea50 0201 	orrs.w	r2, r0, r1
 800079c:	bf08      	it	eq
 800079e:	4770      	bxeq	lr
 80007a0:	b530      	push	{r4, r5, lr}
 80007a2:	f04f 0500 	mov.w	r5, #0
 80007a6:	e00a      	b.n	80007be <__aeabi_l2d+0x16>

080007a8 <__aeabi_l2d>:
 80007a8:	ea50 0201 	orrs.w	r2, r0, r1
 80007ac:	bf08      	it	eq
 80007ae:	4770      	bxeq	lr
 80007b0:	b530      	push	{r4, r5, lr}
 80007b2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007b6:	d502      	bpl.n	80007be <__aeabi_l2d+0x16>
 80007b8:	4240      	negs	r0, r0
 80007ba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007be:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007c2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007c6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007ca:	f43f aed8 	beq.w	800057e <__adddf3+0xe6>
 80007ce:	f04f 0203 	mov.w	r2, #3
 80007d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007d6:	bf18      	it	ne
 80007d8:	3203      	addne	r2, #3
 80007da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007de:	bf18      	it	ne
 80007e0:	3203      	addne	r2, #3
 80007e2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007e6:	f1c2 0320 	rsb	r3, r2, #32
 80007ea:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ee:	fa20 f002 	lsr.w	r0, r0, r2
 80007f2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007f6:	ea40 000e 	orr.w	r0, r0, lr
 80007fa:	fa21 f102 	lsr.w	r1, r1, r2
 80007fe:	4414      	add	r4, r2
 8000800:	e6bd      	b.n	800057e <__adddf3+0xe6>
 8000802:	bf00      	nop

08000804 <__aeabi_d2uiz>:
 8000804:	004a      	lsls	r2, r1, #1
 8000806:	d211      	bcs.n	800082c <__aeabi_d2uiz+0x28>
 8000808:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800080c:	d211      	bcs.n	8000832 <__aeabi_d2uiz+0x2e>
 800080e:	d50d      	bpl.n	800082c <__aeabi_d2uiz+0x28>
 8000810:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000814:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000818:	d40e      	bmi.n	8000838 <__aeabi_d2uiz+0x34>
 800081a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800081e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000822:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000826:	fa23 f002 	lsr.w	r0, r3, r2
 800082a:	4770      	bx	lr
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	4770      	bx	lr
 8000832:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000836:	d102      	bne.n	800083e <__aeabi_d2uiz+0x3a>
 8000838:	f04f 30ff 	mov.w	r0, #4294967295
 800083c:	4770      	bx	lr
 800083e:	f04f 0000 	mov.w	r0, #0
 8000842:	4770      	bx	lr

08000844 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b088      	sub	sp, #32
 8000848:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084a:	f107 0310 	add.w	r3, r7, #16
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
 8000856:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000858:	4b3c      	ldr	r3, [pc, #240]	; (800094c <MX_GPIO_Init+0x108>)
 800085a:	699b      	ldr	r3, [r3, #24]
 800085c:	4a3b      	ldr	r2, [pc, #236]	; (800094c <MX_GPIO_Init+0x108>)
 800085e:	f043 0320 	orr.w	r3, r3, #32
 8000862:	6193      	str	r3, [r2, #24]
 8000864:	4b39      	ldr	r3, [pc, #228]	; (800094c <MX_GPIO_Init+0x108>)
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	f003 0320 	and.w	r3, r3, #32
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000870:	4b36      	ldr	r3, [pc, #216]	; (800094c <MX_GPIO_Init+0x108>)
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	4a35      	ldr	r2, [pc, #212]	; (800094c <MX_GPIO_Init+0x108>)
 8000876:	f043 0310 	orr.w	r3, r3, #16
 800087a:	6193      	str	r3, [r2, #24]
 800087c:	4b33      	ldr	r3, [pc, #204]	; (800094c <MX_GPIO_Init+0x108>)
 800087e:	699b      	ldr	r3, [r3, #24]
 8000880:	f003 0310 	and.w	r3, r3, #16
 8000884:	60bb      	str	r3, [r7, #8]
 8000886:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000888:	4b30      	ldr	r3, [pc, #192]	; (800094c <MX_GPIO_Init+0x108>)
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	4a2f      	ldr	r2, [pc, #188]	; (800094c <MX_GPIO_Init+0x108>)
 800088e:	f043 0304 	orr.w	r3, r3, #4
 8000892:	6193      	str	r3, [r2, #24]
 8000894:	4b2d      	ldr	r3, [pc, #180]	; (800094c <MX_GPIO_Init+0x108>)
 8000896:	699b      	ldr	r3, [r3, #24]
 8000898:	f003 0304 	and.w	r3, r3, #4
 800089c:	607b      	str	r3, [r7, #4]
 800089e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 80008a0:	2200      	movs	r2, #0
 80008a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008a6:	482a      	ldr	r0, [pc, #168]	; (8000950 <MX_GPIO_Init+0x10c>)
 80008a8:	f006 fcad 	bl	8007206 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80008ac:	2200      	movs	r2, #0
 80008ae:	2104      	movs	r1, #4
 80008b0:	4828      	ldr	r0, [pc, #160]	; (8000954 <MX_GPIO_Init+0x110>)
 80008b2:	f006 fca8 	bl	8007206 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY0_Pin;
 80008b6:	2320      	movs	r3, #32
 80008b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ba:	4b27      	ldr	r3, [pc, #156]	; (8000958 <MX_GPIO_Init+0x114>)
 80008bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008be:	2301      	movs	r3, #1
 80008c0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY0_GPIO_Port, &GPIO_InitStruct);
 80008c2:	f107 0310 	add.w	r3, r7, #16
 80008c6:	4619      	mov	r1, r3
 80008c8:	4824      	ldr	r0, [pc, #144]	; (800095c <MX_GPIO_Init+0x118>)
 80008ca:	f006 faf1 	bl	8006eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 80008ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d4:	2301      	movs	r3, #1
 80008d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008dc:	2302      	movs	r3, #2
 80008de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 80008e0:	f107 0310 	add.w	r3, r7, #16
 80008e4:	4619      	mov	r1, r3
 80008e6:	481a      	ldr	r0, [pc, #104]	; (8000950 <MX_GPIO_Init+0x10c>)
 80008e8:	f006 fae2 	bl	8006eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 80008ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008f2:	4b19      	ldr	r3, [pc, #100]	; (8000958 <MX_GPIO_Init+0x114>)
 80008f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008f6:	2301      	movs	r3, #1
 80008f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 80008fa:	f107 0310 	add.w	r3, r7, #16
 80008fe:	4619      	mov	r1, r3
 8000900:	4813      	ldr	r0, [pc, #76]	; (8000950 <MX_GPIO_Init+0x10c>)
 8000902:	f006 fad5 	bl	8006eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000906:	2304      	movs	r3, #4
 8000908:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090a:	2301      	movs	r3, #1
 800090c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000912:	2302      	movs	r3, #2
 8000914:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000916:	f107 0310 	add.w	r3, r7, #16
 800091a:	4619      	mov	r1, r3
 800091c:	480d      	ldr	r0, [pc, #52]	; (8000954 <MX_GPIO_Init+0x110>)
 800091e:	f006 fac7 	bl	8006eb0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8000922:	2200      	movs	r2, #0
 8000924:	2101      	movs	r1, #1
 8000926:	2017      	movs	r0, #23
 8000928:	f006 f949 	bl	8006bbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800092c:	2017      	movs	r0, #23
 800092e:	f006 f962 	bl	8006bf6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8000932:	2200      	movs	r2, #0
 8000934:	2101      	movs	r1, #1
 8000936:	2028      	movs	r0, #40	; 0x28
 8000938:	f006 f941 	bl	8006bbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800093c:	2028      	movs	r0, #40	; 0x28
 800093e:	f006 f95a 	bl	8006bf6 <HAL_NVIC_EnableIRQ>

}
 8000942:	bf00      	nop
 8000944:	3720      	adds	r7, #32
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40021000 	.word	0x40021000
 8000950:	40010800 	.word	0x40010800
 8000954:	40011400 	.word	0x40011400
 8000958:	10110000 	.word	0x10110000
 800095c:	40011000 	.word	0x40011000

08000960 <LCD_WR_REG>:
//默认为竖屏
_lcd_dev lcddev;

//写寄存器函数
//data:寄存器值
void LCD_WR_REG(uint16_t data) {
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	4603      	mov	r3, r0
 8000968:	80fb      	strh	r3, [r7, #6]
	LCD_RS_CLR;  //写地址
 800096a:	4b0d      	ldr	r3, [pc, #52]	; (80009a0 <LCD_WR_REG+0x40>)
 800096c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000970:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 8000972:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <LCD_WR_REG+0x40>)
 8000974:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000978:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 800097a:	4a0a      	ldr	r2, [pc, #40]	; (80009a4 <LCD_WR_REG+0x44>)
 800097c:	88fb      	ldrh	r3, [r7, #6]
 800097e:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 8000980:	4b07      	ldr	r3, [pc, #28]	; (80009a0 <LCD_WR_REG+0x40>)
 8000982:	2280      	movs	r2, #128	; 0x80
 8000984:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8000986:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <LCD_WR_REG+0x40>)
 8000988:	2280      	movs	r2, #128	; 0x80
 800098a:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 800098c:	4b04      	ldr	r3, [pc, #16]	; (80009a0 <LCD_WR_REG+0x40>)
 800098e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000992:	611a      	str	r2, [r3, #16]
}
 8000994:	bf00      	nop
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	bc80      	pop	{r7}
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	40011000 	.word	0x40011000
 80009a4:	40010c00 	.word	0x40010c00

080009a8 <LCD_WR_DATAX>:
//写数据函数
//可以替代LCD_WR_DATAX宏,拿时间换空间.
//data:寄存器值
void LCD_WR_DATAX(uint16_t data) {
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	80fb      	strh	r3, [r7, #6]
	LCD_RS_SET;
 80009b2:	4b0d      	ldr	r3, [pc, #52]	; (80009e8 <LCD_WR_DATAX+0x40>)
 80009b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009b8:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 80009ba:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <LCD_WR_DATAX+0x40>)
 80009bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009c0:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 80009c2:	4a0a      	ldr	r2, [pc, #40]	; (80009ec <LCD_WR_DATAX+0x44>)
 80009c4:	88fb      	ldrh	r3, [r7, #6]
 80009c6:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 80009c8:	4b07      	ldr	r3, [pc, #28]	; (80009e8 <LCD_WR_DATAX+0x40>)
 80009ca:	2280      	movs	r2, #128	; 0x80
 80009cc:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 80009ce:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <LCD_WR_DATAX+0x40>)
 80009d0:	2280      	movs	r2, #128	; 0x80
 80009d2:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 80009d4:	4b04      	ldr	r3, [pc, #16]	; (80009e8 <LCD_WR_DATAX+0x40>)
 80009d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009da:	611a      	str	r2, [r3, #16]
}
 80009dc:	bf00      	nop
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bc80      	pop	{r7}
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	40011000 	.word	0x40011000
 80009ec:	40010c00 	.word	0x40010c00

080009f0 <LCD_RD_DATA>:
//读LCD数据
//返回值:读到的值
uint16_t LCD_RD_DATA(void) {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
	uint16_t t;
	GPIOB->CRL = 0X88888888; //PB0-7  上拉输入
 80009f6:	4b1d      	ldr	r3, [pc, #116]	; (8000a6c <LCD_RD_DATA+0x7c>)
 80009f8:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 80009fc:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X88888888; //PB8-15 上拉输入
 80009fe:	4b1b      	ldr	r3, [pc, #108]	; (8000a6c <LCD_RD_DATA+0x7c>)
 8000a00:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8000a04:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0X0000;     //全部输出0
 8000a06:	4b19      	ldr	r3, [pc, #100]	; (8000a6c <LCD_RD_DATA+0x7c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	60da      	str	r2, [r3, #12]

	LCD_RS_SET;
 8000a0c:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <LCD_RD_DATA+0x80>)
 8000a0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a12:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 8000a14:	4b16      	ldr	r3, [pc, #88]	; (8000a70 <LCD_RD_DATA+0x80>)
 8000a16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a1a:	615a      	str	r2, [r3, #20]
	//读取数据(读寄存器时,并不需要读2次)
	LCD_RD_CLR;
 8000a1c:	4b14      	ldr	r3, [pc, #80]	; (8000a70 <LCD_RD_DATA+0x80>)
 8000a1e:	2240      	movs	r2, #64	; 0x40
 8000a20:	615a      	str	r2, [r3, #20]
	if (lcddev.id == 0X8989)
 8000a22:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <LCD_RD_DATA+0x84>)
 8000a24:	889b      	ldrh	r3, [r3, #4]
 8000a26:	f648 1289 	movw	r2, #35209	; 0x8989
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d102      	bne.n	8000a34 <LCD_RD_DATA+0x44>
		HAL_Delay(1); // delay_us(2);//FOR 8989,延时2us
 8000a2e:	2001      	movs	r0, #1
 8000a30:	f005 ffca 	bl	80069c8 <HAL_Delay>
	t = DATAIN
 8000a34:	4b0d      	ldr	r3, [pc, #52]	; (8000a6c <LCD_RD_DATA+0x7c>)
 8000a36:	689b      	ldr	r3, [r3, #8]
 8000a38:	80fb      	strh	r3, [r7, #6]
	;
	LCD_RD_SET;
 8000a3a:	4b0d      	ldr	r3, [pc, #52]	; (8000a70 <LCD_RD_DATA+0x80>)
 8000a3c:	2240      	movs	r2, #64	; 0x40
 8000a3e:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8000a40:	4b0b      	ldr	r3, [pc, #44]	; (8000a70 <LCD_RD_DATA+0x80>)
 8000a42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a46:	611a      	str	r2, [r3, #16]

	GPIOB->CRL = 0X33333333; //PB0-7  上拉输出
 8000a48:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <LCD_RD_DATA+0x7c>)
 8000a4a:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000a4e:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X33333333; //PB8-15 上拉输出
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <LCD_RD_DATA+0x7c>)
 8000a52:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000a56:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0XFFFF;    //全部输出高
 8000a58:	4b04      	ldr	r3, [pc, #16]	; (8000a6c <LCD_RD_DATA+0x7c>)
 8000a5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a5e:	60da      	str	r2, [r3, #12]
	return t;
 8000a60:	88fb      	ldrh	r3, [r7, #6]
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40010c00 	.word	0x40010c00
 8000a70:	40011000 	.word	0x40011000
 8000a74:	200000e8 	.word	0x200000e8

08000a78 <LCD_WriteReg>:
//写寄存器
//LCD_Reg:寄存器编号
//LCD_RegValue:要写入的值
void LCD_WriteReg(uint16_t LCD_Reg, uint16_t LCD_RegValue) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	460a      	mov	r2, r1
 8000a82:	80fb      	strh	r3, [r7, #6]
 8000a84:	4613      	mov	r3, r2
 8000a86:	80bb      	strh	r3, [r7, #4]
	LCD_WR_REG(LCD_Reg);
 8000a88:	88fb      	ldrh	r3, [r7, #6]
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f7ff ff68 	bl	8000960 <LCD_WR_REG>
	LCD_WR_DATA(LCD_RegValue);
 8000a90:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <LCD_WriteReg+0x4c>)
 8000a92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a96:	611a      	str	r2, [r3, #16]
 8000a98:	4b0a      	ldr	r3, [pc, #40]	; (8000ac4 <LCD_WriteReg+0x4c>)
 8000a9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a9e:	615a      	str	r2, [r3, #20]
 8000aa0:	4a09      	ldr	r2, [pc, #36]	; (8000ac8 <LCD_WriteReg+0x50>)
 8000aa2:	88bb      	ldrh	r3, [r7, #4]
 8000aa4:	60d3      	str	r3, [r2, #12]
 8000aa6:	4b07      	ldr	r3, [pc, #28]	; (8000ac4 <LCD_WriteReg+0x4c>)
 8000aa8:	2280      	movs	r2, #128	; 0x80
 8000aaa:	615a      	str	r2, [r3, #20]
 8000aac:	4b05      	ldr	r3, [pc, #20]	; (8000ac4 <LCD_WriteReg+0x4c>)
 8000aae:	2280      	movs	r2, #128	; 0x80
 8000ab0:	611a      	str	r2, [r3, #16]
 8000ab2:	4b04      	ldr	r3, [pc, #16]	; (8000ac4 <LCD_WriteReg+0x4c>)
 8000ab4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ab8:	611a      	str	r2, [r3, #16]
}
 8000aba:	bf00      	nop
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40011000 	.word	0x40011000
 8000ac8:	40010c00 	.word	0x40010c00

08000acc <LCD_ReadReg>:
//读寄存器
//LCD_Reg:寄存器编号
//返回值:读到的值
uint16_t LCD_ReadReg(uint16_t LCD_Reg) {
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	80fb      	strh	r3, [r7, #6]
	LCD_WR_REG(LCD_Reg);  //写入要读的寄存器号
 8000ad6:	88fb      	ldrh	r3, [r7, #6]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff ff41 	bl	8000960 <LCD_WR_REG>
	return LCD_RD_DATA();
 8000ade:	f7ff ff87 	bl	80009f0 <LCD_RD_DATA>
 8000ae2:	4603      	mov	r3, r0
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}

08000aec <LCD_WriteRAM_Prepare>:
//开始写GRAM
void LCD_WriteRAM_Prepare(void) {
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
	LCD_WR_REG(lcddev.wramcmd);
 8000af0:	4b03      	ldr	r3, [pc, #12]	; (8000b00 <LCD_WriteRAM_Prepare+0x14>)
 8000af2:	891b      	ldrh	r3, [r3, #8]
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff ff33 	bl	8000960 <LCD_WR_REG>
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	200000e8 	.word	0x200000e8

08000b04 <LCD_SetCursor>:
		LCD_WriteReg(0X07, 0x0);	//关闭显示
}
//设置光标位置
//Xpos:横坐标
//Ypos:纵坐标
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	460a      	mov	r2, r1
 8000b0e:	80fb      	strh	r3, [r7, #6]
 8000b10:	4613      	mov	r3, r2
 8000b12:	80bb      	strh	r3, [r7, #4]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8000b14:	4b73      	ldr	r3, [pc, #460]	; (8000ce4 <LCD_SetCursor+0x1e0>)
 8000b16:	889b      	ldrh	r3, [r3, #4]
 8000b18:	f249 3241 	movw	r2, #37697	; 0x9341
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d005      	beq.n	8000b2c <LCD_SetCursor+0x28>
 8000b20:	4b70      	ldr	r3, [pc, #448]	; (8000ce4 <LCD_SetCursor+0x1e0>)
 8000b22:	889b      	ldrh	r3, [r3, #4]
 8000b24:	f245 3210 	movw	r2, #21264	; 0x5310
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d164      	bne.n	8000bf6 <LCD_SetCursor+0xf2>
		LCD_WR_REG(lcddev.setxcmd);
 8000b2c:	4b6d      	ldr	r3, [pc, #436]	; (8000ce4 <LCD_SetCursor+0x1e0>)
 8000b2e:	895b      	ldrh	r3, [r3, #10]
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff ff15 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000b36:	4b6c      	ldr	r3, [pc, #432]	; (8000ce8 <LCD_SetCursor+0x1e4>)
 8000b38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b3c:	611a      	str	r2, [r3, #16]
 8000b3e:	4b6a      	ldr	r3, [pc, #424]	; (8000ce8 <LCD_SetCursor+0x1e4>)
 8000b40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b44:	615a      	str	r2, [r3, #20]
 8000b46:	88fb      	ldrh	r3, [r7, #6]
 8000b48:	0a1b      	lsrs	r3, r3, #8
 8000b4a:	b29a      	uxth	r2, r3
 8000b4c:	4b67      	ldr	r3, [pc, #412]	; (8000cec <LCD_SetCursor+0x1e8>)
 8000b4e:	60da      	str	r2, [r3, #12]
 8000b50:	4b65      	ldr	r3, [pc, #404]	; (8000ce8 <LCD_SetCursor+0x1e4>)
 8000b52:	2280      	movs	r2, #128	; 0x80
 8000b54:	615a      	str	r2, [r3, #20]
 8000b56:	4b64      	ldr	r3, [pc, #400]	; (8000ce8 <LCD_SetCursor+0x1e4>)
 8000b58:	2280      	movs	r2, #128	; 0x80
 8000b5a:	611a      	str	r2, [r3, #16]
 8000b5c:	4b62      	ldr	r3, [pc, #392]	; (8000ce8 <LCD_SetCursor+0x1e4>)
 8000b5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b62:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8000b64:	4b60      	ldr	r3, [pc, #384]	; (8000ce8 <LCD_SetCursor+0x1e4>)
 8000b66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b6a:	611a      	str	r2, [r3, #16]
 8000b6c:	4b5e      	ldr	r3, [pc, #376]	; (8000ce8 <LCD_SetCursor+0x1e4>)
 8000b6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b72:	615a      	str	r2, [r3, #20]
 8000b74:	88fb      	ldrh	r3, [r7, #6]
 8000b76:	4a5d      	ldr	r2, [pc, #372]	; (8000cec <LCD_SetCursor+0x1e8>)
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	60d3      	str	r3, [r2, #12]
 8000b7c:	4b5a      	ldr	r3, [pc, #360]	; (8000ce8 <LCD_SetCursor+0x1e4>)
 8000b7e:	2280      	movs	r2, #128	; 0x80
 8000b80:	615a      	str	r2, [r3, #20]
 8000b82:	4b59      	ldr	r3, [pc, #356]	; (8000ce8 <LCD_SetCursor+0x1e4>)
 8000b84:	2280      	movs	r2, #128	; 0x80
 8000b86:	611a      	str	r2, [r3, #16]
 8000b88:	4b57      	ldr	r3, [pc, #348]	; (8000ce8 <LCD_SetCursor+0x1e4>)
 8000b8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b8e:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000b90:	4b54      	ldr	r3, [pc, #336]	; (8000ce4 <LCD_SetCursor+0x1e0>)
 8000b92:	899b      	ldrh	r3, [r3, #12]
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff fee3 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000b9a:	4b53      	ldr	r3, [pc, #332]	; (8000ce8 <LCD_SetCursor+0x1e4>)
 8000b9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ba0:	611a      	str	r2, [r3, #16]
 8000ba2:	4b51      	ldr	r3, [pc, #324]	; (8000ce8 <LCD_SetCursor+0x1e4>)
 8000ba4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ba8:	615a      	str	r2, [r3, #20]
 8000baa:	88bb      	ldrh	r3, [r7, #4]
 8000bac:	0a1b      	lsrs	r3, r3, #8
 8000bae:	b29a      	uxth	r2, r3
 8000bb0:	4b4e      	ldr	r3, [pc, #312]	; (8000cec <LCD_SetCursor+0x1e8>)
 8000bb2:	60da      	str	r2, [r3, #12]
 8000bb4:	4b4c      	ldr	r3, [pc, #304]	; (8000ce8 <LCD_SetCursor+0x1e4>)
 8000bb6:	2280      	movs	r2, #128	; 0x80
 8000bb8:	615a      	str	r2, [r3, #20]
 8000bba:	4b4b      	ldr	r3, [pc, #300]	; (8000ce8 <LCD_SetCursor+0x1e4>)
 8000bbc:	2280      	movs	r2, #128	; 0x80
 8000bbe:	611a      	str	r2, [r3, #16]
 8000bc0:	4b49      	ldr	r3, [pc, #292]	; (8000ce8 <LCD_SetCursor+0x1e4>)
 8000bc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bc6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000bc8:	4b47      	ldr	r3, [pc, #284]	; (8000ce8 <LCD_SetCursor+0x1e4>)
 8000bca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bce:	611a      	str	r2, [r3, #16]
 8000bd0:	4b45      	ldr	r3, [pc, #276]	; (8000ce8 <LCD_SetCursor+0x1e4>)
 8000bd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bd6:	615a      	str	r2, [r3, #20]
 8000bd8:	88bb      	ldrh	r3, [r7, #4]
 8000bda:	4a44      	ldr	r2, [pc, #272]	; (8000cec <LCD_SetCursor+0x1e8>)
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	60d3      	str	r3, [r2, #12]
 8000be0:	4b41      	ldr	r3, [pc, #260]	; (8000ce8 <LCD_SetCursor+0x1e4>)
 8000be2:	2280      	movs	r2, #128	; 0x80
 8000be4:	615a      	str	r2, [r3, #20]
 8000be6:	4b40      	ldr	r3, [pc, #256]	; (8000ce8 <LCD_SetCursor+0x1e4>)
 8000be8:	2280      	movs	r2, #128	; 0x80
 8000bea:	611a      	str	r2, [r3, #16]
 8000bec:	4b3e      	ldr	r3, [pc, #248]	; (8000ce8 <LCD_SetCursor+0x1e4>)
 8000bee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bf2:	611a      	str	r2, [r3, #16]
		if (lcddev.dir == 1)
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
		LCD_WriteReg(lcddev.setxcmd, Xpos);
		LCD_WriteReg(lcddev.setycmd, Ypos);
	}
}
 8000bf4:	e248      	b.n	8001088 <LCD_SetCursor+0x584>
	} else if (lcddev.id == 0X6804) {
 8000bf6:	4b3b      	ldr	r3, [pc, #236]	; (8000ce4 <LCD_SetCursor+0x1e0>)
 8000bf8:	889b      	ldrh	r3, [r3, #4]
 8000bfa:	f646 0204 	movw	r2, #26628	; 0x6804
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d176      	bne.n	8000cf0 <LCD_SetCursor+0x1ec>
		if (lcddev.dir == 1)
 8000c02:	4b38      	ldr	r3, [pc, #224]	; (8000ce4 <LCD_SetCursor+0x1e0>)
 8000c04:	799b      	ldrb	r3, [r3, #6]
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d106      	bne.n	8000c18 <LCD_SetCursor+0x114>
			Xpos = lcddev.width - 1 - Xpos;	//横屏时处理
 8000c0a:	4b36      	ldr	r3, [pc, #216]	; (8000ce4 <LCD_SetCursor+0x1e0>)
 8000c0c:	881a      	ldrh	r2, [r3, #0]
 8000c0e:	88fb      	ldrh	r3, [r7, #6]
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	3b01      	subs	r3, #1
 8000c16:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8000c18:	4b32      	ldr	r3, [pc, #200]	; (8000ce4 <LCD_SetCursor+0x1e0>)
 8000c1a:	895b      	ldrh	r3, [r3, #10]
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff fe9f 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000c22:	4b31      	ldr	r3, [pc, #196]	; (8000ce8 <LCD_SetCursor+0x1e4>)
 8000c24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c28:	611a      	str	r2, [r3, #16]
 8000c2a:	4b2f      	ldr	r3, [pc, #188]	; (8000ce8 <LCD_SetCursor+0x1e4>)
 8000c2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c30:	615a      	str	r2, [r3, #20]
 8000c32:	88fb      	ldrh	r3, [r7, #6]
 8000c34:	0a1b      	lsrs	r3, r3, #8
 8000c36:	b29a      	uxth	r2, r3
 8000c38:	4b2c      	ldr	r3, [pc, #176]	; (8000cec <LCD_SetCursor+0x1e8>)
 8000c3a:	60da      	str	r2, [r3, #12]
 8000c3c:	4b2a      	ldr	r3, [pc, #168]	; (8000ce8 <LCD_SetCursor+0x1e4>)
 8000c3e:	2280      	movs	r2, #128	; 0x80
 8000c40:	615a      	str	r2, [r3, #20]
 8000c42:	4b29      	ldr	r3, [pc, #164]	; (8000ce8 <LCD_SetCursor+0x1e4>)
 8000c44:	2280      	movs	r2, #128	; 0x80
 8000c46:	611a      	str	r2, [r3, #16]
 8000c48:	4b27      	ldr	r3, [pc, #156]	; (8000ce8 <LCD_SetCursor+0x1e4>)
 8000c4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c4e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8000c50:	4b25      	ldr	r3, [pc, #148]	; (8000ce8 <LCD_SetCursor+0x1e4>)
 8000c52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c56:	611a      	str	r2, [r3, #16]
 8000c58:	4b23      	ldr	r3, [pc, #140]	; (8000ce8 <LCD_SetCursor+0x1e4>)
 8000c5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c5e:	615a      	str	r2, [r3, #20]
 8000c60:	88fb      	ldrh	r3, [r7, #6]
 8000c62:	4a22      	ldr	r2, [pc, #136]	; (8000cec <LCD_SetCursor+0x1e8>)
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	60d3      	str	r3, [r2, #12]
 8000c68:	4b1f      	ldr	r3, [pc, #124]	; (8000ce8 <LCD_SetCursor+0x1e4>)
 8000c6a:	2280      	movs	r2, #128	; 0x80
 8000c6c:	615a      	str	r2, [r3, #20]
 8000c6e:	4b1e      	ldr	r3, [pc, #120]	; (8000ce8 <LCD_SetCursor+0x1e4>)
 8000c70:	2280      	movs	r2, #128	; 0x80
 8000c72:	611a      	str	r2, [r3, #16]
 8000c74:	4b1c      	ldr	r3, [pc, #112]	; (8000ce8 <LCD_SetCursor+0x1e4>)
 8000c76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c7a:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000c7c:	4b19      	ldr	r3, [pc, #100]	; (8000ce4 <LCD_SetCursor+0x1e0>)
 8000c7e:	899b      	ldrh	r3, [r3, #12]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff fe6d 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000c86:	4b18      	ldr	r3, [pc, #96]	; (8000ce8 <LCD_SetCursor+0x1e4>)
 8000c88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c8c:	611a      	str	r2, [r3, #16]
 8000c8e:	4b16      	ldr	r3, [pc, #88]	; (8000ce8 <LCD_SetCursor+0x1e4>)
 8000c90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c94:	615a      	str	r2, [r3, #20]
 8000c96:	88bb      	ldrh	r3, [r7, #4]
 8000c98:	0a1b      	lsrs	r3, r3, #8
 8000c9a:	b29a      	uxth	r2, r3
 8000c9c:	4b13      	ldr	r3, [pc, #76]	; (8000cec <LCD_SetCursor+0x1e8>)
 8000c9e:	60da      	str	r2, [r3, #12]
 8000ca0:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <LCD_SetCursor+0x1e4>)
 8000ca2:	2280      	movs	r2, #128	; 0x80
 8000ca4:	615a      	str	r2, [r3, #20]
 8000ca6:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <LCD_SetCursor+0x1e4>)
 8000ca8:	2280      	movs	r2, #128	; 0x80
 8000caa:	611a      	str	r2, [r3, #16]
 8000cac:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <LCD_SetCursor+0x1e4>)
 8000cae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cb2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <LCD_SetCursor+0x1e4>)
 8000cb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cba:	611a      	str	r2, [r3, #16]
 8000cbc:	4b0a      	ldr	r3, [pc, #40]	; (8000ce8 <LCD_SetCursor+0x1e4>)
 8000cbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cc2:	615a      	str	r2, [r3, #20]
 8000cc4:	88bb      	ldrh	r3, [r7, #4]
 8000cc6:	4a09      	ldr	r2, [pc, #36]	; (8000cec <LCD_SetCursor+0x1e8>)
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	60d3      	str	r3, [r2, #12]
 8000ccc:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <LCD_SetCursor+0x1e4>)
 8000cce:	2280      	movs	r2, #128	; 0x80
 8000cd0:	615a      	str	r2, [r3, #20]
 8000cd2:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <LCD_SetCursor+0x1e4>)
 8000cd4:	2280      	movs	r2, #128	; 0x80
 8000cd6:	611a      	str	r2, [r3, #16]
 8000cd8:	4b03      	ldr	r3, [pc, #12]	; (8000ce8 <LCD_SetCursor+0x1e4>)
 8000cda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cde:	611a      	str	r2, [r3, #16]
}
 8000ce0:	e1d2      	b.n	8001088 <LCD_SetCursor+0x584>
 8000ce2:	bf00      	nop
 8000ce4:	200000e8 	.word	0x200000e8
 8000ce8:	40011000 	.word	0x40011000
 8000cec:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 8000cf0:	4b99      	ldr	r3, [pc, #612]	; (8000f58 <LCD_SetCursor+0x454>)
 8000cf2:	889b      	ldrh	r3, [r3, #4]
 8000cf4:	f641 1263 	movw	r2, #6499	; 0x1963
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	f040 8133 	bne.w	8000f64 <LCD_SetCursor+0x460>
		if (lcddev.dir == 0)	//x坐标需要变换
 8000cfe:	4b96      	ldr	r3, [pc, #600]	; (8000f58 <LCD_SetCursor+0x454>)
 8000d00:	799b      	ldrb	r3, [r3, #6]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d163      	bne.n	8000dce <LCD_SetCursor+0x2ca>
			Xpos = lcddev.width - 1 - Xpos;
 8000d06:	4b94      	ldr	r3, [pc, #592]	; (8000f58 <LCD_SetCursor+0x454>)
 8000d08:	881a      	ldrh	r2, [r3, #0]
 8000d0a:	88fb      	ldrh	r3, [r7, #6]
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	b29b      	uxth	r3, r3
 8000d10:	3b01      	subs	r3, #1
 8000d12:	80fb      	strh	r3, [r7, #6]
			LCD_WR_REG(lcddev.setxcmd);
 8000d14:	4b90      	ldr	r3, [pc, #576]	; (8000f58 <LCD_SetCursor+0x454>)
 8000d16:	895b      	ldrh	r3, [r3, #10]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff fe21 	bl	8000960 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8000d1e:	4b8f      	ldr	r3, [pc, #572]	; (8000f5c <LCD_SetCursor+0x458>)
 8000d20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d24:	611a      	str	r2, [r3, #16]
 8000d26:	4b8d      	ldr	r3, [pc, #564]	; (8000f5c <LCD_SetCursor+0x458>)
 8000d28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d2c:	615a      	str	r2, [r3, #20]
 8000d2e:	4b8c      	ldr	r3, [pc, #560]	; (8000f60 <LCD_SetCursor+0x45c>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	60da      	str	r2, [r3, #12]
 8000d34:	4b89      	ldr	r3, [pc, #548]	; (8000f5c <LCD_SetCursor+0x458>)
 8000d36:	2280      	movs	r2, #128	; 0x80
 8000d38:	615a      	str	r2, [r3, #20]
 8000d3a:	4b88      	ldr	r3, [pc, #544]	; (8000f5c <LCD_SetCursor+0x458>)
 8000d3c:	2280      	movs	r2, #128	; 0x80
 8000d3e:	611a      	str	r2, [r3, #16]
 8000d40:	4b86      	ldr	r3, [pc, #536]	; (8000f5c <LCD_SetCursor+0x458>)
 8000d42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d46:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8000d48:	4b84      	ldr	r3, [pc, #528]	; (8000f5c <LCD_SetCursor+0x458>)
 8000d4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d4e:	611a      	str	r2, [r3, #16]
 8000d50:	4b82      	ldr	r3, [pc, #520]	; (8000f5c <LCD_SetCursor+0x458>)
 8000d52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d56:	615a      	str	r2, [r3, #20]
 8000d58:	4b81      	ldr	r3, [pc, #516]	; (8000f60 <LCD_SetCursor+0x45c>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	60da      	str	r2, [r3, #12]
 8000d5e:	4b7f      	ldr	r3, [pc, #508]	; (8000f5c <LCD_SetCursor+0x458>)
 8000d60:	2280      	movs	r2, #128	; 0x80
 8000d62:	615a      	str	r2, [r3, #20]
 8000d64:	4b7d      	ldr	r3, [pc, #500]	; (8000f5c <LCD_SetCursor+0x458>)
 8000d66:	2280      	movs	r2, #128	; 0x80
 8000d68:	611a      	str	r2, [r3, #16]
 8000d6a:	4b7c      	ldr	r3, [pc, #496]	; (8000f5c <LCD_SetCursor+0x458>)
 8000d6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d70:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos >> 8);
 8000d72:	4b7a      	ldr	r3, [pc, #488]	; (8000f5c <LCD_SetCursor+0x458>)
 8000d74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d78:	611a      	str	r2, [r3, #16]
 8000d7a:	4b78      	ldr	r3, [pc, #480]	; (8000f5c <LCD_SetCursor+0x458>)
 8000d7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d80:	615a      	str	r2, [r3, #20]
 8000d82:	88fb      	ldrh	r3, [r7, #6]
 8000d84:	0a1b      	lsrs	r3, r3, #8
 8000d86:	b29a      	uxth	r2, r3
 8000d88:	4b75      	ldr	r3, [pc, #468]	; (8000f60 <LCD_SetCursor+0x45c>)
 8000d8a:	60da      	str	r2, [r3, #12]
 8000d8c:	4b73      	ldr	r3, [pc, #460]	; (8000f5c <LCD_SetCursor+0x458>)
 8000d8e:	2280      	movs	r2, #128	; 0x80
 8000d90:	615a      	str	r2, [r3, #20]
 8000d92:	4b72      	ldr	r3, [pc, #456]	; (8000f5c <LCD_SetCursor+0x458>)
 8000d94:	2280      	movs	r2, #128	; 0x80
 8000d96:	611a      	str	r2, [r3, #16]
 8000d98:	4b70      	ldr	r3, [pc, #448]	; (8000f5c <LCD_SetCursor+0x458>)
 8000d9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d9e:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8000da0:	4b6e      	ldr	r3, [pc, #440]	; (8000f5c <LCD_SetCursor+0x458>)
 8000da2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000da6:	611a      	str	r2, [r3, #16]
 8000da8:	4b6c      	ldr	r3, [pc, #432]	; (8000f5c <LCD_SetCursor+0x458>)
 8000daa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dae:	615a      	str	r2, [r3, #20]
 8000db0:	88fb      	ldrh	r3, [r7, #6]
 8000db2:	4a6b      	ldr	r2, [pc, #428]	; (8000f60 <LCD_SetCursor+0x45c>)
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	60d3      	str	r3, [r2, #12]
 8000db8:	4b68      	ldr	r3, [pc, #416]	; (8000f5c <LCD_SetCursor+0x458>)
 8000dba:	2280      	movs	r2, #128	; 0x80
 8000dbc:	615a      	str	r2, [r3, #20]
 8000dbe:	4b67      	ldr	r3, [pc, #412]	; (8000f5c <LCD_SetCursor+0x458>)
 8000dc0:	2280      	movs	r2, #128	; 0x80
 8000dc2:	611a      	str	r2, [r3, #16]
 8000dc4:	4b65      	ldr	r3, [pc, #404]	; (8000f5c <LCD_SetCursor+0x458>)
 8000dc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dca:	611a      	str	r2, [r3, #16]
 8000dcc:	e061      	b.n	8000e92 <LCD_SetCursor+0x38e>
			LCD_WR_REG(lcddev.setxcmd);
 8000dce:	4b62      	ldr	r3, [pc, #392]	; (8000f58 <LCD_SetCursor+0x454>)
 8000dd0:	895b      	ldrh	r3, [r3, #10]
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff fdc4 	bl	8000960 <LCD_WR_REG>
			LCD_WR_DATA(Xpos >> 8);
 8000dd8:	4b60      	ldr	r3, [pc, #384]	; (8000f5c <LCD_SetCursor+0x458>)
 8000dda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dde:	611a      	str	r2, [r3, #16]
 8000de0:	4b5e      	ldr	r3, [pc, #376]	; (8000f5c <LCD_SetCursor+0x458>)
 8000de2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000de6:	615a      	str	r2, [r3, #20]
 8000de8:	88fb      	ldrh	r3, [r7, #6]
 8000dea:	0a1b      	lsrs	r3, r3, #8
 8000dec:	b29a      	uxth	r2, r3
 8000dee:	4b5c      	ldr	r3, [pc, #368]	; (8000f60 <LCD_SetCursor+0x45c>)
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	4b5a      	ldr	r3, [pc, #360]	; (8000f5c <LCD_SetCursor+0x458>)
 8000df4:	2280      	movs	r2, #128	; 0x80
 8000df6:	615a      	str	r2, [r3, #20]
 8000df8:	4b58      	ldr	r3, [pc, #352]	; (8000f5c <LCD_SetCursor+0x458>)
 8000dfa:	2280      	movs	r2, #128	; 0x80
 8000dfc:	611a      	str	r2, [r3, #16]
 8000dfe:	4b57      	ldr	r3, [pc, #348]	; (8000f5c <LCD_SetCursor+0x458>)
 8000e00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e04:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8000e06:	4b55      	ldr	r3, [pc, #340]	; (8000f5c <LCD_SetCursor+0x458>)
 8000e08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e0c:	611a      	str	r2, [r3, #16]
 8000e0e:	4b53      	ldr	r3, [pc, #332]	; (8000f5c <LCD_SetCursor+0x458>)
 8000e10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e14:	615a      	str	r2, [r3, #20]
 8000e16:	88fb      	ldrh	r3, [r7, #6]
 8000e18:	4a51      	ldr	r2, [pc, #324]	; (8000f60 <LCD_SetCursor+0x45c>)
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	60d3      	str	r3, [r2, #12]
 8000e1e:	4b4f      	ldr	r3, [pc, #316]	; (8000f5c <LCD_SetCursor+0x458>)
 8000e20:	2280      	movs	r2, #128	; 0x80
 8000e22:	615a      	str	r2, [r3, #20]
 8000e24:	4b4d      	ldr	r3, [pc, #308]	; (8000f5c <LCD_SetCursor+0x458>)
 8000e26:	2280      	movs	r2, #128	; 0x80
 8000e28:	611a      	str	r2, [r3, #16]
 8000e2a:	4b4c      	ldr	r3, [pc, #304]	; (8000f5c <LCD_SetCursor+0x458>)
 8000e2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e30:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 8000e32:	4b4a      	ldr	r3, [pc, #296]	; (8000f5c <LCD_SetCursor+0x458>)
 8000e34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e38:	611a      	str	r2, [r3, #16]
 8000e3a:	4b48      	ldr	r3, [pc, #288]	; (8000f5c <LCD_SetCursor+0x458>)
 8000e3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e40:	615a      	str	r2, [r3, #20]
 8000e42:	4b45      	ldr	r3, [pc, #276]	; (8000f58 <LCD_SetCursor+0x454>)
 8000e44:	881b      	ldrh	r3, [r3, #0]
 8000e46:	3b01      	subs	r3, #1
 8000e48:	121a      	asrs	r2, r3, #8
 8000e4a:	4b45      	ldr	r3, [pc, #276]	; (8000f60 <LCD_SetCursor+0x45c>)
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	4b43      	ldr	r3, [pc, #268]	; (8000f5c <LCD_SetCursor+0x458>)
 8000e50:	2280      	movs	r2, #128	; 0x80
 8000e52:	615a      	str	r2, [r3, #20]
 8000e54:	4b41      	ldr	r3, [pc, #260]	; (8000f5c <LCD_SetCursor+0x458>)
 8000e56:	2280      	movs	r2, #128	; 0x80
 8000e58:	611a      	str	r2, [r3, #16]
 8000e5a:	4b40      	ldr	r3, [pc, #256]	; (8000f5c <LCD_SetCursor+0x458>)
 8000e5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e60:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8000e62:	4b3e      	ldr	r3, [pc, #248]	; (8000f5c <LCD_SetCursor+0x458>)
 8000e64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e68:	611a      	str	r2, [r3, #16]
 8000e6a:	4b3c      	ldr	r3, [pc, #240]	; (8000f5c <LCD_SetCursor+0x458>)
 8000e6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e70:	615a      	str	r2, [r3, #20]
 8000e72:	4b39      	ldr	r3, [pc, #228]	; (8000f58 <LCD_SetCursor+0x454>)
 8000e74:	881b      	ldrh	r3, [r3, #0]
 8000e76:	3b01      	subs	r3, #1
 8000e78:	4a39      	ldr	r2, [pc, #228]	; (8000f60 <LCD_SetCursor+0x45c>)
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	60d3      	str	r3, [r2, #12]
 8000e7e:	4b37      	ldr	r3, [pc, #220]	; (8000f5c <LCD_SetCursor+0x458>)
 8000e80:	2280      	movs	r2, #128	; 0x80
 8000e82:	615a      	str	r2, [r3, #20]
 8000e84:	4b35      	ldr	r3, [pc, #212]	; (8000f5c <LCD_SetCursor+0x458>)
 8000e86:	2280      	movs	r2, #128	; 0x80
 8000e88:	611a      	str	r2, [r3, #16]
 8000e8a:	4b34      	ldr	r3, [pc, #208]	; (8000f5c <LCD_SetCursor+0x458>)
 8000e8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e90:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000e92:	4b31      	ldr	r3, [pc, #196]	; (8000f58 <LCD_SetCursor+0x454>)
 8000e94:	899b      	ldrh	r3, [r3, #12]
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff fd62 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000e9c:	4b2f      	ldr	r3, [pc, #188]	; (8000f5c <LCD_SetCursor+0x458>)
 8000e9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ea2:	611a      	str	r2, [r3, #16]
 8000ea4:	4b2d      	ldr	r3, [pc, #180]	; (8000f5c <LCD_SetCursor+0x458>)
 8000ea6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eaa:	615a      	str	r2, [r3, #20]
 8000eac:	88bb      	ldrh	r3, [r7, #4]
 8000eae:	0a1b      	lsrs	r3, r3, #8
 8000eb0:	b29a      	uxth	r2, r3
 8000eb2:	4b2b      	ldr	r3, [pc, #172]	; (8000f60 <LCD_SetCursor+0x45c>)
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	4b29      	ldr	r3, [pc, #164]	; (8000f5c <LCD_SetCursor+0x458>)
 8000eb8:	2280      	movs	r2, #128	; 0x80
 8000eba:	615a      	str	r2, [r3, #20]
 8000ebc:	4b27      	ldr	r3, [pc, #156]	; (8000f5c <LCD_SetCursor+0x458>)
 8000ebe:	2280      	movs	r2, #128	; 0x80
 8000ec0:	611a      	str	r2, [r3, #16]
 8000ec2:	4b26      	ldr	r3, [pc, #152]	; (8000f5c <LCD_SetCursor+0x458>)
 8000ec4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ec8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000eca:	4b24      	ldr	r3, [pc, #144]	; (8000f5c <LCD_SetCursor+0x458>)
 8000ecc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ed0:	611a      	str	r2, [r3, #16]
 8000ed2:	4b22      	ldr	r3, [pc, #136]	; (8000f5c <LCD_SetCursor+0x458>)
 8000ed4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ed8:	615a      	str	r2, [r3, #20]
 8000eda:	88bb      	ldrh	r3, [r7, #4]
 8000edc:	4a20      	ldr	r2, [pc, #128]	; (8000f60 <LCD_SetCursor+0x45c>)
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	60d3      	str	r3, [r2, #12]
 8000ee2:	4b1e      	ldr	r3, [pc, #120]	; (8000f5c <LCD_SetCursor+0x458>)
 8000ee4:	2280      	movs	r2, #128	; 0x80
 8000ee6:	615a      	str	r2, [r3, #20]
 8000ee8:	4b1c      	ldr	r3, [pc, #112]	; (8000f5c <LCD_SetCursor+0x458>)
 8000eea:	2280      	movs	r2, #128	; 0x80
 8000eec:	611a      	str	r2, [r3, #16]
 8000eee:	4b1b      	ldr	r3, [pc, #108]	; (8000f5c <LCD_SetCursor+0x458>)
 8000ef0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ef4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) >> 8);
 8000ef6:	4b19      	ldr	r3, [pc, #100]	; (8000f5c <LCD_SetCursor+0x458>)
 8000ef8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000efc:	611a      	str	r2, [r3, #16]
 8000efe:	4b17      	ldr	r3, [pc, #92]	; (8000f5c <LCD_SetCursor+0x458>)
 8000f00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f04:	615a      	str	r2, [r3, #20]
 8000f06:	4b14      	ldr	r3, [pc, #80]	; (8000f58 <LCD_SetCursor+0x454>)
 8000f08:	885b      	ldrh	r3, [r3, #2]
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	121a      	asrs	r2, r3, #8
 8000f0e:	4b14      	ldr	r3, [pc, #80]	; (8000f60 <LCD_SetCursor+0x45c>)
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <LCD_SetCursor+0x458>)
 8000f14:	2280      	movs	r2, #128	; 0x80
 8000f16:	615a      	str	r2, [r3, #20]
 8000f18:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <LCD_SetCursor+0x458>)
 8000f1a:	2280      	movs	r2, #128	; 0x80
 8000f1c:	611a      	str	r2, [r3, #16]
 8000f1e:	4b0f      	ldr	r3, [pc, #60]	; (8000f5c <LCD_SetCursor+0x458>)
 8000f20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f24:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8000f26:	4b0d      	ldr	r3, [pc, #52]	; (8000f5c <LCD_SetCursor+0x458>)
 8000f28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f2c:	611a      	str	r2, [r3, #16]
 8000f2e:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <LCD_SetCursor+0x458>)
 8000f30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f34:	615a      	str	r2, [r3, #20]
 8000f36:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <LCD_SetCursor+0x454>)
 8000f38:	885b      	ldrh	r3, [r3, #2]
 8000f3a:	3b01      	subs	r3, #1
 8000f3c:	4a08      	ldr	r2, [pc, #32]	; (8000f60 <LCD_SetCursor+0x45c>)
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	60d3      	str	r3, [r2, #12]
 8000f42:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <LCD_SetCursor+0x458>)
 8000f44:	2280      	movs	r2, #128	; 0x80
 8000f46:	615a      	str	r2, [r3, #20]
 8000f48:	4b04      	ldr	r3, [pc, #16]	; (8000f5c <LCD_SetCursor+0x458>)
 8000f4a:	2280      	movs	r2, #128	; 0x80
 8000f4c:	611a      	str	r2, [r3, #16]
 8000f4e:	4b03      	ldr	r3, [pc, #12]	; (8000f5c <LCD_SetCursor+0x458>)
 8000f50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f54:	611a      	str	r2, [r3, #16]
}
 8000f56:	e097      	b.n	8001088 <LCD_SetCursor+0x584>
 8000f58:	200000e8 	.word	0x200000e8
 8000f5c:	40011000 	.word	0x40011000
 8000f60:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X5510) {
 8000f64:	4b4a      	ldr	r3, [pc, #296]	; (8001090 <LCD_SetCursor+0x58c>)
 8000f66:	889b      	ldrh	r3, [r3, #4]
 8000f68:	f245 5210 	movw	r2, #21776	; 0x5510
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d172      	bne.n	8001056 <LCD_SetCursor+0x552>
		LCD_WR_REG(lcddev.setxcmd);
 8000f70:	4b47      	ldr	r3, [pc, #284]	; (8001090 <LCD_SetCursor+0x58c>)
 8000f72:	895b      	ldrh	r3, [r3, #10]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff fcf3 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000f7a:	4b46      	ldr	r3, [pc, #280]	; (8001094 <LCD_SetCursor+0x590>)
 8000f7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f80:	611a      	str	r2, [r3, #16]
 8000f82:	4b44      	ldr	r3, [pc, #272]	; (8001094 <LCD_SetCursor+0x590>)
 8000f84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f88:	615a      	str	r2, [r3, #20]
 8000f8a:	88fb      	ldrh	r3, [r7, #6]
 8000f8c:	0a1b      	lsrs	r3, r3, #8
 8000f8e:	b29a      	uxth	r2, r3
 8000f90:	4b41      	ldr	r3, [pc, #260]	; (8001098 <LCD_SetCursor+0x594>)
 8000f92:	60da      	str	r2, [r3, #12]
 8000f94:	4b3f      	ldr	r3, [pc, #252]	; (8001094 <LCD_SetCursor+0x590>)
 8000f96:	2280      	movs	r2, #128	; 0x80
 8000f98:	615a      	str	r2, [r3, #20]
 8000f9a:	4b3e      	ldr	r3, [pc, #248]	; (8001094 <LCD_SetCursor+0x590>)
 8000f9c:	2280      	movs	r2, #128	; 0x80
 8000f9e:	611a      	str	r2, [r3, #16]
 8000fa0:	4b3c      	ldr	r3, [pc, #240]	; (8001094 <LCD_SetCursor+0x590>)
 8000fa2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fa6:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 8000fa8:	4b39      	ldr	r3, [pc, #228]	; (8001090 <LCD_SetCursor+0x58c>)
 8000faa:	895b      	ldrh	r3, [r3, #10]
 8000fac:	3301      	adds	r3, #1
 8000fae:	b29b      	uxth	r3, r3
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff fcd5 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATA(Xpos & 0XFF);
 8000fb6:	4b37      	ldr	r3, [pc, #220]	; (8001094 <LCD_SetCursor+0x590>)
 8000fb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fbc:	611a      	str	r2, [r3, #16]
 8000fbe:	4b35      	ldr	r3, [pc, #212]	; (8001094 <LCD_SetCursor+0x590>)
 8000fc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fc4:	615a      	str	r2, [r3, #20]
 8000fc6:	88fb      	ldrh	r3, [r7, #6]
 8000fc8:	4a33      	ldr	r2, [pc, #204]	; (8001098 <LCD_SetCursor+0x594>)
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	60d3      	str	r3, [r2, #12]
 8000fce:	4b31      	ldr	r3, [pc, #196]	; (8001094 <LCD_SetCursor+0x590>)
 8000fd0:	2280      	movs	r2, #128	; 0x80
 8000fd2:	615a      	str	r2, [r3, #20]
 8000fd4:	4b2f      	ldr	r3, [pc, #188]	; (8001094 <LCD_SetCursor+0x590>)
 8000fd6:	2280      	movs	r2, #128	; 0x80
 8000fd8:	611a      	str	r2, [r3, #16]
 8000fda:	4b2e      	ldr	r3, [pc, #184]	; (8001094 <LCD_SetCursor+0x590>)
 8000fdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fe0:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000fe2:	4b2b      	ldr	r3, [pc, #172]	; (8001090 <LCD_SetCursor+0x58c>)
 8000fe4:	899b      	ldrh	r3, [r3, #12]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff fcba 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000fec:	4b29      	ldr	r3, [pc, #164]	; (8001094 <LCD_SetCursor+0x590>)
 8000fee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ff2:	611a      	str	r2, [r3, #16]
 8000ff4:	4b27      	ldr	r3, [pc, #156]	; (8001094 <LCD_SetCursor+0x590>)
 8000ff6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ffa:	615a      	str	r2, [r3, #20]
 8000ffc:	88bb      	ldrh	r3, [r7, #4]
 8000ffe:	0a1b      	lsrs	r3, r3, #8
 8001000:	b29a      	uxth	r2, r3
 8001002:	4b25      	ldr	r3, [pc, #148]	; (8001098 <LCD_SetCursor+0x594>)
 8001004:	60da      	str	r2, [r3, #12]
 8001006:	4b23      	ldr	r3, [pc, #140]	; (8001094 <LCD_SetCursor+0x590>)
 8001008:	2280      	movs	r2, #128	; 0x80
 800100a:	615a      	str	r2, [r3, #20]
 800100c:	4b21      	ldr	r3, [pc, #132]	; (8001094 <LCD_SetCursor+0x590>)
 800100e:	2280      	movs	r2, #128	; 0x80
 8001010:	611a      	str	r2, [r3, #16]
 8001012:	4b20      	ldr	r3, [pc, #128]	; (8001094 <LCD_SetCursor+0x590>)
 8001014:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001018:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 800101a:	4b1d      	ldr	r3, [pc, #116]	; (8001090 <LCD_SetCursor+0x58c>)
 800101c:	899b      	ldrh	r3, [r3, #12]
 800101e:	3301      	adds	r3, #1
 8001020:	b29b      	uxth	r3, r3
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff fc9c 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATA(Ypos & 0XFF);
 8001028:	4b1a      	ldr	r3, [pc, #104]	; (8001094 <LCD_SetCursor+0x590>)
 800102a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800102e:	611a      	str	r2, [r3, #16]
 8001030:	4b18      	ldr	r3, [pc, #96]	; (8001094 <LCD_SetCursor+0x590>)
 8001032:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001036:	615a      	str	r2, [r3, #20]
 8001038:	88bb      	ldrh	r3, [r7, #4]
 800103a:	4a17      	ldr	r2, [pc, #92]	; (8001098 <LCD_SetCursor+0x594>)
 800103c:	b2db      	uxtb	r3, r3
 800103e:	60d3      	str	r3, [r2, #12]
 8001040:	4b14      	ldr	r3, [pc, #80]	; (8001094 <LCD_SetCursor+0x590>)
 8001042:	2280      	movs	r2, #128	; 0x80
 8001044:	615a      	str	r2, [r3, #20]
 8001046:	4b13      	ldr	r3, [pc, #76]	; (8001094 <LCD_SetCursor+0x590>)
 8001048:	2280      	movs	r2, #128	; 0x80
 800104a:	611a      	str	r2, [r3, #16]
 800104c:	4b11      	ldr	r3, [pc, #68]	; (8001094 <LCD_SetCursor+0x590>)
 800104e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001052:	611a      	str	r2, [r3, #16]
}
 8001054:	e018      	b.n	8001088 <LCD_SetCursor+0x584>
		if (lcddev.dir == 1)
 8001056:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <LCD_SetCursor+0x58c>)
 8001058:	799b      	ldrb	r3, [r3, #6]
 800105a:	2b01      	cmp	r3, #1
 800105c:	d106      	bne.n	800106c <LCD_SetCursor+0x568>
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
 800105e:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <LCD_SetCursor+0x58c>)
 8001060:	881a      	ldrh	r2, [r3, #0]
 8001062:	88fb      	ldrh	r3, [r7, #6]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	b29b      	uxth	r3, r3
 8001068:	3b01      	subs	r3, #1
 800106a:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, Xpos);
 800106c:	4b08      	ldr	r3, [pc, #32]	; (8001090 <LCD_SetCursor+0x58c>)
 800106e:	895b      	ldrh	r3, [r3, #10]
 8001070:	88fa      	ldrh	r2, [r7, #6]
 8001072:	4611      	mov	r1, r2
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff fcff 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, Ypos);
 800107a:	4b05      	ldr	r3, [pc, #20]	; (8001090 <LCD_SetCursor+0x58c>)
 800107c:	899b      	ldrh	r3, [r3, #12]
 800107e:	88ba      	ldrh	r2, [r7, #4]
 8001080:	4611      	mov	r1, r2
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff fcf8 	bl	8000a78 <LCD_WriteReg>
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	200000e8 	.word	0x200000e8
 8001094:	40011000 	.word	0x40011000
 8001098:	40010c00 	.word	0x40010c00

0800109c <LCD_Scan_Dir>:
//设置LCD的自动扫描方向
//注意:其他函数可能会受到此函数设置的影响(尤其是9341/6804这两个奇葩),
//所以,一般设置为L2R_U2D即可,如果设置为其他扫描方式,可能导致显示不正常.
//dir:0~7,代表8个方向(具体定义见lcd.h)
//9320/9325/9328/4531/4535/1505/b505/5408/9341/5310/5510/1963等IC已经实际测试	   	   
void LCD_Scan_Dir(uint8_t dir) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	71fb      	strb	r3, [r7, #7]
	uint16_t regval = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	81fb      	strh	r3, [r7, #14]
	uint16_t dirreg = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	81bb      	strh	r3, [r7, #12]
	uint16_t temp;
	if ((lcddev.dir == 1 && lcddev.id != 0X6804 && lcddev.id != 0X1963)
 80010ae:	4b78      	ldr	r3, [pc, #480]	; (8001290 <LCD_Scan_Dir+0x1f4>)
 80010b0:	799b      	ldrb	r3, [r3, #6]
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d10b      	bne.n	80010ce <LCD_Scan_Dir+0x32>
 80010b6:	4b76      	ldr	r3, [pc, #472]	; (8001290 <LCD_Scan_Dir+0x1f4>)
 80010b8:	889b      	ldrh	r3, [r3, #4]
 80010ba:	f646 0204 	movw	r2, #26628	; 0x6804
 80010be:	4293      	cmp	r3, r2
 80010c0:	d005      	beq.n	80010ce <LCD_Scan_Dir+0x32>
 80010c2:	4b73      	ldr	r3, [pc, #460]	; (8001290 <LCD_Scan_Dir+0x1f4>)
 80010c4:	889b      	ldrh	r3, [r3, #4]
 80010c6:	f641 1263 	movw	r2, #6499	; 0x1963
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d109      	bne.n	80010e2 <LCD_Scan_Dir+0x46>
			|| (lcddev.dir == 0 && lcddev.id == 0X1963))//横屏时，对6804和1963不改变扫描方向！竖屏时1963改变方向
 80010ce:	4b70      	ldr	r3, [pc, #448]	; (8001290 <LCD_Scan_Dir+0x1f4>)
 80010d0:	799b      	ldrb	r3, [r3, #6]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d134      	bne.n	8001140 <LCD_Scan_Dir+0xa4>
 80010d6:	4b6e      	ldr	r3, [pc, #440]	; (8001290 <LCD_Scan_Dir+0x1f4>)
 80010d8:	889b      	ldrh	r3, [r3, #4]
 80010da:	f641 1263 	movw	r2, #6499	; 0x1963
 80010de:	4293      	cmp	r3, r2
 80010e0:	d12e      	bne.n	8001140 <LCD_Scan_Dir+0xa4>
			{
		switch (dir)	//方向转换
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	2b07      	cmp	r3, #7
 80010e6:	d82c      	bhi.n	8001142 <LCD_Scan_Dir+0xa6>
 80010e8:	a201      	add	r2, pc, #4	; (adr r2, 80010f0 <LCD_Scan_Dir+0x54>)
 80010ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ee:	bf00      	nop
 80010f0:	08001111 	.word	0x08001111
 80010f4:	08001117 	.word	0x08001117
 80010f8:	0800111d 	.word	0x0800111d
 80010fc:	08001123 	.word	0x08001123
 8001100:	08001129 	.word	0x08001129
 8001104:	0800112f 	.word	0x0800112f
 8001108:	08001135 	.word	0x08001135
 800110c:	0800113b 	.word	0x0800113b
		{
		case 0:
			dir = 6;
 8001110:	2306      	movs	r3, #6
 8001112:	71fb      	strb	r3, [r7, #7]
			break;
 8001114:	e015      	b.n	8001142 <LCD_Scan_Dir+0xa6>
		case 1:
			dir = 7;
 8001116:	2307      	movs	r3, #7
 8001118:	71fb      	strb	r3, [r7, #7]
			break;
 800111a:	e012      	b.n	8001142 <LCD_Scan_Dir+0xa6>
		case 2:
			dir = 4;
 800111c:	2304      	movs	r3, #4
 800111e:	71fb      	strb	r3, [r7, #7]
			break;
 8001120:	e00f      	b.n	8001142 <LCD_Scan_Dir+0xa6>
		case 3:
			dir = 5;
 8001122:	2305      	movs	r3, #5
 8001124:	71fb      	strb	r3, [r7, #7]
			break;
 8001126:	e00c      	b.n	8001142 <LCD_Scan_Dir+0xa6>
		case 4:
			dir = 1;
 8001128:	2301      	movs	r3, #1
 800112a:	71fb      	strb	r3, [r7, #7]
			break;
 800112c:	e009      	b.n	8001142 <LCD_Scan_Dir+0xa6>
		case 5:
			dir = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	71fb      	strb	r3, [r7, #7]
			break;
 8001132:	e006      	b.n	8001142 <LCD_Scan_Dir+0xa6>
		case 6:
			dir = 3;
 8001134:	2303      	movs	r3, #3
 8001136:	71fb      	strb	r3, [r7, #7]
			break;
 8001138:	e003      	b.n	8001142 <LCD_Scan_Dir+0xa6>
		case 7:
			dir = 2;
 800113a:	2302      	movs	r3, #2
 800113c:	71fb      	strb	r3, [r7, #7]
			break;
 800113e:	e000      	b.n	8001142 <LCD_Scan_Dir+0xa6>
		}
	}
 8001140:	bf00      	nop
	if (lcddev.id == 0x9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310
 8001142:	4b53      	ldr	r3, [pc, #332]	; (8001290 <LCD_Scan_Dir+0x1f4>)
 8001144:	889b      	ldrh	r3, [r3, #4]
 8001146:	f249 3241 	movw	r2, #37697	; 0x9341
 800114a:	4293      	cmp	r3, r2
 800114c:	d018      	beq.n	8001180 <LCD_Scan_Dir+0xe4>
 800114e:	4b50      	ldr	r3, [pc, #320]	; (8001290 <LCD_Scan_Dir+0x1f4>)
 8001150:	889b      	ldrh	r3, [r3, #4]
 8001152:	f646 0204 	movw	r2, #26628	; 0x6804
 8001156:	4293      	cmp	r3, r2
 8001158:	d012      	beq.n	8001180 <LCD_Scan_Dir+0xe4>
 800115a:	4b4d      	ldr	r3, [pc, #308]	; (8001290 <LCD_Scan_Dir+0x1f4>)
 800115c:	889b      	ldrh	r3, [r3, #4]
 800115e:	f245 3210 	movw	r2, #21264	; 0x5310
 8001162:	4293      	cmp	r3, r2
 8001164:	d00c      	beq.n	8001180 <LCD_Scan_Dir+0xe4>
			|| lcddev.id == 0X5510 || lcddev.id == 0X1963)//9341/6804/5310/5510/1963,特殊处理
 8001166:	4b4a      	ldr	r3, [pc, #296]	; (8001290 <LCD_Scan_Dir+0x1f4>)
 8001168:	889b      	ldrh	r3, [r3, #4]
 800116a:	f245 5210 	movw	r2, #21776	; 0x5510
 800116e:	4293      	cmp	r3, r2
 8001170:	d006      	beq.n	8001180 <LCD_Scan_Dir+0xe4>
 8001172:	4b47      	ldr	r3, [pc, #284]	; (8001290 <LCD_Scan_Dir+0x1f4>)
 8001174:	889b      	ldrh	r3, [r3, #4]
 8001176:	f641 1263 	movw	r2, #6499	; 0x1963
 800117a:	4293      	cmp	r3, r2
 800117c:	f040 824f 	bne.w	800161e <LCD_Scan_Dir+0x582>
					{
		switch (dir) {
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	2b07      	cmp	r3, #7
 8001184:	d835      	bhi.n	80011f2 <LCD_Scan_Dir+0x156>
 8001186:	a201      	add	r2, pc, #4	; (adr r2, 800118c <LCD_Scan_Dir+0xf0>)
 8001188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800118c:	080011f3 	.word	0x080011f3
 8001190:	080011ad 	.word	0x080011ad
 8001194:	080011b7 	.word	0x080011b7
 8001198:	080011c1 	.word	0x080011c1
 800119c:	080011cb 	.word	0x080011cb
 80011a0:	080011d5 	.word	0x080011d5
 80011a4:	080011df 	.word	0x080011df
 80011a8:	080011e9 	.word	0x080011e9
		case L2R_U2D:	//从左到右,从上到下
			regval |= (0 << 7) | (0 << 6) | (0 << 5);
			break;
		case L2R_D2U:	//从左到右,从下到上
			regval |= (1 << 7) | (0 << 6) | (0 << 5);
 80011ac:	89fb      	ldrh	r3, [r7, #14]
 80011ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011b2:	81fb      	strh	r3, [r7, #14]
			break;
 80011b4:	e01d      	b.n	80011f2 <LCD_Scan_Dir+0x156>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (0 << 7) | (1 << 6) | (0 << 5);
 80011b6:	89fb      	ldrh	r3, [r7, #14]
 80011b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011bc:	81fb      	strh	r3, [r7, #14]
			break;
 80011be:	e018      	b.n	80011f2 <LCD_Scan_Dir+0x156>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (1 << 7) | (1 << 6) | (0 << 5);
 80011c0:	89fb      	ldrh	r3, [r7, #14]
 80011c2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80011c6:	81fb      	strh	r3, [r7, #14]
			break;
 80011c8:	e013      	b.n	80011f2 <LCD_Scan_Dir+0x156>
		case U2D_L2R:	//从上到下,从左到右
			regval |= (0 << 7) | (0 << 6) | (1 << 5);
 80011ca:	89fb      	ldrh	r3, [r7, #14]
 80011cc:	f043 0320 	orr.w	r3, r3, #32
 80011d0:	81fb      	strh	r3, [r7, #14]
			break;
 80011d2:	e00e      	b.n	80011f2 <LCD_Scan_Dir+0x156>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (0 << 7) | (1 << 6) | (1 << 5);
 80011d4:	89fb      	ldrh	r3, [r7, #14]
 80011d6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80011da:	81fb      	strh	r3, [r7, #14]
			break;
 80011dc:	e009      	b.n	80011f2 <LCD_Scan_Dir+0x156>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (1 << 7) | (0 << 6) | (1 << 5);
 80011de:	89fb      	ldrh	r3, [r7, #14]
 80011e0:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80011e4:	81fb      	strh	r3, [r7, #14]
			break;
 80011e6:	e004      	b.n	80011f2 <LCD_Scan_Dir+0x156>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (1 << 7) | (1 << 6) | (1 << 5);
 80011e8:	89fb      	ldrh	r3, [r7, #14]
 80011ea:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80011ee:	81fb      	strh	r3, [r7, #14]
			break;
 80011f0:	bf00      	nop
		}
		if (lcddev.id == 0X5510)
 80011f2:	4b27      	ldr	r3, [pc, #156]	; (8001290 <LCD_Scan_Dir+0x1f4>)
 80011f4:	889b      	ldrh	r3, [r3, #4]
 80011f6:	f245 5210 	movw	r2, #21776	; 0x5510
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d103      	bne.n	8001206 <LCD_Scan_Dir+0x16a>
			dirreg = 0X3600;
 80011fe:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 8001202:	81bb      	strh	r3, [r7, #12]
 8001204:	e001      	b.n	800120a <LCD_Scan_Dir+0x16e>
		else
			dirreg = 0X36;
 8001206:	2336      	movs	r3, #54	; 0x36
 8001208:	81bb      	strh	r3, [r7, #12]
		if ((lcddev.id != 0X5310) && (lcddev.id != 0X5510) && (lcddev.id != 0X1963))
 800120a:	4b21      	ldr	r3, [pc, #132]	; (8001290 <LCD_Scan_Dir+0x1f4>)
 800120c:	889b      	ldrh	r3, [r3, #4]
 800120e:	f245 3210 	movw	r2, #21264	; 0x5310
 8001212:	4293      	cmp	r3, r2
 8001214:	d00f      	beq.n	8001236 <LCD_Scan_Dir+0x19a>
 8001216:	4b1e      	ldr	r3, [pc, #120]	; (8001290 <LCD_Scan_Dir+0x1f4>)
 8001218:	889b      	ldrh	r3, [r3, #4]
 800121a:	f245 5210 	movw	r2, #21776	; 0x5510
 800121e:	4293      	cmp	r3, r2
 8001220:	d009      	beq.n	8001236 <LCD_Scan_Dir+0x19a>
 8001222:	4b1b      	ldr	r3, [pc, #108]	; (8001290 <LCD_Scan_Dir+0x1f4>)
 8001224:	889b      	ldrh	r3, [r3, #4]
 8001226:	f641 1263 	movw	r2, #6499	; 0x1963
 800122a:	4293      	cmp	r3, r2
 800122c:	d003      	beq.n	8001236 <LCD_Scan_Dir+0x19a>
			regval |= 0X08;	//5310/5510/1963不需要BGR
 800122e:	89fb      	ldrh	r3, [r7, #14]
 8001230:	f043 0308 	orr.w	r3, r3, #8
 8001234:	81fb      	strh	r3, [r7, #14]
		if (lcddev.id == 0X6804)
 8001236:	4b16      	ldr	r3, [pc, #88]	; (8001290 <LCD_Scan_Dir+0x1f4>)
 8001238:	889b      	ldrh	r3, [r3, #4]
 800123a:	f646 0204 	movw	r2, #26628	; 0x6804
 800123e:	4293      	cmp	r3, r2
 8001240:	d103      	bne.n	800124a <LCD_Scan_Dir+0x1ae>
			regval |= 0x02;	//6804的BIT6和9341的反了
 8001242:	89fb      	ldrh	r3, [r7, #14]
 8001244:	f043 0302 	orr.w	r3, r3, #2
 8001248:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 800124a:	89fa      	ldrh	r2, [r7, #14]
 800124c:	89bb      	ldrh	r3, [r7, #12]
 800124e:	4611      	mov	r1, r2
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff fc11 	bl	8000a78 <LCD_WriteReg>
		if (lcddev.id != 0X1963)	//1963不做坐标处理
 8001256:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <LCD_Scan_Dir+0x1f4>)
 8001258:	889b      	ldrh	r3, [r3, #4]
 800125a:	f641 1263 	movw	r2, #6499	; 0x1963
 800125e:	4293      	cmp	r3, r2
 8001260:	d028      	beq.n	80012b4 <LCD_Scan_Dir+0x218>
				{
			if (regval & 0X20) {
 8001262:	89fb      	ldrh	r3, [r7, #14]
 8001264:	f003 0320 	and.w	r3, r3, #32
 8001268:	2b00      	cmp	r3, #0
 800126a:	d013      	beq.n	8001294 <LCD_Scan_Dir+0x1f8>
				if (lcddev.width < lcddev.height)	//交换X,Y
 800126c:	4b08      	ldr	r3, [pc, #32]	; (8001290 <LCD_Scan_Dir+0x1f4>)
 800126e:	881a      	ldrh	r2, [r3, #0]
 8001270:	4b07      	ldr	r3, [pc, #28]	; (8001290 <LCD_Scan_Dir+0x1f4>)
 8001272:	885b      	ldrh	r3, [r3, #2]
 8001274:	429a      	cmp	r2, r3
 8001276:	d21d      	bcs.n	80012b4 <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 8001278:	4b05      	ldr	r3, [pc, #20]	; (8001290 <LCD_Scan_Dir+0x1f4>)
 800127a:	881b      	ldrh	r3, [r3, #0]
 800127c:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 800127e:	4b04      	ldr	r3, [pc, #16]	; (8001290 <LCD_Scan_Dir+0x1f4>)
 8001280:	885a      	ldrh	r2, [r3, #2]
 8001282:	4b03      	ldr	r3, [pc, #12]	; (8001290 <LCD_Scan_Dir+0x1f4>)
 8001284:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 8001286:	4a02      	ldr	r2, [pc, #8]	; (8001290 <LCD_Scan_Dir+0x1f4>)
 8001288:	897b      	ldrh	r3, [r7, #10]
 800128a:	8053      	strh	r3, [r2, #2]
 800128c:	e012      	b.n	80012b4 <LCD_Scan_Dir+0x218>
 800128e:	bf00      	nop
 8001290:	200000e8 	.word	0x200000e8
				}
			} else {
				if (lcddev.width > lcddev.height)	//交换X,Y
 8001294:	4b7f      	ldr	r3, [pc, #508]	; (8001494 <LCD_Scan_Dir+0x3f8>)
 8001296:	881a      	ldrh	r2, [r3, #0]
 8001298:	4b7e      	ldr	r3, [pc, #504]	; (8001494 <LCD_Scan_Dir+0x3f8>)
 800129a:	885b      	ldrh	r3, [r3, #2]
 800129c:	429a      	cmp	r2, r3
 800129e:	d909      	bls.n	80012b4 <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 80012a0:	4b7c      	ldr	r3, [pc, #496]	; (8001494 <LCD_Scan_Dir+0x3f8>)
 80012a2:	881b      	ldrh	r3, [r3, #0]
 80012a4:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 80012a6:	4b7b      	ldr	r3, [pc, #492]	; (8001494 <LCD_Scan_Dir+0x3f8>)
 80012a8:	885a      	ldrh	r2, [r3, #2]
 80012aa:	4b7a      	ldr	r3, [pc, #488]	; (8001494 <LCD_Scan_Dir+0x3f8>)
 80012ac:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 80012ae:	4a79      	ldr	r2, [pc, #484]	; (8001494 <LCD_Scan_Dir+0x3f8>)
 80012b0:	897b      	ldrh	r3, [r7, #10]
 80012b2:	8053      	strh	r3, [r2, #2]
				}
			}
		}
		if (lcddev.id == 0X5510) {
 80012b4:	4b77      	ldr	r3, [pc, #476]	; (8001494 <LCD_Scan_Dir+0x3f8>)
 80012b6:	889b      	ldrh	r3, [r3, #4]
 80012b8:	f245 5210 	movw	r2, #21776	; 0x5510
 80012bc:	4293      	cmp	r3, r2
 80012be:	f040 80ef 	bne.w	80014a0 <LCD_Scan_Dir+0x404>
			LCD_WR_REG(lcddev.setxcmd);
 80012c2:	4b74      	ldr	r3, [pc, #464]	; (8001494 <LCD_Scan_Dir+0x3f8>)
 80012c4:	895b      	ldrh	r3, [r3, #10]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff fb4a 	bl	8000960 <LCD_WR_REG>
			LCD_WR_DATA(0);
 80012cc:	4b72      	ldr	r3, [pc, #456]	; (8001498 <LCD_Scan_Dir+0x3fc>)
 80012ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012d2:	611a      	str	r2, [r3, #16]
 80012d4:	4b70      	ldr	r3, [pc, #448]	; (8001498 <LCD_Scan_Dir+0x3fc>)
 80012d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012da:	615a      	str	r2, [r3, #20]
 80012dc:	4b6f      	ldr	r3, [pc, #444]	; (800149c <LCD_Scan_Dir+0x400>)
 80012de:	2200      	movs	r2, #0
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	4b6d      	ldr	r3, [pc, #436]	; (8001498 <LCD_Scan_Dir+0x3fc>)
 80012e4:	2280      	movs	r2, #128	; 0x80
 80012e6:	615a      	str	r2, [r3, #20]
 80012e8:	4b6b      	ldr	r3, [pc, #428]	; (8001498 <LCD_Scan_Dir+0x3fc>)
 80012ea:	2280      	movs	r2, #128	; 0x80
 80012ec:	611a      	str	r2, [r3, #16]
 80012ee:	4b6a      	ldr	r3, [pc, #424]	; (8001498 <LCD_Scan_Dir+0x3fc>)
 80012f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012f4:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 1);
 80012f6:	4b67      	ldr	r3, [pc, #412]	; (8001494 <LCD_Scan_Dir+0x3f8>)
 80012f8:	895b      	ldrh	r3, [r3, #10]
 80012fa:	3301      	adds	r3, #1
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff fb2e 	bl	8000960 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001304:	4b64      	ldr	r3, [pc, #400]	; (8001498 <LCD_Scan_Dir+0x3fc>)
 8001306:	f44f 7280 	mov.w	r2, #256	; 0x100
 800130a:	611a      	str	r2, [r3, #16]
 800130c:	4b62      	ldr	r3, [pc, #392]	; (8001498 <LCD_Scan_Dir+0x3fc>)
 800130e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001312:	615a      	str	r2, [r3, #20]
 8001314:	4b61      	ldr	r3, [pc, #388]	; (800149c <LCD_Scan_Dir+0x400>)
 8001316:	2200      	movs	r2, #0
 8001318:	60da      	str	r2, [r3, #12]
 800131a:	4b5f      	ldr	r3, [pc, #380]	; (8001498 <LCD_Scan_Dir+0x3fc>)
 800131c:	2280      	movs	r2, #128	; 0x80
 800131e:	615a      	str	r2, [r3, #20]
 8001320:	4b5d      	ldr	r3, [pc, #372]	; (8001498 <LCD_Scan_Dir+0x3fc>)
 8001322:	2280      	movs	r2, #128	; 0x80
 8001324:	611a      	str	r2, [r3, #16]
 8001326:	4b5c      	ldr	r3, [pc, #368]	; (8001498 <LCD_Scan_Dir+0x3fc>)
 8001328:	f44f 7200 	mov.w	r2, #512	; 0x200
 800132c:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 2);
 800132e:	4b59      	ldr	r3, [pc, #356]	; (8001494 <LCD_Scan_Dir+0x3f8>)
 8001330:	895b      	ldrh	r3, [r3, #10]
 8001332:	3302      	adds	r3, #2
 8001334:	b29b      	uxth	r3, r3
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff fb12 	bl	8000960 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 800133c:	4b56      	ldr	r3, [pc, #344]	; (8001498 <LCD_Scan_Dir+0x3fc>)
 800133e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001342:	611a      	str	r2, [r3, #16]
 8001344:	4b54      	ldr	r3, [pc, #336]	; (8001498 <LCD_Scan_Dir+0x3fc>)
 8001346:	f44f 7200 	mov.w	r2, #512	; 0x200
 800134a:	615a      	str	r2, [r3, #20]
 800134c:	4b51      	ldr	r3, [pc, #324]	; (8001494 <LCD_Scan_Dir+0x3f8>)
 800134e:	881b      	ldrh	r3, [r3, #0]
 8001350:	3b01      	subs	r3, #1
 8001352:	121a      	asrs	r2, r3, #8
 8001354:	4b51      	ldr	r3, [pc, #324]	; (800149c <LCD_Scan_Dir+0x400>)
 8001356:	60da      	str	r2, [r3, #12]
 8001358:	4b4f      	ldr	r3, [pc, #316]	; (8001498 <LCD_Scan_Dir+0x3fc>)
 800135a:	2280      	movs	r2, #128	; 0x80
 800135c:	615a      	str	r2, [r3, #20]
 800135e:	4b4e      	ldr	r3, [pc, #312]	; (8001498 <LCD_Scan_Dir+0x3fc>)
 8001360:	2280      	movs	r2, #128	; 0x80
 8001362:	611a      	str	r2, [r3, #16]
 8001364:	4b4c      	ldr	r3, [pc, #304]	; (8001498 <LCD_Scan_Dir+0x3fc>)
 8001366:	f44f 7200 	mov.w	r2, #512	; 0x200
 800136a:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 3);
 800136c:	4b49      	ldr	r3, [pc, #292]	; (8001494 <LCD_Scan_Dir+0x3f8>)
 800136e:	895b      	ldrh	r3, [r3, #10]
 8001370:	3303      	adds	r3, #3
 8001372:	b29b      	uxth	r3, r3
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff faf3 	bl	8000960 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 800137a:	4b47      	ldr	r3, [pc, #284]	; (8001498 <LCD_Scan_Dir+0x3fc>)
 800137c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001380:	611a      	str	r2, [r3, #16]
 8001382:	4b45      	ldr	r3, [pc, #276]	; (8001498 <LCD_Scan_Dir+0x3fc>)
 8001384:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001388:	615a      	str	r2, [r3, #20]
 800138a:	4b42      	ldr	r3, [pc, #264]	; (8001494 <LCD_Scan_Dir+0x3f8>)
 800138c:	881b      	ldrh	r3, [r3, #0]
 800138e:	3b01      	subs	r3, #1
 8001390:	4a42      	ldr	r2, [pc, #264]	; (800149c <LCD_Scan_Dir+0x400>)
 8001392:	b2db      	uxtb	r3, r3
 8001394:	60d3      	str	r3, [r2, #12]
 8001396:	4b40      	ldr	r3, [pc, #256]	; (8001498 <LCD_Scan_Dir+0x3fc>)
 8001398:	2280      	movs	r2, #128	; 0x80
 800139a:	615a      	str	r2, [r3, #20]
 800139c:	4b3e      	ldr	r3, [pc, #248]	; (8001498 <LCD_Scan_Dir+0x3fc>)
 800139e:	2280      	movs	r2, #128	; 0x80
 80013a0:	611a      	str	r2, [r3, #16]
 80013a2:	4b3d      	ldr	r3, [pc, #244]	; (8001498 <LCD_Scan_Dir+0x3fc>)
 80013a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013a8:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 80013aa:	4b3a      	ldr	r3, [pc, #232]	; (8001494 <LCD_Scan_Dir+0x3f8>)
 80013ac:	899b      	ldrh	r3, [r3, #12]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff fad6 	bl	8000960 <LCD_WR_REG>
			LCD_WR_DATA(0);
 80013b4:	4b38      	ldr	r3, [pc, #224]	; (8001498 <LCD_Scan_Dir+0x3fc>)
 80013b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013ba:	611a      	str	r2, [r3, #16]
 80013bc:	4b36      	ldr	r3, [pc, #216]	; (8001498 <LCD_Scan_Dir+0x3fc>)
 80013be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013c2:	615a      	str	r2, [r3, #20]
 80013c4:	4b35      	ldr	r3, [pc, #212]	; (800149c <LCD_Scan_Dir+0x400>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	60da      	str	r2, [r3, #12]
 80013ca:	4b33      	ldr	r3, [pc, #204]	; (8001498 <LCD_Scan_Dir+0x3fc>)
 80013cc:	2280      	movs	r2, #128	; 0x80
 80013ce:	615a      	str	r2, [r3, #20]
 80013d0:	4b31      	ldr	r3, [pc, #196]	; (8001498 <LCD_Scan_Dir+0x3fc>)
 80013d2:	2280      	movs	r2, #128	; 0x80
 80013d4:	611a      	str	r2, [r3, #16]
 80013d6:	4b30      	ldr	r3, [pc, #192]	; (8001498 <LCD_Scan_Dir+0x3fc>)
 80013d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013dc:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 1);
 80013de:	4b2d      	ldr	r3, [pc, #180]	; (8001494 <LCD_Scan_Dir+0x3f8>)
 80013e0:	899b      	ldrh	r3, [r3, #12]
 80013e2:	3301      	adds	r3, #1
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff faba 	bl	8000960 <LCD_WR_REG>
			LCD_WR_DATA(0);
 80013ec:	4b2a      	ldr	r3, [pc, #168]	; (8001498 <LCD_Scan_Dir+0x3fc>)
 80013ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013f2:	611a      	str	r2, [r3, #16]
 80013f4:	4b28      	ldr	r3, [pc, #160]	; (8001498 <LCD_Scan_Dir+0x3fc>)
 80013f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013fa:	615a      	str	r2, [r3, #20]
 80013fc:	4b27      	ldr	r3, [pc, #156]	; (800149c <LCD_Scan_Dir+0x400>)
 80013fe:	2200      	movs	r2, #0
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	4b25      	ldr	r3, [pc, #148]	; (8001498 <LCD_Scan_Dir+0x3fc>)
 8001404:	2280      	movs	r2, #128	; 0x80
 8001406:	615a      	str	r2, [r3, #20]
 8001408:	4b23      	ldr	r3, [pc, #140]	; (8001498 <LCD_Scan_Dir+0x3fc>)
 800140a:	2280      	movs	r2, #128	; 0x80
 800140c:	611a      	str	r2, [r3, #16]
 800140e:	4b22      	ldr	r3, [pc, #136]	; (8001498 <LCD_Scan_Dir+0x3fc>)
 8001410:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001414:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 2);
 8001416:	4b1f      	ldr	r3, [pc, #124]	; (8001494 <LCD_Scan_Dir+0x3f8>)
 8001418:	899b      	ldrh	r3, [r3, #12]
 800141a:	3302      	adds	r3, #2
 800141c:	b29b      	uxth	r3, r3
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff fa9e 	bl	8000960 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 8001424:	4b1c      	ldr	r3, [pc, #112]	; (8001498 <LCD_Scan_Dir+0x3fc>)
 8001426:	f44f 7280 	mov.w	r2, #256	; 0x100
 800142a:	611a      	str	r2, [r3, #16]
 800142c:	4b1a      	ldr	r3, [pc, #104]	; (8001498 <LCD_Scan_Dir+0x3fc>)
 800142e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001432:	615a      	str	r2, [r3, #20]
 8001434:	4b17      	ldr	r3, [pc, #92]	; (8001494 <LCD_Scan_Dir+0x3f8>)
 8001436:	885b      	ldrh	r3, [r3, #2]
 8001438:	3b01      	subs	r3, #1
 800143a:	121a      	asrs	r2, r3, #8
 800143c:	4b17      	ldr	r3, [pc, #92]	; (800149c <LCD_Scan_Dir+0x400>)
 800143e:	60da      	str	r2, [r3, #12]
 8001440:	4b15      	ldr	r3, [pc, #84]	; (8001498 <LCD_Scan_Dir+0x3fc>)
 8001442:	2280      	movs	r2, #128	; 0x80
 8001444:	615a      	str	r2, [r3, #20]
 8001446:	4b14      	ldr	r3, [pc, #80]	; (8001498 <LCD_Scan_Dir+0x3fc>)
 8001448:	2280      	movs	r2, #128	; 0x80
 800144a:	611a      	str	r2, [r3, #16]
 800144c:	4b12      	ldr	r3, [pc, #72]	; (8001498 <LCD_Scan_Dir+0x3fc>)
 800144e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001452:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 3);
 8001454:	4b0f      	ldr	r3, [pc, #60]	; (8001494 <LCD_Scan_Dir+0x3f8>)
 8001456:	899b      	ldrh	r3, [r3, #12]
 8001458:	3303      	adds	r3, #3
 800145a:	b29b      	uxth	r3, r3
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff fa7f 	bl	8000960 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8001462:	4b0d      	ldr	r3, [pc, #52]	; (8001498 <LCD_Scan_Dir+0x3fc>)
 8001464:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001468:	611a      	str	r2, [r3, #16]
 800146a:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <LCD_Scan_Dir+0x3fc>)
 800146c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001470:	615a      	str	r2, [r3, #20]
 8001472:	4b08      	ldr	r3, [pc, #32]	; (8001494 <LCD_Scan_Dir+0x3f8>)
 8001474:	885b      	ldrh	r3, [r3, #2]
 8001476:	3b01      	subs	r3, #1
 8001478:	4a08      	ldr	r2, [pc, #32]	; (800149c <LCD_Scan_Dir+0x400>)
 800147a:	b2db      	uxtb	r3, r3
 800147c:	60d3      	str	r3, [r2, #12]
 800147e:	4b06      	ldr	r3, [pc, #24]	; (8001498 <LCD_Scan_Dir+0x3fc>)
 8001480:	2280      	movs	r2, #128	; 0x80
 8001482:	615a      	str	r2, [r3, #20]
 8001484:	4b04      	ldr	r3, [pc, #16]	; (8001498 <LCD_Scan_Dir+0x3fc>)
 8001486:	2280      	movs	r2, #128	; 0x80
 8001488:	611a      	str	r2, [r3, #16]
 800148a:	4b03      	ldr	r3, [pc, #12]	; (8001498 <LCD_Scan_Dir+0x3fc>)
 800148c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001490:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 8001492:	e10b      	b.n	80016ac <LCD_Scan_Dir+0x610>
 8001494:	200000e8 	.word	0x200000e8
 8001498:	40011000 	.word	0x40011000
 800149c:	40010c00 	.word	0x40010c00
		} else {
			LCD_WR_REG(lcddev.setxcmd);
 80014a0:	4b84      	ldr	r3, [pc, #528]	; (80016b4 <LCD_Scan_Dir+0x618>)
 80014a2:	895b      	ldrh	r3, [r3, #10]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff fa5b 	bl	8000960 <LCD_WR_REG>
			LCD_WR_DATA(0);
 80014aa:	4b83      	ldr	r3, [pc, #524]	; (80016b8 <LCD_Scan_Dir+0x61c>)
 80014ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014b0:	611a      	str	r2, [r3, #16]
 80014b2:	4b81      	ldr	r3, [pc, #516]	; (80016b8 <LCD_Scan_Dir+0x61c>)
 80014b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014b8:	615a      	str	r2, [r3, #20]
 80014ba:	4b80      	ldr	r3, [pc, #512]	; (80016bc <LCD_Scan_Dir+0x620>)
 80014bc:	2200      	movs	r2, #0
 80014be:	60da      	str	r2, [r3, #12]
 80014c0:	4b7d      	ldr	r3, [pc, #500]	; (80016b8 <LCD_Scan_Dir+0x61c>)
 80014c2:	2280      	movs	r2, #128	; 0x80
 80014c4:	615a      	str	r2, [r3, #20]
 80014c6:	4b7c      	ldr	r3, [pc, #496]	; (80016b8 <LCD_Scan_Dir+0x61c>)
 80014c8:	2280      	movs	r2, #128	; 0x80
 80014ca:	611a      	str	r2, [r3, #16]
 80014cc:	4b7a      	ldr	r3, [pc, #488]	; (80016b8 <LCD_Scan_Dir+0x61c>)
 80014ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014d2:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 80014d4:	4b78      	ldr	r3, [pc, #480]	; (80016b8 <LCD_Scan_Dir+0x61c>)
 80014d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014da:	611a      	str	r2, [r3, #16]
 80014dc:	4b76      	ldr	r3, [pc, #472]	; (80016b8 <LCD_Scan_Dir+0x61c>)
 80014de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014e2:	615a      	str	r2, [r3, #20]
 80014e4:	4b75      	ldr	r3, [pc, #468]	; (80016bc <LCD_Scan_Dir+0x620>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	4b73      	ldr	r3, [pc, #460]	; (80016b8 <LCD_Scan_Dir+0x61c>)
 80014ec:	2280      	movs	r2, #128	; 0x80
 80014ee:	615a      	str	r2, [r3, #20]
 80014f0:	4b71      	ldr	r3, [pc, #452]	; (80016b8 <LCD_Scan_Dir+0x61c>)
 80014f2:	2280      	movs	r2, #128	; 0x80
 80014f4:	611a      	str	r2, [r3, #16]
 80014f6:	4b70      	ldr	r3, [pc, #448]	; (80016b8 <LCD_Scan_Dir+0x61c>)
 80014f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014fc:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 80014fe:	4b6e      	ldr	r3, [pc, #440]	; (80016b8 <LCD_Scan_Dir+0x61c>)
 8001500:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001504:	611a      	str	r2, [r3, #16]
 8001506:	4b6c      	ldr	r3, [pc, #432]	; (80016b8 <LCD_Scan_Dir+0x61c>)
 8001508:	f44f 7200 	mov.w	r2, #512	; 0x200
 800150c:	615a      	str	r2, [r3, #20]
 800150e:	4b69      	ldr	r3, [pc, #420]	; (80016b4 <LCD_Scan_Dir+0x618>)
 8001510:	881b      	ldrh	r3, [r3, #0]
 8001512:	3b01      	subs	r3, #1
 8001514:	121a      	asrs	r2, r3, #8
 8001516:	4b69      	ldr	r3, [pc, #420]	; (80016bc <LCD_Scan_Dir+0x620>)
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	4b67      	ldr	r3, [pc, #412]	; (80016b8 <LCD_Scan_Dir+0x61c>)
 800151c:	2280      	movs	r2, #128	; 0x80
 800151e:	615a      	str	r2, [r3, #20]
 8001520:	4b65      	ldr	r3, [pc, #404]	; (80016b8 <LCD_Scan_Dir+0x61c>)
 8001522:	2280      	movs	r2, #128	; 0x80
 8001524:	611a      	str	r2, [r3, #16]
 8001526:	4b64      	ldr	r3, [pc, #400]	; (80016b8 <LCD_Scan_Dir+0x61c>)
 8001528:	f44f 7200 	mov.w	r2, #512	; 0x200
 800152c:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 800152e:	4b62      	ldr	r3, [pc, #392]	; (80016b8 <LCD_Scan_Dir+0x61c>)
 8001530:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001534:	611a      	str	r2, [r3, #16]
 8001536:	4b60      	ldr	r3, [pc, #384]	; (80016b8 <LCD_Scan_Dir+0x61c>)
 8001538:	f44f 7200 	mov.w	r2, #512	; 0x200
 800153c:	615a      	str	r2, [r3, #20]
 800153e:	4b5d      	ldr	r3, [pc, #372]	; (80016b4 <LCD_Scan_Dir+0x618>)
 8001540:	881b      	ldrh	r3, [r3, #0]
 8001542:	3b01      	subs	r3, #1
 8001544:	4a5d      	ldr	r2, [pc, #372]	; (80016bc <LCD_Scan_Dir+0x620>)
 8001546:	b2db      	uxtb	r3, r3
 8001548:	60d3      	str	r3, [r2, #12]
 800154a:	4b5b      	ldr	r3, [pc, #364]	; (80016b8 <LCD_Scan_Dir+0x61c>)
 800154c:	2280      	movs	r2, #128	; 0x80
 800154e:	615a      	str	r2, [r3, #20]
 8001550:	4b59      	ldr	r3, [pc, #356]	; (80016b8 <LCD_Scan_Dir+0x61c>)
 8001552:	2280      	movs	r2, #128	; 0x80
 8001554:	611a      	str	r2, [r3, #16]
 8001556:	4b58      	ldr	r3, [pc, #352]	; (80016b8 <LCD_Scan_Dir+0x61c>)
 8001558:	f44f 7200 	mov.w	r2, #512	; 0x200
 800155c:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 800155e:	4b55      	ldr	r3, [pc, #340]	; (80016b4 <LCD_Scan_Dir+0x618>)
 8001560:	899b      	ldrh	r3, [r3, #12]
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff f9fc 	bl	8000960 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001568:	4b53      	ldr	r3, [pc, #332]	; (80016b8 <LCD_Scan_Dir+0x61c>)
 800156a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800156e:	611a      	str	r2, [r3, #16]
 8001570:	4b51      	ldr	r3, [pc, #324]	; (80016b8 <LCD_Scan_Dir+0x61c>)
 8001572:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001576:	615a      	str	r2, [r3, #20]
 8001578:	4b50      	ldr	r3, [pc, #320]	; (80016bc <LCD_Scan_Dir+0x620>)
 800157a:	2200      	movs	r2, #0
 800157c:	60da      	str	r2, [r3, #12]
 800157e:	4b4e      	ldr	r3, [pc, #312]	; (80016b8 <LCD_Scan_Dir+0x61c>)
 8001580:	2280      	movs	r2, #128	; 0x80
 8001582:	615a      	str	r2, [r3, #20]
 8001584:	4b4c      	ldr	r3, [pc, #304]	; (80016b8 <LCD_Scan_Dir+0x61c>)
 8001586:	2280      	movs	r2, #128	; 0x80
 8001588:	611a      	str	r2, [r3, #16]
 800158a:	4b4b      	ldr	r3, [pc, #300]	; (80016b8 <LCD_Scan_Dir+0x61c>)
 800158c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001590:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8001592:	4b49      	ldr	r3, [pc, #292]	; (80016b8 <LCD_Scan_Dir+0x61c>)
 8001594:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001598:	611a      	str	r2, [r3, #16]
 800159a:	4b47      	ldr	r3, [pc, #284]	; (80016b8 <LCD_Scan_Dir+0x61c>)
 800159c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015a0:	615a      	str	r2, [r3, #20]
 80015a2:	4b46      	ldr	r3, [pc, #280]	; (80016bc <LCD_Scan_Dir+0x620>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	60da      	str	r2, [r3, #12]
 80015a8:	4b43      	ldr	r3, [pc, #268]	; (80016b8 <LCD_Scan_Dir+0x61c>)
 80015aa:	2280      	movs	r2, #128	; 0x80
 80015ac:	615a      	str	r2, [r3, #20]
 80015ae:	4b42      	ldr	r3, [pc, #264]	; (80016b8 <LCD_Scan_Dir+0x61c>)
 80015b0:	2280      	movs	r2, #128	; 0x80
 80015b2:	611a      	str	r2, [r3, #16]
 80015b4:	4b40      	ldr	r3, [pc, #256]	; (80016b8 <LCD_Scan_Dir+0x61c>)
 80015b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015ba:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 80015bc:	4b3e      	ldr	r3, [pc, #248]	; (80016b8 <LCD_Scan_Dir+0x61c>)
 80015be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015c2:	611a      	str	r2, [r3, #16]
 80015c4:	4b3c      	ldr	r3, [pc, #240]	; (80016b8 <LCD_Scan_Dir+0x61c>)
 80015c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015ca:	615a      	str	r2, [r3, #20]
 80015cc:	4b39      	ldr	r3, [pc, #228]	; (80016b4 <LCD_Scan_Dir+0x618>)
 80015ce:	885b      	ldrh	r3, [r3, #2]
 80015d0:	3b01      	subs	r3, #1
 80015d2:	121a      	asrs	r2, r3, #8
 80015d4:	4b39      	ldr	r3, [pc, #228]	; (80016bc <LCD_Scan_Dir+0x620>)
 80015d6:	60da      	str	r2, [r3, #12]
 80015d8:	4b37      	ldr	r3, [pc, #220]	; (80016b8 <LCD_Scan_Dir+0x61c>)
 80015da:	2280      	movs	r2, #128	; 0x80
 80015dc:	615a      	str	r2, [r3, #20]
 80015de:	4b36      	ldr	r3, [pc, #216]	; (80016b8 <LCD_Scan_Dir+0x61c>)
 80015e0:	2280      	movs	r2, #128	; 0x80
 80015e2:	611a      	str	r2, [r3, #16]
 80015e4:	4b34      	ldr	r3, [pc, #208]	; (80016b8 <LCD_Scan_Dir+0x61c>)
 80015e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015ea:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 80015ec:	4b32      	ldr	r3, [pc, #200]	; (80016b8 <LCD_Scan_Dir+0x61c>)
 80015ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015f2:	611a      	str	r2, [r3, #16]
 80015f4:	4b30      	ldr	r3, [pc, #192]	; (80016b8 <LCD_Scan_Dir+0x61c>)
 80015f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015fa:	615a      	str	r2, [r3, #20]
 80015fc:	4b2d      	ldr	r3, [pc, #180]	; (80016b4 <LCD_Scan_Dir+0x618>)
 80015fe:	885b      	ldrh	r3, [r3, #2]
 8001600:	3b01      	subs	r3, #1
 8001602:	4a2e      	ldr	r2, [pc, #184]	; (80016bc <LCD_Scan_Dir+0x620>)
 8001604:	b2db      	uxtb	r3, r3
 8001606:	60d3      	str	r3, [r2, #12]
 8001608:	4b2b      	ldr	r3, [pc, #172]	; (80016b8 <LCD_Scan_Dir+0x61c>)
 800160a:	2280      	movs	r2, #128	; 0x80
 800160c:	615a      	str	r2, [r3, #20]
 800160e:	4b2a      	ldr	r3, [pc, #168]	; (80016b8 <LCD_Scan_Dir+0x61c>)
 8001610:	2280      	movs	r2, #128	; 0x80
 8001612:	611a      	str	r2, [r3, #16]
 8001614:	4b28      	ldr	r3, [pc, #160]	; (80016b8 <LCD_Scan_Dir+0x61c>)
 8001616:	f44f 7200 	mov.w	r2, #512	; 0x200
 800161a:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 800161c:	e046      	b.n	80016ac <LCD_Scan_Dir+0x610>
		}
	} else {
		switch (dir) {
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	2b07      	cmp	r3, #7
 8001622:	d836      	bhi.n	8001692 <LCD_Scan_Dir+0x5f6>
 8001624:	a201      	add	r2, pc, #4	; (adr r2, 800162c <LCD_Scan_Dir+0x590>)
 8001626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800162a:	bf00      	nop
 800162c:	0800164d 	.word	0x0800164d
 8001630:	08001657 	.word	0x08001657
 8001634:	08001661 	.word	0x08001661
 8001638:	08001693 	.word	0x08001693
 800163c:	0800166b 	.word	0x0800166b
 8001640:	08001675 	.word	0x08001675
 8001644:	0800167f 	.word	0x0800167f
 8001648:	08001689 	.word	0x08001689
		case L2R_U2D:	//从左到右,从上到下
			regval |= (1 << 5) | (1 << 4) | (0 << 3);
 800164c:	89fb      	ldrh	r3, [r7, #14]
 800164e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001652:	81fb      	strh	r3, [r7, #14]
			break;
 8001654:	e01d      	b.n	8001692 <LCD_Scan_Dir+0x5f6>
		case L2R_D2U:	//从左到右,从下到上
			regval |= (0 << 5) | (1 << 4) | (0 << 3);
 8001656:	89fb      	ldrh	r3, [r7, #14]
 8001658:	f043 0310 	orr.w	r3, r3, #16
 800165c:	81fb      	strh	r3, [r7, #14]
			break;
 800165e:	e018      	b.n	8001692 <LCD_Scan_Dir+0x5f6>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (1 << 5) | (0 << 4) | (0 << 3);
 8001660:	89fb      	ldrh	r3, [r7, #14]
 8001662:	f043 0320 	orr.w	r3, r3, #32
 8001666:	81fb      	strh	r3, [r7, #14]
			break;
 8001668:	e013      	b.n	8001692 <LCD_Scan_Dir+0x5f6>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (0 << 5) | (0 << 4) | (0 << 3);
			break;
		case U2D_L2R:	//从上到下,从左到右
			regval |= (1 << 5) | (1 << 4) | (1 << 3);
 800166a:	89fb      	ldrh	r3, [r7, #14]
 800166c:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8001670:	81fb      	strh	r3, [r7, #14]
			break;
 8001672:	e00e      	b.n	8001692 <LCD_Scan_Dir+0x5f6>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (1 << 5) | (0 << 4) | (1 << 3);
 8001674:	89fb      	ldrh	r3, [r7, #14]
 8001676:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800167a:	81fb      	strh	r3, [r7, #14]
			break;
 800167c:	e009      	b.n	8001692 <LCD_Scan_Dir+0x5f6>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (0 << 5) | (1 << 4) | (1 << 3);
 800167e:	89fb      	ldrh	r3, [r7, #14]
 8001680:	f043 0318 	orr.w	r3, r3, #24
 8001684:	81fb      	strh	r3, [r7, #14]
			break;
 8001686:	e004      	b.n	8001692 <LCD_Scan_Dir+0x5f6>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (0 << 5) | (0 << 4) | (1 << 3);
 8001688:	89fb      	ldrh	r3, [r7, #14]
 800168a:	f043 0308 	orr.w	r3, r3, #8
 800168e:	81fb      	strh	r3, [r7, #14]
			break;
 8001690:	bf00      	nop
		}
		dirreg = 0X03;
 8001692:	2303      	movs	r3, #3
 8001694:	81bb      	strh	r3, [r7, #12]
		regval |= 1 << 12;
 8001696:	89fb      	ldrh	r3, [r7, #14]
 8001698:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800169c:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 800169e:	89fa      	ldrh	r2, [r7, #14]
 80016a0:	89bb      	ldrh	r3, [r7, #12]
 80016a2:	4611      	mov	r1, r2
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff f9e7 	bl	8000a78 <LCD_WriteReg>
	}
}
 80016aa:	bf00      	nop
 80016ac:	bf00      	nop
 80016ae:	3710      	adds	r7, #16
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	200000e8 	.word	0x200000e8
 80016b8:	40011000 	.word	0x40011000
 80016bc:	40010c00 	.word	0x40010c00

080016c0 <LCD_Fast_DrawPoint>:
	LCD_WriteRAM_Prepare();
	LCD_WR_DATA(POINT_COLOR); //POINT_COLOR: Color of this point
}
//Draw a point with color(quicker)
//x,y: coordinate
void LCD_Fast_DrawPoint(uint16_t x, uint16_t y, uint16_t color) {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	80fb      	strh	r3, [r7, #6]
 80016ca:	460b      	mov	r3, r1
 80016cc:	80bb      	strh	r3, [r7, #4]
 80016ce:	4613      	mov	r3, r2
 80016d0:	807b      	strh	r3, [r7, #2]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 80016d2:	4b75      	ldr	r3, [pc, #468]	; (80018a8 <LCD_Fast_DrawPoint+0x1e8>)
 80016d4:	889b      	ldrh	r3, [r3, #4]
 80016d6:	f249 3241 	movw	r2, #37697	; 0x9341
 80016da:	4293      	cmp	r3, r2
 80016dc:	d005      	beq.n	80016ea <LCD_Fast_DrawPoint+0x2a>
 80016de:	4b72      	ldr	r3, [pc, #456]	; (80018a8 <LCD_Fast_DrawPoint+0x1e8>)
 80016e0:	889b      	ldrh	r3, [r3, #4]
 80016e2:	f245 3210 	movw	r2, #21264	; 0x5310
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d164      	bne.n	80017b4 <LCD_Fast_DrawPoint+0xf4>
		LCD_WR_REG(lcddev.setxcmd);
 80016ea:	4b6f      	ldr	r3, [pc, #444]	; (80018a8 <LCD_Fast_DrawPoint+0x1e8>)
 80016ec:	895b      	ldrh	r3, [r3, #10]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff f936 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 80016f4:	4b6d      	ldr	r3, [pc, #436]	; (80018ac <LCD_Fast_DrawPoint+0x1ec>)
 80016f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016fa:	611a      	str	r2, [r3, #16]
 80016fc:	4b6b      	ldr	r3, [pc, #428]	; (80018ac <LCD_Fast_DrawPoint+0x1ec>)
 80016fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001702:	615a      	str	r2, [r3, #20]
 8001704:	88fb      	ldrh	r3, [r7, #6]
 8001706:	0a1b      	lsrs	r3, r3, #8
 8001708:	b29a      	uxth	r2, r3
 800170a:	4b69      	ldr	r3, [pc, #420]	; (80018b0 <LCD_Fast_DrawPoint+0x1f0>)
 800170c:	60da      	str	r2, [r3, #12]
 800170e:	4b67      	ldr	r3, [pc, #412]	; (80018ac <LCD_Fast_DrawPoint+0x1ec>)
 8001710:	2280      	movs	r2, #128	; 0x80
 8001712:	615a      	str	r2, [r3, #20]
 8001714:	4b65      	ldr	r3, [pc, #404]	; (80018ac <LCD_Fast_DrawPoint+0x1ec>)
 8001716:	2280      	movs	r2, #128	; 0x80
 8001718:	611a      	str	r2, [r3, #16]
 800171a:	4b64      	ldr	r3, [pc, #400]	; (80018ac <LCD_Fast_DrawPoint+0x1ec>)
 800171c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001720:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8001722:	4b62      	ldr	r3, [pc, #392]	; (80018ac <LCD_Fast_DrawPoint+0x1ec>)
 8001724:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001728:	611a      	str	r2, [r3, #16]
 800172a:	4b60      	ldr	r3, [pc, #384]	; (80018ac <LCD_Fast_DrawPoint+0x1ec>)
 800172c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001730:	615a      	str	r2, [r3, #20]
 8001732:	88fb      	ldrh	r3, [r7, #6]
 8001734:	4a5e      	ldr	r2, [pc, #376]	; (80018b0 <LCD_Fast_DrawPoint+0x1f0>)
 8001736:	b2db      	uxtb	r3, r3
 8001738:	60d3      	str	r3, [r2, #12]
 800173a:	4b5c      	ldr	r3, [pc, #368]	; (80018ac <LCD_Fast_DrawPoint+0x1ec>)
 800173c:	2280      	movs	r2, #128	; 0x80
 800173e:	615a      	str	r2, [r3, #20]
 8001740:	4b5a      	ldr	r3, [pc, #360]	; (80018ac <LCD_Fast_DrawPoint+0x1ec>)
 8001742:	2280      	movs	r2, #128	; 0x80
 8001744:	611a      	str	r2, [r3, #16]
 8001746:	4b59      	ldr	r3, [pc, #356]	; (80018ac <LCD_Fast_DrawPoint+0x1ec>)
 8001748:	f44f 7200 	mov.w	r2, #512	; 0x200
 800174c:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 800174e:	4b56      	ldr	r3, [pc, #344]	; (80018a8 <LCD_Fast_DrawPoint+0x1e8>)
 8001750:	899b      	ldrh	r3, [r3, #12]
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff f904 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8001758:	4b54      	ldr	r3, [pc, #336]	; (80018ac <LCD_Fast_DrawPoint+0x1ec>)
 800175a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800175e:	611a      	str	r2, [r3, #16]
 8001760:	4b52      	ldr	r3, [pc, #328]	; (80018ac <LCD_Fast_DrawPoint+0x1ec>)
 8001762:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001766:	615a      	str	r2, [r3, #20]
 8001768:	88bb      	ldrh	r3, [r7, #4]
 800176a:	0a1b      	lsrs	r3, r3, #8
 800176c:	b29a      	uxth	r2, r3
 800176e:	4b50      	ldr	r3, [pc, #320]	; (80018b0 <LCD_Fast_DrawPoint+0x1f0>)
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	4b4e      	ldr	r3, [pc, #312]	; (80018ac <LCD_Fast_DrawPoint+0x1ec>)
 8001774:	2280      	movs	r2, #128	; 0x80
 8001776:	615a      	str	r2, [r3, #20]
 8001778:	4b4c      	ldr	r3, [pc, #304]	; (80018ac <LCD_Fast_DrawPoint+0x1ec>)
 800177a:	2280      	movs	r2, #128	; 0x80
 800177c:	611a      	str	r2, [r3, #16]
 800177e:	4b4b      	ldr	r3, [pc, #300]	; (80018ac <LCD_Fast_DrawPoint+0x1ec>)
 8001780:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001784:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8001786:	4b49      	ldr	r3, [pc, #292]	; (80018ac <LCD_Fast_DrawPoint+0x1ec>)
 8001788:	f44f 7280 	mov.w	r2, #256	; 0x100
 800178c:	611a      	str	r2, [r3, #16]
 800178e:	4b47      	ldr	r3, [pc, #284]	; (80018ac <LCD_Fast_DrawPoint+0x1ec>)
 8001790:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001794:	615a      	str	r2, [r3, #20]
 8001796:	88bb      	ldrh	r3, [r7, #4]
 8001798:	4a45      	ldr	r2, [pc, #276]	; (80018b0 <LCD_Fast_DrawPoint+0x1f0>)
 800179a:	b2db      	uxtb	r3, r3
 800179c:	60d3      	str	r3, [r2, #12]
 800179e:	4b43      	ldr	r3, [pc, #268]	; (80018ac <LCD_Fast_DrawPoint+0x1ec>)
 80017a0:	2280      	movs	r2, #128	; 0x80
 80017a2:	615a      	str	r2, [r3, #20]
 80017a4:	4b41      	ldr	r3, [pc, #260]	; (80018ac <LCD_Fast_DrawPoint+0x1ec>)
 80017a6:	2280      	movs	r2, #128	; 0x80
 80017a8:	611a      	str	r2, [r3, #16]
 80017aa:	4b40      	ldr	r3, [pc, #256]	; (80018ac <LCD_Fast_DrawPoint+0x1ec>)
 80017ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017b0:	611a      	str	r2, [r3, #16]
 80017b2:	e1e6      	b.n	8001b82 <LCD_Fast_DrawPoint+0x4c2>
	} else if (lcddev.id == 0X5510) {
 80017b4:	4b3c      	ldr	r3, [pc, #240]	; (80018a8 <LCD_Fast_DrawPoint+0x1e8>)
 80017b6:	889b      	ldrh	r3, [r3, #4]
 80017b8:	f245 5210 	movw	r2, #21776	; 0x5510
 80017bc:	4293      	cmp	r3, r2
 80017be:	d179      	bne.n	80018b4 <LCD_Fast_DrawPoint+0x1f4>
		LCD_WR_REG(lcddev.setxcmd);
 80017c0:	4b39      	ldr	r3, [pc, #228]	; (80018a8 <LCD_Fast_DrawPoint+0x1e8>)
 80017c2:	895b      	ldrh	r3, [r3, #10]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff f8cb 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 80017ca:	4b38      	ldr	r3, [pc, #224]	; (80018ac <LCD_Fast_DrawPoint+0x1ec>)
 80017cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017d0:	611a      	str	r2, [r3, #16]
 80017d2:	4b36      	ldr	r3, [pc, #216]	; (80018ac <LCD_Fast_DrawPoint+0x1ec>)
 80017d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017d8:	615a      	str	r2, [r3, #20]
 80017da:	88fb      	ldrh	r3, [r7, #6]
 80017dc:	0a1b      	lsrs	r3, r3, #8
 80017de:	b29a      	uxth	r2, r3
 80017e0:	4b33      	ldr	r3, [pc, #204]	; (80018b0 <LCD_Fast_DrawPoint+0x1f0>)
 80017e2:	60da      	str	r2, [r3, #12]
 80017e4:	4b31      	ldr	r3, [pc, #196]	; (80018ac <LCD_Fast_DrawPoint+0x1ec>)
 80017e6:	2280      	movs	r2, #128	; 0x80
 80017e8:	615a      	str	r2, [r3, #20]
 80017ea:	4b30      	ldr	r3, [pc, #192]	; (80018ac <LCD_Fast_DrawPoint+0x1ec>)
 80017ec:	2280      	movs	r2, #128	; 0x80
 80017ee:	611a      	str	r2, [r3, #16]
 80017f0:	4b2e      	ldr	r3, [pc, #184]	; (80018ac <LCD_Fast_DrawPoint+0x1ec>)
 80017f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017f6:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 80017f8:	4b2b      	ldr	r3, [pc, #172]	; (80018a8 <LCD_Fast_DrawPoint+0x1e8>)
 80017fa:	895b      	ldrh	r3, [r3, #10]
 80017fc:	3301      	adds	r3, #1
 80017fe:	b29b      	uxth	r3, r3
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff f8ad 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATA(x & 0XFF);
 8001806:	4b29      	ldr	r3, [pc, #164]	; (80018ac <LCD_Fast_DrawPoint+0x1ec>)
 8001808:	f44f 7280 	mov.w	r2, #256	; 0x100
 800180c:	611a      	str	r2, [r3, #16]
 800180e:	4b27      	ldr	r3, [pc, #156]	; (80018ac <LCD_Fast_DrawPoint+0x1ec>)
 8001810:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001814:	615a      	str	r2, [r3, #20]
 8001816:	88fb      	ldrh	r3, [r7, #6]
 8001818:	4a25      	ldr	r2, [pc, #148]	; (80018b0 <LCD_Fast_DrawPoint+0x1f0>)
 800181a:	b2db      	uxtb	r3, r3
 800181c:	60d3      	str	r3, [r2, #12]
 800181e:	4b23      	ldr	r3, [pc, #140]	; (80018ac <LCD_Fast_DrawPoint+0x1ec>)
 8001820:	2280      	movs	r2, #128	; 0x80
 8001822:	615a      	str	r2, [r3, #20]
 8001824:	4b21      	ldr	r3, [pc, #132]	; (80018ac <LCD_Fast_DrawPoint+0x1ec>)
 8001826:	2280      	movs	r2, #128	; 0x80
 8001828:	611a      	str	r2, [r3, #16]
 800182a:	4b20      	ldr	r3, [pc, #128]	; (80018ac <LCD_Fast_DrawPoint+0x1ec>)
 800182c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001830:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8001832:	4b1d      	ldr	r3, [pc, #116]	; (80018a8 <LCD_Fast_DrawPoint+0x1e8>)
 8001834:	899b      	ldrh	r3, [r3, #12]
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff f892 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 800183c:	4b1b      	ldr	r3, [pc, #108]	; (80018ac <LCD_Fast_DrawPoint+0x1ec>)
 800183e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001842:	611a      	str	r2, [r3, #16]
 8001844:	4b19      	ldr	r3, [pc, #100]	; (80018ac <LCD_Fast_DrawPoint+0x1ec>)
 8001846:	f44f 7200 	mov.w	r2, #512	; 0x200
 800184a:	615a      	str	r2, [r3, #20]
 800184c:	88bb      	ldrh	r3, [r7, #4]
 800184e:	0a1b      	lsrs	r3, r3, #8
 8001850:	b29a      	uxth	r2, r3
 8001852:	4b17      	ldr	r3, [pc, #92]	; (80018b0 <LCD_Fast_DrawPoint+0x1f0>)
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	4b15      	ldr	r3, [pc, #84]	; (80018ac <LCD_Fast_DrawPoint+0x1ec>)
 8001858:	2280      	movs	r2, #128	; 0x80
 800185a:	615a      	str	r2, [r3, #20]
 800185c:	4b13      	ldr	r3, [pc, #76]	; (80018ac <LCD_Fast_DrawPoint+0x1ec>)
 800185e:	2280      	movs	r2, #128	; 0x80
 8001860:	611a      	str	r2, [r3, #16]
 8001862:	4b12      	ldr	r3, [pc, #72]	; (80018ac <LCD_Fast_DrawPoint+0x1ec>)
 8001864:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001868:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 800186a:	4b0f      	ldr	r3, [pc, #60]	; (80018a8 <LCD_Fast_DrawPoint+0x1e8>)
 800186c:	899b      	ldrh	r3, [r3, #12]
 800186e:	3301      	adds	r3, #1
 8001870:	b29b      	uxth	r3, r3
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff f874 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATA(y & 0XFF);
 8001878:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <LCD_Fast_DrawPoint+0x1ec>)
 800187a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800187e:	611a      	str	r2, [r3, #16]
 8001880:	4b0a      	ldr	r3, [pc, #40]	; (80018ac <LCD_Fast_DrawPoint+0x1ec>)
 8001882:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001886:	615a      	str	r2, [r3, #20]
 8001888:	88bb      	ldrh	r3, [r7, #4]
 800188a:	4a09      	ldr	r2, [pc, #36]	; (80018b0 <LCD_Fast_DrawPoint+0x1f0>)
 800188c:	b2db      	uxtb	r3, r3
 800188e:	60d3      	str	r3, [r2, #12]
 8001890:	4b06      	ldr	r3, [pc, #24]	; (80018ac <LCD_Fast_DrawPoint+0x1ec>)
 8001892:	2280      	movs	r2, #128	; 0x80
 8001894:	615a      	str	r2, [r3, #20]
 8001896:	4b05      	ldr	r3, [pc, #20]	; (80018ac <LCD_Fast_DrawPoint+0x1ec>)
 8001898:	2280      	movs	r2, #128	; 0x80
 800189a:	611a      	str	r2, [r3, #16]
 800189c:	4b03      	ldr	r3, [pc, #12]	; (80018ac <LCD_Fast_DrawPoint+0x1ec>)
 800189e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018a2:	611a      	str	r2, [r3, #16]
 80018a4:	e16d      	b.n	8001b82 <LCD_Fast_DrawPoint+0x4c2>
 80018a6:	bf00      	nop
 80018a8:	200000e8 	.word	0x200000e8
 80018ac:	40011000 	.word	0x40011000
 80018b0:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 80018b4:	4b68      	ldr	r3, [pc, #416]	; (8001a58 <LCD_Fast_DrawPoint+0x398>)
 80018b6:	889b      	ldrh	r3, [r3, #4]
 80018b8:	f641 1263 	movw	r2, #6499	; 0x1963
 80018bc:	4293      	cmp	r3, r2
 80018be:	f040 80d1 	bne.w	8001a64 <LCD_Fast_DrawPoint+0x3a4>
		if (lcddev.dir == 0)
 80018c2:	4b65      	ldr	r3, [pc, #404]	; (8001a58 <LCD_Fast_DrawPoint+0x398>)
 80018c4:	799b      	ldrb	r3, [r3, #6]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d106      	bne.n	80018d8 <LCD_Fast_DrawPoint+0x218>
			x = lcddev.width - 1 - x;
 80018ca:	4b63      	ldr	r3, [pc, #396]	; (8001a58 <LCD_Fast_DrawPoint+0x398>)
 80018cc:	881a      	ldrh	r2, [r3, #0]
 80018ce:	88fb      	ldrh	r3, [r7, #6]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	3b01      	subs	r3, #1
 80018d6:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 80018d8:	4b5f      	ldr	r3, [pc, #380]	; (8001a58 <LCD_Fast_DrawPoint+0x398>)
 80018da:	895b      	ldrh	r3, [r3, #10]
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff f83f 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 80018e2:	4b5e      	ldr	r3, [pc, #376]	; (8001a5c <LCD_Fast_DrawPoint+0x39c>)
 80018e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018e8:	611a      	str	r2, [r3, #16]
 80018ea:	4b5c      	ldr	r3, [pc, #368]	; (8001a5c <LCD_Fast_DrawPoint+0x39c>)
 80018ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018f0:	615a      	str	r2, [r3, #20]
 80018f2:	88fb      	ldrh	r3, [r7, #6]
 80018f4:	0a1b      	lsrs	r3, r3, #8
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	4b59      	ldr	r3, [pc, #356]	; (8001a60 <LCD_Fast_DrawPoint+0x3a0>)
 80018fa:	60da      	str	r2, [r3, #12]
 80018fc:	4b57      	ldr	r3, [pc, #348]	; (8001a5c <LCD_Fast_DrawPoint+0x39c>)
 80018fe:	2280      	movs	r2, #128	; 0x80
 8001900:	615a      	str	r2, [r3, #20]
 8001902:	4b56      	ldr	r3, [pc, #344]	; (8001a5c <LCD_Fast_DrawPoint+0x39c>)
 8001904:	2280      	movs	r2, #128	; 0x80
 8001906:	611a      	str	r2, [r3, #16]
 8001908:	4b54      	ldr	r3, [pc, #336]	; (8001a5c <LCD_Fast_DrawPoint+0x39c>)
 800190a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800190e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8001910:	4b52      	ldr	r3, [pc, #328]	; (8001a5c <LCD_Fast_DrawPoint+0x39c>)
 8001912:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001916:	611a      	str	r2, [r3, #16]
 8001918:	4b50      	ldr	r3, [pc, #320]	; (8001a5c <LCD_Fast_DrawPoint+0x39c>)
 800191a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800191e:	615a      	str	r2, [r3, #20]
 8001920:	88fb      	ldrh	r3, [r7, #6]
 8001922:	4a4f      	ldr	r2, [pc, #316]	; (8001a60 <LCD_Fast_DrawPoint+0x3a0>)
 8001924:	b2db      	uxtb	r3, r3
 8001926:	60d3      	str	r3, [r2, #12]
 8001928:	4b4c      	ldr	r3, [pc, #304]	; (8001a5c <LCD_Fast_DrawPoint+0x39c>)
 800192a:	2280      	movs	r2, #128	; 0x80
 800192c:	615a      	str	r2, [r3, #20]
 800192e:	4b4b      	ldr	r3, [pc, #300]	; (8001a5c <LCD_Fast_DrawPoint+0x39c>)
 8001930:	2280      	movs	r2, #128	; 0x80
 8001932:	611a      	str	r2, [r3, #16]
 8001934:	4b49      	ldr	r3, [pc, #292]	; (8001a5c <LCD_Fast_DrawPoint+0x39c>)
 8001936:	f44f 7200 	mov.w	r2, #512	; 0x200
 800193a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x >> 8);
 800193c:	4b47      	ldr	r3, [pc, #284]	; (8001a5c <LCD_Fast_DrawPoint+0x39c>)
 800193e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001942:	611a      	str	r2, [r3, #16]
 8001944:	4b45      	ldr	r3, [pc, #276]	; (8001a5c <LCD_Fast_DrawPoint+0x39c>)
 8001946:	f44f 7200 	mov.w	r2, #512	; 0x200
 800194a:	615a      	str	r2, [r3, #20]
 800194c:	88fb      	ldrh	r3, [r7, #6]
 800194e:	0a1b      	lsrs	r3, r3, #8
 8001950:	b29a      	uxth	r2, r3
 8001952:	4b43      	ldr	r3, [pc, #268]	; (8001a60 <LCD_Fast_DrawPoint+0x3a0>)
 8001954:	60da      	str	r2, [r3, #12]
 8001956:	4b41      	ldr	r3, [pc, #260]	; (8001a5c <LCD_Fast_DrawPoint+0x39c>)
 8001958:	2280      	movs	r2, #128	; 0x80
 800195a:	615a      	str	r2, [r3, #20]
 800195c:	4b3f      	ldr	r3, [pc, #252]	; (8001a5c <LCD_Fast_DrawPoint+0x39c>)
 800195e:	2280      	movs	r2, #128	; 0x80
 8001960:	611a      	str	r2, [r3, #16]
 8001962:	4b3e      	ldr	r3, [pc, #248]	; (8001a5c <LCD_Fast_DrawPoint+0x39c>)
 8001964:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001968:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 800196a:	4b3c      	ldr	r3, [pc, #240]	; (8001a5c <LCD_Fast_DrawPoint+0x39c>)
 800196c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001970:	611a      	str	r2, [r3, #16]
 8001972:	4b3a      	ldr	r3, [pc, #232]	; (8001a5c <LCD_Fast_DrawPoint+0x39c>)
 8001974:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001978:	615a      	str	r2, [r3, #20]
 800197a:	88fb      	ldrh	r3, [r7, #6]
 800197c:	4a38      	ldr	r2, [pc, #224]	; (8001a60 <LCD_Fast_DrawPoint+0x3a0>)
 800197e:	b2db      	uxtb	r3, r3
 8001980:	60d3      	str	r3, [r2, #12]
 8001982:	4b36      	ldr	r3, [pc, #216]	; (8001a5c <LCD_Fast_DrawPoint+0x39c>)
 8001984:	2280      	movs	r2, #128	; 0x80
 8001986:	615a      	str	r2, [r3, #20]
 8001988:	4b34      	ldr	r3, [pc, #208]	; (8001a5c <LCD_Fast_DrawPoint+0x39c>)
 800198a:	2280      	movs	r2, #128	; 0x80
 800198c:	611a      	str	r2, [r3, #16]
 800198e:	4b33      	ldr	r3, [pc, #204]	; (8001a5c <LCD_Fast_DrawPoint+0x39c>)
 8001990:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001994:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8001996:	4b30      	ldr	r3, [pc, #192]	; (8001a58 <LCD_Fast_DrawPoint+0x398>)
 8001998:	899b      	ldrh	r3, [r3, #12]
 800199a:	4618      	mov	r0, r3
 800199c:	f7fe ffe0 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 80019a0:	4b2e      	ldr	r3, [pc, #184]	; (8001a5c <LCD_Fast_DrawPoint+0x39c>)
 80019a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019a6:	611a      	str	r2, [r3, #16]
 80019a8:	4b2c      	ldr	r3, [pc, #176]	; (8001a5c <LCD_Fast_DrawPoint+0x39c>)
 80019aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019ae:	615a      	str	r2, [r3, #20]
 80019b0:	88bb      	ldrh	r3, [r7, #4]
 80019b2:	0a1b      	lsrs	r3, r3, #8
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	4b2a      	ldr	r3, [pc, #168]	; (8001a60 <LCD_Fast_DrawPoint+0x3a0>)
 80019b8:	60da      	str	r2, [r3, #12]
 80019ba:	4b28      	ldr	r3, [pc, #160]	; (8001a5c <LCD_Fast_DrawPoint+0x39c>)
 80019bc:	2280      	movs	r2, #128	; 0x80
 80019be:	615a      	str	r2, [r3, #20]
 80019c0:	4b26      	ldr	r3, [pc, #152]	; (8001a5c <LCD_Fast_DrawPoint+0x39c>)
 80019c2:	2280      	movs	r2, #128	; 0x80
 80019c4:	611a      	str	r2, [r3, #16]
 80019c6:	4b25      	ldr	r3, [pc, #148]	; (8001a5c <LCD_Fast_DrawPoint+0x39c>)
 80019c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019cc:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 80019ce:	4b23      	ldr	r3, [pc, #140]	; (8001a5c <LCD_Fast_DrawPoint+0x39c>)
 80019d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019d4:	611a      	str	r2, [r3, #16]
 80019d6:	4b21      	ldr	r3, [pc, #132]	; (8001a5c <LCD_Fast_DrawPoint+0x39c>)
 80019d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019dc:	615a      	str	r2, [r3, #20]
 80019de:	88bb      	ldrh	r3, [r7, #4]
 80019e0:	4a1f      	ldr	r2, [pc, #124]	; (8001a60 <LCD_Fast_DrawPoint+0x3a0>)
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	60d3      	str	r3, [r2, #12]
 80019e6:	4b1d      	ldr	r3, [pc, #116]	; (8001a5c <LCD_Fast_DrawPoint+0x39c>)
 80019e8:	2280      	movs	r2, #128	; 0x80
 80019ea:	615a      	str	r2, [r3, #20]
 80019ec:	4b1b      	ldr	r3, [pc, #108]	; (8001a5c <LCD_Fast_DrawPoint+0x39c>)
 80019ee:	2280      	movs	r2, #128	; 0x80
 80019f0:	611a      	str	r2, [r3, #16]
 80019f2:	4b1a      	ldr	r3, [pc, #104]	; (8001a5c <LCD_Fast_DrawPoint+0x39c>)
 80019f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019f8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y >> 8);
 80019fa:	4b18      	ldr	r3, [pc, #96]	; (8001a5c <LCD_Fast_DrawPoint+0x39c>)
 80019fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a00:	611a      	str	r2, [r3, #16]
 8001a02:	4b16      	ldr	r3, [pc, #88]	; (8001a5c <LCD_Fast_DrawPoint+0x39c>)
 8001a04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a08:	615a      	str	r2, [r3, #20]
 8001a0a:	88bb      	ldrh	r3, [r7, #4]
 8001a0c:	0a1b      	lsrs	r3, r3, #8
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	4b13      	ldr	r3, [pc, #76]	; (8001a60 <LCD_Fast_DrawPoint+0x3a0>)
 8001a12:	60da      	str	r2, [r3, #12]
 8001a14:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <LCD_Fast_DrawPoint+0x39c>)
 8001a16:	2280      	movs	r2, #128	; 0x80
 8001a18:	615a      	str	r2, [r3, #20]
 8001a1a:	4b10      	ldr	r3, [pc, #64]	; (8001a5c <LCD_Fast_DrawPoint+0x39c>)
 8001a1c:	2280      	movs	r2, #128	; 0x80
 8001a1e:	611a      	str	r2, [r3, #16]
 8001a20:	4b0e      	ldr	r3, [pc, #56]	; (8001a5c <LCD_Fast_DrawPoint+0x39c>)
 8001a22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a26:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8001a28:	4b0c      	ldr	r3, [pc, #48]	; (8001a5c <LCD_Fast_DrawPoint+0x39c>)
 8001a2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a2e:	611a      	str	r2, [r3, #16]
 8001a30:	4b0a      	ldr	r3, [pc, #40]	; (8001a5c <LCD_Fast_DrawPoint+0x39c>)
 8001a32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a36:	615a      	str	r2, [r3, #20]
 8001a38:	88bb      	ldrh	r3, [r7, #4]
 8001a3a:	4a09      	ldr	r2, [pc, #36]	; (8001a60 <LCD_Fast_DrawPoint+0x3a0>)
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	60d3      	str	r3, [r2, #12]
 8001a40:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <LCD_Fast_DrawPoint+0x39c>)
 8001a42:	2280      	movs	r2, #128	; 0x80
 8001a44:	615a      	str	r2, [r3, #20]
 8001a46:	4b05      	ldr	r3, [pc, #20]	; (8001a5c <LCD_Fast_DrawPoint+0x39c>)
 8001a48:	2280      	movs	r2, #128	; 0x80
 8001a4a:	611a      	str	r2, [r3, #16]
 8001a4c:	4b03      	ldr	r3, [pc, #12]	; (8001a5c <LCD_Fast_DrawPoint+0x39c>)
 8001a4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a52:	611a      	str	r2, [r3, #16]
 8001a54:	e095      	b.n	8001b82 <LCD_Fast_DrawPoint+0x4c2>
 8001a56:	bf00      	nop
 8001a58:	200000e8 	.word	0x200000e8
 8001a5c:	40011000 	.word	0x40011000
 8001a60:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X6804) {
 8001a64:	4b5e      	ldr	r3, [pc, #376]	; (8001be0 <LCD_Fast_DrawPoint+0x520>)
 8001a66:	889b      	ldrh	r3, [r3, #4]
 8001a68:	f646 0204 	movw	r2, #26628	; 0x6804
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d16f      	bne.n	8001b50 <LCD_Fast_DrawPoint+0x490>
		if (lcddev.dir == 1)
 8001a70:	4b5b      	ldr	r3, [pc, #364]	; (8001be0 <LCD_Fast_DrawPoint+0x520>)
 8001a72:	799b      	ldrb	r3, [r3, #6]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d106      	bne.n	8001a86 <LCD_Fast_DrawPoint+0x3c6>
			x = lcddev.width - 1 - x;	//横屏时处理
 8001a78:	4b59      	ldr	r3, [pc, #356]	; (8001be0 <LCD_Fast_DrawPoint+0x520>)
 8001a7a:	881a      	ldrh	r2, [r3, #0]
 8001a7c:	88fb      	ldrh	r3, [r7, #6]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	3b01      	subs	r3, #1
 8001a84:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8001a86:	4b56      	ldr	r3, [pc, #344]	; (8001be0 <LCD_Fast_DrawPoint+0x520>)
 8001a88:	895b      	ldrh	r3, [r3, #10]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7fe ff68 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8001a90:	4b54      	ldr	r3, [pc, #336]	; (8001be4 <LCD_Fast_DrawPoint+0x524>)
 8001a92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a96:	611a      	str	r2, [r3, #16]
 8001a98:	4b52      	ldr	r3, [pc, #328]	; (8001be4 <LCD_Fast_DrawPoint+0x524>)
 8001a9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a9e:	615a      	str	r2, [r3, #20]
 8001aa0:	88fb      	ldrh	r3, [r7, #6]
 8001aa2:	0a1b      	lsrs	r3, r3, #8
 8001aa4:	b29a      	uxth	r2, r3
 8001aa6:	4b50      	ldr	r3, [pc, #320]	; (8001be8 <LCD_Fast_DrawPoint+0x528>)
 8001aa8:	60da      	str	r2, [r3, #12]
 8001aaa:	4b4e      	ldr	r3, [pc, #312]	; (8001be4 <LCD_Fast_DrawPoint+0x524>)
 8001aac:	2280      	movs	r2, #128	; 0x80
 8001aae:	615a      	str	r2, [r3, #20]
 8001ab0:	4b4c      	ldr	r3, [pc, #304]	; (8001be4 <LCD_Fast_DrawPoint+0x524>)
 8001ab2:	2280      	movs	r2, #128	; 0x80
 8001ab4:	611a      	str	r2, [r3, #16]
 8001ab6:	4b4b      	ldr	r3, [pc, #300]	; (8001be4 <LCD_Fast_DrawPoint+0x524>)
 8001ab8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001abc:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8001abe:	4b49      	ldr	r3, [pc, #292]	; (8001be4 <LCD_Fast_DrawPoint+0x524>)
 8001ac0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ac4:	611a      	str	r2, [r3, #16]
 8001ac6:	4b47      	ldr	r3, [pc, #284]	; (8001be4 <LCD_Fast_DrawPoint+0x524>)
 8001ac8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001acc:	615a      	str	r2, [r3, #20]
 8001ace:	88fb      	ldrh	r3, [r7, #6]
 8001ad0:	4a45      	ldr	r2, [pc, #276]	; (8001be8 <LCD_Fast_DrawPoint+0x528>)
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	60d3      	str	r3, [r2, #12]
 8001ad6:	4b43      	ldr	r3, [pc, #268]	; (8001be4 <LCD_Fast_DrawPoint+0x524>)
 8001ad8:	2280      	movs	r2, #128	; 0x80
 8001ada:	615a      	str	r2, [r3, #20]
 8001adc:	4b41      	ldr	r3, [pc, #260]	; (8001be4 <LCD_Fast_DrawPoint+0x524>)
 8001ade:	2280      	movs	r2, #128	; 0x80
 8001ae0:	611a      	str	r2, [r3, #16]
 8001ae2:	4b40      	ldr	r3, [pc, #256]	; (8001be4 <LCD_Fast_DrawPoint+0x524>)
 8001ae4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ae8:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8001aea:	4b3d      	ldr	r3, [pc, #244]	; (8001be0 <LCD_Fast_DrawPoint+0x520>)
 8001aec:	899b      	ldrh	r3, [r3, #12]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7fe ff36 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8001af4:	4b3b      	ldr	r3, [pc, #236]	; (8001be4 <LCD_Fast_DrawPoint+0x524>)
 8001af6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001afa:	611a      	str	r2, [r3, #16]
 8001afc:	4b39      	ldr	r3, [pc, #228]	; (8001be4 <LCD_Fast_DrawPoint+0x524>)
 8001afe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b02:	615a      	str	r2, [r3, #20]
 8001b04:	88bb      	ldrh	r3, [r7, #4]
 8001b06:	0a1b      	lsrs	r3, r3, #8
 8001b08:	b29a      	uxth	r2, r3
 8001b0a:	4b37      	ldr	r3, [pc, #220]	; (8001be8 <LCD_Fast_DrawPoint+0x528>)
 8001b0c:	60da      	str	r2, [r3, #12]
 8001b0e:	4b35      	ldr	r3, [pc, #212]	; (8001be4 <LCD_Fast_DrawPoint+0x524>)
 8001b10:	2280      	movs	r2, #128	; 0x80
 8001b12:	615a      	str	r2, [r3, #20]
 8001b14:	4b33      	ldr	r3, [pc, #204]	; (8001be4 <LCD_Fast_DrawPoint+0x524>)
 8001b16:	2280      	movs	r2, #128	; 0x80
 8001b18:	611a      	str	r2, [r3, #16]
 8001b1a:	4b32      	ldr	r3, [pc, #200]	; (8001be4 <LCD_Fast_DrawPoint+0x524>)
 8001b1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b20:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8001b22:	4b30      	ldr	r3, [pc, #192]	; (8001be4 <LCD_Fast_DrawPoint+0x524>)
 8001b24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b28:	611a      	str	r2, [r3, #16]
 8001b2a:	4b2e      	ldr	r3, [pc, #184]	; (8001be4 <LCD_Fast_DrawPoint+0x524>)
 8001b2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b30:	615a      	str	r2, [r3, #20]
 8001b32:	88bb      	ldrh	r3, [r7, #4]
 8001b34:	4a2c      	ldr	r2, [pc, #176]	; (8001be8 <LCD_Fast_DrawPoint+0x528>)
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	60d3      	str	r3, [r2, #12]
 8001b3a:	4b2a      	ldr	r3, [pc, #168]	; (8001be4 <LCD_Fast_DrawPoint+0x524>)
 8001b3c:	2280      	movs	r2, #128	; 0x80
 8001b3e:	615a      	str	r2, [r3, #20]
 8001b40:	4b28      	ldr	r3, [pc, #160]	; (8001be4 <LCD_Fast_DrawPoint+0x524>)
 8001b42:	2280      	movs	r2, #128	; 0x80
 8001b44:	611a      	str	r2, [r3, #16]
 8001b46:	4b27      	ldr	r3, [pc, #156]	; (8001be4 <LCD_Fast_DrawPoint+0x524>)
 8001b48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b4c:	611a      	str	r2, [r3, #16]
 8001b4e:	e018      	b.n	8001b82 <LCD_Fast_DrawPoint+0x4c2>
	} else {
		if (lcddev.dir == 1)
 8001b50:	4b23      	ldr	r3, [pc, #140]	; (8001be0 <LCD_Fast_DrawPoint+0x520>)
 8001b52:	799b      	ldrb	r3, [r3, #6]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d106      	bne.n	8001b66 <LCD_Fast_DrawPoint+0x4a6>
			x = lcddev.width - 1 - x;	//横屏其实就是调转x,y坐标
 8001b58:	4b21      	ldr	r3, [pc, #132]	; (8001be0 <LCD_Fast_DrawPoint+0x520>)
 8001b5a:	881a      	ldrh	r2, [r3, #0]
 8001b5c:	88fb      	ldrh	r3, [r7, #6]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	3b01      	subs	r3, #1
 8001b64:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, x);
 8001b66:	4b1e      	ldr	r3, [pc, #120]	; (8001be0 <LCD_Fast_DrawPoint+0x520>)
 8001b68:	895b      	ldrh	r3, [r3, #10]
 8001b6a:	88fa      	ldrh	r2, [r7, #6]
 8001b6c:	4611      	mov	r1, r2
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7fe ff82 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, y);
 8001b74:	4b1a      	ldr	r3, [pc, #104]	; (8001be0 <LCD_Fast_DrawPoint+0x520>)
 8001b76:	899b      	ldrh	r3, [r3, #12]
 8001b78:	88ba      	ldrh	r2, [r7, #4]
 8001b7a:	4611      	mov	r1, r2
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7fe ff7b 	bl	8000a78 <LCD_WriteReg>
	}
	LCD_RS_CLR;
 8001b82:	4b18      	ldr	r3, [pc, #96]	; (8001be4 <LCD_Fast_DrawPoint+0x524>)
 8001b84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b88:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 8001b8a:	4b16      	ldr	r3, [pc, #88]	; (8001be4 <LCD_Fast_DrawPoint+0x524>)
 8001b8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b90:	615a      	str	r2, [r3, #20]
	DATAOUT(lcddev.wramcmd);	//写指令
 8001b92:	4b13      	ldr	r3, [pc, #76]	; (8001be0 <LCD_Fast_DrawPoint+0x520>)
 8001b94:	891a      	ldrh	r2, [r3, #8]
 8001b96:	4b14      	ldr	r3, [pc, #80]	; (8001be8 <LCD_Fast_DrawPoint+0x528>)
 8001b98:	60da      	str	r2, [r3, #12]
	LCD_WR_CLR;
 8001b9a:	4b12      	ldr	r3, [pc, #72]	; (8001be4 <LCD_Fast_DrawPoint+0x524>)
 8001b9c:	2280      	movs	r2, #128	; 0x80
 8001b9e:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8001ba0:	4b10      	ldr	r3, [pc, #64]	; (8001be4 <LCD_Fast_DrawPoint+0x524>)
 8001ba2:	2280      	movs	r2, #128	; 0x80
 8001ba4:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8001ba6:	4b0f      	ldr	r3, [pc, #60]	; (8001be4 <LCD_Fast_DrawPoint+0x524>)
 8001ba8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bac:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(color);		//写数据
 8001bae:	4b0d      	ldr	r3, [pc, #52]	; (8001be4 <LCD_Fast_DrawPoint+0x524>)
 8001bb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bb4:	611a      	str	r2, [r3, #16]
 8001bb6:	4b0b      	ldr	r3, [pc, #44]	; (8001be4 <LCD_Fast_DrawPoint+0x524>)
 8001bb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bbc:	615a      	str	r2, [r3, #20]
 8001bbe:	4a0a      	ldr	r2, [pc, #40]	; (8001be8 <LCD_Fast_DrawPoint+0x528>)
 8001bc0:	887b      	ldrh	r3, [r7, #2]
 8001bc2:	60d3      	str	r3, [r2, #12]
 8001bc4:	4b07      	ldr	r3, [pc, #28]	; (8001be4 <LCD_Fast_DrawPoint+0x524>)
 8001bc6:	2280      	movs	r2, #128	; 0x80
 8001bc8:	615a      	str	r2, [r3, #20]
 8001bca:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <LCD_Fast_DrawPoint+0x524>)
 8001bcc:	2280      	movs	r2, #128	; 0x80
 8001bce:	611a      	str	r2, [r3, #16]
 8001bd0:	4b04      	ldr	r3, [pc, #16]	; (8001be4 <LCD_Fast_DrawPoint+0x524>)
 8001bd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bd6:	611a      	str	r2, [r3, #16]
}
 8001bd8:	bf00      	nop
 8001bda:	3708      	adds	r7, #8
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	200000e8 	.word	0x200000e8
 8001be4:	40011000 	.word	0x40011000
 8001be8:	40010c00 	.word	0x40010c00
 8001bec:	00000000 	.word	0x00000000

08001bf0 <LCD_SSD_BackLightSet>:
//SSD1963 背光设置
//pwm:背光等级,0~100.越大越亮.
void LCD_SSD_BackLightSet(uint8_t pwm) {
 8001bf0:	b590      	push	{r4, r7, lr}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	71fb      	strb	r3, [r7, #7]
	LCD_WR_REG(0xBE);	//配置PWM输出
 8001bfa:	20be      	movs	r0, #190	; 0xbe
 8001bfc:	f7fe feb0 	bl	8000960 <LCD_WR_REG>
	LCD_WR_DATA(0x05);	//1设置PWM频率
 8001c00:	4b4b      	ldr	r3, [pc, #300]	; (8001d30 <LCD_SSD_BackLightSet+0x140>)
 8001c02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c06:	611a      	str	r2, [r3, #16]
 8001c08:	4b49      	ldr	r3, [pc, #292]	; (8001d30 <LCD_SSD_BackLightSet+0x140>)
 8001c0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c0e:	615a      	str	r2, [r3, #20]
 8001c10:	4b48      	ldr	r3, [pc, #288]	; (8001d34 <LCD_SSD_BackLightSet+0x144>)
 8001c12:	2205      	movs	r2, #5
 8001c14:	60da      	str	r2, [r3, #12]
 8001c16:	4b46      	ldr	r3, [pc, #280]	; (8001d30 <LCD_SSD_BackLightSet+0x140>)
 8001c18:	2280      	movs	r2, #128	; 0x80
 8001c1a:	615a      	str	r2, [r3, #20]
 8001c1c:	4b44      	ldr	r3, [pc, #272]	; (8001d30 <LCD_SSD_BackLightSet+0x140>)
 8001c1e:	2280      	movs	r2, #128	; 0x80
 8001c20:	611a      	str	r2, [r3, #16]
 8001c22:	4b43      	ldr	r3, [pc, #268]	; (8001d30 <LCD_SSD_BackLightSet+0x140>)
 8001c24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c28:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(pwm * 2.55);	//2设置PWM占空比
 8001c2a:	4b41      	ldr	r3, [pc, #260]	; (8001d30 <LCD_SSD_BackLightSet+0x140>)
 8001c2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c30:	611a      	str	r2, [r3, #16]
 8001c32:	4b3f      	ldr	r3, [pc, #252]	; (8001d30 <LCD_SSD_BackLightSet+0x140>)
 8001c34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c38:	615a      	str	r2, [r3, #20]
 8001c3a:	79fb      	ldrb	r3, [r7, #7]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7fe fd77 	bl	8000730 <__aeabi_i2d>
 8001c42:	a339      	add	r3, pc, #228	; (adr r3, 8001d28 <LCD_SSD_BackLightSet+0x138>)
 8001c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c48:	f7fe faf6 	bl	8000238 <__aeabi_dmul>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	460b      	mov	r3, r1
 8001c50:	4c38      	ldr	r4, [pc, #224]	; (8001d34 <LCD_SSD_BackLightSet+0x144>)
 8001c52:	4610      	mov	r0, r2
 8001c54:	4619      	mov	r1, r3
 8001c56:	f7fe fdd5 	bl	8000804 <__aeabi_d2uiz>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	60e3      	str	r3, [r4, #12]
 8001c5e:	4b34      	ldr	r3, [pc, #208]	; (8001d30 <LCD_SSD_BackLightSet+0x140>)
 8001c60:	2280      	movs	r2, #128	; 0x80
 8001c62:	615a      	str	r2, [r3, #20]
 8001c64:	4b32      	ldr	r3, [pc, #200]	; (8001d30 <LCD_SSD_BackLightSet+0x140>)
 8001c66:	2280      	movs	r2, #128	; 0x80
 8001c68:	611a      	str	r2, [r3, #16]
 8001c6a:	4b31      	ldr	r3, [pc, #196]	; (8001d30 <LCD_SSD_BackLightSet+0x140>)
 8001c6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c70:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x01);	//3设置C
 8001c72:	4b2f      	ldr	r3, [pc, #188]	; (8001d30 <LCD_SSD_BackLightSet+0x140>)
 8001c74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c78:	611a      	str	r2, [r3, #16]
 8001c7a:	4b2d      	ldr	r3, [pc, #180]	; (8001d30 <LCD_SSD_BackLightSet+0x140>)
 8001c7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c80:	615a      	str	r2, [r3, #20]
 8001c82:	4b2c      	ldr	r3, [pc, #176]	; (8001d34 <LCD_SSD_BackLightSet+0x144>)
 8001c84:	2201      	movs	r2, #1
 8001c86:	60da      	str	r2, [r3, #12]
 8001c88:	4b29      	ldr	r3, [pc, #164]	; (8001d30 <LCD_SSD_BackLightSet+0x140>)
 8001c8a:	2280      	movs	r2, #128	; 0x80
 8001c8c:	615a      	str	r2, [r3, #20]
 8001c8e:	4b28      	ldr	r3, [pc, #160]	; (8001d30 <LCD_SSD_BackLightSet+0x140>)
 8001c90:	2280      	movs	r2, #128	; 0x80
 8001c92:	611a      	str	r2, [r3, #16]
 8001c94:	4b26      	ldr	r3, [pc, #152]	; (8001d30 <LCD_SSD_BackLightSet+0x140>)
 8001c96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c9a:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0xFF);	//4设置D
 8001c9c:	4b24      	ldr	r3, [pc, #144]	; (8001d30 <LCD_SSD_BackLightSet+0x140>)
 8001c9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ca2:	611a      	str	r2, [r3, #16]
 8001ca4:	4b22      	ldr	r3, [pc, #136]	; (8001d30 <LCD_SSD_BackLightSet+0x140>)
 8001ca6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001caa:	615a      	str	r2, [r3, #20]
 8001cac:	4b21      	ldr	r3, [pc, #132]	; (8001d34 <LCD_SSD_BackLightSet+0x144>)
 8001cae:	22ff      	movs	r2, #255	; 0xff
 8001cb0:	60da      	str	r2, [r3, #12]
 8001cb2:	4b1f      	ldr	r3, [pc, #124]	; (8001d30 <LCD_SSD_BackLightSet+0x140>)
 8001cb4:	2280      	movs	r2, #128	; 0x80
 8001cb6:	615a      	str	r2, [r3, #20]
 8001cb8:	4b1d      	ldr	r3, [pc, #116]	; (8001d30 <LCD_SSD_BackLightSet+0x140>)
 8001cba:	2280      	movs	r2, #128	; 0x80
 8001cbc:	611a      	str	r2, [r3, #16]
 8001cbe:	4b1c      	ldr	r3, [pc, #112]	; (8001d30 <LCD_SSD_BackLightSet+0x140>)
 8001cc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cc4:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//5设置E
 8001cc6:	4b1a      	ldr	r3, [pc, #104]	; (8001d30 <LCD_SSD_BackLightSet+0x140>)
 8001cc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ccc:	611a      	str	r2, [r3, #16]
 8001cce:	4b18      	ldr	r3, [pc, #96]	; (8001d30 <LCD_SSD_BackLightSet+0x140>)
 8001cd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cd4:	615a      	str	r2, [r3, #20]
 8001cd6:	4b17      	ldr	r3, [pc, #92]	; (8001d34 <LCD_SSD_BackLightSet+0x144>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	60da      	str	r2, [r3, #12]
 8001cdc:	4b14      	ldr	r3, [pc, #80]	; (8001d30 <LCD_SSD_BackLightSet+0x140>)
 8001cde:	2280      	movs	r2, #128	; 0x80
 8001ce0:	615a      	str	r2, [r3, #20]
 8001ce2:	4b13      	ldr	r3, [pc, #76]	; (8001d30 <LCD_SSD_BackLightSet+0x140>)
 8001ce4:	2280      	movs	r2, #128	; 0x80
 8001ce6:	611a      	str	r2, [r3, #16]
 8001ce8:	4b11      	ldr	r3, [pc, #68]	; (8001d30 <LCD_SSD_BackLightSet+0x140>)
 8001cea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cee:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//6设置F
 8001cf0:	4b0f      	ldr	r3, [pc, #60]	; (8001d30 <LCD_SSD_BackLightSet+0x140>)
 8001cf2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cf6:	611a      	str	r2, [r3, #16]
 8001cf8:	4b0d      	ldr	r3, [pc, #52]	; (8001d30 <LCD_SSD_BackLightSet+0x140>)
 8001cfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cfe:	615a      	str	r2, [r3, #20]
 8001d00:	4b0c      	ldr	r3, [pc, #48]	; (8001d34 <LCD_SSD_BackLightSet+0x144>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	60da      	str	r2, [r3, #12]
 8001d06:	4b0a      	ldr	r3, [pc, #40]	; (8001d30 <LCD_SSD_BackLightSet+0x140>)
 8001d08:	2280      	movs	r2, #128	; 0x80
 8001d0a:	615a      	str	r2, [r3, #20]
 8001d0c:	4b08      	ldr	r3, [pc, #32]	; (8001d30 <LCD_SSD_BackLightSet+0x140>)
 8001d0e:	2280      	movs	r2, #128	; 0x80
 8001d10:	611a      	str	r2, [r3, #16]
 8001d12:	4b07      	ldr	r3, [pc, #28]	; (8001d30 <LCD_SSD_BackLightSet+0x140>)
 8001d14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d18:	611a      	str	r2, [r3, #16]
}
 8001d1a:	bf00      	nop
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd90      	pop	{r4, r7, pc}
 8001d22:	bf00      	nop
 8001d24:	f3af 8000 	nop.w
 8001d28:	66666666 	.word	0x66666666
 8001d2c:	40046666 	.word	0x40046666
 8001d30:	40011000 	.word	0x40011000
 8001d34:	40010c00 	.word	0x40010c00

08001d38 <LCD_Display_Dir>:
// Set LCD display direction
// dir: 0, vertical 1, horizontal
void LCD_Display_Dir(uint8_t dir) {
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	71fb      	strb	r3, [r7, #7]
	if (dir == 0)			//竖屏
 8001d42:	79fb      	ldrb	r3, [r7, #7]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d177      	bne.n	8001e38 <LCD_Display_Dir+0x100>
			{
		lcddev.dir = 0;	//竖屏
 8001d48:	4b80      	ldr	r3, [pc, #512]	; (8001f4c <LCD_Display_Dir+0x214>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	719a      	strb	r2, [r3, #6]
		lcddev.width = 240;
 8001d4e:	4b7f      	ldr	r3, [pc, #508]	; (8001f4c <LCD_Display_Dir+0x214>)
 8001d50:	22f0      	movs	r2, #240	; 0xf0
 8001d52:	801a      	strh	r2, [r3, #0]
		lcddev.height = 320;
 8001d54:	4b7d      	ldr	r3, [pc, #500]	; (8001f4c <LCD_Display_Dir+0x214>)
 8001d56:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001d5a:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001d5c:	4b7b      	ldr	r3, [pc, #492]	; (8001f4c <LCD_Display_Dir+0x214>)
 8001d5e:	889b      	ldrh	r3, [r3, #4]
 8001d60:	f249 3241 	movw	r2, #37697	; 0x9341
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d00b      	beq.n	8001d80 <LCD_Display_Dir+0x48>
 8001d68:	4b78      	ldr	r3, [pc, #480]	; (8001f4c <LCD_Display_Dir+0x214>)
 8001d6a:	889b      	ldrh	r3, [r3, #4]
 8001d6c:	f646 0204 	movw	r2, #26628	; 0x6804
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d005      	beq.n	8001d80 <LCD_Display_Dir+0x48>
 8001d74:	4b75      	ldr	r3, [pc, #468]	; (8001f4c <LCD_Display_Dir+0x214>)
 8001d76:	889b      	ldrh	r3, [r3, #4]
 8001d78:	f245 3210 	movw	r2, #21264	; 0x5310
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d11e      	bne.n	8001dbe <LCD_Display_Dir+0x86>
			lcddev.wramcmd = 0X2C;
 8001d80:	4b72      	ldr	r3, [pc, #456]	; (8001f4c <LCD_Display_Dir+0x214>)
 8001d82:	222c      	movs	r2, #44	; 0x2c
 8001d84:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 8001d86:	4b71      	ldr	r3, [pc, #452]	; (8001f4c <LCD_Display_Dir+0x214>)
 8001d88:	222a      	movs	r2, #42	; 0x2a
 8001d8a:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 8001d8c:	4b6f      	ldr	r3, [pc, #444]	; (8001f4c <LCD_Display_Dir+0x214>)
 8001d8e:	222b      	movs	r2, #43	; 0x2b
 8001d90:	819a      	strh	r2, [r3, #12]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001d92:	4b6e      	ldr	r3, [pc, #440]	; (8001f4c <LCD_Display_Dir+0x214>)
 8001d94:	889b      	ldrh	r3, [r3, #4]
 8001d96:	f646 0204 	movw	r2, #26628	; 0x6804
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d006      	beq.n	8001dac <LCD_Display_Dir+0x74>
 8001d9e:	4b6b      	ldr	r3, [pc, #428]	; (8001f4c <LCD_Display_Dir+0x214>)
 8001da0:	889b      	ldrh	r3, [r3, #4]
 8001da2:	f245 3210 	movw	r2, #21264	; 0x5310
 8001da6:	4293      	cmp	r3, r2
 8001da8:	f040 80c7 	bne.w	8001f3a <LCD_Display_Dir+0x202>
				lcddev.width = 320;
 8001dac:	4b67      	ldr	r3, [pc, #412]	; (8001f4c <LCD_Display_Dir+0x214>)
 8001dae:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001db2:	801a      	strh	r2, [r3, #0]
				lcddev.height = 480;
 8001db4:	4b65      	ldr	r3, [pc, #404]	; (8001f4c <LCD_Display_Dir+0x214>)
 8001db6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001dba:	805a      	strh	r2, [r3, #2]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001dbc:	e0bd      	b.n	8001f3a <LCD_Display_Dir+0x202>
			}
		} else if (lcddev.id == 0x5510) {
 8001dbe:	4b63      	ldr	r3, [pc, #396]	; (8001f4c <LCD_Display_Dir+0x214>)
 8001dc0:	889b      	ldrh	r3, [r3, #4]
 8001dc2:	f245 5210 	movw	r2, #21776	; 0x5510
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d114      	bne.n	8001df4 <LCD_Display_Dir+0xbc>
			lcddev.wramcmd = 0X2C00;
 8001dca:	4b60      	ldr	r3, [pc, #384]	; (8001f4c <LCD_Display_Dir+0x214>)
 8001dcc:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8001dd0:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 8001dd2:	4b5e      	ldr	r3, [pc, #376]	; (8001f4c <LCD_Display_Dir+0x214>)
 8001dd4:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8001dd8:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 8001dda:	4b5c      	ldr	r3, [pc, #368]	; (8001f4c <LCD_Display_Dir+0x214>)
 8001ddc:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8001de0:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;
 8001de2:	4b5a      	ldr	r3, [pc, #360]	; (8001f4c <LCD_Display_Dir+0x214>)
 8001de4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001de8:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;
 8001dea:	4b58      	ldr	r3, [pc, #352]	; (8001f4c <LCD_Display_Dir+0x214>)
 8001dec:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001df0:	805a      	strh	r2, [r3, #2]
 8001df2:	e0a3      	b.n	8001f3c <LCD_Display_Dir+0x204>
		} else if (lcddev.id == 0X1963) {
 8001df4:	4b55      	ldr	r3, [pc, #340]	; (8001f4c <LCD_Display_Dir+0x214>)
 8001df6:	889b      	ldrh	r3, [r3, #4]
 8001df8:	f641 1263 	movw	r2, #6499	; 0x1963
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d111      	bne.n	8001e24 <LCD_Display_Dir+0xec>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 8001e00:	4b52      	ldr	r3, [pc, #328]	; (8001f4c <LCD_Display_Dir+0x214>)
 8001e02:	222c      	movs	r2, #44	; 0x2c
 8001e04:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;	//设置写X坐标指令
 8001e06:	4b51      	ldr	r3, [pc, #324]	; (8001f4c <LCD_Display_Dir+0x214>)
 8001e08:	222b      	movs	r2, #43	; 0x2b
 8001e0a:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;	//设置写Y坐标指令
 8001e0c:	4b4f      	ldr	r3, [pc, #316]	; (8001f4c <LCD_Display_Dir+0x214>)
 8001e0e:	222a      	movs	r2, #42	; 0x2a
 8001e10:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;		//设置宽度480
 8001e12:	4b4e      	ldr	r3, [pc, #312]	; (8001f4c <LCD_Display_Dir+0x214>)
 8001e14:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001e18:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;		//设置高度800
 8001e1a:	4b4c      	ldr	r3, [pc, #304]	; (8001f4c <LCD_Display_Dir+0x214>)
 8001e1c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001e20:	805a      	strh	r2, [r3, #2]
 8001e22:	e08b      	b.n	8001f3c <LCD_Display_Dir+0x204>
		} else {
			lcddev.wramcmd = 0X22;
 8001e24:	4b49      	ldr	r3, [pc, #292]	; (8001f4c <LCD_Display_Dir+0x214>)
 8001e26:	2222      	movs	r2, #34	; 0x22
 8001e28:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X20;
 8001e2a:	4b48      	ldr	r3, [pc, #288]	; (8001f4c <LCD_Display_Dir+0x214>)
 8001e2c:	2220      	movs	r2, #32
 8001e2e:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X21;
 8001e30:	4b46      	ldr	r3, [pc, #280]	; (8001f4c <LCD_Display_Dir+0x214>)
 8001e32:	2221      	movs	r2, #33	; 0x21
 8001e34:	819a      	strh	r2, [r3, #12]
 8001e36:	e081      	b.n	8001f3c <LCD_Display_Dir+0x204>
		}
	} else 				//横屏
	{
		lcddev.dir = 1;	//横屏
 8001e38:	4b44      	ldr	r3, [pc, #272]	; (8001f4c <LCD_Display_Dir+0x214>)
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	719a      	strb	r2, [r3, #6]
		lcddev.width = 320;
 8001e3e:	4b43      	ldr	r3, [pc, #268]	; (8001f4c <LCD_Display_Dir+0x214>)
 8001e40:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001e44:	801a      	strh	r2, [r3, #0]
		lcddev.height = 240;
 8001e46:	4b41      	ldr	r3, [pc, #260]	; (8001f4c <LCD_Display_Dir+0x214>)
 8001e48:	22f0      	movs	r2, #240	; 0xf0
 8001e4a:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8001e4c:	4b3f      	ldr	r3, [pc, #252]	; (8001f4c <LCD_Display_Dir+0x214>)
 8001e4e:	889b      	ldrh	r3, [r3, #4]
 8001e50:	f249 3241 	movw	r2, #37697	; 0x9341
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d005      	beq.n	8001e64 <LCD_Display_Dir+0x12c>
 8001e58:	4b3c      	ldr	r3, [pc, #240]	; (8001f4c <LCD_Display_Dir+0x214>)
 8001e5a:	889b      	ldrh	r3, [r3, #4]
 8001e5c:	f245 3210 	movw	r2, #21264	; 0x5310
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d109      	bne.n	8001e78 <LCD_Display_Dir+0x140>
			lcddev.wramcmd = 0X2C;
 8001e64:	4b39      	ldr	r3, [pc, #228]	; (8001f4c <LCD_Display_Dir+0x214>)
 8001e66:	222c      	movs	r2, #44	; 0x2c
 8001e68:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 8001e6a:	4b38      	ldr	r3, [pc, #224]	; (8001f4c <LCD_Display_Dir+0x214>)
 8001e6c:	222a      	movs	r2, #42	; 0x2a
 8001e6e:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 8001e70:	4b36      	ldr	r3, [pc, #216]	; (8001f4c <LCD_Display_Dir+0x214>)
 8001e72:	222b      	movs	r2, #43	; 0x2b
 8001e74:	819a      	strh	r2, [r3, #12]
 8001e76:	e04b      	b.n	8001f10 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X6804) {
 8001e78:	4b34      	ldr	r3, [pc, #208]	; (8001f4c <LCD_Display_Dir+0x214>)
 8001e7a:	889b      	ldrh	r3, [r3, #4]
 8001e7c:	f646 0204 	movw	r2, #26628	; 0x6804
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d109      	bne.n	8001e98 <LCD_Display_Dir+0x160>
			lcddev.wramcmd = 0X2C;
 8001e84:	4b31      	ldr	r3, [pc, #196]	; (8001f4c <LCD_Display_Dir+0x214>)
 8001e86:	222c      	movs	r2, #44	; 0x2c
 8001e88:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;
 8001e8a:	4b30      	ldr	r3, [pc, #192]	; (8001f4c <LCD_Display_Dir+0x214>)
 8001e8c:	222b      	movs	r2, #43	; 0x2b
 8001e8e:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;
 8001e90:	4b2e      	ldr	r3, [pc, #184]	; (8001f4c <LCD_Display_Dir+0x214>)
 8001e92:	222a      	movs	r2, #42	; 0x2a
 8001e94:	819a      	strh	r2, [r3, #12]
 8001e96:	e03b      	b.n	8001f10 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0x5510) {
 8001e98:	4b2c      	ldr	r3, [pc, #176]	; (8001f4c <LCD_Display_Dir+0x214>)
 8001e9a:	889b      	ldrh	r3, [r3, #4]
 8001e9c:	f245 5210 	movw	r2, #21776	; 0x5510
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d114      	bne.n	8001ece <LCD_Display_Dir+0x196>
			lcddev.wramcmd = 0X2C00;
 8001ea4:	4b29      	ldr	r3, [pc, #164]	; (8001f4c <LCD_Display_Dir+0x214>)
 8001ea6:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8001eaa:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 8001eac:	4b27      	ldr	r3, [pc, #156]	; (8001f4c <LCD_Display_Dir+0x214>)
 8001eae:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8001eb2:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 8001eb4:	4b25      	ldr	r3, [pc, #148]	; (8001f4c <LCD_Display_Dir+0x214>)
 8001eb6:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8001eba:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;
 8001ebc:	4b23      	ldr	r3, [pc, #140]	; (8001f4c <LCD_Display_Dir+0x214>)
 8001ebe:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001ec2:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;
 8001ec4:	4b21      	ldr	r3, [pc, #132]	; (8001f4c <LCD_Display_Dir+0x214>)
 8001ec6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001eca:	805a      	strh	r2, [r3, #2]
 8001ecc:	e020      	b.n	8001f10 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X1963) {
 8001ece:	4b1f      	ldr	r3, [pc, #124]	; (8001f4c <LCD_Display_Dir+0x214>)
 8001ed0:	889b      	ldrh	r3, [r3, #4]
 8001ed2:	f641 1263 	movw	r2, #6499	; 0x1963
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d111      	bne.n	8001efe <LCD_Display_Dir+0x1c6>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 8001eda:	4b1c      	ldr	r3, [pc, #112]	; (8001f4c <LCD_Display_Dir+0x214>)
 8001edc:	222c      	movs	r2, #44	; 0x2c
 8001ede:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;	//设置写X坐标指令
 8001ee0:	4b1a      	ldr	r3, [pc, #104]	; (8001f4c <LCD_Display_Dir+0x214>)
 8001ee2:	222a      	movs	r2, #42	; 0x2a
 8001ee4:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;	//设置写Y坐标指令
 8001ee6:	4b19      	ldr	r3, [pc, #100]	; (8001f4c <LCD_Display_Dir+0x214>)
 8001ee8:	222b      	movs	r2, #43	; 0x2b
 8001eea:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;		//设置宽度800
 8001eec:	4b17      	ldr	r3, [pc, #92]	; (8001f4c <LCD_Display_Dir+0x214>)
 8001eee:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001ef2:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;		//设置高度480
 8001ef4:	4b15      	ldr	r3, [pc, #84]	; (8001f4c <LCD_Display_Dir+0x214>)
 8001ef6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001efa:	805a      	strh	r2, [r3, #2]
 8001efc:	e008      	b.n	8001f10 <LCD_Display_Dir+0x1d8>
		} else {
			lcddev.wramcmd = 0X22;
 8001efe:	4b13      	ldr	r3, [pc, #76]	; (8001f4c <LCD_Display_Dir+0x214>)
 8001f00:	2222      	movs	r2, #34	; 0x22
 8001f02:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X21;
 8001f04:	4b11      	ldr	r3, [pc, #68]	; (8001f4c <LCD_Display_Dir+0x214>)
 8001f06:	2221      	movs	r2, #33	; 0x21
 8001f08:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X20;
 8001f0a:	4b10      	ldr	r3, [pc, #64]	; (8001f4c <LCD_Display_Dir+0x214>)
 8001f0c:	2220      	movs	r2, #32
 8001f0e:	819a      	strh	r2, [r3, #12]
		}
		if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001f10:	4b0e      	ldr	r3, [pc, #56]	; (8001f4c <LCD_Display_Dir+0x214>)
 8001f12:	889b      	ldrh	r3, [r3, #4]
 8001f14:	f646 0204 	movw	r2, #26628	; 0x6804
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d005      	beq.n	8001f28 <LCD_Display_Dir+0x1f0>
 8001f1c:	4b0b      	ldr	r3, [pc, #44]	; (8001f4c <LCD_Display_Dir+0x214>)
 8001f1e:	889b      	ldrh	r3, [r3, #4]
 8001f20:	f245 3210 	movw	r2, #21264	; 0x5310
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d109      	bne.n	8001f3c <LCD_Display_Dir+0x204>
			lcddev.width = 480;
 8001f28:	4b08      	ldr	r3, [pc, #32]	; (8001f4c <LCD_Display_Dir+0x214>)
 8001f2a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001f2e:	801a      	strh	r2, [r3, #0]
			lcddev.height = 320;
 8001f30:	4b06      	ldr	r3, [pc, #24]	; (8001f4c <LCD_Display_Dir+0x214>)
 8001f32:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f36:	805a      	strh	r2, [r3, #2]
 8001f38:	e000      	b.n	8001f3c <LCD_Display_Dir+0x204>
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001f3a:	bf00      	nop
		}
	}
	LCD_Scan_Dir(DFT_SCAN_DIR);	//默认扫描方向
 8001f3c:	2000      	movs	r0, #0
 8001f3e:	f7ff f8ad 	bl	800109c <LCD_Scan_Dir>
}
 8001f42:	bf00      	nop
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	200000e8 	.word	0x200000e8

08001f50 <LCD_Init>:
	}
}
//初始化lcd
//该初始化函数可以初始化各种ALIENTEK出品的LCD液晶屏
//本函数占用较大flash,用户可以根据自己的实际情况,删掉未用到的LCD初始化代码.以节省空间.
void LCD_Init(void) {
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_Initure;

	__HAL_RCC_GPIOB_CLK_ENABLE();           	//开启GPIOB时钟
 8001f56:	4b90      	ldr	r3, [pc, #576]	; (8002198 <LCD_Init+0x248>)
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	4a8f      	ldr	r2, [pc, #572]	; (8002198 <LCD_Init+0x248>)
 8001f5c:	f043 0308 	orr.w	r3, r3, #8
 8001f60:	6193      	str	r3, [r2, #24]
 8001f62:	4b8d      	ldr	r3, [pc, #564]	; (8002198 <LCD_Init+0x248>)
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	f003 0308 	and.w	r3, r3, #8
 8001f6a:	607b      	str	r3, [r7, #4]
 8001f6c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();           	//开启GPIOC时钟
 8001f6e:	4b8a      	ldr	r3, [pc, #552]	; (8002198 <LCD_Init+0x248>)
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	4a89      	ldr	r2, [pc, #548]	; (8002198 <LCD_Init+0x248>)
 8001f74:	f043 0310 	orr.w	r3, r3, #16
 8001f78:	6193      	str	r3, [r2, #24]
 8001f7a:	4b87      	ldr	r3, [pc, #540]	; (8002198 <LCD_Init+0x248>)
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	f003 0310 	and.w	r3, r3, #16
 8001f82:	603b      	str	r3, [r7, #0]
 8001f84:	683b      	ldr	r3, [r7, #0]

	//PC6,7,8,9,10
	GPIO_Initure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 |\
 8001f86:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001f8a:	60bb      	str	r3, [r7, #8]
 GPIO_PIN_9
			| GPIO_PIN_10;
	GPIO_Initure.Mode = GPIO_MODE_OUTPUT_PP;  	//推挽输出
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	60fb      	str	r3, [r7, #12]
	GPIO_Initure.Pull = GPIO_PULLUP;          	//上拉
 8001f90:	2301      	movs	r3, #1
 8001f92:	613b      	str	r3, [r7, #16]
	GPIO_Initure.Speed = GPIO_SPEED_FREQ_HIGH;    	 	//高速
 8001f94:	2303      	movs	r3, #3
 8001f96:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_Initure);
 8001f98:	f107 0308 	add.w	r3, r7, #8
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	487f      	ldr	r0, [pc, #508]	; (800219c <LCD_Init+0x24c>)
 8001fa0:	f004 ff86 	bl	8006eb0 <HAL_GPIO_Init>

	//PB0~15
	GPIO_Initure.Pin = GPIO_PIN_All;				//PB推挽输出
 8001fa4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fa8:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_Initure);
 8001faa:	f107 0308 	add.w	r3, r7, #8
 8001fae:	4619      	mov	r1, r3
 8001fb0:	487b      	ldr	r0, [pc, #492]	; (80021a0 <LCD_Init+0x250>)
 8001fb2:	f004 ff7d 	bl	8006eb0 <HAL_GPIO_Init>

//	__HAL_AFIO_REMAP_SWJ_DISABLE();				//禁止JTAG

	HAL_Delay(50); // delay 50 ms
 8001fb6:	2032      	movs	r0, #50	; 0x32
 8001fb8:	f004 fd06 	bl	80069c8 <HAL_Delay>
	LCD_WriteReg(0x0000, 0x0001);
 8001fbc:	2101      	movs	r1, #1
 8001fbe:	2000      	movs	r0, #0
 8001fc0:	f7fe fd5a 	bl	8000a78 <LCD_WriteReg>
	HAL_Delay(50); // delay 50 ms
 8001fc4:	2032      	movs	r0, #50	; 0x32
 8001fc6:	f004 fcff 	bl	80069c8 <HAL_Delay>
	lcddev.id = LCD_ReadReg(0x0000);
 8001fca:	2000      	movs	r0, #0
 8001fcc:	f7fe fd7e 	bl	8000acc <LCD_ReadReg>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	4b73      	ldr	r3, [pc, #460]	; (80021a4 <LCD_Init+0x254>)
 8001fd6:	809a      	strh	r2, [r3, #4]
	if (lcddev.id < 0XFF || lcddev.id == 0XFFFF || lcddev.id == 0X9300) //读到ID不正确,新增lcddev.id==0X9300判断，因为9341在未被复位的情况下会被读成9300
 8001fd8:	4b72      	ldr	r3, [pc, #456]	; (80021a4 <LCD_Init+0x254>)
 8001fda:	889b      	ldrh	r3, [r3, #4]
 8001fdc:	2bfe      	cmp	r3, #254	; 0xfe
 8001fde:	d90b      	bls.n	8001ff8 <LCD_Init+0xa8>
 8001fe0:	4b70      	ldr	r3, [pc, #448]	; (80021a4 <LCD_Init+0x254>)
 8001fe2:	889b      	ldrh	r3, [r3, #4]
 8001fe4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d005      	beq.n	8001ff8 <LCD_Init+0xa8>
 8001fec:	4b6d      	ldr	r3, [pc, #436]	; (80021a4 <LCD_Init+0x254>)
 8001fee:	889b      	ldrh	r3, [r3, #4]
 8001ff0:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 8001ff4:	f040 80c8 	bne.w	8002188 <LCD_Init+0x238>
			{
		//尝试9341 ID的读取
		LCD_WR_REG(0XD3);
 8001ff8:	20d3      	movs	r0, #211	; 0xd3
 8001ffa:	f7fe fcb1 	bl	8000960 <LCD_WR_REG>
		LCD_RD_DATA(); 				//dummy read 	
 8001ffe:	f7fe fcf7 	bl	80009f0 <LCD_RD_DATA>
		LCD_RD_DATA();   	    	//读到0X00
 8002002:	f7fe fcf5 	bl	80009f0 <LCD_RD_DATA>
		lcddev.id = LCD_RD_DATA();   	//读取93
 8002006:	f7fe fcf3 	bl	80009f0 <LCD_RD_DATA>
 800200a:	4603      	mov	r3, r0
 800200c:	461a      	mov	r2, r3
 800200e:	4b65      	ldr	r3, [pc, #404]	; (80021a4 <LCD_Init+0x254>)
 8002010:	809a      	strh	r2, [r3, #4]
		lcddev.id <<= 8;
 8002012:	4b64      	ldr	r3, [pc, #400]	; (80021a4 <LCD_Init+0x254>)
 8002014:	889b      	ldrh	r3, [r3, #4]
 8002016:	021b      	lsls	r3, r3, #8
 8002018:	b29a      	uxth	r2, r3
 800201a:	4b62      	ldr	r3, [pc, #392]	; (80021a4 <LCD_Init+0x254>)
 800201c:	809a      	strh	r2, [r3, #4]
		lcddev.id |= LCD_RD_DATA();  	//读取41
 800201e:	f7fe fce7 	bl	80009f0 <LCD_RD_DATA>
 8002022:	4603      	mov	r3, r0
 8002024:	461a      	mov	r2, r3
 8002026:	4b5f      	ldr	r3, [pc, #380]	; (80021a4 <LCD_Init+0x254>)
 8002028:	889b      	ldrh	r3, [r3, #4]
 800202a:	4313      	orrs	r3, r2
 800202c:	b29a      	uxth	r2, r3
 800202e:	4b5d      	ldr	r3, [pc, #372]	; (80021a4 <LCD_Init+0x254>)
 8002030:	809a      	strh	r2, [r3, #4]
		if (lcddev.id != 0X9341)		//非9341,尝试是不是6804
 8002032:	4b5c      	ldr	r3, [pc, #368]	; (80021a4 <LCD_Init+0x254>)
 8002034:	889b      	ldrh	r3, [r3, #4]
 8002036:	f249 3241 	movw	r2, #37697	; 0x9341
 800203a:	4293      	cmp	r3, r2
 800203c:	f000 80a4 	beq.w	8002188 <LCD_Init+0x238>
				{
			LCD_WR_REG(0XBF);
 8002040:	20bf      	movs	r0, #191	; 0xbf
 8002042:	f7fe fc8d 	bl	8000960 <LCD_WR_REG>
			LCD_RD_DATA(); 			//dummy read 	 
 8002046:	f7fe fcd3 	bl	80009f0 <LCD_RD_DATA>
			LCD_RD_DATA();   	    //读回0X01
 800204a:	f7fe fcd1 	bl	80009f0 <LCD_RD_DATA>
			LCD_RD_DATA(); 			//读回0XD0
 800204e:	f7fe fccf 	bl	80009f0 <LCD_RD_DATA>
			lcddev.id = LCD_RD_DATA(); 			//这里读回0X68
 8002052:	f7fe fccd 	bl	80009f0 <LCD_RD_DATA>
 8002056:	4603      	mov	r3, r0
 8002058:	461a      	mov	r2, r3
 800205a:	4b52      	ldr	r3, [pc, #328]	; (80021a4 <LCD_Init+0x254>)
 800205c:	809a      	strh	r2, [r3, #4]
			lcddev.id <<= 8;
 800205e:	4b51      	ldr	r3, [pc, #324]	; (80021a4 <LCD_Init+0x254>)
 8002060:	889b      	ldrh	r3, [r3, #4]
 8002062:	021b      	lsls	r3, r3, #8
 8002064:	b29a      	uxth	r2, r3
 8002066:	4b4f      	ldr	r3, [pc, #316]	; (80021a4 <LCD_Init+0x254>)
 8002068:	809a      	strh	r2, [r3, #4]
			lcddev.id |= LCD_RD_DATA(); 			//这里读回0X04
 800206a:	f7fe fcc1 	bl	80009f0 <LCD_RD_DATA>
 800206e:	4603      	mov	r3, r0
 8002070:	461a      	mov	r2, r3
 8002072:	4b4c      	ldr	r3, [pc, #304]	; (80021a4 <LCD_Init+0x254>)
 8002074:	889b      	ldrh	r3, [r3, #4]
 8002076:	4313      	orrs	r3, r2
 8002078:	b29a      	uxth	r2, r3
 800207a:	4b4a      	ldr	r3, [pc, #296]	; (80021a4 <LCD_Init+0x254>)
 800207c:	809a      	strh	r2, [r3, #4]
			if (lcddev.id != 0X6804)	//也不是6804,尝试看看是不是NT35310
 800207e:	4b49      	ldr	r3, [pc, #292]	; (80021a4 <LCD_Init+0x254>)
 8002080:	889b      	ldrh	r3, [r3, #4]
 8002082:	f646 0204 	movw	r2, #26628	; 0x6804
 8002086:	4293      	cmp	r3, r2
 8002088:	d07e      	beq.n	8002188 <LCD_Init+0x238>
					{
				LCD_WR_REG(0XD4);
 800208a:	20d4      	movs	r0, #212	; 0xd4
 800208c:	f7fe fc68 	bl	8000960 <LCD_WR_REG>
				LCD_RD_DATA(); 				//dummy read  
 8002090:	f7fe fcae 	bl	80009f0 <LCD_RD_DATA>
				LCD_RD_DATA();   			//读回0X01	 
 8002094:	f7fe fcac 	bl	80009f0 <LCD_RD_DATA>
				lcddev.id = LCD_RD_DATA();	//读回0X53
 8002098:	f7fe fcaa 	bl	80009f0 <LCD_RD_DATA>
 800209c:	4603      	mov	r3, r0
 800209e:	461a      	mov	r2, r3
 80020a0:	4b40      	ldr	r3, [pc, #256]	; (80021a4 <LCD_Init+0x254>)
 80020a2:	809a      	strh	r2, [r3, #4]
				lcddev.id <<= 8;
 80020a4:	4b3f      	ldr	r3, [pc, #252]	; (80021a4 <LCD_Init+0x254>)
 80020a6:	889b      	ldrh	r3, [r3, #4]
 80020a8:	021b      	lsls	r3, r3, #8
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	4b3d      	ldr	r3, [pc, #244]	; (80021a4 <LCD_Init+0x254>)
 80020ae:	809a      	strh	r2, [r3, #4]
				lcddev.id |= LCD_RD_DATA();	//这里读回0X10
 80020b0:	f7fe fc9e 	bl	80009f0 <LCD_RD_DATA>
 80020b4:	4603      	mov	r3, r0
 80020b6:	461a      	mov	r2, r3
 80020b8:	4b3a      	ldr	r3, [pc, #232]	; (80021a4 <LCD_Init+0x254>)
 80020ba:	889b      	ldrh	r3, [r3, #4]
 80020bc:	4313      	orrs	r3, r2
 80020be:	b29a      	uxth	r2, r3
 80020c0:	4b38      	ldr	r3, [pc, #224]	; (80021a4 <LCD_Init+0x254>)
 80020c2:	809a      	strh	r2, [r3, #4]
				if (lcddev.id != 0X5310)		//也不是NT35310,尝试看看是不是NT35510
 80020c4:	4b37      	ldr	r3, [pc, #220]	; (80021a4 <LCD_Init+0x254>)
 80020c6:	889b      	ldrh	r3, [r3, #4]
 80020c8:	f245 3210 	movw	r2, #21264	; 0x5310
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d05b      	beq.n	8002188 <LCD_Init+0x238>
						{
					LCD_WR_REG(0XDA00);
 80020d0:	f44f 405a 	mov.w	r0, #55808	; 0xda00
 80020d4:	f7fe fc44 	bl	8000960 <LCD_WR_REG>
					LCD_RD_DATA();   		//读回0X00	 
 80020d8:	f7fe fc8a 	bl	80009f0 <LCD_RD_DATA>
					LCD_WR_REG(0XDB00);
 80020dc:	f44f 405b 	mov.w	r0, #56064	; 0xdb00
 80020e0:	f7fe fc3e 	bl	8000960 <LCD_WR_REG>
					lcddev.id = LCD_RD_DATA();   		//读回0X80
 80020e4:	f7fe fc84 	bl	80009f0 <LCD_RD_DATA>
 80020e8:	4603      	mov	r3, r0
 80020ea:	461a      	mov	r2, r3
 80020ec:	4b2d      	ldr	r3, [pc, #180]	; (80021a4 <LCD_Init+0x254>)
 80020ee:	809a      	strh	r2, [r3, #4]
					lcddev.id <<= 8;
 80020f0:	4b2c      	ldr	r3, [pc, #176]	; (80021a4 <LCD_Init+0x254>)
 80020f2:	889b      	ldrh	r3, [r3, #4]
 80020f4:	021b      	lsls	r3, r3, #8
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	4b2a      	ldr	r3, [pc, #168]	; (80021a4 <LCD_Init+0x254>)
 80020fa:	809a      	strh	r2, [r3, #4]
					LCD_WR_REG(0XDC00);
 80020fc:	f44f 405c 	mov.w	r0, #56320	; 0xdc00
 8002100:	f7fe fc2e 	bl	8000960 <LCD_WR_REG>
					lcddev.id |= LCD_RD_DATA();   		//读回0X00
 8002104:	f7fe fc74 	bl	80009f0 <LCD_RD_DATA>
 8002108:	4603      	mov	r3, r0
 800210a:	461a      	mov	r2, r3
 800210c:	4b25      	ldr	r3, [pc, #148]	; (80021a4 <LCD_Init+0x254>)
 800210e:	889b      	ldrh	r3, [r3, #4]
 8002110:	4313      	orrs	r3, r2
 8002112:	b29a      	uxth	r2, r3
 8002114:	4b23      	ldr	r3, [pc, #140]	; (80021a4 <LCD_Init+0x254>)
 8002116:	809a      	strh	r2, [r3, #4]
					if (lcddev.id == 0x8000)
 8002118:	4b22      	ldr	r3, [pc, #136]	; (80021a4 <LCD_Init+0x254>)
 800211a:	889b      	ldrh	r3, [r3, #4]
 800211c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002120:	d103      	bne.n	800212a <LCD_Init+0x1da>
						lcddev.id = 0x5510;   		//NT35510读回的ID是8000H,为方便区分,我们强制设置为5510
 8002122:	4b20      	ldr	r3, [pc, #128]	; (80021a4 <LCD_Init+0x254>)
 8002124:	f245 5210 	movw	r2, #21776	; 0x5510
 8002128:	809a      	strh	r2, [r3, #4]
					if (lcddev.id != 0X5510)			//也不是NT5510,尝试看看是不是SSD1963
 800212a:	4b1e      	ldr	r3, [pc, #120]	; (80021a4 <LCD_Init+0x254>)
 800212c:	889b      	ldrh	r3, [r3, #4]
 800212e:	f245 5210 	movw	r2, #21776	; 0x5510
 8002132:	4293      	cmp	r3, r2
 8002134:	d028      	beq.n	8002188 <LCD_Init+0x238>
							{
						LCD_WR_REG(0XA1);
 8002136:	20a1      	movs	r0, #161	; 0xa1
 8002138:	f7fe fc12 	bl	8000960 <LCD_WR_REG>
						lcddev.id = LCD_RD_DATA();
 800213c:	f7fe fc58 	bl	80009f0 <LCD_RD_DATA>
 8002140:	4603      	mov	r3, r0
 8002142:	461a      	mov	r2, r3
 8002144:	4b17      	ldr	r3, [pc, #92]	; (80021a4 <LCD_Init+0x254>)
 8002146:	809a      	strh	r2, [r3, #4]
						lcddev.id = LCD_RD_DATA();	//读回0X57
 8002148:	f7fe fc52 	bl	80009f0 <LCD_RD_DATA>
 800214c:	4603      	mov	r3, r0
 800214e:	461a      	mov	r2, r3
 8002150:	4b14      	ldr	r3, [pc, #80]	; (80021a4 <LCD_Init+0x254>)
 8002152:	809a      	strh	r2, [r3, #4]
						lcddev.id <<= 8;
 8002154:	4b13      	ldr	r3, [pc, #76]	; (80021a4 <LCD_Init+0x254>)
 8002156:	889b      	ldrh	r3, [r3, #4]
 8002158:	021b      	lsls	r3, r3, #8
 800215a:	b29a      	uxth	r2, r3
 800215c:	4b11      	ldr	r3, [pc, #68]	; (80021a4 <LCD_Init+0x254>)
 800215e:	809a      	strh	r2, [r3, #4]
						lcddev.id |= LCD_RD_DATA();	//读回0X61
 8002160:	f7fe fc46 	bl	80009f0 <LCD_RD_DATA>
 8002164:	4603      	mov	r3, r0
 8002166:	461a      	mov	r2, r3
 8002168:	4b0e      	ldr	r3, [pc, #56]	; (80021a4 <LCD_Init+0x254>)
 800216a:	889b      	ldrh	r3, [r3, #4]
 800216c:	4313      	orrs	r3, r2
 800216e:	b29a      	uxth	r2, r3
 8002170:	4b0c      	ldr	r3, [pc, #48]	; (80021a4 <LCD_Init+0x254>)
 8002172:	809a      	strh	r2, [r3, #4]
						if (lcddev.id == 0X5761)
 8002174:	4b0b      	ldr	r3, [pc, #44]	; (80021a4 <LCD_Init+0x254>)
 8002176:	889b      	ldrh	r3, [r3, #4]
 8002178:	f245 7261 	movw	r2, #22369	; 0x5761
 800217c:	4293      	cmp	r3, r2
 800217e:	d103      	bne.n	8002188 <LCD_Init+0x238>
							lcddev.id = 0X1963;	//SSD1963读回的ID是5761H,为方便区分,我们强制设置为1963
 8002180:	4b08      	ldr	r3, [pc, #32]	; (80021a4 <LCD_Init+0x254>)
 8002182:	f641 1263 	movw	r2, #6499	; 0x1963
 8002186:	809a      	strh	r2, [r3, #4]
				}
			}
		}
	}
// 	printf(" LCD ID:%x\r\n",lcddev.id); //打印LCD ID
	if (lcddev.id == 0X9341)	//9341初始化
 8002188:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <LCD_Init+0x254>)
 800218a:	889b      	ldrh	r3, [r3, #4]
 800218c:	f249 3241 	movw	r2, #37697	; 0x9341
 8002190:	4293      	cmp	r3, r2
 8002192:	f040 811f 	bne.w	80023d4 <LCD_Init+0x484>
 8002196:	e007      	b.n	80021a8 <LCD_Init+0x258>
 8002198:	40021000 	.word	0x40021000
 800219c:	40011000 	.word	0x40011000
 80021a0:	40010c00 	.word	0x40010c00
 80021a4:	200000e8 	.word	0x200000e8
			{
		LCD_WR_REG(0xCF);
 80021a8:	20cf      	movs	r0, #207	; 0xcf
 80021aa:	f7fe fbd9 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80021ae:	2000      	movs	r0, #0
 80021b0:	f7fe fbfa 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC1);
 80021b4:	20c1      	movs	r0, #193	; 0xc1
 80021b6:	f7fe fbf7 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X30);
 80021ba:	2030      	movs	r0, #48	; 0x30
 80021bc:	f7fe fbf4 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_REG(0xED);
 80021c0:	20ed      	movs	r0, #237	; 0xed
 80021c2:	f7fe fbcd 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0x64);
 80021c6:	2064      	movs	r0, #100	; 0x64
 80021c8:	f7fe fbee 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 80021cc:	2003      	movs	r0, #3
 80021ce:	f7fe fbeb 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X12);
 80021d2:	2012      	movs	r0, #18
 80021d4:	f7fe fbe8 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X81);
 80021d8:	2081      	movs	r0, #129	; 0x81
 80021da:	f7fe fbe5 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_REG(0xE8);
 80021de:	20e8      	movs	r0, #232	; 0xe8
 80021e0:	f7fe fbbe 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0x85);
 80021e4:	2085      	movs	r0, #133	; 0x85
 80021e6:	f7fe fbdf 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 80021ea:	2010      	movs	r0, #16
 80021ec:	f7fe fbdc 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 80021f0:	207a      	movs	r0, #122	; 0x7a
 80021f2:	f7fe fbd9 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_REG(0xCB);
 80021f6:	20cb      	movs	r0, #203	; 0xcb
 80021f8:	f7fe fbb2 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0x39);
 80021fc:	2039      	movs	r0, #57	; 0x39
 80021fe:	f7fe fbd3 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8002202:	202c      	movs	r0, #44	; 0x2c
 8002204:	f7fe fbd0 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002208:	2000      	movs	r0, #0
 800220a:	f7fe fbcd 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 800220e:	2034      	movs	r0, #52	; 0x34
 8002210:	f7fe fbca 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8002214:	2002      	movs	r0, #2
 8002216:	f7fe fbc7 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_REG(0xF7);
 800221a:	20f7      	movs	r0, #247	; 0xf7
 800221c:	f7fe fba0 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8002220:	2020      	movs	r0, #32
 8002222:	f7fe fbc1 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_REG(0xEA);
 8002226:	20ea      	movs	r0, #234	; 0xea
 8002228:	f7fe fb9a 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800222c:	2000      	movs	r0, #0
 800222e:	f7fe fbbb 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002232:	2000      	movs	r0, #0
 8002234:	f7fe fbb8 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_REG(0xC0);    //Power control 
 8002238:	20c0      	movs	r0, #192	; 0xc0
 800223a:	f7fe fb91 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0x1B);   //VRH[5:0] 
 800223e:	201b      	movs	r0, #27
 8002240:	f7fe fbb2 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_REG(0xC1);    //Power control 
 8002244:	20c1      	movs	r0, #193	; 0xc1
 8002246:	f7fe fb8b 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);   //SAP[2:0];BT[3:0] 
 800224a:	2001      	movs	r0, #1
 800224c:	f7fe fbac 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_REG(0xC5);    //VCM control 
 8002250:	20c5      	movs	r0, #197	; 0xc5
 8002252:	f7fe fb85 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0x30); 	 //3F
 8002256:	2030      	movs	r0, #48	; 0x30
 8002258:	f7fe fba6 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x30); 	 //3C
 800225c:	2030      	movs	r0, #48	; 0x30
 800225e:	f7fe fba3 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_REG(0xC7);    //VCM control2 
 8002262:	20c7      	movs	r0, #199	; 0xc7
 8002264:	f7fe fb7c 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0XB7);
 8002268:	20b7      	movs	r0, #183	; 0xb7
 800226a:	f7fe fb9d 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_REG(0x36);    // Memory Access Control 
 800226e:	2036      	movs	r0, #54	; 0x36
 8002270:	f7fe fb76 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0x48);
 8002274:	2048      	movs	r0, #72	; 0x48
 8002276:	f7fe fb97 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_REG(0x3A);
 800227a:	203a      	movs	r0, #58	; 0x3a
 800227c:	f7fe fb70 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0x55);
 8002280:	2055      	movs	r0, #85	; 0x55
 8002282:	f7fe fb91 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_REG(0xB1);
 8002286:	20b1      	movs	r0, #177	; 0xb1
 8002288:	f7fe fb6a 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800228c:	2000      	movs	r0, #0
 800228e:	f7fe fb8b 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1A);
 8002292:	201a      	movs	r0, #26
 8002294:	f7fe fb88 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_REG(0xB6);    // Display Function Control 
 8002298:	20b6      	movs	r0, #182	; 0xb6
 800229a:	f7fe fb61 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 800229e:	200a      	movs	r0, #10
 80022a0:	f7fe fb82 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 80022a4:	20a2      	movs	r0, #162	; 0xa2
 80022a6:	f7fe fb7f 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_REG(0xF2);    // 3Gamma Function Disable 
 80022aa:	20f2      	movs	r0, #242	; 0xf2
 80022ac:	f7fe fb58 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80022b0:	2000      	movs	r0, #0
 80022b2:	f7fe fb79 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_REG(0x26);    //Gamma curve selected 
 80022b6:	2026      	movs	r0, #38	; 0x26
 80022b8:	f7fe fb52 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 80022bc:	2001      	movs	r0, #1
 80022be:	f7fe fb73 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_REG(0xE0);    //Set Gamma 
 80022c2:	20e0      	movs	r0, #224	; 0xe0
 80022c4:	f7fe fb4c 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0x0F);
 80022c8:	200f      	movs	r0, #15
 80022ca:	f7fe fb6d 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 80022ce:	202a      	movs	r0, #42	; 0x2a
 80022d0:	f7fe fb6a 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x28);
 80022d4:	2028      	movs	r0, #40	; 0x28
 80022d6:	f7fe fb67 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 80022da:	2008      	movs	r0, #8
 80022dc:	f7fe fb64 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0E);
 80022e0:	200e      	movs	r0, #14
 80022e2:	f7fe fb61 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 80022e6:	2008      	movs	r0, #8
 80022e8:	f7fe fb5e 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 80022ec:	2054      	movs	r0, #84	; 0x54
 80022ee:	f7fe fb5b 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0XA9);
 80022f2:	20a9      	movs	r0, #169	; 0xa9
 80022f4:	f7fe fb58 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 80022f8:	2043      	movs	r0, #67	; 0x43
 80022fa:	f7fe fb55 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0A);
 80022fe:	200a      	movs	r0, #10
 8002300:	f7fe fb52 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 8002304:	200f      	movs	r0, #15
 8002306:	f7fe fb4f 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800230a:	2000      	movs	r0, #0
 800230c:	f7fe fb4c 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002310:	2000      	movs	r0, #0
 8002312:	f7fe fb49 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002316:	2000      	movs	r0, #0
 8002318:	f7fe fb46 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800231c:	2000      	movs	r0, #0
 800231e:	f7fe fb43 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_REG(0XE1);    //Set Gamma 
 8002322:	20e1      	movs	r0, #225	; 0xe1
 8002324:	f7fe fb1c 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002328:	2000      	movs	r0, #0
 800232a:	f7fe fb3d 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x15);
 800232e:	2015      	movs	r0, #21
 8002330:	f7fe fb3a 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8002334:	2017      	movs	r0, #23
 8002336:	f7fe fb37 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x07);
 800233a:	2007      	movs	r0, #7
 800233c:	f7fe fb34 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 8002340:	2011      	movs	r0, #17
 8002342:	f7fe fb31 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x06);
 8002346:	2006      	movs	r0, #6
 8002348:	f7fe fb2e 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2B);
 800234c:	202b      	movs	r0, #43	; 0x2b
 800234e:	f7fe fb2b 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8002352:	2056      	movs	r0, #86	; 0x56
 8002354:	f7fe fb28 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002358:	203c      	movs	r0, #60	; 0x3c
 800235a:	f7fe fb25 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 800235e:	2005      	movs	r0, #5
 8002360:	f7fe fb22 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8002364:	2010      	movs	r0, #16
 8002366:	f7fe fb1f 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 800236a:	200f      	movs	r0, #15
 800236c:	f7fe fb1c 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 8002370:	203f      	movs	r0, #63	; 0x3f
 8002372:	f7fe fb19 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 8002376:	203f      	movs	r0, #63	; 0x3f
 8002378:	f7fe fb16 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 800237c:	200f      	movs	r0, #15
 800237e:	f7fe fb13 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_REG(0x2B);
 8002382:	202b      	movs	r0, #43	; 0x2b
 8002384:	f7fe faec 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002388:	2000      	movs	r0, #0
 800238a:	f7fe fb0d 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800238e:	2000      	movs	r0, #0
 8002390:	f7fe fb0a 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8002394:	2001      	movs	r0, #1
 8002396:	f7fe fb07 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3f);
 800239a:	203f      	movs	r0, #63	; 0x3f
 800239c:	f7fe fb04 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_REG(0x2A);
 80023a0:	202a      	movs	r0, #42	; 0x2a
 80023a2:	f7fe fadd 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80023a6:	2000      	movs	r0, #0
 80023a8:	f7fe fafe 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023ac:	2000      	movs	r0, #0
 80023ae:	f7fe fafb 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023b2:	2000      	movs	r0, #0
 80023b4:	f7fe faf8 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xef);
 80023b8:	20ef      	movs	r0, #239	; 0xef
 80023ba:	f7fe faf5 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_REG(0x11); //Exit Sleep
 80023be:	2011      	movs	r0, #17
 80023c0:	f7fe face 	bl	8000960 <LCD_WR_REG>
		HAL_Delay(120);
 80023c4:	2078      	movs	r0, #120	; 0x78
 80023c6:	f004 faff 	bl	80069c8 <HAL_Delay>
		LCD_WR_REG(0x29); //display on	
 80023ca:	2029      	movs	r0, #41	; 0x29
 80023cc:	f7fe fac8 	bl	8000960 <LCD_WR_REG>
 80023d0:	f003 bcd8 	b.w	8005d84 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x6804) //6804初始化
 80023d4:	4b58      	ldr	r3, [pc, #352]	; (8002538 <LCD_Init+0x5e8>)
 80023d6:	889b      	ldrh	r3, [r3, #4]
 80023d8:	f646 0204 	movw	r2, #26628	; 0x6804
 80023dc:	4293      	cmp	r3, r2
 80023de:	f040 80ad 	bne.w	800253c <LCD_Init+0x5ec>
			{
		LCD_WR_REG(0X11);
 80023e2:	2011      	movs	r0, #17
 80023e4:	f7fe fabc 	bl	8000960 <LCD_WR_REG>
		HAL_Delay(20);
 80023e8:	2014      	movs	r0, #20
 80023ea:	f004 faed 	bl	80069c8 <HAL_Delay>
		LCD_WR_REG(0XD0); //VCI1  VCL  VGH  VGL DDVDH VREG1OUT power amplitude setting
 80023ee:	20d0      	movs	r0, #208	; 0xd0
 80023f0:	f7fe fab6 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0X07);
 80023f4:	2007      	movs	r0, #7
 80023f6:	f7fe fad7 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X42);
 80023fa:	2042      	movs	r0, #66	; 0x42
 80023fc:	f7fe fad4 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1D);
 8002400:	201d      	movs	r0, #29
 8002402:	f7fe fad1 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_REG(0XD1); //VCOMH VCOM_AC amplitude setting
 8002406:	20d1      	movs	r0, #209	; 0xd1
 8002408:	f7fe faaa 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 800240c:	2000      	movs	r0, #0
 800240e:	f7fe facb 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1a);
 8002412:	201a      	movs	r0, #26
 8002414:	f7fe fac8 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X09);
 8002418:	2009      	movs	r0, #9
 800241a:	f7fe fac5 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_REG(0XD2); //Operational Amplifier Circuit Constant Current Adjust , charge pump frequency setting
 800241e:	20d2      	movs	r0, #210	; 0xd2
 8002420:	f7fe fa9e 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 8002424:	2001      	movs	r0, #1
 8002426:	f7fe fabf 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X22);
 800242a:	2022      	movs	r0, #34	; 0x22
 800242c:	f7fe fabc 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_REG(0XC0); //REV SM GS
 8002430:	20c0      	movs	r0, #192	; 0xc0
 8002432:	f7fe fa95 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0X10);
 8002436:	2010      	movs	r0, #16
 8002438:	f7fe fab6 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3B);
 800243c:	203b      	movs	r0, #59	; 0x3b
 800243e:	f7fe fab3 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8002442:	2000      	movs	r0, #0
 8002444:	f7fe fab0 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 8002448:	2002      	movs	r0, #2
 800244a:	f7fe faad 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X11);
 800244e:	2011      	movs	r0, #17
 8002450:	f7fe faaa 	bl	80009a8 <LCD_WR_DATAX>

		LCD_WR_REG(0XC5); // Frame rate setting = 72HZ  when setting 0x03
 8002454:	20c5      	movs	r0, #197	; 0xc5
 8002456:	f7fe fa83 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0X03);
 800245a:	2003      	movs	r0, #3
 800245c:	f7fe faa4 	bl	80009a8 <LCD_WR_DATAX>

		LCD_WR_REG(0XC8); //Gamma setting
 8002460:	20c8      	movs	r0, #200	; 0xc8
 8002462:	f7fe fa7d 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002466:	2000      	movs	r0, #0
 8002468:	f7fe fa9e 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 800246c:	2025      	movs	r0, #37	; 0x25
 800246e:	f7fe fa9b 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X21);
 8002472:	2021      	movs	r0, #33	; 0x21
 8002474:	f7fe fa98 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X05);
 8002478:	2005      	movs	r0, #5
 800247a:	f7fe fa95 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 800247e:	2000      	movs	r0, #0
 8002480:	f7fe fa92 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0a);
 8002484:	200a      	movs	r0, #10
 8002486:	f7fe fa8f 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X65);
 800248a:	2065      	movs	r0, #101	; 0x65
 800248c:	f7fe fa8c 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 8002490:	2025      	movs	r0, #37	; 0x25
 8002492:	f7fe fa89 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X77);
 8002496:	2077      	movs	r0, #119	; 0x77
 8002498:	f7fe fa86 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X50);
 800249c:	2050      	movs	r0, #80	; 0x50
 800249e:	f7fe fa83 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0f);
 80024a2:	200f      	movs	r0, #15
 80024a4:	f7fe fa80 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 80024a8:	2000      	movs	r0, #0
 80024aa:	f7fe fa7d 	bl	80009a8 <LCD_WR_DATAX>

		LCD_WR_REG(0XF8);
 80024ae:	20f8      	movs	r0, #248	; 0xf8
 80024b0:	f7fe fa56 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 80024b4:	2001      	movs	r0, #1
 80024b6:	f7fe fa77 	bl	80009a8 <LCD_WR_DATAX>

		LCD_WR_REG(0XFE);
 80024ba:	20fe      	movs	r0, #254	; 0xfe
 80024bc:	f7fe fa50 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 80024c0:	2000      	movs	r0, #0
 80024c2:	f7fe fa71 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 80024c6:	2002      	movs	r0, #2
 80024c8:	f7fe fa6e 	bl	80009a8 <LCD_WR_DATAX>

		LCD_WR_REG(0X20); //Exit invert mode
 80024cc:	2020      	movs	r0, #32
 80024ce:	f7fe fa47 	bl	8000960 <LCD_WR_REG>

		LCD_WR_REG(0X36);
 80024d2:	2036      	movs	r0, #54	; 0x36
 80024d4:	f7fe fa44 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0X08); //原来是a
 80024d8:	2008      	movs	r0, #8
 80024da:	f7fe fa65 	bl	80009a8 <LCD_WR_DATAX>

		LCD_WR_REG(0X3A);
 80024de:	203a      	movs	r0, #58	; 0x3a
 80024e0:	f7fe fa3e 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0X55); //16位模式
 80024e4:	2055      	movs	r0, #85	; 0x55
 80024e6:	f7fe fa5f 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_REG(0X2B);
 80024ea:	202b      	movs	r0, #43	; 0x2b
 80024ec:	f7fe fa38 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 80024f0:	2000      	movs	r0, #0
 80024f2:	f7fe fa59 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 80024f6:	2000      	movs	r0, #0
 80024f8:	f7fe fa56 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 80024fc:	2001      	movs	r0, #1
 80024fe:	f7fe fa53 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3F);
 8002502:	203f      	movs	r0, #63	; 0x3f
 8002504:	f7fe fa50 	bl	80009a8 <LCD_WR_DATAX>

		LCD_WR_REG(0X2A);
 8002508:	202a      	movs	r0, #42	; 0x2a
 800250a:	f7fe fa29 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 800250e:	2000      	movs	r0, #0
 8002510:	f7fe fa4a 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8002514:	2000      	movs	r0, #0
 8002516:	f7fe fa47 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 800251a:	2001      	movs	r0, #1
 800251c:	f7fe fa44 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0XDF);
 8002520:	20df      	movs	r0, #223	; 0xdf
 8002522:	f7fe fa41 	bl	80009a8 <LCD_WR_DATAX>
		HAL_Delay(120);
 8002526:	2078      	movs	r0, #120	; 0x78
 8002528:	f004 fa4e 	bl	80069c8 <HAL_Delay>
		LCD_WR_REG(0X29);
 800252c:	2029      	movs	r0, #41	; 0x29
 800252e:	f7fe fa17 	bl	8000960 <LCD_WR_REG>
 8002532:	f003 bc27 	b.w	8005d84 <LCD_Init+0x3e34>
 8002536:	bf00      	nop
 8002538:	200000e8 	.word	0x200000e8
	} else if (lcddev.id == 0x5310) {
 800253c:	4b03      	ldr	r3, [pc, #12]	; (800254c <LCD_Init+0x5fc>)
 800253e:	889b      	ldrh	r3, [r3, #4]
 8002540:	f245 3210 	movw	r2, #21264	; 0x5310
 8002544:	4293      	cmp	r3, r2
 8002546:	f040 877c 	bne.w	8003442 <LCD_Init+0x14f2>
 800254a:	e001      	b.n	8002550 <LCD_Init+0x600>
 800254c:	200000e8 	.word	0x200000e8
		LCD_WR_REG(0xED);
 8002550:	20ed      	movs	r0, #237	; 0xed
 8002552:	f7fe fa05 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8002556:	2001      	movs	r0, #1
 8002558:	f7fe fa26 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFE);
 800255c:	20fe      	movs	r0, #254	; 0xfe
 800255e:	f7fe fa23 	bl	80009a8 <LCD_WR_DATAX>

		LCD_WR_REG(0xEE);
 8002562:	20ee      	movs	r0, #238	; 0xee
 8002564:	f7fe f9fc 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0xDE);
 8002568:	20de      	movs	r0, #222	; 0xde
 800256a:	f7fe fa1d 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 800256e:	2021      	movs	r0, #33	; 0x21
 8002570:	f7fe fa1a 	bl	80009a8 <LCD_WR_DATAX>

		LCD_WR_REG(0xF1);
 8002574:	20f1      	movs	r0, #241	; 0xf1
 8002576:	f7fe f9f3 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 800257a:	2001      	movs	r0, #1
 800257c:	f7fe fa14 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_REG(0xDF);
 8002580:	20df      	movs	r0, #223	; 0xdf
 8002582:	f7fe f9ed 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0x10);
 8002586:	2010      	movs	r0, #16
 8002588:	f7fe fa0e 	bl	80009a8 <LCD_WR_DATAX>

		//VCOMvoltage//
		LCD_WR_REG(0xC4);
 800258c:	20c4      	movs	r0, #196	; 0xc4
 800258e:	f7fe f9e7 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0x8F);	  //5f
 8002592:	208f      	movs	r0, #143	; 0x8f
 8002594:	f7fe fa08 	bl	80009a8 <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 8002598:	20c6      	movs	r0, #198	; 0xc6
 800259a:	f7fe f9e1 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800259e:	2000      	movs	r0, #0
 80025a0:	f7fe fa02 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 80025a4:	20e2      	movs	r0, #226	; 0xe2
 80025a6:	f7fe f9ff 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 80025aa:	20e2      	movs	r0, #226	; 0xe2
 80025ac:	f7fe f9fc 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 80025b0:	20e2      	movs	r0, #226	; 0xe2
 80025b2:	f7fe f9f9 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_REG(0xBF);
 80025b6:	20bf      	movs	r0, #191	; 0xbf
 80025b8:	f7fe f9d2 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 80025bc:	20aa      	movs	r0, #170	; 0xaa
 80025be:	f7fe f9f3 	bl	80009a8 <LCD_WR_DATAX>

		LCD_WR_REG(0xB0);
 80025c2:	20b0      	movs	r0, #176	; 0xb0
 80025c4:	f7fe f9cc 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0x0D);
 80025c8:	200d      	movs	r0, #13
 80025ca:	f7fe f9ed 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025ce:	2000      	movs	r0, #0
 80025d0:	f7fe f9ea 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0D);
 80025d4:	200d      	movs	r0, #13
 80025d6:	f7fe f9e7 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025da:	2000      	movs	r0, #0
 80025dc:	f7fe f9e4 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 80025e0:	2011      	movs	r0, #17
 80025e2:	f7fe f9e1 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025e6:	2000      	movs	r0, #0
 80025e8:	f7fe f9de 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x19);
 80025ec:	2019      	movs	r0, #25
 80025ee:	f7fe f9db 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025f2:	2000      	movs	r0, #0
 80025f4:	f7fe f9d8 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 80025f8:	2021      	movs	r0, #33	; 0x21
 80025fa:	f7fe f9d5 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025fe:	2000      	movs	r0, #0
 8002600:	f7fe f9d2 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2D);
 8002604:	202d      	movs	r0, #45	; 0x2d
 8002606:	f7fe f9cf 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800260a:	2000      	movs	r0, #0
 800260c:	f7fe f9cc 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3D);
 8002610:	203d      	movs	r0, #61	; 0x3d
 8002612:	f7fe f9c9 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002616:	2000      	movs	r0, #0
 8002618:	f7fe f9c6 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 800261c:	205d      	movs	r0, #93	; 0x5d
 800261e:	f7fe f9c3 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002622:	2000      	movs	r0, #0
 8002624:	f7fe f9c0 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8002628:	205d      	movs	r0, #93	; 0x5d
 800262a:	f7fe f9bd 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800262e:	2000      	movs	r0, #0
 8002630:	f7fe f9ba 	bl	80009a8 <LCD_WR_DATAX>

		LCD_WR_REG(0xB1);
 8002634:	20b1      	movs	r0, #177	; 0xb1
 8002636:	f7fe f993 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0x80);
 800263a:	2080      	movs	r0, #128	; 0x80
 800263c:	f7fe f9b4 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002640:	2000      	movs	r0, #0
 8002642:	f7fe f9b1 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8002646:	208b      	movs	r0, #139	; 0x8b
 8002648:	f7fe f9ae 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800264c:	2000      	movs	r0, #0
 800264e:	f7fe f9ab 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 8002652:	2096      	movs	r0, #150	; 0x96
 8002654:	f7fe f9a8 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002658:	2000      	movs	r0, #0
 800265a:	f7fe f9a5 	bl	80009a8 <LCD_WR_DATAX>

		LCD_WR_REG(0xB2);
 800265e:	20b2      	movs	r0, #178	; 0xb2
 8002660:	f7fe f97e 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002664:	2000      	movs	r0, #0
 8002666:	f7fe f99f 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800266a:	2000      	movs	r0, #0
 800266c:	f7fe f99c 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8002670:	2002      	movs	r0, #2
 8002672:	f7fe f999 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002676:	2000      	movs	r0, #0
 8002678:	f7fe f996 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 800267c:	2003      	movs	r0, #3
 800267e:	f7fe f993 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002682:	2000      	movs	r0, #0
 8002684:	f7fe f990 	bl	80009a8 <LCD_WR_DATAX>

		LCD_WR_REG(0xB3);
 8002688:	20b3      	movs	r0, #179	; 0xb3
 800268a:	f7fe f969 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800268e:	2000      	movs	r0, #0
 8002690:	f7fe f98a 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002694:	2000      	movs	r0, #0
 8002696:	f7fe f987 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800269a:	2000      	movs	r0, #0
 800269c:	f7fe f984 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026a0:	2000      	movs	r0, #0
 80026a2:	f7fe f981 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026a6:	2000      	movs	r0, #0
 80026a8:	f7fe f97e 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026ac:	2000      	movs	r0, #0
 80026ae:	f7fe f97b 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026b2:	2000      	movs	r0, #0
 80026b4:	f7fe f978 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026b8:	2000      	movs	r0, #0
 80026ba:	f7fe f975 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026be:	2000      	movs	r0, #0
 80026c0:	f7fe f972 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026c4:	2000      	movs	r0, #0
 80026c6:	f7fe f96f 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026ca:	2000      	movs	r0, #0
 80026cc:	f7fe f96c 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026d0:	2000      	movs	r0, #0
 80026d2:	f7fe f969 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026d6:	2000      	movs	r0, #0
 80026d8:	f7fe f966 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026dc:	2000      	movs	r0, #0
 80026de:	f7fe f963 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026e2:	2000      	movs	r0, #0
 80026e4:	f7fe f960 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026e8:	2000      	movs	r0, #0
 80026ea:	f7fe f95d 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026ee:	2000      	movs	r0, #0
 80026f0:	f7fe f95a 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026f4:	2000      	movs	r0, #0
 80026f6:	f7fe f957 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026fa:	2000      	movs	r0, #0
 80026fc:	f7fe f954 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002700:	2000      	movs	r0, #0
 8002702:	f7fe f951 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002706:	2000      	movs	r0, #0
 8002708:	f7fe f94e 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800270c:	2000      	movs	r0, #0
 800270e:	f7fe f94b 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002712:	2000      	movs	r0, #0
 8002714:	f7fe f948 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002718:	2000      	movs	r0, #0
 800271a:	f7fe f945 	bl	80009a8 <LCD_WR_DATAX>

		LCD_WR_REG(0xB4);
 800271e:	20b4      	movs	r0, #180	; 0xb4
 8002720:	f7fe f91e 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0x8B);
 8002724:	208b      	movs	r0, #139	; 0x8b
 8002726:	f7fe f93f 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800272a:	2000      	movs	r0, #0
 800272c:	f7fe f93c 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 8002730:	2096      	movs	r0, #150	; 0x96
 8002732:	f7fe f939 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002736:	2000      	movs	r0, #0
 8002738:	f7fe f936 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA1);
 800273c:	20a1      	movs	r0, #161	; 0xa1
 800273e:	f7fe f933 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002742:	2000      	movs	r0, #0
 8002744:	f7fe f930 	bl	80009a8 <LCD_WR_DATAX>

		LCD_WR_REG(0xB5);
 8002748:	20b5      	movs	r0, #181	; 0xb5
 800274a:	f7fe f909 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0x02);
 800274e:	2002      	movs	r0, #2
 8002750:	f7fe f92a 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002754:	2000      	movs	r0, #0
 8002756:	f7fe f927 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 800275a:	2003      	movs	r0, #3
 800275c:	f7fe f924 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002760:	2000      	movs	r0, #0
 8002762:	f7fe f921 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 8002766:	2004      	movs	r0, #4
 8002768:	f7fe f91e 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800276c:	2000      	movs	r0, #0
 800276e:	f7fe f91b 	bl	80009a8 <LCD_WR_DATAX>

		LCD_WR_REG(0xB6);
 8002772:	20b6      	movs	r0, #182	; 0xb6
 8002774:	f7fe f8f4 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002778:	2000      	movs	r0, #0
 800277a:	f7fe f915 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800277e:	2000      	movs	r0, #0
 8002780:	f7fe f912 	bl	80009a8 <LCD_WR_DATAX>

		LCD_WR_REG(0xB7);
 8002784:	20b7      	movs	r0, #183	; 0xb7
 8002786:	f7fe f8eb 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800278a:	2000      	movs	r0, #0
 800278c:	f7fe f90c 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002790:	2000      	movs	r0, #0
 8002792:	f7fe f909 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 8002796:	203f      	movs	r0, #63	; 0x3f
 8002798:	f7fe f906 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800279c:	2000      	movs	r0, #0
 800279e:	f7fe f903 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5E);
 80027a2:	205e      	movs	r0, #94	; 0x5e
 80027a4:	f7fe f900 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027a8:	2000      	movs	r0, #0
 80027aa:	f7fe f8fd 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 80027ae:	2064      	movs	r0, #100	; 0x64
 80027b0:	f7fe f8fa 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027b4:	2000      	movs	r0, #0
 80027b6:	f7fe f8f7 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8C);
 80027ba:	208c      	movs	r0, #140	; 0x8c
 80027bc:	f7fe f8f4 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027c0:	2000      	movs	r0, #0
 80027c2:	f7fe f8f1 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAC);
 80027c6:	20ac      	movs	r0, #172	; 0xac
 80027c8:	f7fe f8ee 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027cc:	2000      	movs	r0, #0
 80027ce:	f7fe f8eb 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 80027d2:	20dc      	movs	r0, #220	; 0xdc
 80027d4:	f7fe f8e8 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027d8:	2000      	movs	r0, #0
 80027da:	f7fe f8e5 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x70);
 80027de:	2070      	movs	r0, #112	; 0x70
 80027e0:	f7fe f8e2 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027e4:	2000      	movs	r0, #0
 80027e6:	f7fe f8df 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x90);
 80027ea:	2090      	movs	r0, #144	; 0x90
 80027ec:	f7fe f8dc 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027f0:	2000      	movs	r0, #0
 80027f2:	f7fe f8d9 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xEB);
 80027f6:	20eb      	movs	r0, #235	; 0xeb
 80027f8:	f7fe f8d6 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027fc:	2000      	movs	r0, #0
 80027fe:	f7fe f8d3 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 8002802:	20dc      	movs	r0, #220	; 0xdc
 8002804:	f7fe f8d0 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002808:	2000      	movs	r0, #0
 800280a:	f7fe f8cd 	bl	80009a8 <LCD_WR_DATAX>

		LCD_WR_REG(0xB8);
 800280e:	20b8      	movs	r0, #184	; 0xb8
 8002810:	f7fe f8a6 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002814:	2000      	movs	r0, #0
 8002816:	f7fe f8c7 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800281a:	2000      	movs	r0, #0
 800281c:	f7fe f8c4 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002820:	2000      	movs	r0, #0
 8002822:	f7fe f8c1 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002826:	2000      	movs	r0, #0
 8002828:	f7fe f8be 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800282c:	2000      	movs	r0, #0
 800282e:	f7fe f8bb 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002832:	2000      	movs	r0, #0
 8002834:	f7fe f8b8 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002838:	2000      	movs	r0, #0
 800283a:	f7fe f8b5 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800283e:	2000      	movs	r0, #0
 8002840:	f7fe f8b2 	bl	80009a8 <LCD_WR_DATAX>

		LCD_WR_REG(0xBA);
 8002844:	20ba      	movs	r0, #186	; 0xba
 8002846:	f7fe f88b 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0x24);
 800284a:	2024      	movs	r0, #36	; 0x24
 800284c:	f7fe f8ac 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002850:	2000      	movs	r0, #0
 8002852:	f7fe f8a9 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002856:	2000      	movs	r0, #0
 8002858:	f7fe f8a6 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800285c:	2000      	movs	r0, #0
 800285e:	f7fe f8a3 	bl	80009a8 <LCD_WR_DATAX>

		LCD_WR_REG(0xC1);
 8002862:	20c1      	movs	r0, #193	; 0xc1
 8002864:	f7fe f87c 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8002868:	2020      	movs	r0, #32
 800286a:	f7fe f89d 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800286e:	2000      	movs	r0, #0
 8002870:	f7fe f89a 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 8002874:	2054      	movs	r0, #84	; 0x54
 8002876:	f7fe f897 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800287a:	2000      	movs	r0, #0
 800287c:	f7fe f894 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFF);
 8002880:	20ff      	movs	r0, #255	; 0xff
 8002882:	f7fe f891 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002886:	2000      	movs	r0, #0
 8002888:	f7fe f88e 	bl	80009a8 <LCD_WR_DATAX>

		LCD_WR_REG(0xC2);
 800288c:	20c2      	movs	r0, #194	; 0xc2
 800288e:	f7fe f867 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 8002892:	200a      	movs	r0, #10
 8002894:	f7fe f888 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002898:	2000      	movs	r0, #0
 800289a:	f7fe f885 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 800289e:	2004      	movs	r0, #4
 80028a0:	f7fe f882 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028a4:	2000      	movs	r0, #0
 80028a6:	f7fe f87f 	bl	80009a8 <LCD_WR_DATAX>

		LCD_WR_REG(0xC3);
 80028aa:	20c3      	movs	r0, #195	; 0xc3
 80028ac:	f7fe f858 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0x3C);
 80028b0:	203c      	movs	r0, #60	; 0x3c
 80028b2:	f7fe f879 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028b6:	2000      	movs	r0, #0
 80028b8:	f7fe f876 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3A);
 80028bc:	203a      	movs	r0, #58	; 0x3a
 80028be:	f7fe f873 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028c2:	2000      	movs	r0, #0
 80028c4:	f7fe f870 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x39);
 80028c8:	2039      	movs	r0, #57	; 0x39
 80028ca:	f7fe f86d 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028ce:	2000      	movs	r0, #0
 80028d0:	f7fe f86a 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x37);
 80028d4:	2037      	movs	r0, #55	; 0x37
 80028d6:	f7fe f867 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028da:	2000      	movs	r0, #0
 80028dc:	f7fe f864 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 80028e0:	203c      	movs	r0, #60	; 0x3c
 80028e2:	f7fe f861 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028e6:	2000      	movs	r0, #0
 80028e8:	f7fe f85e 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 80028ec:	2036      	movs	r0, #54	; 0x36
 80028ee:	f7fe f85b 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028f2:	2000      	movs	r0, #0
 80028f4:	f7fe f858 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 80028f8:	2032      	movs	r0, #50	; 0x32
 80028fa:	f7fe f855 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028fe:	2000      	movs	r0, #0
 8002900:	f7fe f852 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 8002904:	202f      	movs	r0, #47	; 0x2f
 8002906:	f7fe f84f 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800290a:	2000      	movs	r0, #0
 800290c:	f7fe f84c 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8002910:	202c      	movs	r0, #44	; 0x2c
 8002912:	f7fe f849 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002916:	2000      	movs	r0, #0
 8002918:	f7fe f846 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 800291c:	2029      	movs	r0, #41	; 0x29
 800291e:	f7fe f843 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002922:	2000      	movs	r0, #0
 8002924:	f7fe f840 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 8002928:	2026      	movs	r0, #38	; 0x26
 800292a:	f7fe f83d 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800292e:	2000      	movs	r0, #0
 8002930:	f7fe f83a 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002934:	2024      	movs	r0, #36	; 0x24
 8002936:	f7fe f837 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800293a:	2000      	movs	r0, #0
 800293c:	f7fe f834 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002940:	2024      	movs	r0, #36	; 0x24
 8002942:	f7fe f831 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002946:	2000      	movs	r0, #0
 8002948:	f7fe f82e 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 800294c:	2023      	movs	r0, #35	; 0x23
 800294e:	f7fe f82b 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002952:	2000      	movs	r0, #0
 8002954:	f7fe f828 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002958:	203c      	movs	r0, #60	; 0x3c
 800295a:	f7fe f825 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800295e:	2000      	movs	r0, #0
 8002960:	f7fe f822 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002964:	2036      	movs	r0, #54	; 0x36
 8002966:	f7fe f81f 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800296a:	2000      	movs	r0, #0
 800296c:	f7fe f81c 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 8002970:	2032      	movs	r0, #50	; 0x32
 8002972:	f7fe f819 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002976:	2000      	movs	r0, #0
 8002978:	f7fe f816 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 800297c:	202f      	movs	r0, #47	; 0x2f
 800297e:	f7fe f813 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002982:	2000      	movs	r0, #0
 8002984:	f7fe f810 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8002988:	202c      	movs	r0, #44	; 0x2c
 800298a:	f7fe f80d 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800298e:	2000      	movs	r0, #0
 8002990:	f7fe f80a 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8002994:	2029      	movs	r0, #41	; 0x29
 8002996:	f7fe f807 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800299a:	2000      	movs	r0, #0
 800299c:	f7fe f804 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 80029a0:	2026      	movs	r0, #38	; 0x26
 80029a2:	f7fe f801 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029a6:	2000      	movs	r0, #0
 80029a8:	f7fd fffe 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 80029ac:	2024      	movs	r0, #36	; 0x24
 80029ae:	f7fd fffb 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029b2:	2000      	movs	r0, #0
 80029b4:	f7fd fff8 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 80029b8:	2024      	movs	r0, #36	; 0x24
 80029ba:	f7fd fff5 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029be:	2000      	movs	r0, #0
 80029c0:	f7fd fff2 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 80029c4:	2023      	movs	r0, #35	; 0x23
 80029c6:	f7fd ffef 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029ca:	2000      	movs	r0, #0
 80029cc:	f7fd ffec 	bl	80009a8 <LCD_WR_DATAX>

		LCD_WR_REG(0xC4);
 80029d0:	20c4      	movs	r0, #196	; 0xc4
 80029d2:	f7fd ffc5 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0x62);
 80029d6:	2062      	movs	r0, #98	; 0x62
 80029d8:	f7fd ffe6 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029dc:	2000      	movs	r0, #0
 80029de:	f7fd ffe3 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 80029e2:	2005      	movs	r0, #5
 80029e4:	f7fd ffe0 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029e8:	2000      	movs	r0, #0
 80029ea:	f7fd ffdd 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 80029ee:	2084      	movs	r0, #132	; 0x84
 80029f0:	f7fd ffda 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029f4:	2000      	movs	r0, #0
 80029f6:	f7fd ffd7 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF0);
 80029fa:	20f0      	movs	r0, #240	; 0xf0
 80029fc:	f7fd ffd4 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a00:	2000      	movs	r0, #0
 8002a02:	f7fd ffd1 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 8002a06:	2018      	movs	r0, #24
 8002a08:	f7fd ffce 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a0c:	2000      	movs	r0, #0
 8002a0e:	f7fd ffcb 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA4);
 8002a12:	20a4      	movs	r0, #164	; 0xa4
 8002a14:	f7fd ffc8 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a18:	2000      	movs	r0, #0
 8002a1a:	f7fd ffc5 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 8002a1e:	2018      	movs	r0, #24
 8002a20:	f7fd ffc2 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a24:	2000      	movs	r0, #0
 8002a26:	f7fd ffbf 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8002a2a:	2050      	movs	r0, #80	; 0x50
 8002a2c:	f7fd ffbc 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a30:	2000      	movs	r0, #0
 8002a32:	f7fd ffb9 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0C);
 8002a36:	200c      	movs	r0, #12
 8002a38:	f7fd ffb6 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a3c:	2000      	movs	r0, #0
 8002a3e:	f7fd ffb3 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8002a42:	2017      	movs	r0, #23
 8002a44:	f7fd ffb0 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a48:	2000      	movs	r0, #0
 8002a4a:	f7fd ffad 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x95);
 8002a4e:	2095      	movs	r0, #149	; 0x95
 8002a50:	f7fd ffaa 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a54:	2000      	movs	r0, #0
 8002a56:	f7fd ffa7 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002a5a:	20f3      	movs	r0, #243	; 0xf3
 8002a5c:	f7fd ffa4 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a60:	2000      	movs	r0, #0
 8002a62:	f7fd ffa1 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE6);
 8002a66:	20e6      	movs	r0, #230	; 0xe6
 8002a68:	f7fd ff9e 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a6c:	2000      	movs	r0, #0
 8002a6e:	f7fd ff9b 	bl	80009a8 <LCD_WR_DATAX>

		LCD_WR_REG(0xC5);
 8002a72:	20c5      	movs	r0, #197	; 0xc5
 8002a74:	f7fd ff74 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 8002a78:	2032      	movs	r0, #50	; 0x32
 8002a7a:	f7fd ff95 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a7e:	2000      	movs	r0, #0
 8002a80:	f7fd ff92 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002a84:	2044      	movs	r0, #68	; 0x44
 8002a86:	f7fd ff8f 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a8a:	2000      	movs	r0, #0
 8002a8c:	f7fd ff8c 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x65);
 8002a90:	2065      	movs	r0, #101	; 0x65
 8002a92:	f7fd ff89 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a96:	2000      	movs	r0, #0
 8002a98:	f7fd ff86 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8002a9c:	2076      	movs	r0, #118	; 0x76
 8002a9e:	f7fd ff83 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002aa2:	2000      	movs	r0, #0
 8002aa4:	f7fd ff80 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002aa8:	2088      	movs	r0, #136	; 0x88
 8002aaa:	f7fd ff7d 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002aae:	2000      	movs	r0, #0
 8002ab0:	f7fd ff7a 	bl	80009a8 <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 8002ab4:	20c6      	movs	r0, #198	; 0xc6
 8002ab6:	f7fd ff53 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8002aba:	2020      	movs	r0, #32
 8002abc:	f7fd ff74 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ac0:	2000      	movs	r0, #0
 8002ac2:	f7fd ff71 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8002ac6:	2017      	movs	r0, #23
 8002ac8:	f7fd ff6e 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002acc:	2000      	movs	r0, #0
 8002ace:	f7fd ff6b 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8002ad2:	2001      	movs	r0, #1
 8002ad4:	f7fd ff68 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ad8:	2000      	movs	r0, #0
 8002ada:	f7fd ff65 	bl	80009a8 <LCD_WR_DATAX>

		LCD_WR_REG(0xC7);
 8002ade:	20c7      	movs	r0, #199	; 0xc7
 8002ae0:	f7fd ff3e 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002ae4:	2000      	movs	r0, #0
 8002ae6:	f7fd ff5f 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002aea:	2000      	movs	r0, #0
 8002aec:	f7fd ff5c 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002af0:	2000      	movs	r0, #0
 8002af2:	f7fd ff59 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002af6:	2000      	movs	r0, #0
 8002af8:	f7fd ff56 	bl	80009a8 <LCD_WR_DATAX>

		LCD_WR_REG(0xC8);
 8002afc:	20c8      	movs	r0, #200	; 0xc8
 8002afe:	f7fd ff2f 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002b02:	2000      	movs	r0, #0
 8002b04:	f7fd ff50 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b08:	2000      	movs	r0, #0
 8002b0a:	f7fd ff4d 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b0e:	2000      	movs	r0, #0
 8002b10:	f7fd ff4a 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b14:	2000      	movs	r0, #0
 8002b16:	f7fd ff47 	bl	80009a8 <LCD_WR_DATAX>

		LCD_WR_REG(0xC9);
 8002b1a:	20c9      	movs	r0, #201	; 0xc9
 8002b1c:	f7fd ff20 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002b20:	2000      	movs	r0, #0
 8002b22:	f7fd ff41 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b26:	2000      	movs	r0, #0
 8002b28:	f7fd ff3e 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b2c:	2000      	movs	r0, #0
 8002b2e:	f7fd ff3b 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b32:	2000      	movs	r0, #0
 8002b34:	f7fd ff38 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b38:	2000      	movs	r0, #0
 8002b3a:	f7fd ff35 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b3e:	2000      	movs	r0, #0
 8002b40:	f7fd ff32 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b44:	2000      	movs	r0, #0
 8002b46:	f7fd ff2f 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	f7fd ff2c 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b50:	2000      	movs	r0, #0
 8002b52:	f7fd ff29 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b56:	2000      	movs	r0, #0
 8002b58:	f7fd ff26 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b5c:	2000      	movs	r0, #0
 8002b5e:	f7fd ff23 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b62:	2000      	movs	r0, #0
 8002b64:	f7fd ff20 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b68:	2000      	movs	r0, #0
 8002b6a:	f7fd ff1d 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b6e:	2000      	movs	r0, #0
 8002b70:	f7fd ff1a 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b74:	2000      	movs	r0, #0
 8002b76:	f7fd ff17 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b7a:	2000      	movs	r0, #0
 8002b7c:	f7fd ff14 	bl	80009a8 <LCD_WR_DATAX>

		LCD_WR_REG(0xE0);
 8002b80:	20e0      	movs	r0, #224	; 0xe0
 8002b82:	f7fd feed 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 8002b86:	2016      	movs	r0, #22
 8002b88:	f7fd ff0e 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b8c:	2000      	movs	r0, #0
 8002b8e:	f7fd ff0b 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8002b92:	201c      	movs	r0, #28
 8002b94:	f7fd ff08 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b98:	2000      	movs	r0, #0
 8002b9a:	f7fd ff05 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8002b9e:	2021      	movs	r0, #33	; 0x21
 8002ba0:	f7fd ff02 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ba4:	2000      	movs	r0, #0
 8002ba6:	f7fd feff 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002baa:	2036      	movs	r0, #54	; 0x36
 8002bac:	f7fd fefc 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bb0:	2000      	movs	r0, #0
 8002bb2:	f7fd fef9 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x46);
 8002bb6:	2046      	movs	r0, #70	; 0x46
 8002bb8:	f7fd fef6 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bbc:	2000      	movs	r0, #0
 8002bbe:	f7fd fef3 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 8002bc2:	2052      	movs	r0, #82	; 0x52
 8002bc4:	f7fd fef0 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bc8:	2000      	movs	r0, #0
 8002bca:	f7fd feed 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8002bce:	2064      	movs	r0, #100	; 0x64
 8002bd0:	f7fd feea 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bd4:	2000      	movs	r0, #0
 8002bd6:	f7fd fee7 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8002bda:	207a      	movs	r0, #122	; 0x7a
 8002bdc:	f7fd fee4 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002be0:	2000      	movs	r0, #0
 8002be2:	f7fd fee1 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8002be6:	208b      	movs	r0, #139	; 0x8b
 8002be8:	f7fd fede 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bec:	2000      	movs	r0, #0
 8002bee:	f7fd fedb 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002bf2:	2099      	movs	r0, #153	; 0x99
 8002bf4:	f7fd fed8 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bf8:	2000      	movs	r0, #0
 8002bfa:	f7fd fed5 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 8002bfe:	20a8      	movs	r0, #168	; 0xa8
 8002c00:	f7fd fed2 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c04:	2000      	movs	r0, #0
 8002c06:	f7fd fecf 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 8002c0a:	20b9      	movs	r0, #185	; 0xb9
 8002c0c:	f7fd fecc 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c10:	2000      	movs	r0, #0
 8002c12:	f7fd fec9 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002c16:	20c4      	movs	r0, #196	; 0xc4
 8002c18:	f7fd fec6 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c1c:	2000      	movs	r0, #0
 8002c1e:	f7fd fec3 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 8002c22:	20ca      	movs	r0, #202	; 0xca
 8002c24:	f7fd fec0 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c28:	2000      	movs	r0, #0
 8002c2a:	f7fd febd 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 8002c2e:	20d2      	movs	r0, #210	; 0xd2
 8002c30:	f7fd feba 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c34:	2000      	movs	r0, #0
 8002c36:	f7fd feb7 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD9);
 8002c3a:	20d9      	movs	r0, #217	; 0xd9
 8002c3c:	f7fd feb4 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c40:	2000      	movs	r0, #0
 8002c42:	f7fd feb1 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 8002c46:	20e0      	movs	r0, #224	; 0xe0
 8002c48:	f7fd feae 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c4c:	2000      	movs	r0, #0
 8002c4e:	f7fd feab 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002c52:	20f3      	movs	r0, #243	; 0xf3
 8002c54:	f7fd fea8 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c58:	2000      	movs	r0, #0
 8002c5a:	f7fd fea5 	bl	80009a8 <LCD_WR_DATAX>

		LCD_WR_REG(0xE1);
 8002c5e:	20e1      	movs	r0, #225	; 0xe1
 8002c60:	f7fd fe7e 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 8002c64:	2016      	movs	r0, #22
 8002c66:	f7fd fe9f 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c6a:	2000      	movs	r0, #0
 8002c6c:	f7fd fe9c 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8002c70:	201c      	movs	r0, #28
 8002c72:	f7fd fe99 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c76:	2000      	movs	r0, #0
 8002c78:	f7fd fe96 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x22);
 8002c7c:	2022      	movs	r0, #34	; 0x22
 8002c7e:	f7fd fe93 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c82:	2000      	movs	r0, #0
 8002c84:	f7fd fe90 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002c88:	2036      	movs	r0, #54	; 0x36
 8002c8a:	f7fd fe8d 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c8e:	2000      	movs	r0, #0
 8002c90:	f7fd fe8a 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8002c94:	2045      	movs	r0, #69	; 0x45
 8002c96:	f7fd fe87 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c9a:	2000      	movs	r0, #0
 8002c9c:	f7fd fe84 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 8002ca0:	2052      	movs	r0, #82	; 0x52
 8002ca2:	f7fd fe81 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ca6:	2000      	movs	r0, #0
 8002ca8:	f7fd fe7e 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8002cac:	2064      	movs	r0, #100	; 0x64
 8002cae:	f7fd fe7b 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cb2:	2000      	movs	r0, #0
 8002cb4:	f7fd fe78 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8002cb8:	207a      	movs	r0, #122	; 0x7a
 8002cba:	f7fd fe75 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cbe:	2000      	movs	r0, #0
 8002cc0:	f7fd fe72 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8002cc4:	208b      	movs	r0, #139	; 0x8b
 8002cc6:	f7fd fe6f 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cca:	2000      	movs	r0, #0
 8002ccc:	f7fd fe6c 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002cd0:	2099      	movs	r0, #153	; 0x99
 8002cd2:	f7fd fe69 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cd6:	2000      	movs	r0, #0
 8002cd8:	f7fd fe66 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 8002cdc:	20a8      	movs	r0, #168	; 0xa8
 8002cde:	f7fd fe63 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ce2:	2000      	movs	r0, #0
 8002ce4:	f7fd fe60 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 8002ce8:	20b9      	movs	r0, #185	; 0xb9
 8002cea:	f7fd fe5d 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cee:	2000      	movs	r0, #0
 8002cf0:	f7fd fe5a 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002cf4:	20c4      	movs	r0, #196	; 0xc4
 8002cf6:	f7fd fe57 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cfa:	2000      	movs	r0, #0
 8002cfc:	f7fd fe54 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 8002d00:	20ca      	movs	r0, #202	; 0xca
 8002d02:	f7fd fe51 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d06:	2000      	movs	r0, #0
 8002d08:	f7fd fe4e 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 8002d0c:	20d2      	movs	r0, #210	; 0xd2
 8002d0e:	f7fd fe4b 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d12:	2000      	movs	r0, #0
 8002d14:	f7fd fe48 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD8);
 8002d18:	20d8      	movs	r0, #216	; 0xd8
 8002d1a:	f7fd fe45 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d1e:	2000      	movs	r0, #0
 8002d20:	f7fd fe42 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 8002d24:	20e0      	movs	r0, #224	; 0xe0
 8002d26:	f7fd fe3f 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d2a:	2000      	movs	r0, #0
 8002d2c:	f7fd fe3c 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002d30:	20f3      	movs	r0, #243	; 0xf3
 8002d32:	f7fd fe39 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d36:	2000      	movs	r0, #0
 8002d38:	f7fd fe36 	bl	80009a8 <LCD_WR_DATAX>

		LCD_WR_REG(0xE2);
 8002d3c:	20e2      	movs	r0, #226	; 0xe2
 8002d3e:	f7fd fe0f 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 8002d42:	2005      	movs	r0, #5
 8002d44:	f7fd fe30 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d48:	2000      	movs	r0, #0
 8002d4a:	f7fd fe2d 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0B);
 8002d4e:	200b      	movs	r0, #11
 8002d50:	f7fd fe2a 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d54:	2000      	movs	r0, #0
 8002d56:	f7fd fe27 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1B);
 8002d5a:	201b      	movs	r0, #27
 8002d5c:	f7fd fe24 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d60:	2000      	movs	r0, #0
 8002d62:	f7fd fe21 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8002d66:	2034      	movs	r0, #52	; 0x34
 8002d68:	f7fd fe1e 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d6c:	2000      	movs	r0, #0
 8002d6e:	f7fd fe1b 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002d72:	2044      	movs	r0, #68	; 0x44
 8002d74:	f7fd fe18 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d78:	2000      	movs	r0, #0
 8002d7a:	f7fd fe15 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4F);
 8002d7e:	204f      	movs	r0, #79	; 0x4f
 8002d80:	f7fd fe12 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d84:	2000      	movs	r0, #0
 8002d86:	f7fd fe0f 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x61);
 8002d8a:	2061      	movs	r0, #97	; 0x61
 8002d8c:	f7fd fe0c 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d90:	2000      	movs	r0, #0
 8002d92:	f7fd fe09 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x79);
 8002d96:	2079      	movs	r0, #121	; 0x79
 8002d98:	f7fd fe06 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d9c:	2000      	movs	r0, #0
 8002d9e:	f7fd fe03 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002da2:	2088      	movs	r0, #136	; 0x88
 8002da4:	f7fd fe00 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002da8:	2000      	movs	r0, #0
 8002daa:	f7fd fdfd 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 8002dae:	2097      	movs	r0, #151	; 0x97
 8002db0:	f7fd fdfa 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002db4:	2000      	movs	r0, #0
 8002db6:	f7fd fdf7 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 8002dba:	20a6      	movs	r0, #166	; 0xa6
 8002dbc:	f7fd fdf4 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dc0:	2000      	movs	r0, #0
 8002dc2:	f7fd fdf1 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 8002dc6:	20b7      	movs	r0, #183	; 0xb7
 8002dc8:	f7fd fdee 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dcc:	2000      	movs	r0, #0
 8002dce:	f7fd fdeb 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 8002dd2:	20c2      	movs	r0, #194	; 0xc2
 8002dd4:	f7fd fde8 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dd8:	2000      	movs	r0, #0
 8002dda:	f7fd fde5 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 8002dde:	20c7      	movs	r0, #199	; 0xc7
 8002de0:	f7fd fde2 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002de4:	2000      	movs	r0, #0
 8002de6:	f7fd fddf 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 8002dea:	20d1      	movs	r0, #209	; 0xd1
 8002dec:	f7fd fddc 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002df0:	2000      	movs	r0, #0
 8002df2:	f7fd fdd9 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD6);
 8002df6:	20d6      	movs	r0, #214	; 0xd6
 8002df8:	f7fd fdd6 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dfc:	2000      	movs	r0, #0
 8002dfe:	f7fd fdd3 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8002e02:	20dd      	movs	r0, #221	; 0xdd
 8002e04:	f7fd fdd0 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e08:	2000      	movs	r0, #0
 8002e0a:	f7fd fdcd 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002e0e:	20f3      	movs	r0, #243	; 0xf3
 8002e10:	f7fd fdca 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e14:	2000      	movs	r0, #0
 8002e16:	f7fd fdc7 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_REG(0xE3);
 8002e1a:	20e3      	movs	r0, #227	; 0xe3
 8002e1c:	f7fd fda0 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 8002e20:	2005      	movs	r0, #5
 8002e22:	f7fd fdc1 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e26:	2000      	movs	r0, #0
 8002e28:	f7fd fdbe 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA);
 8002e2c:	200a      	movs	r0, #10
 8002e2e:	f7fd fdbb 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e32:	2000      	movs	r0, #0
 8002e34:	f7fd fdb8 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8002e38:	201c      	movs	r0, #28
 8002e3a:	f7fd fdb5 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e3e:	2000      	movs	r0, #0
 8002e40:	f7fd fdb2 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 8002e44:	2033      	movs	r0, #51	; 0x33
 8002e46:	f7fd fdaf 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e4a:	2000      	movs	r0, #0
 8002e4c:	f7fd fdac 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002e50:	2044      	movs	r0, #68	; 0x44
 8002e52:	f7fd fda9 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e56:	2000      	movs	r0, #0
 8002e58:	f7fd fda6 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8002e5c:	2050      	movs	r0, #80	; 0x50
 8002e5e:	f7fd fda3 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e62:	2000      	movs	r0, #0
 8002e64:	f7fd fda0 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x62);
 8002e68:	2062      	movs	r0, #98	; 0x62
 8002e6a:	f7fd fd9d 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e6e:	2000      	movs	r0, #0
 8002e70:	f7fd fd9a 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x78);
 8002e74:	2078      	movs	r0, #120	; 0x78
 8002e76:	f7fd fd97 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e7a:	2000      	movs	r0, #0
 8002e7c:	f7fd fd94 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002e80:	2088      	movs	r0, #136	; 0x88
 8002e82:	f7fd fd91 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e86:	2000      	movs	r0, #0
 8002e88:	f7fd fd8e 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 8002e8c:	2097      	movs	r0, #151	; 0x97
 8002e8e:	f7fd fd8b 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e92:	2000      	movs	r0, #0
 8002e94:	f7fd fd88 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 8002e98:	20a6      	movs	r0, #166	; 0xa6
 8002e9a:	f7fd fd85 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e9e:	2000      	movs	r0, #0
 8002ea0:	f7fd fd82 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 8002ea4:	20b7      	movs	r0, #183	; 0xb7
 8002ea6:	f7fd fd7f 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eaa:	2000      	movs	r0, #0
 8002eac:	f7fd fd7c 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 8002eb0:	20c2      	movs	r0, #194	; 0xc2
 8002eb2:	f7fd fd79 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eb6:	2000      	movs	r0, #0
 8002eb8:	f7fd fd76 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 8002ebc:	20c7      	movs	r0, #199	; 0xc7
 8002ebe:	f7fd fd73 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ec2:	2000      	movs	r0, #0
 8002ec4:	f7fd fd70 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 8002ec8:	20d1      	movs	r0, #209	; 0xd1
 8002eca:	f7fd fd6d 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ece:	2000      	movs	r0, #0
 8002ed0:	f7fd fd6a 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD5);
 8002ed4:	20d5      	movs	r0, #213	; 0xd5
 8002ed6:	f7fd fd67 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eda:	2000      	movs	r0, #0
 8002edc:	f7fd fd64 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8002ee0:	20dd      	movs	r0, #221	; 0xdd
 8002ee2:	f7fd fd61 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ee6:	2000      	movs	r0, #0
 8002ee8:	f7fd fd5e 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002eec:	20f3      	movs	r0, #243	; 0xf3
 8002eee:	f7fd fd5b 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ef2:	2000      	movs	r0, #0
 8002ef4:	f7fd fd58 	bl	80009a8 <LCD_WR_DATAX>

		LCD_WR_REG(0xE4);
 8002ef8:	20e4      	movs	r0, #228	; 0xe4
 8002efa:	f7fd fd31 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8002efe:	2001      	movs	r0, #1
 8002f00:	f7fd fd52 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f04:	2000      	movs	r0, #0
 8002f06:	f7fd fd4f 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8002f0a:	2001      	movs	r0, #1
 8002f0c:	f7fd fd4c 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f10:	2000      	movs	r0, #0
 8002f12:	f7fd fd49 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8002f16:	2002      	movs	r0, #2
 8002f18:	f7fd fd46 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f1c:	2000      	movs	r0, #0
 8002f1e:	f7fd fd43 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 8002f22:	202a      	movs	r0, #42	; 0x2a
 8002f24:	f7fd fd40 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f28:	2000      	movs	r0, #0
 8002f2a:	f7fd fd3d 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002f2e:	203c      	movs	r0, #60	; 0x3c
 8002f30:	f7fd fd3a 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f34:	2000      	movs	r0, #0
 8002f36:	f7fd fd37 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 8002f3a:	204b      	movs	r0, #75	; 0x4b
 8002f3c:	f7fd fd34 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f40:	2000      	movs	r0, #0
 8002f42:	f7fd fd31 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8002f46:	205d      	movs	r0, #93	; 0x5d
 8002f48:	f7fd fd2e 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f4c:	2000      	movs	r0, #0
 8002f4e:	f7fd fd2b 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 8002f52:	2074      	movs	r0, #116	; 0x74
 8002f54:	f7fd fd28 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f58:	2000      	movs	r0, #0
 8002f5a:	f7fd fd25 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8002f5e:	2084      	movs	r0, #132	; 0x84
 8002f60:	f7fd fd22 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f64:	2000      	movs	r0, #0
 8002f66:	f7fd fd1f 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 8002f6a:	2093      	movs	r0, #147	; 0x93
 8002f6c:	f7fd fd1c 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f70:	2000      	movs	r0, #0
 8002f72:	f7fd fd19 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8002f76:	20a2      	movs	r0, #162	; 0xa2
 8002f78:	f7fd fd16 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f7c:	2000      	movs	r0, #0
 8002f7e:	f7fd fd13 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 8002f82:	20b3      	movs	r0, #179	; 0xb3
 8002f84:	f7fd fd10 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f88:	2000      	movs	r0, #0
 8002f8a:	f7fd fd0d 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 8002f8e:	20be      	movs	r0, #190	; 0xbe
 8002f90:	f7fd fd0a 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f94:	2000      	movs	r0, #0
 8002f96:	f7fd fd07 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002f9a:	20c4      	movs	r0, #196	; 0xc4
 8002f9c:	f7fd fd04 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fa0:	2000      	movs	r0, #0
 8002fa2:	f7fd fd01 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 8002fa6:	20cd      	movs	r0, #205	; 0xcd
 8002fa8:	f7fd fcfe 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fac:	2000      	movs	r0, #0
 8002fae:	f7fd fcfb 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 8002fb2:	20d3      	movs	r0, #211	; 0xd3
 8002fb4:	f7fd fcf8 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fb8:	2000      	movs	r0, #0
 8002fba:	f7fd fcf5 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8002fbe:	20dd      	movs	r0, #221	; 0xdd
 8002fc0:	f7fd fcf2 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fc4:	2000      	movs	r0, #0
 8002fc6:	f7fd fcef 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002fca:	20f3      	movs	r0, #243	; 0xf3
 8002fcc:	f7fd fcec 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fd0:	2000      	movs	r0, #0
 8002fd2:	f7fd fce9 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_REG(0xE5);
 8002fd6:	20e5      	movs	r0, #229	; 0xe5
 8002fd8:	f7fd fcc2 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002fdc:	2000      	movs	r0, #0
 8002fde:	f7fd fce3 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fe2:	2000      	movs	r0, #0
 8002fe4:	f7fd fce0 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fe8:	2000      	movs	r0, #0
 8002fea:	f7fd fcdd 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fee:	2000      	movs	r0, #0
 8002ff0:	f7fd fcda 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8002ff4:	2002      	movs	r0, #2
 8002ff6:	f7fd fcd7 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ffa:	2000      	movs	r0, #0
 8002ffc:	f7fd fcd4 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8003000:	2029      	movs	r0, #41	; 0x29
 8003002:	f7fd fcd1 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003006:	2000      	movs	r0, #0
 8003008:	f7fd fcce 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 800300c:	203c      	movs	r0, #60	; 0x3c
 800300e:	f7fd fccb 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003012:	2000      	movs	r0, #0
 8003014:	f7fd fcc8 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 8003018:	204b      	movs	r0, #75	; 0x4b
 800301a:	f7fd fcc5 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800301e:	2000      	movs	r0, #0
 8003020:	f7fd fcc2 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8003024:	205d      	movs	r0, #93	; 0x5d
 8003026:	f7fd fcbf 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800302a:	2000      	movs	r0, #0
 800302c:	f7fd fcbc 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 8003030:	2074      	movs	r0, #116	; 0x74
 8003032:	f7fd fcb9 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003036:	2000      	movs	r0, #0
 8003038:	f7fd fcb6 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 800303c:	2084      	movs	r0, #132	; 0x84
 800303e:	f7fd fcb3 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003042:	2000      	movs	r0, #0
 8003044:	f7fd fcb0 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 8003048:	2093      	movs	r0, #147	; 0x93
 800304a:	f7fd fcad 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800304e:	2000      	movs	r0, #0
 8003050:	f7fd fcaa 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8003054:	20a2      	movs	r0, #162	; 0xa2
 8003056:	f7fd fca7 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800305a:	2000      	movs	r0, #0
 800305c:	f7fd fca4 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 8003060:	20b3      	movs	r0, #179	; 0xb3
 8003062:	f7fd fca1 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003066:	2000      	movs	r0, #0
 8003068:	f7fd fc9e 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 800306c:	20be      	movs	r0, #190	; 0xbe
 800306e:	f7fd fc9b 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003072:	2000      	movs	r0, #0
 8003074:	f7fd fc98 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8003078:	20c4      	movs	r0, #196	; 0xc4
 800307a:	f7fd fc95 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800307e:	2000      	movs	r0, #0
 8003080:	f7fd fc92 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 8003084:	20cd      	movs	r0, #205	; 0xcd
 8003086:	f7fd fc8f 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800308a:	2000      	movs	r0, #0
 800308c:	f7fd fc8c 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 8003090:	20d3      	movs	r0, #211	; 0xd3
 8003092:	f7fd fc89 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003096:	2000      	movs	r0, #0
 8003098:	f7fd fc86 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 800309c:	20dc      	movs	r0, #220	; 0xdc
 800309e:	f7fd fc83 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030a2:	2000      	movs	r0, #0
 80030a4:	f7fd fc80 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 80030a8:	20f3      	movs	r0, #243	; 0xf3
 80030aa:	f7fd fc7d 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030ae:	2000      	movs	r0, #0
 80030b0:	f7fd fc7a 	bl	80009a8 <LCD_WR_DATAX>

		LCD_WR_REG(0xE6);
 80030b4:	20e6      	movs	r0, #230	; 0xe6
 80030b6:	f7fd fc53 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0x11);
 80030ba:	2011      	movs	r0, #17
 80030bc:	f7fd fc74 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030c0:	2000      	movs	r0, #0
 80030c2:	f7fd fc71 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 80030c6:	2034      	movs	r0, #52	; 0x34
 80030c8:	f7fd fc6e 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030cc:	2000      	movs	r0, #0
 80030ce:	f7fd fc6b 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 80030d2:	2056      	movs	r0, #86	; 0x56
 80030d4:	f7fd fc68 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030d8:	2000      	movs	r0, #0
 80030da:	f7fd fc65 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 80030de:	2076      	movs	r0, #118	; 0x76
 80030e0:	f7fd fc62 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030e4:	2000      	movs	r0, #0
 80030e6:	f7fd fc5f 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 80030ea:	2077      	movs	r0, #119	; 0x77
 80030ec:	f7fd fc5c 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030f0:	2000      	movs	r0, #0
 80030f2:	f7fd fc59 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 80030f6:	2066      	movs	r0, #102	; 0x66
 80030f8:	f7fd fc56 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030fc:	2000      	movs	r0, #0
 80030fe:	f7fd fc53 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8003102:	2088      	movs	r0, #136	; 0x88
 8003104:	f7fd fc50 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003108:	2000      	movs	r0, #0
 800310a:	f7fd fc4d 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 800310e:	2099      	movs	r0, #153	; 0x99
 8003110:	f7fd fc4a 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003114:	2000      	movs	r0, #0
 8003116:	f7fd fc47 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 800311a:	20bb      	movs	r0, #187	; 0xbb
 800311c:	f7fd fc44 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003120:	2000      	movs	r0, #0
 8003122:	f7fd fc41 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8003126:	2099      	movs	r0, #153	; 0x99
 8003128:	f7fd fc3e 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800312c:	2000      	movs	r0, #0
 800312e:	f7fd fc3b 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8003132:	2066      	movs	r0, #102	; 0x66
 8003134:	f7fd fc38 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003138:	2000      	movs	r0, #0
 800313a:	f7fd fc35 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 800313e:	2055      	movs	r0, #85	; 0x55
 8003140:	f7fd fc32 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003144:	2000      	movs	r0, #0
 8003146:	f7fd fc2f 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 800314a:	2055      	movs	r0, #85	; 0x55
 800314c:	f7fd fc2c 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003150:	2000      	movs	r0, #0
 8003152:	f7fd fc29 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8003156:	2045      	movs	r0, #69	; 0x45
 8003158:	f7fd fc26 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800315c:	2000      	movs	r0, #0
 800315e:	f7fd fc23 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 8003162:	2043      	movs	r0, #67	; 0x43
 8003164:	f7fd fc20 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003168:	2000      	movs	r0, #0
 800316a:	f7fd fc1d 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 800316e:	2044      	movs	r0, #68	; 0x44
 8003170:	f7fd fc1a 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003174:	2000      	movs	r0, #0
 8003176:	f7fd fc17 	bl	80009a8 <LCD_WR_DATAX>

		LCD_WR_REG(0xE7);
 800317a:	20e7      	movs	r0, #231	; 0xe7
 800317c:	f7fd fbf0 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 8003180:	2032      	movs	r0, #50	; 0x32
 8003182:	f7fd fc11 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003186:	2000      	movs	r0, #0
 8003188:	f7fd fc0e 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 800318c:	2055      	movs	r0, #85	; 0x55
 800318e:	f7fd fc0b 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003192:	2000      	movs	r0, #0
 8003194:	f7fd fc08 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8003198:	2076      	movs	r0, #118	; 0x76
 800319a:	f7fd fc05 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800319e:	2000      	movs	r0, #0
 80031a0:	f7fd fc02 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 80031a4:	2066      	movs	r0, #102	; 0x66
 80031a6:	f7fd fbff 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031aa:	2000      	movs	r0, #0
 80031ac:	f7fd fbfc 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 80031b0:	2067      	movs	r0, #103	; 0x67
 80031b2:	f7fd fbf9 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031b6:	2000      	movs	r0, #0
 80031b8:	f7fd fbf6 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 80031bc:	2067      	movs	r0, #103	; 0x67
 80031be:	f7fd fbf3 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031c2:	2000      	movs	r0, #0
 80031c4:	f7fd fbf0 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 80031c8:	2087      	movs	r0, #135	; 0x87
 80031ca:	f7fd fbed 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031ce:	2000      	movs	r0, #0
 80031d0:	f7fd fbea 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80031d4:	2099      	movs	r0, #153	; 0x99
 80031d6:	f7fd fbe7 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031da:	2000      	movs	r0, #0
 80031dc:	f7fd fbe4 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 80031e0:	20bb      	movs	r0, #187	; 0xbb
 80031e2:	f7fd fbe1 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031e6:	2000      	movs	r0, #0
 80031e8:	f7fd fbde 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80031ec:	2099      	movs	r0, #153	; 0x99
 80031ee:	f7fd fbdb 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031f2:	2000      	movs	r0, #0
 80031f4:	f7fd fbd8 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 80031f8:	2077      	movs	r0, #119	; 0x77
 80031fa:	f7fd fbd5 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031fe:	2000      	movs	r0, #0
 8003200:	f7fd fbd2 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8003204:	2044      	movs	r0, #68	; 0x44
 8003206:	f7fd fbcf 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800320a:	2000      	movs	r0, #0
 800320c:	f7fd fbcc 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8003210:	2056      	movs	r0, #86	; 0x56
 8003212:	f7fd fbc9 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003216:	2000      	movs	r0, #0
 8003218:	f7fd fbc6 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 800321c:	2023      	movs	r0, #35	; 0x23
 800321e:	f7fd fbc3 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003222:	2000      	movs	r0, #0
 8003224:	f7fd fbc0 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 8003228:	2033      	movs	r0, #51	; 0x33
 800322a:	f7fd fbbd 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800322e:	2000      	movs	r0, #0
 8003230:	f7fd fbba 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8003234:	2045      	movs	r0, #69	; 0x45
 8003236:	f7fd fbb7 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800323a:	2000      	movs	r0, #0
 800323c:	f7fd fbb4 	bl	80009a8 <LCD_WR_DATAX>

		LCD_WR_REG(0xE8);
 8003240:	20e8      	movs	r0, #232	; 0xe8
 8003242:	f7fd fb8d 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003246:	2000      	movs	r0, #0
 8003248:	f7fd fbae 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800324c:	2000      	movs	r0, #0
 800324e:	f7fd fbab 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8003252:	2099      	movs	r0, #153	; 0x99
 8003254:	f7fd fba8 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003258:	2000      	movs	r0, #0
 800325a:	f7fd fba5 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 800325e:	2087      	movs	r0, #135	; 0x87
 8003260:	f7fd fba2 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003264:	2000      	movs	r0, #0
 8003266:	f7fd fb9f 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 800326a:	2088      	movs	r0, #136	; 0x88
 800326c:	f7fd fb9c 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003270:	2000      	movs	r0, #0
 8003272:	f7fd fb99 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8003276:	2077      	movs	r0, #119	; 0x77
 8003278:	f7fd fb96 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800327c:	2000      	movs	r0, #0
 800327e:	f7fd fb93 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8003282:	2066      	movs	r0, #102	; 0x66
 8003284:	f7fd fb90 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003288:	2000      	movs	r0, #0
 800328a:	f7fd fb8d 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 800328e:	2088      	movs	r0, #136	; 0x88
 8003290:	f7fd fb8a 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003294:	2000      	movs	r0, #0
 8003296:	f7fd fb87 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAA);
 800329a:	20aa      	movs	r0, #170	; 0xaa
 800329c:	f7fd fb84 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032a0:	2000      	movs	r0, #0
 80032a2:	f7fd fb81 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 80032a6:	20bb      	movs	r0, #187	; 0xbb
 80032a8:	f7fd fb7e 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032ac:	2000      	movs	r0, #0
 80032ae:	f7fd fb7b 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80032b2:	2099      	movs	r0, #153	; 0x99
 80032b4:	f7fd fb78 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032b8:	2000      	movs	r0, #0
 80032ba:	f7fd fb75 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 80032be:	2066      	movs	r0, #102	; 0x66
 80032c0:	f7fd fb72 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032c4:	2000      	movs	r0, #0
 80032c6:	f7fd fb6f 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80032ca:	2055      	movs	r0, #85	; 0x55
 80032cc:	f7fd fb6c 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032d0:	2000      	movs	r0, #0
 80032d2:	f7fd fb69 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80032d6:	2055      	movs	r0, #85	; 0x55
 80032d8:	f7fd fb66 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032dc:	2000      	movs	r0, #0
 80032de:	f7fd fb63 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 80032e2:	2044      	movs	r0, #68	; 0x44
 80032e4:	f7fd fb60 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032e8:	2000      	movs	r0, #0
 80032ea:	f7fd fb5d 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 80032ee:	2044      	movs	r0, #68	; 0x44
 80032f0:	f7fd fb5a 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032f4:	2000      	movs	r0, #0
 80032f6:	f7fd fb57 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80032fa:	2055      	movs	r0, #85	; 0x55
 80032fc:	f7fd fb54 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003300:	2000      	movs	r0, #0
 8003302:	f7fd fb51 	bl	80009a8 <LCD_WR_DATAX>

		LCD_WR_REG(0xE9);
 8003306:	20e9      	movs	r0, #233	; 0xe9
 8003308:	f7fd fb2a 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 800330c:	20aa      	movs	r0, #170	; 0xaa
 800330e:	f7fd fb4b 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003312:	2000      	movs	r0, #0
 8003314:	f7fd fb48 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003318:	2000      	movs	r0, #0
 800331a:	f7fd fb45 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800331e:	2000      	movs	r0, #0
 8003320:	f7fd fb42 	bl	80009a8 <LCD_WR_DATAX>

		LCD_WR_REG(0x00);
 8003324:	2000      	movs	r0, #0
 8003326:	f7fd fb1b 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 800332a:	20aa      	movs	r0, #170	; 0xaa
 800332c:	f7fd fb3c 	bl	80009a8 <LCD_WR_DATAX>

		LCD_WR_REG(0xCF);
 8003330:	20cf      	movs	r0, #207	; 0xcf
 8003332:	f7fd fb15 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003336:	2000      	movs	r0, #0
 8003338:	f7fd fb36 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800333c:	2000      	movs	r0, #0
 800333e:	f7fd fb33 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003342:	2000      	movs	r0, #0
 8003344:	f7fd fb30 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003348:	2000      	movs	r0, #0
 800334a:	f7fd fb2d 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800334e:	2000      	movs	r0, #0
 8003350:	f7fd fb2a 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003354:	2000      	movs	r0, #0
 8003356:	f7fd fb27 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800335a:	2000      	movs	r0, #0
 800335c:	f7fd fb24 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003360:	2000      	movs	r0, #0
 8003362:	f7fd fb21 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003366:	2000      	movs	r0, #0
 8003368:	f7fd fb1e 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800336c:	2000      	movs	r0, #0
 800336e:	f7fd fb1b 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003372:	2000      	movs	r0, #0
 8003374:	f7fd fb18 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003378:	2000      	movs	r0, #0
 800337a:	f7fd fb15 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800337e:	2000      	movs	r0, #0
 8003380:	f7fd fb12 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003384:	2000      	movs	r0, #0
 8003386:	f7fd fb0f 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800338a:	2000      	movs	r0, #0
 800338c:	f7fd fb0c 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003390:	2000      	movs	r0, #0
 8003392:	f7fd fb09 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003396:	2000      	movs	r0, #0
 8003398:	f7fd fb06 	bl	80009a8 <LCD_WR_DATAX>

		LCD_WR_REG(0xF0);
 800339c:	20f0      	movs	r0, #240	; 0xf0
 800339e:	f7fd fadf 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80033a2:	2000      	movs	r0, #0
 80033a4:	f7fd fb00 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 80033a8:	2050      	movs	r0, #80	; 0x50
 80033aa:	f7fd fafd 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033ae:	2000      	movs	r0, #0
 80033b0:	f7fd fafa 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033b4:	2000      	movs	r0, #0
 80033b6:	f7fd faf7 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033ba:	2000      	movs	r0, #0
 80033bc:	f7fd faf4 	bl	80009a8 <LCD_WR_DATAX>

		LCD_WR_REG(0xF3);
 80033c0:	20f3      	movs	r0, #243	; 0xf3
 80033c2:	f7fd facd 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80033c6:	2000      	movs	r0, #0
 80033c8:	f7fd faee 	bl	80009a8 <LCD_WR_DATAX>

		LCD_WR_REG(0xF9);
 80033cc:	20f9      	movs	r0, #249	; 0xf9
 80033ce:	f7fd fac7 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0x06);
 80033d2:	2006      	movs	r0, #6
 80033d4:	f7fd fae8 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 80033d8:	2010      	movs	r0, #16
 80033da:	f7fd fae5 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 80033de:	2029      	movs	r0, #41	; 0x29
 80033e0:	f7fd fae2 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033e4:	2000      	movs	r0, #0
 80033e6:	f7fd fadf 	bl	80009a8 <LCD_WR_DATAX>

		LCD_WR_REG(0x3A);
 80033ea:	203a      	movs	r0, #58	; 0x3a
 80033ec:	f7fd fab8 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0x55);	//66
 80033f0:	2055      	movs	r0, #85	; 0x55
 80033f2:	f7fd fad9 	bl	80009a8 <LCD_WR_DATAX>

		LCD_WR_REG(0x11);
 80033f6:	2011      	movs	r0, #17
 80033f8:	f7fd fab2 	bl	8000960 <LCD_WR_REG>
		HAL_Delay(100);
 80033fc:	2064      	movs	r0, #100	; 0x64
 80033fe:	f003 fae3 	bl	80069c8 <HAL_Delay>
		LCD_WR_REG(0x29);
 8003402:	2029      	movs	r0, #41	; 0x29
 8003404:	f7fd faac 	bl	8000960 <LCD_WR_REG>
		LCD_WR_REG(0x35);
 8003408:	2035      	movs	r0, #53	; 0x35
 800340a:	f7fd faa9 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800340e:	2000      	movs	r0, #0
 8003410:	f7fd faca 	bl	80009a8 <LCD_WR_DATAX>

		LCD_WR_REG(0x51);
 8003414:	2051      	movs	r0, #81	; 0x51
 8003416:	f7fd faa3 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0xFF);
 800341a:	20ff      	movs	r0, #255	; 0xff
 800341c:	f7fd fac4 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_REG(0x53);
 8003420:	2053      	movs	r0, #83	; 0x53
 8003422:	f7fd fa9d 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0x2C);
 8003426:	202c      	movs	r0, #44	; 0x2c
 8003428:	f7fd fabe 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_REG(0x55);
 800342c:	2055      	movs	r0, #85	; 0x55
 800342e:	f7fd fa97 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATAX(0x82);
 8003432:	2082      	movs	r0, #130	; 0x82
 8003434:	f7fd fab8 	bl	80009a8 <LCD_WR_DATAX>
		LCD_WR_REG(0x2c);
 8003438:	202c      	movs	r0, #44	; 0x2c
 800343a:	f7fd fa91 	bl	8000960 <LCD_WR_REG>
 800343e:	f002 bca1 	b.w	8005d84 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x5510) {
 8003442:	4b04      	ldr	r3, [pc, #16]	; (8003454 <LCD_Init+0x1504>)
 8003444:	889b      	ldrh	r3, [r3, #4]
 8003446:	f245 5210 	movw	r2, #21776	; 0x5510
 800344a:	4293      	cmp	r3, r2
 800344c:	f040 8782 	bne.w	8004354 <LCD_Init+0x2404>
 8003450:	e002      	b.n	8003458 <LCD_Init+0x1508>
 8003452:	bf00      	nop
 8003454:	200000e8 	.word	0x200000e8
		LCD_WriteReg(0xF000, 0x55);
 8003458:	2155      	movs	r1, #85	; 0x55
 800345a:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 800345e:	f7fd fb0b 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 8003462:	21aa      	movs	r1, #170	; 0xaa
 8003464:	f24f 0001 	movw	r0, #61441	; 0xf001
 8003468:	f7fd fb06 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 800346c:	2152      	movs	r1, #82	; 0x52
 800346e:	f24f 0002 	movw	r0, #61442	; 0xf002
 8003472:	f7fd fb01 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 8003476:	2108      	movs	r1, #8
 8003478:	f24f 0003 	movw	r0, #61443	; 0xf003
 800347c:	f7fd fafc 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x01);
 8003480:	2101      	movs	r1, #1
 8003482:	f24f 0004 	movw	r0, #61444	; 0xf004
 8003486:	f7fd faf7 	bl	8000a78 <LCD_WriteReg>
		//AVDD Set AVDD 5.2V
		LCD_WriteReg(0xB000, 0x0D);
 800348a:	210d      	movs	r1, #13
 800348c:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 8003490:	f7fd faf2 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xB001, 0x0D);
 8003494:	210d      	movs	r1, #13
 8003496:	f24b 0001 	movw	r0, #45057	; 0xb001
 800349a:	f7fd faed 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xB002, 0x0D);
 800349e:	210d      	movs	r1, #13
 80034a0:	f24b 0002 	movw	r0, #45058	; 0xb002
 80034a4:	f7fd fae8 	bl	8000a78 <LCD_WriteReg>
		//AVDD ratio
		LCD_WriteReg(0xB600, 0x34);
 80034a8:	2134      	movs	r1, #52	; 0x34
 80034aa:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 80034ae:	f7fd fae3 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xB601, 0x34);
 80034b2:	2134      	movs	r1, #52	; 0x34
 80034b4:	f24b 6001 	movw	r0, #46593	; 0xb601
 80034b8:	f7fd fade 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xB602, 0x34);
 80034bc:	2134      	movs	r1, #52	; 0x34
 80034be:	f24b 6002 	movw	r0, #46594	; 0xb602
 80034c2:	f7fd fad9 	bl	8000a78 <LCD_WriteReg>
		//AVEE -5.2V
		LCD_WriteReg(0xB100, 0x0D);
 80034c6:	210d      	movs	r1, #13
 80034c8:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 80034cc:	f7fd fad4 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x0D);
 80034d0:	210d      	movs	r1, #13
 80034d2:	f24b 1001 	movw	r0, #45313	; 0xb101
 80034d6:	f7fd facf 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xB102, 0x0D);
 80034da:	210d      	movs	r1, #13
 80034dc:	f24b 1002 	movw	r0, #45314	; 0xb102
 80034e0:	f7fd faca 	bl	8000a78 <LCD_WriteReg>
		//AVEE ratio
		LCD_WriteReg(0xB700, 0x34);
 80034e4:	2134      	movs	r1, #52	; 0x34
 80034e6:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 80034ea:	f7fd fac5 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x34);
 80034ee:	2134      	movs	r1, #52	; 0x34
 80034f0:	f24b 7001 	movw	r0, #46849	; 0xb701
 80034f4:	f7fd fac0 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xB702, 0x34);
 80034f8:	2134      	movs	r1, #52	; 0x34
 80034fa:	f24b 7002 	movw	r0, #46850	; 0xb702
 80034fe:	f7fd fabb 	bl	8000a78 <LCD_WriteReg>
		//VCL -2.5V
		LCD_WriteReg(0xB200, 0x00);
 8003502:	2100      	movs	r1, #0
 8003504:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 8003508:	f7fd fab6 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xB201, 0x00);
 800350c:	2100      	movs	r1, #0
 800350e:	f24b 2001 	movw	r0, #45569	; 0xb201
 8003512:	f7fd fab1 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xB202, 0x00);
 8003516:	2100      	movs	r1, #0
 8003518:	f24b 2002 	movw	r0, #45570	; 0xb202
 800351c:	f7fd faac 	bl	8000a78 <LCD_WriteReg>
		//VCL ratio
		LCD_WriteReg(0xB800, 0x24);
 8003520:	2124      	movs	r1, #36	; 0x24
 8003522:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8003526:	f7fd faa7 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x24);
 800352a:	2124      	movs	r1, #36	; 0x24
 800352c:	f64b 0001 	movw	r0, #47105	; 0xb801
 8003530:	f7fd faa2 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x24);
 8003534:	2124      	movs	r1, #36	; 0x24
 8003536:	f64b 0002 	movw	r0, #47106	; 0xb802
 800353a:	f7fd fa9d 	bl	8000a78 <LCD_WriteReg>
		//VGH 15V (Free pump)
		LCD_WriteReg(0xBF00, 0x01);
 800353e:	2101      	movs	r1, #1
 8003540:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 8003544:	f7fd fa98 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xB300, 0x0F);
 8003548:	210f      	movs	r1, #15
 800354a:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 800354e:	f7fd fa93 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xB301, 0x0F);
 8003552:	210f      	movs	r1, #15
 8003554:	f24b 3001 	movw	r0, #45825	; 0xb301
 8003558:	f7fd fa8e 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xB302, 0x0F);
 800355c:	210f      	movs	r1, #15
 800355e:	f24b 3002 	movw	r0, #45826	; 0xb302
 8003562:	f7fd fa89 	bl	8000a78 <LCD_WriteReg>
		//VGH ratio
		LCD_WriteReg(0xB900, 0x34);
 8003566:	2134      	movs	r1, #52	; 0x34
 8003568:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 800356c:	f7fd fa84 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xB901, 0x34);
 8003570:	2134      	movs	r1, #52	; 0x34
 8003572:	f64b 1001 	movw	r0, #47361	; 0xb901
 8003576:	f7fd fa7f 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xB902, 0x34);
 800357a:	2134      	movs	r1, #52	; 0x34
 800357c:	f64b 1002 	movw	r0, #47362	; 0xb902
 8003580:	f7fd fa7a 	bl	8000a78 <LCD_WriteReg>
		//VGL_REG -10V
		LCD_WriteReg(0xB500, 0x08);
 8003584:	2108      	movs	r1, #8
 8003586:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 800358a:	f7fd fa75 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xB501, 0x08);
 800358e:	2108      	movs	r1, #8
 8003590:	f24b 5001 	movw	r0, #46337	; 0xb501
 8003594:	f7fd fa70 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xB502, 0x08);
 8003598:	2108      	movs	r1, #8
 800359a:	f24b 5002 	movw	r0, #46338	; 0xb502
 800359e:	f7fd fa6b 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xC200, 0x03);
 80035a2:	2103      	movs	r1, #3
 80035a4:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 80035a8:	f7fd fa66 	bl	8000a78 <LCD_WriteReg>
		//VGLX ratio
		LCD_WriteReg(0xBA00, 0x24);
 80035ac:	2124      	movs	r1, #36	; 0x24
 80035ae:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 80035b2:	f7fd fa61 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xBA01, 0x24);
 80035b6:	2124      	movs	r1, #36	; 0x24
 80035b8:	f64b 2001 	movw	r0, #47617	; 0xba01
 80035bc:	f7fd fa5c 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xBA02, 0x24);
 80035c0:	2124      	movs	r1, #36	; 0x24
 80035c2:	f64b 2002 	movw	r0, #47618	; 0xba02
 80035c6:	f7fd fa57 	bl	8000a78 <LCD_WriteReg>
		//VGMP/VGSP 4.5V/0V
		LCD_WriteReg(0xBC00, 0x00);
 80035ca:	2100      	movs	r1, #0
 80035cc:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 80035d0:	f7fd fa52 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x78);
 80035d4:	2178      	movs	r1, #120	; 0x78
 80035d6:	f64b 4001 	movw	r0, #48129	; 0xbc01
 80035da:	f7fd fa4d 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 80035de:	2100      	movs	r1, #0
 80035e0:	f64b 4002 	movw	r0, #48130	; 0xbc02
 80035e4:	f7fd fa48 	bl	8000a78 <LCD_WriteReg>
		//VGMN/VGSN -4.5V/0V
		LCD_WriteReg(0xBD00, 0x00);
 80035e8:	2100      	movs	r1, #0
 80035ea:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 80035ee:	f7fd fa43 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xBD01, 0x78);
 80035f2:	2178      	movs	r1, #120	; 0x78
 80035f4:	f64b 5001 	movw	r0, #48385	; 0xbd01
 80035f8:	f7fd fa3e 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xBD02, 0x00);
 80035fc:	2100      	movs	r1, #0
 80035fe:	f64b 5002 	movw	r0, #48386	; 0xbd02
 8003602:	f7fd fa39 	bl	8000a78 <LCD_WriteReg>
		//VCOM
		LCD_WriteReg(0xBE00, 0x00);
 8003606:	2100      	movs	r1, #0
 8003608:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 800360c:	f7fd fa34 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xBE01, 0x64);
 8003610:	2164      	movs	r1, #100	; 0x64
 8003612:	f64b 6001 	movw	r0, #48641	; 0xbe01
 8003616:	f7fd fa2f 	bl	8000a78 <LCD_WriteReg>
		//Gamma Setting
		LCD_WriteReg(0xD100, 0x00);
 800361a:	2100      	movs	r1, #0
 800361c:	f44f 4051 	mov.w	r0, #53504	; 0xd100
 8003620:	f7fd fa2a 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD101, 0x33);
 8003624:	2133      	movs	r1, #51	; 0x33
 8003626:	f24d 1001 	movw	r0, #53505	; 0xd101
 800362a:	f7fd fa25 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD102, 0x00);
 800362e:	2100      	movs	r1, #0
 8003630:	f24d 1002 	movw	r0, #53506	; 0xd102
 8003634:	f7fd fa20 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD103, 0x34);
 8003638:	2134      	movs	r1, #52	; 0x34
 800363a:	f24d 1003 	movw	r0, #53507	; 0xd103
 800363e:	f7fd fa1b 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD104, 0x00);
 8003642:	2100      	movs	r1, #0
 8003644:	f24d 1004 	movw	r0, #53508	; 0xd104
 8003648:	f7fd fa16 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD105, 0x3A);
 800364c:	213a      	movs	r1, #58	; 0x3a
 800364e:	f24d 1005 	movw	r0, #53509	; 0xd105
 8003652:	f7fd fa11 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD106, 0x00);
 8003656:	2100      	movs	r1, #0
 8003658:	f24d 1006 	movw	r0, #53510	; 0xd106
 800365c:	f7fd fa0c 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD107, 0x4A);
 8003660:	214a      	movs	r1, #74	; 0x4a
 8003662:	f24d 1007 	movw	r0, #53511	; 0xd107
 8003666:	f7fd fa07 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD108, 0x00);
 800366a:	2100      	movs	r1, #0
 800366c:	f24d 1008 	movw	r0, #53512	; 0xd108
 8003670:	f7fd fa02 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD109, 0x5C);
 8003674:	215c      	movs	r1, #92	; 0x5c
 8003676:	f24d 1009 	movw	r0, #53513	; 0xd109
 800367a:	f7fd f9fd 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD10A, 0x00);
 800367e:	2100      	movs	r1, #0
 8003680:	f24d 100a 	movw	r0, #53514	; 0xd10a
 8003684:	f7fd f9f8 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD10B, 0x81);
 8003688:	2181      	movs	r1, #129	; 0x81
 800368a:	f24d 100b 	movw	r0, #53515	; 0xd10b
 800368e:	f7fd f9f3 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD10C, 0x00);
 8003692:	2100      	movs	r1, #0
 8003694:	f24d 100c 	movw	r0, #53516	; 0xd10c
 8003698:	f7fd f9ee 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD10D, 0xA6);
 800369c:	21a6      	movs	r1, #166	; 0xa6
 800369e:	f24d 100d 	movw	r0, #53517	; 0xd10d
 80036a2:	f7fd f9e9 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD10E, 0x00);
 80036a6:	2100      	movs	r1, #0
 80036a8:	f24d 100e 	movw	r0, #53518	; 0xd10e
 80036ac:	f7fd f9e4 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD10F, 0xE5);
 80036b0:	21e5      	movs	r1, #229	; 0xe5
 80036b2:	f24d 100f 	movw	r0, #53519	; 0xd10f
 80036b6:	f7fd f9df 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD110, 0x01);
 80036ba:	2101      	movs	r1, #1
 80036bc:	f24d 1010 	movw	r0, #53520	; 0xd110
 80036c0:	f7fd f9da 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD111, 0x13);
 80036c4:	2113      	movs	r1, #19
 80036c6:	f24d 1011 	movw	r0, #53521	; 0xd111
 80036ca:	f7fd f9d5 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD112, 0x01);
 80036ce:	2101      	movs	r1, #1
 80036d0:	f24d 1012 	movw	r0, #53522	; 0xd112
 80036d4:	f7fd f9d0 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD113, 0x54);
 80036d8:	2154      	movs	r1, #84	; 0x54
 80036da:	f24d 1013 	movw	r0, #53523	; 0xd113
 80036de:	f7fd f9cb 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD114, 0x01);
 80036e2:	2101      	movs	r1, #1
 80036e4:	f24d 1014 	movw	r0, #53524	; 0xd114
 80036e8:	f7fd f9c6 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD115, 0x82);
 80036ec:	2182      	movs	r1, #130	; 0x82
 80036ee:	f24d 1015 	movw	r0, #53525	; 0xd115
 80036f2:	f7fd f9c1 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD116, 0x01);
 80036f6:	2101      	movs	r1, #1
 80036f8:	f24d 1016 	movw	r0, #53526	; 0xd116
 80036fc:	f7fd f9bc 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD117, 0xCA);
 8003700:	21ca      	movs	r1, #202	; 0xca
 8003702:	f24d 1017 	movw	r0, #53527	; 0xd117
 8003706:	f7fd f9b7 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD118, 0x02);
 800370a:	2102      	movs	r1, #2
 800370c:	f24d 1018 	movw	r0, #53528	; 0xd118
 8003710:	f7fd f9b2 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD119, 0x00);
 8003714:	2100      	movs	r1, #0
 8003716:	f24d 1019 	movw	r0, #53529	; 0xd119
 800371a:	f7fd f9ad 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD11A, 0x02);
 800371e:	2102      	movs	r1, #2
 8003720:	f24d 101a 	movw	r0, #53530	; 0xd11a
 8003724:	f7fd f9a8 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD11B, 0x01);
 8003728:	2101      	movs	r1, #1
 800372a:	f24d 101b 	movw	r0, #53531	; 0xd11b
 800372e:	f7fd f9a3 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD11C, 0x02);
 8003732:	2102      	movs	r1, #2
 8003734:	f24d 101c 	movw	r0, #53532	; 0xd11c
 8003738:	f7fd f99e 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD11D, 0x34);
 800373c:	2134      	movs	r1, #52	; 0x34
 800373e:	f24d 101d 	movw	r0, #53533	; 0xd11d
 8003742:	f7fd f999 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD11E, 0x02);
 8003746:	2102      	movs	r1, #2
 8003748:	f24d 101e 	movw	r0, #53534	; 0xd11e
 800374c:	f7fd f994 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD11F, 0x67);
 8003750:	2167      	movs	r1, #103	; 0x67
 8003752:	f24d 101f 	movw	r0, #53535	; 0xd11f
 8003756:	f7fd f98f 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD120, 0x02);
 800375a:	2102      	movs	r1, #2
 800375c:	f24d 1020 	movw	r0, #53536	; 0xd120
 8003760:	f7fd f98a 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD121, 0x84);
 8003764:	2184      	movs	r1, #132	; 0x84
 8003766:	f24d 1021 	movw	r0, #53537	; 0xd121
 800376a:	f7fd f985 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD122, 0x02);
 800376e:	2102      	movs	r1, #2
 8003770:	f24d 1022 	movw	r0, #53538	; 0xd122
 8003774:	f7fd f980 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD123, 0xA4);
 8003778:	21a4      	movs	r1, #164	; 0xa4
 800377a:	f24d 1023 	movw	r0, #53539	; 0xd123
 800377e:	f7fd f97b 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD124, 0x02);
 8003782:	2102      	movs	r1, #2
 8003784:	f24d 1024 	movw	r0, #53540	; 0xd124
 8003788:	f7fd f976 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD125, 0xB7);
 800378c:	21b7      	movs	r1, #183	; 0xb7
 800378e:	f24d 1025 	movw	r0, #53541	; 0xd125
 8003792:	f7fd f971 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD126, 0x02);
 8003796:	2102      	movs	r1, #2
 8003798:	f24d 1026 	movw	r0, #53542	; 0xd126
 800379c:	f7fd f96c 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD127, 0xCF);
 80037a0:	21cf      	movs	r1, #207	; 0xcf
 80037a2:	f24d 1027 	movw	r0, #53543	; 0xd127
 80037a6:	f7fd f967 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD128, 0x02);
 80037aa:	2102      	movs	r1, #2
 80037ac:	f24d 1028 	movw	r0, #53544	; 0xd128
 80037b0:	f7fd f962 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD129, 0xDE);
 80037b4:	21de      	movs	r1, #222	; 0xde
 80037b6:	f24d 1029 	movw	r0, #53545	; 0xd129
 80037ba:	f7fd f95d 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD12A, 0x02);
 80037be:	2102      	movs	r1, #2
 80037c0:	f24d 102a 	movw	r0, #53546	; 0xd12a
 80037c4:	f7fd f958 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD12B, 0xF2);
 80037c8:	21f2      	movs	r1, #242	; 0xf2
 80037ca:	f24d 102b 	movw	r0, #53547	; 0xd12b
 80037ce:	f7fd f953 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD12C, 0x02);
 80037d2:	2102      	movs	r1, #2
 80037d4:	f24d 102c 	movw	r0, #53548	; 0xd12c
 80037d8:	f7fd f94e 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD12D, 0xFE);
 80037dc:	21fe      	movs	r1, #254	; 0xfe
 80037de:	f24d 102d 	movw	r0, #53549	; 0xd12d
 80037e2:	f7fd f949 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD12E, 0x03);
 80037e6:	2103      	movs	r1, #3
 80037e8:	f24d 102e 	movw	r0, #53550	; 0xd12e
 80037ec:	f7fd f944 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD12F, 0x10);
 80037f0:	2110      	movs	r1, #16
 80037f2:	f24d 102f 	movw	r0, #53551	; 0xd12f
 80037f6:	f7fd f93f 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD130, 0x03);
 80037fa:	2103      	movs	r1, #3
 80037fc:	f24d 1030 	movw	r0, #53552	; 0xd130
 8003800:	f7fd f93a 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD131, 0x33);
 8003804:	2133      	movs	r1, #51	; 0x33
 8003806:	f24d 1031 	movw	r0, #53553	; 0xd131
 800380a:	f7fd f935 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD132, 0x03);
 800380e:	2103      	movs	r1, #3
 8003810:	f24d 1032 	movw	r0, #53554	; 0xd132
 8003814:	f7fd f930 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD133, 0x6D);
 8003818:	216d      	movs	r1, #109	; 0x6d
 800381a:	f24d 1033 	movw	r0, #53555	; 0xd133
 800381e:	f7fd f92b 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD200, 0x00);
 8003822:	2100      	movs	r1, #0
 8003824:	f44f 4052 	mov.w	r0, #53760	; 0xd200
 8003828:	f7fd f926 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD201, 0x33);
 800382c:	2133      	movs	r1, #51	; 0x33
 800382e:	f24d 2001 	movw	r0, #53761	; 0xd201
 8003832:	f7fd f921 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD202, 0x00);
 8003836:	2100      	movs	r1, #0
 8003838:	f24d 2002 	movw	r0, #53762	; 0xd202
 800383c:	f7fd f91c 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD203, 0x34);
 8003840:	2134      	movs	r1, #52	; 0x34
 8003842:	f24d 2003 	movw	r0, #53763	; 0xd203
 8003846:	f7fd f917 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD204, 0x00);
 800384a:	2100      	movs	r1, #0
 800384c:	f24d 2004 	movw	r0, #53764	; 0xd204
 8003850:	f7fd f912 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD205, 0x3A);
 8003854:	213a      	movs	r1, #58	; 0x3a
 8003856:	f24d 2005 	movw	r0, #53765	; 0xd205
 800385a:	f7fd f90d 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD206, 0x00);
 800385e:	2100      	movs	r1, #0
 8003860:	f24d 2006 	movw	r0, #53766	; 0xd206
 8003864:	f7fd f908 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD207, 0x4A);
 8003868:	214a      	movs	r1, #74	; 0x4a
 800386a:	f24d 2007 	movw	r0, #53767	; 0xd207
 800386e:	f7fd f903 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD208, 0x00);
 8003872:	2100      	movs	r1, #0
 8003874:	f24d 2008 	movw	r0, #53768	; 0xd208
 8003878:	f7fd f8fe 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD209, 0x5C);
 800387c:	215c      	movs	r1, #92	; 0x5c
 800387e:	f24d 2009 	movw	r0, #53769	; 0xd209
 8003882:	f7fd f8f9 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD20A, 0x00);
 8003886:	2100      	movs	r1, #0
 8003888:	f24d 200a 	movw	r0, #53770	; 0xd20a
 800388c:	f7fd f8f4 	bl	8000a78 <LCD_WriteReg>

		LCD_WriteReg(0xD20B, 0x81);
 8003890:	2181      	movs	r1, #129	; 0x81
 8003892:	f24d 200b 	movw	r0, #53771	; 0xd20b
 8003896:	f7fd f8ef 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD20C, 0x00);
 800389a:	2100      	movs	r1, #0
 800389c:	f24d 200c 	movw	r0, #53772	; 0xd20c
 80038a0:	f7fd f8ea 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD20D, 0xA6);
 80038a4:	21a6      	movs	r1, #166	; 0xa6
 80038a6:	f24d 200d 	movw	r0, #53773	; 0xd20d
 80038aa:	f7fd f8e5 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD20E, 0x00);
 80038ae:	2100      	movs	r1, #0
 80038b0:	f24d 200e 	movw	r0, #53774	; 0xd20e
 80038b4:	f7fd f8e0 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD20F, 0xE5);
 80038b8:	21e5      	movs	r1, #229	; 0xe5
 80038ba:	f24d 200f 	movw	r0, #53775	; 0xd20f
 80038be:	f7fd f8db 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD210, 0x01);
 80038c2:	2101      	movs	r1, #1
 80038c4:	f24d 2010 	movw	r0, #53776	; 0xd210
 80038c8:	f7fd f8d6 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD211, 0x13);
 80038cc:	2113      	movs	r1, #19
 80038ce:	f24d 2011 	movw	r0, #53777	; 0xd211
 80038d2:	f7fd f8d1 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD212, 0x01);
 80038d6:	2101      	movs	r1, #1
 80038d8:	f24d 2012 	movw	r0, #53778	; 0xd212
 80038dc:	f7fd f8cc 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD213, 0x54);
 80038e0:	2154      	movs	r1, #84	; 0x54
 80038e2:	f24d 2013 	movw	r0, #53779	; 0xd213
 80038e6:	f7fd f8c7 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD214, 0x01);
 80038ea:	2101      	movs	r1, #1
 80038ec:	f24d 2014 	movw	r0, #53780	; 0xd214
 80038f0:	f7fd f8c2 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD215, 0x82);
 80038f4:	2182      	movs	r1, #130	; 0x82
 80038f6:	f24d 2015 	movw	r0, #53781	; 0xd215
 80038fa:	f7fd f8bd 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD216, 0x01);
 80038fe:	2101      	movs	r1, #1
 8003900:	f24d 2016 	movw	r0, #53782	; 0xd216
 8003904:	f7fd f8b8 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD217, 0xCA);
 8003908:	21ca      	movs	r1, #202	; 0xca
 800390a:	f24d 2017 	movw	r0, #53783	; 0xd217
 800390e:	f7fd f8b3 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD218, 0x02);
 8003912:	2102      	movs	r1, #2
 8003914:	f24d 2018 	movw	r0, #53784	; 0xd218
 8003918:	f7fd f8ae 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD219, 0x00);
 800391c:	2100      	movs	r1, #0
 800391e:	f24d 2019 	movw	r0, #53785	; 0xd219
 8003922:	f7fd f8a9 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD21A, 0x02);
 8003926:	2102      	movs	r1, #2
 8003928:	f24d 201a 	movw	r0, #53786	; 0xd21a
 800392c:	f7fd f8a4 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD21B, 0x01);
 8003930:	2101      	movs	r1, #1
 8003932:	f24d 201b 	movw	r0, #53787	; 0xd21b
 8003936:	f7fd f89f 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD21C, 0x02);
 800393a:	2102      	movs	r1, #2
 800393c:	f24d 201c 	movw	r0, #53788	; 0xd21c
 8003940:	f7fd f89a 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD21D, 0x34);
 8003944:	2134      	movs	r1, #52	; 0x34
 8003946:	f24d 201d 	movw	r0, #53789	; 0xd21d
 800394a:	f7fd f895 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD21E, 0x02);
 800394e:	2102      	movs	r1, #2
 8003950:	f24d 201e 	movw	r0, #53790	; 0xd21e
 8003954:	f7fd f890 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD21F, 0x67);
 8003958:	2167      	movs	r1, #103	; 0x67
 800395a:	f24d 201f 	movw	r0, #53791	; 0xd21f
 800395e:	f7fd f88b 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD220, 0x02);
 8003962:	2102      	movs	r1, #2
 8003964:	f24d 2020 	movw	r0, #53792	; 0xd220
 8003968:	f7fd f886 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD221, 0x84);
 800396c:	2184      	movs	r1, #132	; 0x84
 800396e:	f24d 2021 	movw	r0, #53793	; 0xd221
 8003972:	f7fd f881 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD222, 0x02);
 8003976:	2102      	movs	r1, #2
 8003978:	f24d 2022 	movw	r0, #53794	; 0xd222
 800397c:	f7fd f87c 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD223, 0xA4);
 8003980:	21a4      	movs	r1, #164	; 0xa4
 8003982:	f24d 2023 	movw	r0, #53795	; 0xd223
 8003986:	f7fd f877 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD224, 0x02);
 800398a:	2102      	movs	r1, #2
 800398c:	f24d 2024 	movw	r0, #53796	; 0xd224
 8003990:	f7fd f872 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD225, 0xB7);
 8003994:	21b7      	movs	r1, #183	; 0xb7
 8003996:	f24d 2025 	movw	r0, #53797	; 0xd225
 800399a:	f7fd f86d 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD226, 0x02);
 800399e:	2102      	movs	r1, #2
 80039a0:	f24d 2026 	movw	r0, #53798	; 0xd226
 80039a4:	f7fd f868 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD227, 0xCF);
 80039a8:	21cf      	movs	r1, #207	; 0xcf
 80039aa:	f24d 2027 	movw	r0, #53799	; 0xd227
 80039ae:	f7fd f863 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD228, 0x02);
 80039b2:	2102      	movs	r1, #2
 80039b4:	f24d 2028 	movw	r0, #53800	; 0xd228
 80039b8:	f7fd f85e 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD229, 0xDE);
 80039bc:	21de      	movs	r1, #222	; 0xde
 80039be:	f24d 2029 	movw	r0, #53801	; 0xd229
 80039c2:	f7fd f859 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD22A, 0x02);
 80039c6:	2102      	movs	r1, #2
 80039c8:	f24d 202a 	movw	r0, #53802	; 0xd22a
 80039cc:	f7fd f854 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD22B, 0xF2);
 80039d0:	21f2      	movs	r1, #242	; 0xf2
 80039d2:	f24d 202b 	movw	r0, #53803	; 0xd22b
 80039d6:	f7fd f84f 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD22C, 0x02);
 80039da:	2102      	movs	r1, #2
 80039dc:	f24d 202c 	movw	r0, #53804	; 0xd22c
 80039e0:	f7fd f84a 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD22D, 0xFE);
 80039e4:	21fe      	movs	r1, #254	; 0xfe
 80039e6:	f24d 202d 	movw	r0, #53805	; 0xd22d
 80039ea:	f7fd f845 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD22E, 0x03);
 80039ee:	2103      	movs	r1, #3
 80039f0:	f24d 202e 	movw	r0, #53806	; 0xd22e
 80039f4:	f7fd f840 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD22F, 0x10);
 80039f8:	2110      	movs	r1, #16
 80039fa:	f24d 202f 	movw	r0, #53807	; 0xd22f
 80039fe:	f7fd f83b 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD230, 0x03);
 8003a02:	2103      	movs	r1, #3
 8003a04:	f24d 2030 	movw	r0, #53808	; 0xd230
 8003a08:	f7fd f836 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD231, 0x33);
 8003a0c:	2133      	movs	r1, #51	; 0x33
 8003a0e:	f24d 2031 	movw	r0, #53809	; 0xd231
 8003a12:	f7fd f831 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD232, 0x03);
 8003a16:	2103      	movs	r1, #3
 8003a18:	f24d 2032 	movw	r0, #53810	; 0xd232
 8003a1c:	f7fd f82c 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD233, 0x6D);
 8003a20:	216d      	movs	r1, #109	; 0x6d
 8003a22:	f24d 2033 	movw	r0, #53811	; 0xd233
 8003a26:	f7fd f827 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD300, 0x00);
 8003a2a:	2100      	movs	r1, #0
 8003a2c:	f44f 4053 	mov.w	r0, #54016	; 0xd300
 8003a30:	f7fd f822 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD301, 0x33);
 8003a34:	2133      	movs	r1, #51	; 0x33
 8003a36:	f24d 3001 	movw	r0, #54017	; 0xd301
 8003a3a:	f7fd f81d 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD302, 0x00);
 8003a3e:	2100      	movs	r1, #0
 8003a40:	f24d 3002 	movw	r0, #54018	; 0xd302
 8003a44:	f7fd f818 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD303, 0x34);
 8003a48:	2134      	movs	r1, #52	; 0x34
 8003a4a:	f24d 3003 	movw	r0, #54019	; 0xd303
 8003a4e:	f7fd f813 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD304, 0x00);
 8003a52:	2100      	movs	r1, #0
 8003a54:	f24d 3004 	movw	r0, #54020	; 0xd304
 8003a58:	f7fd f80e 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD305, 0x3A);
 8003a5c:	213a      	movs	r1, #58	; 0x3a
 8003a5e:	f24d 3005 	movw	r0, #54021	; 0xd305
 8003a62:	f7fd f809 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD306, 0x00);
 8003a66:	2100      	movs	r1, #0
 8003a68:	f24d 3006 	movw	r0, #54022	; 0xd306
 8003a6c:	f7fd f804 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD307, 0x4A);
 8003a70:	214a      	movs	r1, #74	; 0x4a
 8003a72:	f24d 3007 	movw	r0, #54023	; 0xd307
 8003a76:	f7fc ffff 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD308, 0x00);
 8003a7a:	2100      	movs	r1, #0
 8003a7c:	f24d 3008 	movw	r0, #54024	; 0xd308
 8003a80:	f7fc fffa 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD309, 0x5C);
 8003a84:	215c      	movs	r1, #92	; 0x5c
 8003a86:	f24d 3009 	movw	r0, #54025	; 0xd309
 8003a8a:	f7fc fff5 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD30A, 0x00);
 8003a8e:	2100      	movs	r1, #0
 8003a90:	f24d 300a 	movw	r0, #54026	; 0xd30a
 8003a94:	f7fc fff0 	bl	8000a78 <LCD_WriteReg>

		LCD_WriteReg(0xD30B, 0x81);
 8003a98:	2181      	movs	r1, #129	; 0x81
 8003a9a:	f24d 300b 	movw	r0, #54027	; 0xd30b
 8003a9e:	f7fc ffeb 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD30C, 0x00);
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	f24d 300c 	movw	r0, #54028	; 0xd30c
 8003aa8:	f7fc ffe6 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD30D, 0xA6);
 8003aac:	21a6      	movs	r1, #166	; 0xa6
 8003aae:	f24d 300d 	movw	r0, #54029	; 0xd30d
 8003ab2:	f7fc ffe1 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD30E, 0x00);
 8003ab6:	2100      	movs	r1, #0
 8003ab8:	f24d 300e 	movw	r0, #54030	; 0xd30e
 8003abc:	f7fc ffdc 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD30F, 0xE5);
 8003ac0:	21e5      	movs	r1, #229	; 0xe5
 8003ac2:	f24d 300f 	movw	r0, #54031	; 0xd30f
 8003ac6:	f7fc ffd7 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD310, 0x01);
 8003aca:	2101      	movs	r1, #1
 8003acc:	f24d 3010 	movw	r0, #54032	; 0xd310
 8003ad0:	f7fc ffd2 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD311, 0x13);
 8003ad4:	2113      	movs	r1, #19
 8003ad6:	f24d 3011 	movw	r0, #54033	; 0xd311
 8003ada:	f7fc ffcd 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD312, 0x01);
 8003ade:	2101      	movs	r1, #1
 8003ae0:	f24d 3012 	movw	r0, #54034	; 0xd312
 8003ae4:	f7fc ffc8 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD313, 0x54);
 8003ae8:	2154      	movs	r1, #84	; 0x54
 8003aea:	f24d 3013 	movw	r0, #54035	; 0xd313
 8003aee:	f7fc ffc3 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD314, 0x01);
 8003af2:	2101      	movs	r1, #1
 8003af4:	f24d 3014 	movw	r0, #54036	; 0xd314
 8003af8:	f7fc ffbe 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD315, 0x82);
 8003afc:	2182      	movs	r1, #130	; 0x82
 8003afe:	f24d 3015 	movw	r0, #54037	; 0xd315
 8003b02:	f7fc ffb9 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD316, 0x01);
 8003b06:	2101      	movs	r1, #1
 8003b08:	f24d 3016 	movw	r0, #54038	; 0xd316
 8003b0c:	f7fc ffb4 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD317, 0xCA);
 8003b10:	21ca      	movs	r1, #202	; 0xca
 8003b12:	f24d 3017 	movw	r0, #54039	; 0xd317
 8003b16:	f7fc ffaf 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD318, 0x02);
 8003b1a:	2102      	movs	r1, #2
 8003b1c:	f24d 3018 	movw	r0, #54040	; 0xd318
 8003b20:	f7fc ffaa 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD319, 0x00);
 8003b24:	2100      	movs	r1, #0
 8003b26:	f24d 3019 	movw	r0, #54041	; 0xd319
 8003b2a:	f7fc ffa5 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD31A, 0x02);
 8003b2e:	2102      	movs	r1, #2
 8003b30:	f24d 301a 	movw	r0, #54042	; 0xd31a
 8003b34:	f7fc ffa0 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD31B, 0x01);
 8003b38:	2101      	movs	r1, #1
 8003b3a:	f24d 301b 	movw	r0, #54043	; 0xd31b
 8003b3e:	f7fc ff9b 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD31C, 0x02);
 8003b42:	2102      	movs	r1, #2
 8003b44:	f24d 301c 	movw	r0, #54044	; 0xd31c
 8003b48:	f7fc ff96 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD31D, 0x34);
 8003b4c:	2134      	movs	r1, #52	; 0x34
 8003b4e:	f24d 301d 	movw	r0, #54045	; 0xd31d
 8003b52:	f7fc ff91 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD31E, 0x02);
 8003b56:	2102      	movs	r1, #2
 8003b58:	f24d 301e 	movw	r0, #54046	; 0xd31e
 8003b5c:	f7fc ff8c 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD31F, 0x67);
 8003b60:	2167      	movs	r1, #103	; 0x67
 8003b62:	f24d 301f 	movw	r0, #54047	; 0xd31f
 8003b66:	f7fc ff87 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD320, 0x02);
 8003b6a:	2102      	movs	r1, #2
 8003b6c:	f24d 3020 	movw	r0, #54048	; 0xd320
 8003b70:	f7fc ff82 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD321, 0x84);
 8003b74:	2184      	movs	r1, #132	; 0x84
 8003b76:	f24d 3021 	movw	r0, #54049	; 0xd321
 8003b7a:	f7fc ff7d 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD322, 0x02);
 8003b7e:	2102      	movs	r1, #2
 8003b80:	f24d 3022 	movw	r0, #54050	; 0xd322
 8003b84:	f7fc ff78 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD323, 0xA4);
 8003b88:	21a4      	movs	r1, #164	; 0xa4
 8003b8a:	f24d 3023 	movw	r0, #54051	; 0xd323
 8003b8e:	f7fc ff73 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD324, 0x02);
 8003b92:	2102      	movs	r1, #2
 8003b94:	f24d 3024 	movw	r0, #54052	; 0xd324
 8003b98:	f7fc ff6e 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD325, 0xB7);
 8003b9c:	21b7      	movs	r1, #183	; 0xb7
 8003b9e:	f24d 3025 	movw	r0, #54053	; 0xd325
 8003ba2:	f7fc ff69 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD326, 0x02);
 8003ba6:	2102      	movs	r1, #2
 8003ba8:	f24d 3026 	movw	r0, #54054	; 0xd326
 8003bac:	f7fc ff64 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD327, 0xCF);
 8003bb0:	21cf      	movs	r1, #207	; 0xcf
 8003bb2:	f24d 3027 	movw	r0, #54055	; 0xd327
 8003bb6:	f7fc ff5f 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD328, 0x02);
 8003bba:	2102      	movs	r1, #2
 8003bbc:	f24d 3028 	movw	r0, #54056	; 0xd328
 8003bc0:	f7fc ff5a 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD329, 0xDE);
 8003bc4:	21de      	movs	r1, #222	; 0xde
 8003bc6:	f24d 3029 	movw	r0, #54057	; 0xd329
 8003bca:	f7fc ff55 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD32A, 0x02);
 8003bce:	2102      	movs	r1, #2
 8003bd0:	f24d 302a 	movw	r0, #54058	; 0xd32a
 8003bd4:	f7fc ff50 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD32B, 0xF2);
 8003bd8:	21f2      	movs	r1, #242	; 0xf2
 8003bda:	f24d 302b 	movw	r0, #54059	; 0xd32b
 8003bde:	f7fc ff4b 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD32C, 0x02);
 8003be2:	2102      	movs	r1, #2
 8003be4:	f24d 302c 	movw	r0, #54060	; 0xd32c
 8003be8:	f7fc ff46 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD32D, 0xFE);
 8003bec:	21fe      	movs	r1, #254	; 0xfe
 8003bee:	f24d 302d 	movw	r0, #54061	; 0xd32d
 8003bf2:	f7fc ff41 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD32E, 0x03);
 8003bf6:	2103      	movs	r1, #3
 8003bf8:	f24d 302e 	movw	r0, #54062	; 0xd32e
 8003bfc:	f7fc ff3c 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD32F, 0x10);
 8003c00:	2110      	movs	r1, #16
 8003c02:	f24d 302f 	movw	r0, #54063	; 0xd32f
 8003c06:	f7fc ff37 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD330, 0x03);
 8003c0a:	2103      	movs	r1, #3
 8003c0c:	f24d 3030 	movw	r0, #54064	; 0xd330
 8003c10:	f7fc ff32 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD331, 0x33);
 8003c14:	2133      	movs	r1, #51	; 0x33
 8003c16:	f24d 3031 	movw	r0, #54065	; 0xd331
 8003c1a:	f7fc ff2d 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD332, 0x03);
 8003c1e:	2103      	movs	r1, #3
 8003c20:	f24d 3032 	movw	r0, #54066	; 0xd332
 8003c24:	f7fc ff28 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD333, 0x6D);
 8003c28:	216d      	movs	r1, #109	; 0x6d
 8003c2a:	f24d 3033 	movw	r0, #54067	; 0xd333
 8003c2e:	f7fc ff23 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD400, 0x00);
 8003c32:	2100      	movs	r1, #0
 8003c34:	f44f 4054 	mov.w	r0, #54272	; 0xd400
 8003c38:	f7fc ff1e 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD401, 0x33);
 8003c3c:	2133      	movs	r1, #51	; 0x33
 8003c3e:	f24d 4001 	movw	r0, #54273	; 0xd401
 8003c42:	f7fc ff19 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD402, 0x00);
 8003c46:	2100      	movs	r1, #0
 8003c48:	f24d 4002 	movw	r0, #54274	; 0xd402
 8003c4c:	f7fc ff14 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD403, 0x34);
 8003c50:	2134      	movs	r1, #52	; 0x34
 8003c52:	f24d 4003 	movw	r0, #54275	; 0xd403
 8003c56:	f7fc ff0f 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD404, 0x00);
 8003c5a:	2100      	movs	r1, #0
 8003c5c:	f24d 4004 	movw	r0, #54276	; 0xd404
 8003c60:	f7fc ff0a 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD405, 0x3A);
 8003c64:	213a      	movs	r1, #58	; 0x3a
 8003c66:	f24d 4005 	movw	r0, #54277	; 0xd405
 8003c6a:	f7fc ff05 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD406, 0x00);
 8003c6e:	2100      	movs	r1, #0
 8003c70:	f24d 4006 	movw	r0, #54278	; 0xd406
 8003c74:	f7fc ff00 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD407, 0x4A);
 8003c78:	214a      	movs	r1, #74	; 0x4a
 8003c7a:	f24d 4007 	movw	r0, #54279	; 0xd407
 8003c7e:	f7fc fefb 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD408, 0x00);
 8003c82:	2100      	movs	r1, #0
 8003c84:	f24d 4008 	movw	r0, #54280	; 0xd408
 8003c88:	f7fc fef6 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD409, 0x5C);
 8003c8c:	215c      	movs	r1, #92	; 0x5c
 8003c8e:	f24d 4009 	movw	r0, #54281	; 0xd409
 8003c92:	f7fc fef1 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD40A, 0x00);
 8003c96:	2100      	movs	r1, #0
 8003c98:	f24d 400a 	movw	r0, #54282	; 0xd40a
 8003c9c:	f7fc feec 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD40B, 0x81);
 8003ca0:	2181      	movs	r1, #129	; 0x81
 8003ca2:	f24d 400b 	movw	r0, #54283	; 0xd40b
 8003ca6:	f7fc fee7 	bl	8000a78 <LCD_WriteReg>

		LCD_WriteReg(0xD40C, 0x00);
 8003caa:	2100      	movs	r1, #0
 8003cac:	f24d 400c 	movw	r0, #54284	; 0xd40c
 8003cb0:	f7fc fee2 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD40D, 0xA6);
 8003cb4:	21a6      	movs	r1, #166	; 0xa6
 8003cb6:	f24d 400d 	movw	r0, #54285	; 0xd40d
 8003cba:	f7fc fedd 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD40E, 0x00);
 8003cbe:	2100      	movs	r1, #0
 8003cc0:	f24d 400e 	movw	r0, #54286	; 0xd40e
 8003cc4:	f7fc fed8 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD40F, 0xE5);
 8003cc8:	21e5      	movs	r1, #229	; 0xe5
 8003cca:	f24d 400f 	movw	r0, #54287	; 0xd40f
 8003cce:	f7fc fed3 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD410, 0x01);
 8003cd2:	2101      	movs	r1, #1
 8003cd4:	f24d 4010 	movw	r0, #54288	; 0xd410
 8003cd8:	f7fc fece 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD411, 0x13);
 8003cdc:	2113      	movs	r1, #19
 8003cde:	f24d 4011 	movw	r0, #54289	; 0xd411
 8003ce2:	f7fc fec9 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD412, 0x01);
 8003ce6:	2101      	movs	r1, #1
 8003ce8:	f24d 4012 	movw	r0, #54290	; 0xd412
 8003cec:	f7fc fec4 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD413, 0x54);
 8003cf0:	2154      	movs	r1, #84	; 0x54
 8003cf2:	f24d 4013 	movw	r0, #54291	; 0xd413
 8003cf6:	f7fc febf 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD414, 0x01);
 8003cfa:	2101      	movs	r1, #1
 8003cfc:	f24d 4014 	movw	r0, #54292	; 0xd414
 8003d00:	f7fc feba 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD415, 0x82);
 8003d04:	2182      	movs	r1, #130	; 0x82
 8003d06:	f24d 4015 	movw	r0, #54293	; 0xd415
 8003d0a:	f7fc feb5 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD416, 0x01);
 8003d0e:	2101      	movs	r1, #1
 8003d10:	f24d 4016 	movw	r0, #54294	; 0xd416
 8003d14:	f7fc feb0 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD417, 0xCA);
 8003d18:	21ca      	movs	r1, #202	; 0xca
 8003d1a:	f24d 4017 	movw	r0, #54295	; 0xd417
 8003d1e:	f7fc feab 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD418, 0x02);
 8003d22:	2102      	movs	r1, #2
 8003d24:	f24d 4018 	movw	r0, #54296	; 0xd418
 8003d28:	f7fc fea6 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD419, 0x00);
 8003d2c:	2100      	movs	r1, #0
 8003d2e:	f24d 4019 	movw	r0, #54297	; 0xd419
 8003d32:	f7fc fea1 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD41A, 0x02);
 8003d36:	2102      	movs	r1, #2
 8003d38:	f24d 401a 	movw	r0, #54298	; 0xd41a
 8003d3c:	f7fc fe9c 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD41B, 0x01);
 8003d40:	2101      	movs	r1, #1
 8003d42:	f24d 401b 	movw	r0, #54299	; 0xd41b
 8003d46:	f7fc fe97 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD41C, 0x02);
 8003d4a:	2102      	movs	r1, #2
 8003d4c:	f24d 401c 	movw	r0, #54300	; 0xd41c
 8003d50:	f7fc fe92 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD41D, 0x34);
 8003d54:	2134      	movs	r1, #52	; 0x34
 8003d56:	f24d 401d 	movw	r0, #54301	; 0xd41d
 8003d5a:	f7fc fe8d 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD41E, 0x02);
 8003d5e:	2102      	movs	r1, #2
 8003d60:	f24d 401e 	movw	r0, #54302	; 0xd41e
 8003d64:	f7fc fe88 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD41F, 0x67);
 8003d68:	2167      	movs	r1, #103	; 0x67
 8003d6a:	f24d 401f 	movw	r0, #54303	; 0xd41f
 8003d6e:	f7fc fe83 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD420, 0x02);
 8003d72:	2102      	movs	r1, #2
 8003d74:	f24d 4020 	movw	r0, #54304	; 0xd420
 8003d78:	f7fc fe7e 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD421, 0x84);
 8003d7c:	2184      	movs	r1, #132	; 0x84
 8003d7e:	f24d 4021 	movw	r0, #54305	; 0xd421
 8003d82:	f7fc fe79 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD422, 0x02);
 8003d86:	2102      	movs	r1, #2
 8003d88:	f24d 4022 	movw	r0, #54306	; 0xd422
 8003d8c:	f7fc fe74 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD423, 0xA4);
 8003d90:	21a4      	movs	r1, #164	; 0xa4
 8003d92:	f24d 4023 	movw	r0, #54307	; 0xd423
 8003d96:	f7fc fe6f 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD424, 0x02);
 8003d9a:	2102      	movs	r1, #2
 8003d9c:	f24d 4024 	movw	r0, #54308	; 0xd424
 8003da0:	f7fc fe6a 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD425, 0xB7);
 8003da4:	21b7      	movs	r1, #183	; 0xb7
 8003da6:	f24d 4025 	movw	r0, #54309	; 0xd425
 8003daa:	f7fc fe65 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD426, 0x02);
 8003dae:	2102      	movs	r1, #2
 8003db0:	f24d 4026 	movw	r0, #54310	; 0xd426
 8003db4:	f7fc fe60 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD427, 0xCF);
 8003db8:	21cf      	movs	r1, #207	; 0xcf
 8003dba:	f24d 4027 	movw	r0, #54311	; 0xd427
 8003dbe:	f7fc fe5b 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD428, 0x02);
 8003dc2:	2102      	movs	r1, #2
 8003dc4:	f24d 4028 	movw	r0, #54312	; 0xd428
 8003dc8:	f7fc fe56 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD429, 0xDE);
 8003dcc:	21de      	movs	r1, #222	; 0xde
 8003dce:	f24d 4029 	movw	r0, #54313	; 0xd429
 8003dd2:	f7fc fe51 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD42A, 0x02);
 8003dd6:	2102      	movs	r1, #2
 8003dd8:	f24d 402a 	movw	r0, #54314	; 0xd42a
 8003ddc:	f7fc fe4c 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD42B, 0xF2);
 8003de0:	21f2      	movs	r1, #242	; 0xf2
 8003de2:	f24d 402b 	movw	r0, #54315	; 0xd42b
 8003de6:	f7fc fe47 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD42C, 0x02);
 8003dea:	2102      	movs	r1, #2
 8003dec:	f24d 402c 	movw	r0, #54316	; 0xd42c
 8003df0:	f7fc fe42 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD42D, 0xFE);
 8003df4:	21fe      	movs	r1, #254	; 0xfe
 8003df6:	f24d 402d 	movw	r0, #54317	; 0xd42d
 8003dfa:	f7fc fe3d 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD42E, 0x03);
 8003dfe:	2103      	movs	r1, #3
 8003e00:	f24d 402e 	movw	r0, #54318	; 0xd42e
 8003e04:	f7fc fe38 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD42F, 0x10);
 8003e08:	2110      	movs	r1, #16
 8003e0a:	f24d 402f 	movw	r0, #54319	; 0xd42f
 8003e0e:	f7fc fe33 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD430, 0x03);
 8003e12:	2103      	movs	r1, #3
 8003e14:	f24d 4030 	movw	r0, #54320	; 0xd430
 8003e18:	f7fc fe2e 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD431, 0x33);
 8003e1c:	2133      	movs	r1, #51	; 0x33
 8003e1e:	f24d 4031 	movw	r0, #54321	; 0xd431
 8003e22:	f7fc fe29 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD432, 0x03);
 8003e26:	2103      	movs	r1, #3
 8003e28:	f24d 4032 	movw	r0, #54322	; 0xd432
 8003e2c:	f7fc fe24 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD433, 0x6D);
 8003e30:	216d      	movs	r1, #109	; 0x6d
 8003e32:	f24d 4033 	movw	r0, #54323	; 0xd433
 8003e36:	f7fc fe1f 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD500, 0x00);
 8003e3a:	2100      	movs	r1, #0
 8003e3c:	f44f 4055 	mov.w	r0, #54528	; 0xd500
 8003e40:	f7fc fe1a 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD501, 0x33);
 8003e44:	2133      	movs	r1, #51	; 0x33
 8003e46:	f24d 5001 	movw	r0, #54529	; 0xd501
 8003e4a:	f7fc fe15 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD502, 0x00);
 8003e4e:	2100      	movs	r1, #0
 8003e50:	f24d 5002 	movw	r0, #54530	; 0xd502
 8003e54:	f7fc fe10 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD503, 0x34);
 8003e58:	2134      	movs	r1, #52	; 0x34
 8003e5a:	f24d 5003 	movw	r0, #54531	; 0xd503
 8003e5e:	f7fc fe0b 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD504, 0x00);
 8003e62:	2100      	movs	r1, #0
 8003e64:	f24d 5004 	movw	r0, #54532	; 0xd504
 8003e68:	f7fc fe06 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD505, 0x3A);
 8003e6c:	213a      	movs	r1, #58	; 0x3a
 8003e6e:	f24d 5005 	movw	r0, #54533	; 0xd505
 8003e72:	f7fc fe01 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD506, 0x00);
 8003e76:	2100      	movs	r1, #0
 8003e78:	f24d 5006 	movw	r0, #54534	; 0xd506
 8003e7c:	f7fc fdfc 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD507, 0x4A);
 8003e80:	214a      	movs	r1, #74	; 0x4a
 8003e82:	f24d 5007 	movw	r0, #54535	; 0xd507
 8003e86:	f7fc fdf7 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD508, 0x00);
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	f24d 5008 	movw	r0, #54536	; 0xd508
 8003e90:	f7fc fdf2 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD509, 0x5C);
 8003e94:	215c      	movs	r1, #92	; 0x5c
 8003e96:	f24d 5009 	movw	r0, #54537	; 0xd509
 8003e9a:	f7fc fded 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD50A, 0x00);
 8003e9e:	2100      	movs	r1, #0
 8003ea0:	f24d 500a 	movw	r0, #54538	; 0xd50a
 8003ea4:	f7fc fde8 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD50B, 0x81);
 8003ea8:	2181      	movs	r1, #129	; 0x81
 8003eaa:	f24d 500b 	movw	r0, #54539	; 0xd50b
 8003eae:	f7fc fde3 	bl	8000a78 <LCD_WriteReg>

		LCD_WriteReg(0xD50C, 0x00);
 8003eb2:	2100      	movs	r1, #0
 8003eb4:	f24d 500c 	movw	r0, #54540	; 0xd50c
 8003eb8:	f7fc fdde 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD50D, 0xA6);
 8003ebc:	21a6      	movs	r1, #166	; 0xa6
 8003ebe:	f24d 500d 	movw	r0, #54541	; 0xd50d
 8003ec2:	f7fc fdd9 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD50E, 0x00);
 8003ec6:	2100      	movs	r1, #0
 8003ec8:	f24d 500e 	movw	r0, #54542	; 0xd50e
 8003ecc:	f7fc fdd4 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD50F, 0xE5);
 8003ed0:	21e5      	movs	r1, #229	; 0xe5
 8003ed2:	f24d 500f 	movw	r0, #54543	; 0xd50f
 8003ed6:	f7fc fdcf 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD510, 0x01);
 8003eda:	2101      	movs	r1, #1
 8003edc:	f24d 5010 	movw	r0, #54544	; 0xd510
 8003ee0:	f7fc fdca 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD511, 0x13);
 8003ee4:	2113      	movs	r1, #19
 8003ee6:	f24d 5011 	movw	r0, #54545	; 0xd511
 8003eea:	f7fc fdc5 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD512, 0x01);
 8003eee:	2101      	movs	r1, #1
 8003ef0:	f24d 5012 	movw	r0, #54546	; 0xd512
 8003ef4:	f7fc fdc0 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD513, 0x54);
 8003ef8:	2154      	movs	r1, #84	; 0x54
 8003efa:	f24d 5013 	movw	r0, #54547	; 0xd513
 8003efe:	f7fc fdbb 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD514, 0x01);
 8003f02:	2101      	movs	r1, #1
 8003f04:	f24d 5014 	movw	r0, #54548	; 0xd514
 8003f08:	f7fc fdb6 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD515, 0x82);
 8003f0c:	2182      	movs	r1, #130	; 0x82
 8003f0e:	f24d 5015 	movw	r0, #54549	; 0xd515
 8003f12:	f7fc fdb1 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD516, 0x01);
 8003f16:	2101      	movs	r1, #1
 8003f18:	f24d 5016 	movw	r0, #54550	; 0xd516
 8003f1c:	f7fc fdac 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD517, 0xCA);
 8003f20:	21ca      	movs	r1, #202	; 0xca
 8003f22:	f24d 5017 	movw	r0, #54551	; 0xd517
 8003f26:	f7fc fda7 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD518, 0x02);
 8003f2a:	2102      	movs	r1, #2
 8003f2c:	f24d 5018 	movw	r0, #54552	; 0xd518
 8003f30:	f7fc fda2 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD519, 0x00);
 8003f34:	2100      	movs	r1, #0
 8003f36:	f24d 5019 	movw	r0, #54553	; 0xd519
 8003f3a:	f7fc fd9d 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD51A, 0x02);
 8003f3e:	2102      	movs	r1, #2
 8003f40:	f24d 501a 	movw	r0, #54554	; 0xd51a
 8003f44:	f7fc fd98 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD51B, 0x01);
 8003f48:	2101      	movs	r1, #1
 8003f4a:	f24d 501b 	movw	r0, #54555	; 0xd51b
 8003f4e:	f7fc fd93 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD51C, 0x02);
 8003f52:	2102      	movs	r1, #2
 8003f54:	f24d 501c 	movw	r0, #54556	; 0xd51c
 8003f58:	f7fc fd8e 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD51D, 0x34);
 8003f5c:	2134      	movs	r1, #52	; 0x34
 8003f5e:	f24d 501d 	movw	r0, #54557	; 0xd51d
 8003f62:	f7fc fd89 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD51E, 0x02);
 8003f66:	2102      	movs	r1, #2
 8003f68:	f24d 501e 	movw	r0, #54558	; 0xd51e
 8003f6c:	f7fc fd84 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD51F, 0x67);
 8003f70:	2167      	movs	r1, #103	; 0x67
 8003f72:	f24d 501f 	movw	r0, #54559	; 0xd51f
 8003f76:	f7fc fd7f 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD520, 0x02);
 8003f7a:	2102      	movs	r1, #2
 8003f7c:	f24d 5020 	movw	r0, #54560	; 0xd520
 8003f80:	f7fc fd7a 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD521, 0x84);
 8003f84:	2184      	movs	r1, #132	; 0x84
 8003f86:	f24d 5021 	movw	r0, #54561	; 0xd521
 8003f8a:	f7fc fd75 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD522, 0x02);
 8003f8e:	2102      	movs	r1, #2
 8003f90:	f24d 5022 	movw	r0, #54562	; 0xd522
 8003f94:	f7fc fd70 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD523, 0xA4);
 8003f98:	21a4      	movs	r1, #164	; 0xa4
 8003f9a:	f24d 5023 	movw	r0, #54563	; 0xd523
 8003f9e:	f7fc fd6b 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD524, 0x02);
 8003fa2:	2102      	movs	r1, #2
 8003fa4:	f24d 5024 	movw	r0, #54564	; 0xd524
 8003fa8:	f7fc fd66 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD525, 0xB7);
 8003fac:	21b7      	movs	r1, #183	; 0xb7
 8003fae:	f24d 5025 	movw	r0, #54565	; 0xd525
 8003fb2:	f7fc fd61 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD526, 0x02);
 8003fb6:	2102      	movs	r1, #2
 8003fb8:	f24d 5026 	movw	r0, #54566	; 0xd526
 8003fbc:	f7fc fd5c 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD527, 0xCF);
 8003fc0:	21cf      	movs	r1, #207	; 0xcf
 8003fc2:	f24d 5027 	movw	r0, #54567	; 0xd527
 8003fc6:	f7fc fd57 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD528, 0x02);
 8003fca:	2102      	movs	r1, #2
 8003fcc:	f24d 5028 	movw	r0, #54568	; 0xd528
 8003fd0:	f7fc fd52 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD529, 0xDE);
 8003fd4:	21de      	movs	r1, #222	; 0xde
 8003fd6:	f24d 5029 	movw	r0, #54569	; 0xd529
 8003fda:	f7fc fd4d 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD52A, 0x02);
 8003fde:	2102      	movs	r1, #2
 8003fe0:	f24d 502a 	movw	r0, #54570	; 0xd52a
 8003fe4:	f7fc fd48 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD52B, 0xF2);
 8003fe8:	21f2      	movs	r1, #242	; 0xf2
 8003fea:	f24d 502b 	movw	r0, #54571	; 0xd52b
 8003fee:	f7fc fd43 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD52C, 0x02);
 8003ff2:	2102      	movs	r1, #2
 8003ff4:	f24d 502c 	movw	r0, #54572	; 0xd52c
 8003ff8:	f7fc fd3e 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD52D, 0xFE);
 8003ffc:	21fe      	movs	r1, #254	; 0xfe
 8003ffe:	f24d 502d 	movw	r0, #54573	; 0xd52d
 8004002:	f7fc fd39 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD52E, 0x03);
 8004006:	2103      	movs	r1, #3
 8004008:	f24d 502e 	movw	r0, #54574	; 0xd52e
 800400c:	f7fc fd34 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD52F, 0x10);
 8004010:	2110      	movs	r1, #16
 8004012:	f24d 502f 	movw	r0, #54575	; 0xd52f
 8004016:	f7fc fd2f 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD530, 0x03);
 800401a:	2103      	movs	r1, #3
 800401c:	f24d 5030 	movw	r0, #54576	; 0xd530
 8004020:	f7fc fd2a 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD531, 0x33);
 8004024:	2133      	movs	r1, #51	; 0x33
 8004026:	f24d 5031 	movw	r0, #54577	; 0xd531
 800402a:	f7fc fd25 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD532, 0x03);
 800402e:	2103      	movs	r1, #3
 8004030:	f24d 5032 	movw	r0, #54578	; 0xd532
 8004034:	f7fc fd20 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD533, 0x6D);
 8004038:	216d      	movs	r1, #109	; 0x6d
 800403a:	f24d 5033 	movw	r0, #54579	; 0xd533
 800403e:	f7fc fd1b 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD600, 0x00);
 8004042:	2100      	movs	r1, #0
 8004044:	f44f 4056 	mov.w	r0, #54784	; 0xd600
 8004048:	f7fc fd16 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD601, 0x33);
 800404c:	2133      	movs	r1, #51	; 0x33
 800404e:	f24d 6001 	movw	r0, #54785	; 0xd601
 8004052:	f7fc fd11 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD602, 0x00);
 8004056:	2100      	movs	r1, #0
 8004058:	f24d 6002 	movw	r0, #54786	; 0xd602
 800405c:	f7fc fd0c 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD603, 0x34);
 8004060:	2134      	movs	r1, #52	; 0x34
 8004062:	f24d 6003 	movw	r0, #54787	; 0xd603
 8004066:	f7fc fd07 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD604, 0x00);
 800406a:	2100      	movs	r1, #0
 800406c:	f24d 6004 	movw	r0, #54788	; 0xd604
 8004070:	f7fc fd02 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD605, 0x3A);
 8004074:	213a      	movs	r1, #58	; 0x3a
 8004076:	f24d 6005 	movw	r0, #54789	; 0xd605
 800407a:	f7fc fcfd 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD606, 0x00);
 800407e:	2100      	movs	r1, #0
 8004080:	f24d 6006 	movw	r0, #54790	; 0xd606
 8004084:	f7fc fcf8 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD607, 0x4A);
 8004088:	214a      	movs	r1, #74	; 0x4a
 800408a:	f24d 6007 	movw	r0, #54791	; 0xd607
 800408e:	f7fc fcf3 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD608, 0x00);
 8004092:	2100      	movs	r1, #0
 8004094:	f24d 6008 	movw	r0, #54792	; 0xd608
 8004098:	f7fc fcee 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD609, 0x5C);
 800409c:	215c      	movs	r1, #92	; 0x5c
 800409e:	f24d 6009 	movw	r0, #54793	; 0xd609
 80040a2:	f7fc fce9 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD60A, 0x00);
 80040a6:	2100      	movs	r1, #0
 80040a8:	f24d 600a 	movw	r0, #54794	; 0xd60a
 80040ac:	f7fc fce4 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD60B, 0x81);
 80040b0:	2181      	movs	r1, #129	; 0x81
 80040b2:	f24d 600b 	movw	r0, #54795	; 0xd60b
 80040b6:	f7fc fcdf 	bl	8000a78 <LCD_WriteReg>

		LCD_WriteReg(0xD60C, 0x00);
 80040ba:	2100      	movs	r1, #0
 80040bc:	f24d 600c 	movw	r0, #54796	; 0xd60c
 80040c0:	f7fc fcda 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD60D, 0xA6);
 80040c4:	21a6      	movs	r1, #166	; 0xa6
 80040c6:	f24d 600d 	movw	r0, #54797	; 0xd60d
 80040ca:	f7fc fcd5 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD60E, 0x00);
 80040ce:	2100      	movs	r1, #0
 80040d0:	f24d 600e 	movw	r0, #54798	; 0xd60e
 80040d4:	f7fc fcd0 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD60F, 0xE5);
 80040d8:	21e5      	movs	r1, #229	; 0xe5
 80040da:	f24d 600f 	movw	r0, #54799	; 0xd60f
 80040de:	f7fc fccb 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD610, 0x01);
 80040e2:	2101      	movs	r1, #1
 80040e4:	f24d 6010 	movw	r0, #54800	; 0xd610
 80040e8:	f7fc fcc6 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD611, 0x13);
 80040ec:	2113      	movs	r1, #19
 80040ee:	f24d 6011 	movw	r0, #54801	; 0xd611
 80040f2:	f7fc fcc1 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD612, 0x01);
 80040f6:	2101      	movs	r1, #1
 80040f8:	f24d 6012 	movw	r0, #54802	; 0xd612
 80040fc:	f7fc fcbc 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD613, 0x54);
 8004100:	2154      	movs	r1, #84	; 0x54
 8004102:	f24d 6013 	movw	r0, #54803	; 0xd613
 8004106:	f7fc fcb7 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD614, 0x01);
 800410a:	2101      	movs	r1, #1
 800410c:	f24d 6014 	movw	r0, #54804	; 0xd614
 8004110:	f7fc fcb2 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD615, 0x82);
 8004114:	2182      	movs	r1, #130	; 0x82
 8004116:	f24d 6015 	movw	r0, #54805	; 0xd615
 800411a:	f7fc fcad 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD616, 0x01);
 800411e:	2101      	movs	r1, #1
 8004120:	f24d 6016 	movw	r0, #54806	; 0xd616
 8004124:	f7fc fca8 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD617, 0xCA);
 8004128:	21ca      	movs	r1, #202	; 0xca
 800412a:	f24d 6017 	movw	r0, #54807	; 0xd617
 800412e:	f7fc fca3 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD618, 0x02);
 8004132:	2102      	movs	r1, #2
 8004134:	f24d 6018 	movw	r0, #54808	; 0xd618
 8004138:	f7fc fc9e 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD619, 0x00);
 800413c:	2100      	movs	r1, #0
 800413e:	f24d 6019 	movw	r0, #54809	; 0xd619
 8004142:	f7fc fc99 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD61A, 0x02);
 8004146:	2102      	movs	r1, #2
 8004148:	f24d 601a 	movw	r0, #54810	; 0xd61a
 800414c:	f7fc fc94 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD61B, 0x01);
 8004150:	2101      	movs	r1, #1
 8004152:	f24d 601b 	movw	r0, #54811	; 0xd61b
 8004156:	f7fc fc8f 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD61C, 0x02);
 800415a:	2102      	movs	r1, #2
 800415c:	f24d 601c 	movw	r0, #54812	; 0xd61c
 8004160:	f7fc fc8a 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD61D, 0x34);
 8004164:	2134      	movs	r1, #52	; 0x34
 8004166:	f24d 601d 	movw	r0, #54813	; 0xd61d
 800416a:	f7fc fc85 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD61E, 0x02);
 800416e:	2102      	movs	r1, #2
 8004170:	f24d 601e 	movw	r0, #54814	; 0xd61e
 8004174:	f7fc fc80 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD61F, 0x67);
 8004178:	2167      	movs	r1, #103	; 0x67
 800417a:	f24d 601f 	movw	r0, #54815	; 0xd61f
 800417e:	f7fc fc7b 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD620, 0x02);
 8004182:	2102      	movs	r1, #2
 8004184:	f24d 6020 	movw	r0, #54816	; 0xd620
 8004188:	f7fc fc76 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD621, 0x84);
 800418c:	2184      	movs	r1, #132	; 0x84
 800418e:	f24d 6021 	movw	r0, #54817	; 0xd621
 8004192:	f7fc fc71 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD622, 0x02);
 8004196:	2102      	movs	r1, #2
 8004198:	f24d 6022 	movw	r0, #54818	; 0xd622
 800419c:	f7fc fc6c 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD623, 0xA4);
 80041a0:	21a4      	movs	r1, #164	; 0xa4
 80041a2:	f24d 6023 	movw	r0, #54819	; 0xd623
 80041a6:	f7fc fc67 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD624, 0x02);
 80041aa:	2102      	movs	r1, #2
 80041ac:	f24d 6024 	movw	r0, #54820	; 0xd624
 80041b0:	f7fc fc62 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD625, 0xB7);
 80041b4:	21b7      	movs	r1, #183	; 0xb7
 80041b6:	f24d 6025 	movw	r0, #54821	; 0xd625
 80041ba:	f7fc fc5d 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD626, 0x02);
 80041be:	2102      	movs	r1, #2
 80041c0:	f24d 6026 	movw	r0, #54822	; 0xd626
 80041c4:	f7fc fc58 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD627, 0xCF);
 80041c8:	21cf      	movs	r1, #207	; 0xcf
 80041ca:	f24d 6027 	movw	r0, #54823	; 0xd627
 80041ce:	f7fc fc53 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD628, 0x02);
 80041d2:	2102      	movs	r1, #2
 80041d4:	f24d 6028 	movw	r0, #54824	; 0xd628
 80041d8:	f7fc fc4e 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD629, 0xDE);
 80041dc:	21de      	movs	r1, #222	; 0xde
 80041de:	f24d 6029 	movw	r0, #54825	; 0xd629
 80041e2:	f7fc fc49 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD62A, 0x02);
 80041e6:	2102      	movs	r1, #2
 80041e8:	f24d 602a 	movw	r0, #54826	; 0xd62a
 80041ec:	f7fc fc44 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD62B, 0xF2);
 80041f0:	21f2      	movs	r1, #242	; 0xf2
 80041f2:	f24d 602b 	movw	r0, #54827	; 0xd62b
 80041f6:	f7fc fc3f 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD62C, 0x02);
 80041fa:	2102      	movs	r1, #2
 80041fc:	f24d 602c 	movw	r0, #54828	; 0xd62c
 8004200:	f7fc fc3a 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD62D, 0xFE);
 8004204:	21fe      	movs	r1, #254	; 0xfe
 8004206:	f24d 602d 	movw	r0, #54829	; 0xd62d
 800420a:	f7fc fc35 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD62E, 0x03);
 800420e:	2103      	movs	r1, #3
 8004210:	f24d 602e 	movw	r0, #54830	; 0xd62e
 8004214:	f7fc fc30 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD62F, 0x10);
 8004218:	2110      	movs	r1, #16
 800421a:	f24d 602f 	movw	r0, #54831	; 0xd62f
 800421e:	f7fc fc2b 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD630, 0x03);
 8004222:	2103      	movs	r1, #3
 8004224:	f24d 6030 	movw	r0, #54832	; 0xd630
 8004228:	f7fc fc26 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD631, 0x33);
 800422c:	2133      	movs	r1, #51	; 0x33
 800422e:	f24d 6031 	movw	r0, #54833	; 0xd631
 8004232:	f7fc fc21 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD632, 0x03);
 8004236:	2103      	movs	r1, #3
 8004238:	f24d 6032 	movw	r0, #54834	; 0xd632
 800423c:	f7fc fc1c 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xD633, 0x6D);
 8004240:	216d      	movs	r1, #109	; 0x6d
 8004242:	f24d 6033 	movw	r0, #54835	; 0xd633
 8004246:	f7fc fc17 	bl	8000a78 <LCD_WriteReg>
		//LV2 Page 0 enable
		LCD_WriteReg(0xF000, 0x55);
 800424a:	2155      	movs	r1, #85	; 0x55
 800424c:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8004250:	f7fc fc12 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 8004254:	21aa      	movs	r1, #170	; 0xaa
 8004256:	f24f 0001 	movw	r0, #61441	; 0xf001
 800425a:	f7fc fc0d 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 800425e:	2152      	movs	r1, #82	; 0x52
 8004260:	f24f 0002 	movw	r0, #61442	; 0xf002
 8004264:	f7fc fc08 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 8004268:	2108      	movs	r1, #8
 800426a:	f24f 0003 	movw	r0, #61443	; 0xf003
 800426e:	f7fc fc03 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x00);
 8004272:	2100      	movs	r1, #0
 8004274:	f24f 0004 	movw	r0, #61444	; 0xf004
 8004278:	f7fc fbfe 	bl	8000a78 <LCD_WriteReg>
		//Display control
		LCD_WriteReg(0xB100, 0xCC);
 800427c:	21cc      	movs	r1, #204	; 0xcc
 800427e:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8004282:	f7fc fbf9 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x00);
 8004286:	2100      	movs	r1, #0
 8004288:	f24b 1001 	movw	r0, #45313	; 0xb101
 800428c:	f7fc fbf4 	bl	8000a78 <LCD_WriteReg>
		//Source hold time
		LCD_WriteReg(0xB600, 0x05);
 8004290:	2105      	movs	r1, #5
 8004292:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8004296:	f7fc fbef 	bl	8000a78 <LCD_WriteReg>
		//Gate EQ control
		LCD_WriteReg(0xB700, 0x70);
 800429a:	2170      	movs	r1, #112	; 0x70
 800429c:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 80042a0:	f7fc fbea 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x70);
 80042a4:	2170      	movs	r1, #112	; 0x70
 80042a6:	f24b 7001 	movw	r0, #46849	; 0xb701
 80042aa:	f7fc fbe5 	bl	8000a78 <LCD_WriteReg>
		//Source EQ control (Mode 2)
		LCD_WriteReg(0xB800, 0x01);
 80042ae:	2101      	movs	r1, #1
 80042b0:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 80042b4:	f7fc fbe0 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x03);
 80042b8:	2103      	movs	r1, #3
 80042ba:	f64b 0001 	movw	r0, #47105	; 0xb801
 80042be:	f7fc fbdb 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x03);
 80042c2:	2103      	movs	r1, #3
 80042c4:	f64b 0002 	movw	r0, #47106	; 0xb802
 80042c8:	f7fc fbd6 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xB803, 0x03);
 80042cc:	2103      	movs	r1, #3
 80042ce:	f64b 0003 	movw	r0, #47107	; 0xb803
 80042d2:	f7fc fbd1 	bl	8000a78 <LCD_WriteReg>
		//Inversion mode (2-dot)
		LCD_WriteReg(0xBC00, 0x02);
 80042d6:	2102      	movs	r1, #2
 80042d8:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 80042dc:	f7fc fbcc 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x00);
 80042e0:	2100      	movs	r1, #0
 80042e2:	f64b 4001 	movw	r0, #48129	; 0xbc01
 80042e6:	f7fc fbc7 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 80042ea:	2100      	movs	r1, #0
 80042ec:	f64b 4002 	movw	r0, #48130	; 0xbc02
 80042f0:	f7fc fbc2 	bl	8000a78 <LCD_WriteReg>
		//Timing control 4H w/ 4-delay
		LCD_WriteReg(0xC900, 0xD0);
 80042f4:	21d0      	movs	r1, #208	; 0xd0
 80042f6:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 80042fa:	f7fc fbbd 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xC901, 0x02);
 80042fe:	2102      	movs	r1, #2
 8004300:	f64c 1001 	movw	r0, #51457	; 0xc901
 8004304:	f7fc fbb8 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xC902, 0x50);
 8004308:	2150      	movs	r1, #80	; 0x50
 800430a:	f64c 1002 	movw	r0, #51458	; 0xc902
 800430e:	f7fc fbb3 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xC903, 0x50);
 8004312:	2150      	movs	r1, #80	; 0x50
 8004314:	f64c 1003 	movw	r0, #51459	; 0xc903
 8004318:	f7fc fbae 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xC904, 0x50);
 800431c:	2150      	movs	r1, #80	; 0x50
 800431e:	f64c 1004 	movw	r0, #51460	; 0xc904
 8004322:	f7fc fba9 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x3500, 0x00);
 8004326:	2100      	movs	r1, #0
 8004328:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 800432c:	f7fc fba4 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x3A00, 0x55);  //16-bit/pixel
 8004330:	2155      	movs	r1, #85	; 0x55
 8004332:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 8004336:	f7fc fb9f 	bl	8000a78 <LCD_WriteReg>
		LCD_WR_REG(0x1100);
 800433a:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 800433e:	f7fc fb0f 	bl	8000960 <LCD_WR_REG>
//		delay_us(120); // us
		HAL_Delay(1);
 8004342:	2001      	movs	r0, #1
 8004344:	f002 fb40 	bl	80069c8 <HAL_Delay>
		LCD_WR_REG(0x2900);
 8004348:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 800434c:	f7fc fb08 	bl	8000960 <LCD_WR_REG>
 8004350:	f001 bd18 	b.w	8005d84 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9325)  //9325
 8004354:	4bec      	ldr	r3, [pc, #944]	; (8004708 <LCD_Init+0x27b8>)
 8004356:	889b      	ldrh	r3, [r3, #4]
 8004358:	f249 3225 	movw	r2, #37669	; 0x9325
 800435c:	4293      	cmp	r3, r2
 800435e:	f040 80d7 	bne.w	8004510 <LCD_Init+0x25c0>
			{
		LCD_WriteReg(0x00E5, 0x78F0);
 8004362:	f647 01f0 	movw	r1, #30960	; 0x78f0
 8004366:	20e5      	movs	r0, #229	; 0xe5
 8004368:	f7fc fb86 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100);
 800436c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004370:	2001      	movs	r0, #1
 8004372:	f7fc fb81 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8004376:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800437a:	2002      	movs	r0, #2
 800437c:	f7fc fb7c 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 8004380:	f241 0130 	movw	r1, #4144	; 0x1030
 8004384:	2003      	movs	r0, #3
 8004386:	f7fc fb77 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 800438a:	2100      	movs	r1, #0
 800438c:	2004      	movs	r0, #4
 800438e:	f7fc fb73 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8004392:	f240 2102 	movw	r1, #514	; 0x202
 8004396:	2008      	movs	r0, #8
 8004398:	f7fc fb6e 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 800439c:	2100      	movs	r1, #0
 800439e:	2009      	movs	r0, #9
 80043a0:	f7fc fb6a 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000);
 80043a4:	2100      	movs	r1, #0
 80043a6:	200a      	movs	r0, #10
 80043a8:	f7fc fb66 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 80043ac:	2100      	movs	r1, #0
 80043ae:	200c      	movs	r0, #12
 80043b0:	f7fc fb62 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000);
 80043b4:	2100      	movs	r1, #0
 80043b6:	200d      	movs	r0, #13
 80043b8:	f7fc fb5e 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 80043bc:	2100      	movs	r1, #0
 80043be:	200f      	movs	r0, #15
 80043c0:	f7fc fb5a 	bl	8000a78 <LCD_WriteReg>
		//power on sequence VGHVGL
		LCD_WriteReg(0x0010, 0x0000);
 80043c4:	2100      	movs	r1, #0
 80043c6:	2010      	movs	r0, #16
 80043c8:	f7fc fb56 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 80043cc:	2107      	movs	r1, #7
 80043ce:	2011      	movs	r0, #17
 80043d0:	f7fc fb52 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 80043d4:	2100      	movs	r1, #0
 80043d6:	2012      	movs	r0, #18
 80043d8:	f7fc fb4e 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 80043dc:	2100      	movs	r1, #0
 80043de:	2013      	movs	r0, #19
 80043e0:	f7fc fb4a 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0000);
 80043e4:	2100      	movs	r1, #0
 80043e6:	2007      	movs	r0, #7
 80043e8:	f7fc fb46 	bl	8000a78 <LCD_WriteReg>
		//vgh 
		LCD_WriteReg(0x0010, 0x1690);
 80043ec:	f241 6190 	movw	r1, #5776	; 0x1690
 80043f0:	2010      	movs	r0, #16
 80043f2:	f7fc fb41 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 80043f6:	f240 2127 	movw	r1, #551	; 0x227
 80043fa:	2011      	movs	r0, #17
 80043fc:	f7fc fb3c 	bl	8000a78 <LCD_WriteReg>
		//delayms(100);
		//vregiout 
		LCD_WriteReg(0x0012, 0x009D); //0x001b
 8004400:	219d      	movs	r1, #157	; 0x9d
 8004402:	2012      	movs	r0, #18
 8004404:	f7fc fb38 	bl	8000a78 <LCD_WriteReg>
		//delayms(100); 
		//vom amplitude
		LCD_WriteReg(0x0013, 0x1900);
 8004408:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 800440c:	2013      	movs	r0, #19
 800440e:	f7fc fb33 	bl	8000a78 <LCD_WriteReg>
		//delayms(100); 
		//vom H
		LCD_WriteReg(0x0029, 0x0025);
 8004412:	2125      	movs	r1, #37	; 0x25
 8004414:	2029      	movs	r0, #41	; 0x29
 8004416:	f7fc fb2f 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000D);
 800441a:	210d      	movs	r1, #13
 800441c:	202b      	movs	r0, #43	; 0x2b
 800441e:	f7fc fb2b 	bl	8000a78 <LCD_WriteReg>
		//gamma
		LCD_WriteReg(0x0030, 0x0007);
 8004422:	2107      	movs	r1, #7
 8004424:	2030      	movs	r0, #48	; 0x30
 8004426:	f7fc fb27 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0303);
 800442a:	f240 3103 	movw	r1, #771	; 0x303
 800442e:	2031      	movs	r0, #49	; 0x31
 8004430:	f7fc fb22 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0003);		// 0006
 8004434:	2103      	movs	r1, #3
 8004436:	2032      	movs	r0, #50	; 0x32
 8004438:	f7fc fb1e 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0206);
 800443c:	f240 2106 	movw	r1, #518	; 0x206
 8004440:	2035      	movs	r0, #53	; 0x35
 8004442:	f7fc fb19 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0008);
 8004446:	2108      	movs	r1, #8
 8004448:	2036      	movs	r0, #54	; 0x36
 800444a:	f7fc fb15 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0406);
 800444e:	f240 4106 	movw	r1, #1030	; 0x406
 8004452:	2037      	movs	r0, #55	; 0x37
 8004454:	f7fc fb10 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0304);		//0200
 8004458:	f44f 7141 	mov.w	r1, #772	; 0x304
 800445c:	2038      	movs	r0, #56	; 0x38
 800445e:	f7fc fb0b 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0007);
 8004462:	2107      	movs	r1, #7
 8004464:	2039      	movs	r0, #57	; 0x39
 8004466:	f7fc fb07 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0602);		// 0504
 800446a:	f240 6102 	movw	r1, #1538	; 0x602
 800446e:	203c      	movs	r0, #60	; 0x3c
 8004470:	f7fc fb02 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0008);
 8004474:	2108      	movs	r1, #8
 8004476:	203d      	movs	r0, #61	; 0x3d
 8004478:	f7fc fafe 	bl	8000a78 <LCD_WriteReg>
		//ram
		LCD_WriteReg(0x0050, 0x0000);
 800447c:	2100      	movs	r1, #0
 800447e:	2050      	movs	r0, #80	; 0x50
 8004480:	f7fc fafa 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 8004484:	21ef      	movs	r1, #239	; 0xef
 8004486:	2051      	movs	r0, #81	; 0x51
 8004488:	f7fc faf6 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 800448c:	2100      	movs	r1, #0
 800448e:	2052      	movs	r0, #82	; 0x52
 8004490:	f7fc faf2 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8004494:	f240 113f 	movw	r1, #319	; 0x13f
 8004498:	2053      	movs	r0, #83	; 0x53
 800449a:	f7fc faed 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0xA700);
 800449e:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 80044a2:	2060      	movs	r0, #96	; 0x60
 80044a4:	f7fc fae8 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 80044a8:	2101      	movs	r1, #1
 80044aa:	2061      	movs	r0, #97	; 0x61
 80044ac:	f7fc fae4 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 80044b0:	2100      	movs	r1, #0
 80044b2:	206a      	movs	r0, #106	; 0x6a
 80044b4:	f7fc fae0 	bl	8000a78 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0080, 0x0000);
 80044b8:	2100      	movs	r1, #0
 80044ba:	2080      	movs	r0, #128	; 0x80
 80044bc:	f7fc fadc 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 80044c0:	2100      	movs	r1, #0
 80044c2:	2081      	movs	r0, #129	; 0x81
 80044c4:	f7fc fad8 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 80044c8:	2100      	movs	r1, #0
 80044ca:	2082      	movs	r0, #130	; 0x82
 80044cc:	f7fc fad4 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 80044d0:	2100      	movs	r1, #0
 80044d2:	2083      	movs	r0, #131	; 0x83
 80044d4:	f7fc fad0 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 80044d8:	2100      	movs	r1, #0
 80044da:	2084      	movs	r0, #132	; 0x84
 80044dc:	f7fc facc 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 80044e0:	2100      	movs	r1, #0
 80044e2:	2085      	movs	r0, #133	; 0x85
 80044e4:	f7fc fac8 	bl	8000a78 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0090, 0x0010);
 80044e8:	2110      	movs	r1, #16
 80044ea:	2090      	movs	r0, #144	; 0x90
 80044ec:	f7fc fac4 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 80044f0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80044f4:	2092      	movs	r0, #146	; 0x92
 80044f6:	f7fc fabf 	bl	8000a78 <LCD_WriteReg>

		LCD_WriteReg(0x0007, 0x0133);
 80044fa:	f240 1133 	movw	r1, #307	; 0x133
 80044fe:	2007      	movs	r0, #7
 8004500:	f7fc faba 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x0022);		//
 8004504:	2122      	movs	r1, #34	; 0x22
 8004506:	2000      	movs	r0, #0
 8004508:	f7fc fab6 	bl	8000a78 <LCD_WriteReg>
 800450c:	f001 bc3a 	b.w	8005d84 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9328)		//ILI9328   OK
 8004510:	4b7d      	ldr	r3, [pc, #500]	; (8004708 <LCD_Init+0x27b8>)
 8004512:	889b      	ldrh	r3, [r3, #4]
 8004514:	f249 3228 	movw	r2, #37672	; 0x9328
 8004518:	4293      	cmp	r3, r2
 800451a:	f040 80f7 	bne.w	800470c <LCD_Init+0x27bc>
			{
		LCD_WriteReg(0x00EC, 0x108F);		// internal timeing
 800451e:	f241 018f 	movw	r1, #4239	; 0x108f
 8004522:	20ec      	movs	r0, #236	; 0xec
 8004524:	f7fc faa8 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x00EF, 0x1234);		// ADD
 8004528:	f241 2134 	movw	r1, #4660	; 0x1234
 800452c:	20ef      	movs	r0, #239	; 0xef
 800452e:	f7fc faa3 	bl	8000a78 <LCD_WriteReg>
		//LCD_WriteReg(0x00e7,0x0010);      
		//LCD_WriteReg(0x0000,0x0001);//开启内部时钟
		LCD_WriteReg(0x0001, 0x0100);
 8004532:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004536:	2001      	movs	r0, #1
 8004538:	f7fc fa9e 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);        //电源开启
 800453c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004540:	2002      	movs	r0, #2
 8004542:	f7fc fa99 	bl	8000a78 <LCD_WriteReg>
		// 1  1   0    D->U	L->R
		// 0  0   1	   R->L U->D
		// 1  0   1    U->D	R->L
		// 0  1   1    L->R U->D 正常就用这个.
		// 1  1   1	   U->D	L->R
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (0 << 3));		//65K
 8004546:	f241 0130 	movw	r1, #4144	; 0x1030
 800454a:	2003      	movs	r0, #3
 800454c:	f7fc fa94 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8004550:	2100      	movs	r1, #0
 8004552:	2004      	movs	r0, #4
 8004554:	f7fc fa90 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8004558:	f240 2102 	movw	r1, #514	; 0x202
 800455c:	2008      	movs	r0, #8
 800455e:	f7fc fa8b 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 8004562:	2100      	movs	r1, #0
 8004564:	2009      	movs	r0, #9
 8004566:	f7fc fa87 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);		//display setting
 800456a:	2100      	movs	r1, #0
 800456c:	200a      	movs	r0, #10
 800456e:	f7fc fa83 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0001);		//display setting
 8004572:	2101      	movs	r1, #1
 8004574:	200c      	movs	r0, #12
 8004576:	f7fc fa7f 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);		//0f3c
 800457a:	2100      	movs	r1, #0
 800457c:	200d      	movs	r0, #13
 800457e:	f7fc fa7b 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x000f, 0x0000);
 8004582:	2100      	movs	r1, #0
 8004584:	200f      	movs	r0, #15
 8004586:	f7fc fa77 	bl	8000a78 <LCD_WriteReg>
		//电源配置
		LCD_WriteReg(0x0010, 0x0000);
 800458a:	2100      	movs	r1, #0
 800458c:	2010      	movs	r0, #16
 800458e:	f7fc fa73 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 8004592:	2107      	movs	r1, #7
 8004594:	2011      	movs	r0, #17
 8004596:	f7fc fa6f 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 800459a:	2100      	movs	r1, #0
 800459c:	2012      	movs	r0, #18
 800459e:	f7fc fa6b 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 80045a2:	2100      	movs	r1, #0
 80045a4:	2013      	movs	r0, #19
 80045a6:	f7fc fa67 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0001);
 80045aa:	2101      	movs	r1, #1
 80045ac:	2007      	movs	r0, #7
 80045ae:	f7fc fa63 	bl	8000a78 <LCD_WriteReg>
		HAL_Delay(50);
 80045b2:	2032      	movs	r0, #50	; 0x32
 80045b4:	f002 fa08 	bl	80069c8 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1490);
 80045b8:	f241 4190 	movw	r1, #5264	; 0x1490
 80045bc:	2010      	movs	r0, #16
 80045be:	f7fc fa5b 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 80045c2:	f240 2127 	movw	r1, #551	; 0x227
 80045c6:	2011      	movs	r0, #17
 80045c8:	f7fc fa56 	bl	8000a78 <LCD_WriteReg>
		HAL_Delay(50);
 80045cc:	2032      	movs	r0, #50	; 0x32
 80045ce:	f002 f9fb 	bl	80069c8 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x008A);
 80045d2:	218a      	movs	r1, #138	; 0x8a
 80045d4:	2012      	movs	r0, #18
 80045d6:	f7fc fa4f 	bl	8000a78 <LCD_WriteReg>
		HAL_Delay(50);
 80045da:	2032      	movs	r0, #50	; 0x32
 80045dc:	f002 f9f4 	bl	80069c8 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x1a00);
 80045e0:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 80045e4:	2013      	movs	r0, #19
 80045e6:	f7fc fa47 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0006);
 80045ea:	2106      	movs	r1, #6
 80045ec:	2029      	movs	r0, #41	; 0x29
 80045ee:	f7fc fa43 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x002b, 0x000d);
 80045f2:	210d      	movs	r1, #13
 80045f4:	202b      	movs	r0, #43	; 0x2b
 80045f6:	f7fc fa3f 	bl	8000a78 <LCD_WriteReg>
		HAL_Delay(50);
 80045fa:	2032      	movs	r0, #50	; 0x32
 80045fc:	f002 f9e4 	bl	80069c8 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000);
 8004600:	2100      	movs	r1, #0
 8004602:	2020      	movs	r0, #32
 8004604:	f7fc fa38 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8004608:	2100      	movs	r1, #0
 800460a:	2021      	movs	r0, #33	; 0x21
 800460c:	f7fc fa34 	bl	8000a78 <LCD_WriteReg>
		HAL_Delay(50);
 8004610:	2032      	movs	r0, #50	; 0x32
 8004612:	f002 f9d9 	bl	80069c8 <HAL_Delay>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0000);
 8004616:	2100      	movs	r1, #0
 8004618:	2030      	movs	r0, #48	; 0x30
 800461a:	f7fc fa2d 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0604);
 800461e:	f240 6104 	movw	r1, #1540	; 0x604
 8004622:	2031      	movs	r0, #49	; 0x31
 8004624:	f7fc fa28 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0305);
 8004628:	f240 3105 	movw	r1, #773	; 0x305
 800462c:	2032      	movs	r0, #50	; 0x32
 800462e:	f7fc fa23 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0000);
 8004632:	2100      	movs	r1, #0
 8004634:	2035      	movs	r0, #53	; 0x35
 8004636:	f7fc fa1f 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0C09);
 800463a:	f640 4109 	movw	r1, #3081	; 0xc09
 800463e:	2036      	movs	r0, #54	; 0x36
 8004640:	f7fc fa1a 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0204);
 8004644:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004648:	2037      	movs	r0, #55	; 0x37
 800464a:	f7fc fa15 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0301);
 800464e:	f240 3101 	movw	r1, #769	; 0x301
 8004652:	2038      	movs	r0, #56	; 0x38
 8004654:	f7fc fa10 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 8004658:	f240 7107 	movw	r1, #1799	; 0x707
 800465c:	2039      	movs	r0, #57	; 0x39
 800465e:	f7fc fa0b 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x003c, 0x0000);
 8004662:	2100      	movs	r1, #0
 8004664:	203c      	movs	r0, #60	; 0x3c
 8004666:	f7fc fa07 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x003d, 0x0a0a);
 800466a:	f640 210a 	movw	r1, #2570	; 0xa0a
 800466e:	203d      	movs	r0, #61	; 0x3d
 8004670:	f7fc fa02 	bl	8000a78 <LCD_WriteReg>
		HAL_Delay(50);
 8004674:	2032      	movs	r0, #50	; 0x32
 8004676:	f002 f9a7 	bl	80069c8 <HAL_Delay>
		LCD_WriteReg(0x0050, 0x0000); //水平GRAM起始位置
 800467a:	2100      	movs	r1, #0
 800467c:	2050      	movs	r0, #80	; 0x50
 800467e:	f7fc f9fb 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef); //水平GRAM终止位置
 8004682:	21ef      	movs	r1, #239	; 0xef
 8004684:	2051      	movs	r0, #81	; 0x51
 8004686:	f7fc f9f7 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); //垂直GRAM起始位置
 800468a:	2100      	movs	r1, #0
 800468c:	2052      	movs	r0, #82	; 0x52
 800468e:	f7fc f9f3 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f); //垂直GRAM终止位置
 8004692:	f240 113f 	movw	r1, #319	; 0x13f
 8004696:	2053      	movs	r0, #83	; 0x53
 8004698:	f7fc f9ee 	bl	8000a78 <LCD_WriteReg>

		LCD_WriteReg(0x0060, 0xa700);
 800469c:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 80046a0:	2060      	movs	r0, #96	; 0x60
 80046a2:	f7fc f9e9 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 80046a6:	2101      	movs	r1, #1
 80046a8:	2061      	movs	r0, #97	; 0x61
 80046aa:	f7fc f9e5 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 80046ae:	2100      	movs	r1, #0
 80046b0:	206a      	movs	r0, #106	; 0x6a
 80046b2:	f7fc f9e1 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 80046b6:	2100      	movs	r1, #0
 80046b8:	2080      	movs	r0, #128	; 0x80
 80046ba:	f7fc f9dd 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 80046be:	2100      	movs	r1, #0
 80046c0:	2081      	movs	r0, #129	; 0x81
 80046c2:	f7fc f9d9 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 80046c6:	2100      	movs	r1, #0
 80046c8:	2082      	movs	r0, #130	; 0x82
 80046ca:	f7fc f9d5 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 80046ce:	2100      	movs	r1, #0
 80046d0:	2083      	movs	r0, #131	; 0x83
 80046d2:	f7fc f9d1 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 80046d6:	2100      	movs	r1, #0
 80046d8:	2084      	movs	r0, #132	; 0x84
 80046da:	f7fc f9cd 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 80046de:	2100      	movs	r1, #0
 80046e0:	2085      	movs	r0, #133	; 0x85
 80046e2:	f7fc f9c9 	bl	8000a78 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0010);
 80046e6:	2110      	movs	r1, #16
 80046e8:	2090      	movs	r0, #144	; 0x90
 80046ea:	f7fc f9c5 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 80046ee:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80046f2:	2092      	movs	r0, #146	; 0x92
 80046f4:	f7fc f9c0 	bl	8000a78 <LCD_WriteReg>
		//开启显示设置
		LCD_WriteReg(0x0007, 0x0133);
 80046f8:	f240 1133 	movw	r1, #307	; 0x133
 80046fc:	2007      	movs	r0, #7
 80046fe:	f7fc f9bb 	bl	8000a78 <LCD_WriteReg>
 8004702:	f001 bb3f 	b.w	8005d84 <LCD_Init+0x3e34>
 8004706:	bf00      	nop
 8004708:	200000e8 	.word	0x200000e8
	} else if (lcddev.id == 0x9320) //测试OK.
 800470c:	4bce      	ldr	r3, [pc, #824]	; (8004a48 <LCD_Init+0x2af8>)
 800470e:	889b      	ldrh	r3, [r3, #4]
 8004710:	f249 3220 	movw	r2, #37664	; 0x9320
 8004714:	4293      	cmp	r3, r2
 8004716:	f040 80ad 	bne.w	8004874 <LCD_Init+0x2924>
			{
		LCD_WriteReg(0x00, 0x0000);
 800471a:	2100      	movs	r1, #0
 800471c:	2000      	movs	r0, #0
 800471e:	f7fc f9ab 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x01, 0x0100);	//Driver Output Contral.
 8004722:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004726:	2001      	movs	r0, #1
 8004728:	f7fc f9a6 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700);	//LCD Driver Waveform Contral.
 800472c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004730:	2002      	movs	r0, #2
 8004732:	f7fc f9a1 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030);	//Entry Mode Set.
 8004736:	f241 0130 	movw	r1, #4144	; 0x1030
 800473a:	2003      	movs	r0, #3
 800473c:	f7fc f99c 	bl	8000a78 <LCD_WriteReg>
		//LCD_WriteReg(0x03,0x1018);	//Entry Mode Set.

		LCD_WriteReg(0x04, 0x0000);	//Scalling Contral.
 8004740:	2100      	movs	r1, #0
 8004742:	2004      	movs	r0, #4
 8004744:	f7fc f998 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0202);	//Display Contral 2.(0x0207)
 8004748:	f240 2102 	movw	r1, #514	; 0x202
 800474c:	2008      	movs	r0, #8
 800474e:	f7fc f993 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000);	//Display Contral 3.(0x0000)
 8004752:	2100      	movs	r1, #0
 8004754:	2009      	movs	r0, #9
 8004756:	f7fc f98f 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0a, 0x0000);	//Frame Cycle Contal.(0x0000)
 800475a:	2100      	movs	r1, #0
 800475c:	200a      	movs	r0, #10
 800475e:	f7fc f98b 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0c, (1 << 0));	//Extern Display Interface Contral 1.(0x0000)
 8004762:	2101      	movs	r1, #1
 8004764:	200c      	movs	r0, #12
 8004766:	f7fc f987 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0d, 0x0000);	//Frame Maker Position.
 800476a:	2100      	movs	r1, #0
 800476c:	200d      	movs	r0, #13
 800476e:	f7fc f983 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0f, 0x0000);	//Extern Display Interface Contral 2.
 8004772:	2100      	movs	r1, #0
 8004774:	200f      	movs	r0, #15
 8004776:	f7fc f97f 	bl	8000a78 <LCD_WriteReg>
		HAL_Delay(50);
 800477a:	2032      	movs	r0, #50	; 0x32
 800477c:	f002 f924 	bl	80069c8 <HAL_Delay>
		LCD_WriteReg(0x07, 0x0101);	//Display Contral.
 8004780:	f240 1101 	movw	r1, #257	; 0x101
 8004784:	2007      	movs	r0, #7
 8004786:	f7fc f977 	bl	8000a78 <LCD_WriteReg>
		HAL_Delay(50);
 800478a:	2032      	movs	r0, #50	; 0x32
 800478c:	f002 f91c 	bl	80069c8 <HAL_Delay>
		LCD_WriteReg(0x10, (1 << 12) | (0 << 8) | (1 << 7) | (1 << 6) | (0 << 4));//Power Control 1.(0x16b0)
 8004790:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8004794:	2010      	movs	r0, #16
 8004796:	f7fc f96f 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0007);								//Power Control 2.(0x0001)
 800479a:	2107      	movs	r1, #7
 800479c:	2011      	movs	r0, #17
 800479e:	f7fc f96b 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x12, (1 << 8) | (1 << 4) | (0 << 0));	//Power Control 3.(0x0138)
 80047a2:	f44f 7188 	mov.w	r1, #272	; 0x110
 80047a6:	2012      	movs	r0, #18
 80047a8:	f7fc f966 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0b00);								//Power Control 4.
 80047ac:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 80047b0:	2013      	movs	r0, #19
 80047b2:	f7fc f961 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0000);								//Power Control 7.
 80047b6:	2100      	movs	r1, #0
 80047b8:	2029      	movs	r0, #41	; 0x29
 80047ba:	f7fc f95d 	bl	8000a78 <LCD_WriteReg>

		LCD_WriteReg(0x2b, (1 << 14) | (1 << 4));
 80047be:	f244 0110 	movw	r1, #16400	; 0x4010
 80047c2:	202b      	movs	r0, #43	; 0x2b
 80047c4:	f7fc f958 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x50, 0);	//Set X Star
 80047c8:	2100      	movs	r1, #0
 80047ca:	2050      	movs	r0, #80	; 0x50
 80047cc:	f7fc f954 	bl	8000a78 <LCD_WriteReg>
		//水平GRAM终止位置Set X End.
		LCD_WriteReg(0x51, 239);	//Set Y Star
 80047d0:	21ef      	movs	r1, #239	; 0xef
 80047d2:	2051      	movs	r0, #81	; 0x51
 80047d4:	f7fc f950 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x52, 0);	//Set Y End.t.
 80047d8:	2100      	movs	r1, #0
 80047da:	2052      	movs	r0, #82	; 0x52
 80047dc:	f7fc f94c 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x53, 319);	//
 80047e0:	f240 113f 	movw	r1, #319	; 0x13f
 80047e4:	2053      	movs	r0, #83	; 0x53
 80047e6:	f7fc f947 	bl	8000a78 <LCD_WriteReg>

		LCD_WriteReg(0x60, 0x2700);	//Driver Output Control.
 80047ea:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80047ee:	2060      	movs	r0, #96	; 0x60
 80047f0:	f7fc f942 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x61, 0x0001);	//Driver Output Control.
 80047f4:	2101      	movs	r1, #1
 80047f6:	2061      	movs	r0, #97	; 0x61
 80047f8:	f7fc f93e 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x6a, 0x0000);	//Vertical Srcoll Control.
 80047fc:	2100      	movs	r1, #0
 80047fe:	206a      	movs	r0, #106	; 0x6a
 8004800:	f7fc f93a 	bl	8000a78 <LCD_WriteReg>

		LCD_WriteReg(0x80, 0x0000);	//Display Position? Partial Display 1.
 8004804:	2100      	movs	r1, #0
 8004806:	2080      	movs	r0, #128	; 0x80
 8004808:	f7fc f936 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000);	//RAM Address Start? Partial Display 1.
 800480c:	2100      	movs	r1, #0
 800480e:	2081      	movs	r0, #129	; 0x81
 8004810:	f7fc f932 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000);	//RAM Address End-Partial Display 1.
 8004814:	2100      	movs	r1, #0
 8004816:	2082      	movs	r0, #130	; 0x82
 8004818:	f7fc f92e 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000);	//Displsy Position? Partial Display 2.
 800481c:	2100      	movs	r1, #0
 800481e:	2083      	movs	r0, #131	; 0x83
 8004820:	f7fc f92a 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000);	//RAM Address Start? Partial Display 2.
 8004824:	2100      	movs	r1, #0
 8004826:	2084      	movs	r0, #132	; 0x84
 8004828:	f7fc f926 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000);	//RAM Address End? Partial Display 2.
 800482c:	2100      	movs	r1, #0
 800482e:	2085      	movs	r0, #133	; 0x85
 8004830:	f7fc f922 	bl	8000a78 <LCD_WriteReg>

		LCD_WriteReg(0x90, (0 << 7) | (16 << 0));	//Frame Cycle Contral.(0x0013)
 8004834:	2110      	movs	r1, #16
 8004836:	2090      	movs	r0, #144	; 0x90
 8004838:	f7fc f91e 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);	//Panel Interface Contral 2.(0x0000)
 800483c:	2100      	movs	r1, #0
 800483e:	2092      	movs	r0, #146	; 0x92
 8004840:	f7fc f91a 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0001);	//Panel Interface Contral 3.
 8004844:	2101      	movs	r1, #1
 8004846:	2093      	movs	r0, #147	; 0x93
 8004848:	f7fc f916 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);	//Frame Cycle Contral.(0x0110)
 800484c:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004850:	2095      	movs	r0, #149	; 0x95
 8004852:	f7fc f911 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x97, (0 << 8));	//
 8004856:	2100      	movs	r1, #0
 8004858:	2097      	movs	r0, #151	; 0x97
 800485a:	f7fc f90d 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x98, 0x0000);	//Frame Cycle Contral.
 800485e:	2100      	movs	r1, #0
 8004860:	2098      	movs	r0, #152	; 0x98
 8004862:	f7fc f909 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);	//(0x0173)
 8004866:	f240 1173 	movw	r1, #371	; 0x173
 800486a:	2007      	movs	r0, #7
 800486c:	f7fc f904 	bl	8000a78 <LCD_WriteReg>
 8004870:	f001 ba88 	b.w	8005d84 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0X9331)	//OK |/|/|
 8004874:	4b74      	ldr	r3, [pc, #464]	; (8004a48 <LCD_Init+0x2af8>)
 8004876:	889b      	ldrh	r3, [r3, #4]
 8004878:	f249 3231 	movw	r2, #37681	; 0x9331
 800487c:	4293      	cmp	r3, r2
 800487e:	f040 80e5 	bne.w	8004a4c <LCD_Init+0x2afc>
			{
		LCD_WriteReg(0x00E7, 0x1014);
 8004882:	f241 0114 	movw	r1, #4116	; 0x1014
 8004886:	20e7      	movs	r0, #231	; 0xe7
 8004888:	f7fc f8f6 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100); // set SS and SM bit
 800488c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004890:	2001      	movs	r0, #1
 8004892:	f7fc f8f1 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200); // set 1 line inversion
 8004896:	f44f 7100 	mov.w	r1, #512	; 0x200
 800489a:	2002      	movs	r0, #2
 800489c:	f7fc f8ec 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (1 << 3)); //65K
 80048a0:	f241 0138 	movw	r1, #4152	; 0x1038
 80048a4:	2003      	movs	r0, #3
 80048a6:	f7fc f8e7 	bl	8000a78 <LCD_WriteReg>
		//LCD_WriteReg(0x0003, 0x1030); // set GRAM write direction and BGR=1.
		LCD_WriteReg(0x0008, 0x0202); // set the back porch and front porch
 80048aa:	f240 2102 	movw	r1, #514	; 0x202
 80048ae:	2008      	movs	r0, #8
 80048b0:	f7fc f8e2 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000); // set non-display area refresh cycle ISC[3:0]
 80048b4:	2100      	movs	r1, #0
 80048b6:	2009      	movs	r0, #9
 80048b8:	f7fc f8de 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000); // FMARK function
 80048bc:	2100      	movs	r1, #0
 80048be:	200a      	movs	r0, #10
 80048c0:	f7fc f8da 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000); // RGB interface setting
 80048c4:	2100      	movs	r1, #0
 80048c6:	200c      	movs	r0, #12
 80048c8:	f7fc f8d6 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000); // Frame marker Position
 80048cc:	2100      	movs	r1, #0
 80048ce:	200d      	movs	r0, #13
 80048d0:	f7fc f8d2 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); // RGB interface polarity
 80048d4:	2100      	movs	r1, #0
 80048d6:	200f      	movs	r0, #15
 80048d8:	f7fc f8ce 	bl	8000a78 <LCD_WriteReg>
		//*************Power On sequence ****************//
		LCD_WriteReg(0x0010, 0x0000); // SAP, BT[3:0], AP, DSTB, SLP, STB
 80048dc:	2100      	movs	r1, #0
 80048de:	2010      	movs	r0, #16
 80048e0:	f7fc f8ca 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007); // DC1[2:0], DC0[2:0], VC[2:0]
 80048e4:	2107      	movs	r1, #7
 80048e6:	2011      	movs	r0, #17
 80048e8:	f7fc f8c6 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000); // VREG1OUT voltage
 80048ec:	2100      	movs	r1, #0
 80048ee:	2012      	movs	r0, #18
 80048f0:	f7fc f8c2 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000); // VDV[4:0] for VCOM amplitude
 80048f4:	2100      	movs	r1, #0
 80048f6:	2013      	movs	r0, #19
 80048f8:	f7fc f8be 	bl	8000a78 <LCD_WriteReg>
		HAL_Delay(200); // Dis-charge capacitor power voltage
 80048fc:	20c8      	movs	r0, #200	; 0xc8
 80048fe:	f002 f863 	bl	80069c8 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1690); // SAP, BT[3:0], AP, DSTB, SLP, STB
 8004902:	f241 6190 	movw	r1, #5776	; 0x1690
 8004906:	2010      	movs	r0, #16
 8004908:	f7fc f8b6 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227); // DC1[2:0], DC0[2:0], VC[2:0]
 800490c:	f240 2127 	movw	r1, #551	; 0x227
 8004910:	2011      	movs	r0, #17
 8004912:	f7fc f8b1 	bl	8000a78 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8004916:	2032      	movs	r0, #50	; 0x32
 8004918:	f002 f856 	bl	80069c8 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x000C); // Internal reference voltage= Vci;
 800491c:	210c      	movs	r1, #12
 800491e:	2012      	movs	r0, #18
 8004920:	f7fc f8aa 	bl	8000a78 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8004924:	2032      	movs	r0, #50	; 0x32
 8004926:	f002 f84f 	bl	80069c8 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x0800); // Set VDV[4:0] for VCOM amplitude
 800492a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800492e:	2013      	movs	r0, #19
 8004930:	f7fc f8a2 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0011); // Set VCM[5:0] for VCOMH
 8004934:	2111      	movs	r1, #17
 8004936:	2029      	movs	r0, #41	; 0x29
 8004938:	f7fc f89e 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000B); // Set Frame Rate
 800493c:	210b      	movs	r1, #11
 800493e:	202b      	movs	r0, #43	; 0x2b
 8004940:	f7fc f89a 	bl	8000a78 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8004944:	2032      	movs	r0, #50	; 0x32
 8004946:	f002 f83f 	bl	80069c8 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000); // GRAM horizontal Address
 800494a:	2100      	movs	r1, #0
 800494c:	2020      	movs	r0, #32
 800494e:	f7fc f893 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x013f); // GRAM Vertical Address
 8004952:	f240 113f 	movw	r1, #319	; 0x13f
 8004956:	2021      	movs	r0, #33	; 0x21
 8004958:	f7fc f88e 	bl	8000a78 <LCD_WriteReg>
		// ----------- Adjust the Gamma Curve ----------//
		LCD_WriteReg(0x0030, 0x0000);
 800495c:	2100      	movs	r1, #0
 800495e:	2030      	movs	r0, #48	; 0x30
 8004960:	f7fc f88a 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0106);
 8004964:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004968:	2031      	movs	r0, #49	; 0x31
 800496a:	f7fc f885 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0000);
 800496e:	2100      	movs	r1, #0
 8004970:	2032      	movs	r0, #50	; 0x32
 8004972:	f7fc f881 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 8004976:	f44f 7101 	mov.w	r1, #516	; 0x204
 800497a:	2035      	movs	r0, #53	; 0x35
 800497c:	f7fc f87c 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x160A);
 8004980:	f241 610a 	movw	r1, #5642	; 0x160a
 8004984:	2036      	movs	r0, #54	; 0x36
 8004986:	f7fc f877 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707);
 800498a:	f240 7107 	movw	r1, #1799	; 0x707
 800498e:	2037      	movs	r0, #55	; 0x37
 8004990:	f7fc f872 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0106);
 8004994:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004998:	2038      	movs	r0, #56	; 0x38
 800499a:	f7fc f86d 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 800499e:	f240 7107 	movw	r1, #1799	; 0x707
 80049a2:	2039      	movs	r0, #57	; 0x39
 80049a4:	f7fc f868 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0402);
 80049a8:	f240 4102 	movw	r1, #1026	; 0x402
 80049ac:	203c      	movs	r0, #60	; 0x3c
 80049ae:	f7fc f863 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0C0F);
 80049b2:	f640 410f 	movw	r1, #3087	; 0xc0f
 80049b6:	203d      	movs	r0, #61	; 0x3d
 80049b8:	f7fc f85e 	bl	8000a78 <LCD_WriteReg>
		//------------------ Set GRAM area ---------------//
		LCD_WriteReg(0x0050, 0x0000); // Horizontal GRAM Start Address
 80049bc:	2100      	movs	r1, #0
 80049be:	2050      	movs	r0, #80	; 0x50
 80049c0:	f7fc f85a 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF); // Horizontal GRAM End Address
 80049c4:	21ef      	movs	r1, #239	; 0xef
 80049c6:	2051      	movs	r0, #81	; 0x51
 80049c8:	f7fc f856 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); // Vertical GRAM Start Address
 80049cc:	2100      	movs	r1, #0
 80049ce:	2052      	movs	r0, #82	; 0x52
 80049d0:	f7fc f852 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F); // Vertical GRAM Start Address
 80049d4:	f240 113f 	movw	r1, #319	; 0x13f
 80049d8:	2053      	movs	r0, #83	; 0x53
 80049da:	f7fc f84d 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700); // Gate Scan Line
 80049de:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80049e2:	2060      	movs	r0, #96	; 0x60
 80049e4:	f7fc f848 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001); // NDL,VLE, REV 
 80049e8:	2101      	movs	r1, #1
 80049ea:	2061      	movs	r0, #97	; 0x61
 80049ec:	f7fc f844 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000); // set scrolling line
 80049f0:	2100      	movs	r1, #0
 80049f2:	206a      	movs	r0, #106	; 0x6a
 80049f4:	f7fc f840 	bl	8000a78 <LCD_WriteReg>
		//-------------- Partial Display Control ---------//
		LCD_WriteReg(0x0080, 0x0000);
 80049f8:	2100      	movs	r1, #0
 80049fa:	2080      	movs	r0, #128	; 0x80
 80049fc:	f7fc f83c 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8004a00:	2100      	movs	r1, #0
 8004a02:	2081      	movs	r0, #129	; 0x81
 8004a04:	f7fc f838 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004a08:	2100      	movs	r1, #0
 8004a0a:	2082      	movs	r0, #130	; 0x82
 8004a0c:	f7fc f834 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004a10:	2100      	movs	r1, #0
 8004a12:	2083      	movs	r0, #131	; 0x83
 8004a14:	f7fc f830 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004a18:	2100      	movs	r1, #0
 8004a1a:	2084      	movs	r0, #132	; 0x84
 8004a1c:	f7fc f82c 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004a20:	2100      	movs	r1, #0
 8004a22:	2085      	movs	r0, #133	; 0x85
 8004a24:	f7fc f828 	bl	8000a78 <LCD_WriteReg>
		//-------------- Panel Control -------------------//
		LCD_WriteReg(0x0090, 0x0010);
 8004a28:	2110      	movs	r1, #16
 8004a2a:	2090      	movs	r0, #144	; 0x90
 8004a2c:	f7fc f824 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004a30:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004a34:	2092      	movs	r0, #146	; 0x92
 8004a36:	f7fc f81f 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0133); // 262K color and display ON
 8004a3a:	f240 1133 	movw	r1, #307	; 0x133
 8004a3e:	2007      	movs	r0, #7
 8004a40:	f7fc f81a 	bl	8000a78 <LCD_WriteReg>
 8004a44:	f001 b99e 	b.w	8005d84 <LCD_Init+0x3e34>
 8004a48:	200000e8 	.word	0x200000e8
	} else if (lcddev.id == 0x5408) {
 8004a4c:	4be2      	ldr	r3, [pc, #904]	; (8004dd8 <LCD_Init+0x2e88>)
 8004a4e:	889b      	ldrh	r3, [r3, #4]
 8004a50:	f245 4208 	movw	r2, #21512	; 0x5408
 8004a54:	4293      	cmp	r3, r2
 8004a56:	f040 80a3 	bne.w	8004ba0 <LCD_Init+0x2c50>
		LCD_WriteReg(0x01, 0x0100);
 8004a5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004a5e:	2001      	movs	r0, #1
 8004a60:	f7fc f80a 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700); //LCD Driving Waveform Contral
 8004a64:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004a68:	2002      	movs	r0, #2
 8004a6a:	f7fc f805 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030); //Entry Mode设置
 8004a6e:	f241 0130 	movw	r1, #4144	; 0x1030
 8004a72:	2003      	movs	r0, #3
 8004a74:	f7fc f800 	bl	8000a78 <LCD_WriteReg>
		//指针从左至右自上而下的自动增模式
		//Normal Mode(Window Mode disable)
		//RGB格式
		//16位数据2次传输的8总线设置
		LCD_WriteReg(0x04, 0x0000); //Scalling Control register
 8004a78:	2100      	movs	r1, #0
 8004a7a:	2004      	movs	r0, #4
 8004a7c:	f7fb fffc 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0207); //Display Control 2
 8004a80:	f240 2107 	movw	r1, #519	; 0x207
 8004a84:	2008      	movs	r0, #8
 8004a86:	f7fb fff7 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000); //Display Control 3
 8004a8a:	2100      	movs	r1, #0
 8004a8c:	2009      	movs	r0, #9
 8004a8e:	f7fb fff3 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0A, 0x0000); //Frame Cycle Control
 8004a92:	2100      	movs	r1, #0
 8004a94:	200a      	movs	r0, #10
 8004a96:	f7fb ffef 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0C, 0x0000); //External Display Interface Control 1
 8004a9a:	2100      	movs	r1, #0
 8004a9c:	200c      	movs	r0, #12
 8004a9e:	f7fb ffeb 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0D, 0x0000); //Frame Maker Position
 8004aa2:	2100      	movs	r1, #0
 8004aa4:	200d      	movs	r0, #13
 8004aa6:	f7fb ffe7 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0F, 0x0000); //External Display Interface Control 2
 8004aaa:	2100      	movs	r1, #0
 8004aac:	200f      	movs	r0, #15
 8004aae:	f7fb ffe3 	bl	8000a78 <LCD_WriteReg>
		HAL_Delay(20);
 8004ab2:	2014      	movs	r0, #20
 8004ab4:	f001 ff88 	bl	80069c8 <HAL_Delay>
		//TFT 液晶彩色图像显示方法14
		LCD_WriteReg(0x10, 0x16B0); //0x14B0 //Power Control 1
 8004ab8:	f241 61b0 	movw	r1, #5808	; 0x16b0
 8004abc:	2010      	movs	r0, #16
 8004abe:	f7fb ffdb 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0001); //0x0007 //Power Control 2
 8004ac2:	2101      	movs	r1, #1
 8004ac4:	2011      	movs	r0, #17
 8004ac6:	f7fb ffd7 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x17, 0x0001); //0x0000 //Power Control 3
 8004aca:	2101      	movs	r1, #1
 8004acc:	2017      	movs	r0, #23
 8004ace:	f7fb ffd3 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x12, 0x0138); //0x013B //Power Control 4
 8004ad2:	f44f 719c 	mov.w	r1, #312	; 0x138
 8004ad6:	2012      	movs	r0, #18
 8004ad8:	f7fb ffce 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0800); //0x0800 //Power Control 5
 8004adc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004ae0:	2013      	movs	r0, #19
 8004ae2:	f7fb ffc9 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0009); //NVM read data 2
 8004ae6:	2109      	movs	r1, #9
 8004ae8:	2029      	movs	r0, #41	; 0x29
 8004aea:	f7fb ffc5 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x2a, 0x0009); //NVM read data 3
 8004aee:	2109      	movs	r1, #9
 8004af0:	202a      	movs	r0, #42	; 0x2a
 8004af2:	f7fb ffc1 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0xa4, 0x0000);
 8004af6:	2100      	movs	r1, #0
 8004af8:	20a4      	movs	r0, #164	; 0xa4
 8004afa:	f7fb ffbd 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x50, 0x0000); //设置操作窗口的X轴开始列
 8004afe:	2100      	movs	r1, #0
 8004b00:	2050      	movs	r0, #80	; 0x50
 8004b02:	f7fb ffb9 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x51, 0x00EF); //设置操作窗口的X轴结束列
 8004b06:	21ef      	movs	r1, #239	; 0xef
 8004b08:	2051      	movs	r0, #81	; 0x51
 8004b0a:	f7fb ffb5 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x52, 0x0000); //设置操作窗口的Y轴开始行
 8004b0e:	2100      	movs	r1, #0
 8004b10:	2052      	movs	r0, #82	; 0x52
 8004b12:	f7fb ffb1 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x53, 0x013F); //设置操作窗口的Y轴结束行
 8004b16:	f240 113f 	movw	r1, #319	; 0x13f
 8004b1a:	2053      	movs	r0, #83	; 0x53
 8004b1c:	f7fb ffac 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x60, 0x2700); //Driver Output Control
 8004b20:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004b24:	2060      	movs	r0, #96	; 0x60
 8004b26:	f7fb ffa7 	bl	8000a78 <LCD_WriteReg>
		//设置屏幕的点数以及扫描的起始行
		LCD_WriteReg(0x61, 0x0001); //Driver Output Control
 8004b2a:	2101      	movs	r1, #1
 8004b2c:	2061      	movs	r0, #97	; 0x61
 8004b2e:	f7fb ffa3 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x6A, 0x0000); //Vertical Scroll Control
 8004b32:	2100      	movs	r1, #0
 8004b34:	206a      	movs	r0, #106	; 0x6a
 8004b36:	f7fb ff9f 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x80, 0x0000); //Display Position – Partial Display 1
 8004b3a:	2100      	movs	r1, #0
 8004b3c:	2080      	movs	r0, #128	; 0x80
 8004b3e:	f7fb ff9b 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000); //RAM Address Start – Partial Display 1
 8004b42:	2100      	movs	r1, #0
 8004b44:	2081      	movs	r0, #129	; 0x81
 8004b46:	f7fb ff97 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000); //RAM address End - Partial Display 1
 8004b4a:	2100      	movs	r1, #0
 8004b4c:	2082      	movs	r0, #130	; 0x82
 8004b4e:	f7fb ff93 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000); //Display Position – Partial Display 2
 8004b52:	2100      	movs	r1, #0
 8004b54:	2083      	movs	r0, #131	; 0x83
 8004b56:	f7fb ff8f 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000); //RAM Address Start – Partial Display 2
 8004b5a:	2100      	movs	r1, #0
 8004b5c:	2084      	movs	r0, #132	; 0x84
 8004b5e:	f7fb ff8b 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000); //RAM address End – Partail Display2
 8004b62:	2100      	movs	r1, #0
 8004b64:	2085      	movs	r0, #133	; 0x85
 8004b66:	f7fb ff87 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x90, 0x0013); //Frame Cycle Control
 8004b6a:	2113      	movs	r1, #19
 8004b6c:	2090      	movs	r0, #144	; 0x90
 8004b6e:	f7fb ff83 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);  //Panel Interface Control 2
 8004b72:	2100      	movs	r1, #0
 8004b74:	2092      	movs	r0, #146	; 0x92
 8004b76:	f7fb ff7f 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0003); //Panel Interface control 3
 8004b7a:	2103      	movs	r1, #3
 8004b7c:	2093      	movs	r0, #147	; 0x93
 8004b7e:	f7fb ff7b 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);  //Frame Cycle Control
 8004b82:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004b86:	2095      	movs	r0, #149	; 0x95
 8004b88:	f7fb ff76 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);
 8004b8c:	f240 1173 	movw	r1, #371	; 0x173
 8004b90:	2007      	movs	r0, #7
 8004b92:	f7fb ff71 	bl	8000a78 <LCD_WriteReg>
		HAL_Delay(50);
 8004b96:	2032      	movs	r0, #50	; 0x32
 8004b98:	f001 ff16 	bl	80069c8 <HAL_Delay>
 8004b9c:	f001 b8f2 	b.w	8005d84 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x1505)  //OK
 8004ba0:	4b8d      	ldr	r3, [pc, #564]	; (8004dd8 <LCD_Init+0x2e88>)
 8004ba2:	889b      	ldrh	r3, [r3, #4]
 8004ba4:	f241 5205 	movw	r2, #5381	; 0x1505
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	f040 8117 	bne.w	8004ddc <LCD_Init+0x2e8c>
			{
		// second release on 3/5  ,luminance is acceptable,water wave appear during camera preview
		LCD_WriteReg(0x0007, 0x0000);
 8004bae:	2100      	movs	r1, #0
 8004bb0:	2007      	movs	r0, #7
 8004bb2:	f7fb ff61 	bl	8000a78 <LCD_WriteReg>
		HAL_Delay(50);
 8004bb6:	2032      	movs	r0, #50	; 0x32
 8004bb8:	f001 ff06 	bl	80069c8 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x011C);  //0x011A   why need to set several times?
 8004bbc:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8004bc0:	2012      	movs	r0, #18
 8004bc2:	f7fb ff59 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x00A4, 0x0001);  //NVM
 8004bc6:	2101      	movs	r1, #1
 8004bc8:	20a4      	movs	r0, #164	; 0xa4
 8004bca:	f7fb ff55 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x000F);
 8004bce:	210f      	movs	r1, #15
 8004bd0:	2008      	movs	r0, #8
 8004bd2:	f7fb ff51 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0008);
 8004bd6:	2108      	movs	r1, #8
 8004bd8:	200a      	movs	r0, #10
 8004bda:	f7fb ff4d 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0008);
 8004bde:	2108      	movs	r1, #8
 8004be0:	200d      	movs	r0, #13
 8004be2:	f7fb ff49 	bl	8000a78 <LCD_WriteReg>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0707);
 8004be6:	f240 7107 	movw	r1, #1799	; 0x707
 8004bea:	2030      	movs	r0, #48	; 0x30
 8004bec:	f7fb ff44 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0007); //0x0707
 8004bf0:	2107      	movs	r1, #7
 8004bf2:	2031      	movs	r0, #49	; 0x31
 8004bf4:	f7fb ff40 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0603);
 8004bf8:	f240 6103 	movw	r1, #1539	; 0x603
 8004bfc:	2032      	movs	r0, #50	; 0x32
 8004bfe:	f7fb ff3b 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0700);
 8004c02:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004c06:	2033      	movs	r0, #51	; 0x33
 8004c08:	f7fb ff36 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0202);
 8004c0c:	f240 2102 	movw	r1, #514	; 0x202
 8004c10:	2034      	movs	r0, #52	; 0x34
 8004c12:	f7fb ff31 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0002); //?0x0606
 8004c16:	2102      	movs	r1, #2
 8004c18:	2035      	movs	r0, #53	; 0x35
 8004c1a:	f7fb ff2d 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x1F0F);
 8004c1e:	f641 710f 	movw	r1, #7951	; 0x1f0f
 8004c22:	2036      	movs	r0, #54	; 0x36
 8004c24:	f7fb ff28 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707); //0x0f0f  0x0105
 8004c28:	f240 7107 	movw	r1, #1799	; 0x707
 8004c2c:	2037      	movs	r0, #55	; 0x37
 8004c2e:	f7fb ff23 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0000);
 8004c32:	2100      	movs	r1, #0
 8004c34:	2038      	movs	r0, #56	; 0x38
 8004c36:	f7fb ff1f 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0000);
 8004c3a:	2100      	movs	r1, #0
 8004c3c:	2039      	movs	r0, #57	; 0x39
 8004c3e:	f7fb ff1b 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0707);
 8004c42:	f240 7107 	movw	r1, #1799	; 0x707
 8004c46:	203a      	movs	r0, #58	; 0x3a
 8004c48:	f7fb ff16 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0000); //0x0303
 8004c4c:	2100      	movs	r1, #0
 8004c4e:	203b      	movs	r0, #59	; 0x3b
 8004c50:	f7fb ff12 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0007); //?0x0707
 8004c54:	2107      	movs	r1, #7
 8004c56:	203c      	movs	r0, #60	; 0x3c
 8004c58:	f7fb ff0e 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0000); //0x1313//0x1f08
 8004c5c:	2100      	movs	r1, #0
 8004c5e:	203d      	movs	r0, #61	; 0x3d
 8004c60:	f7fb ff0a 	bl	8000a78 <LCD_WriteReg>
		HAL_Delay(50);
 8004c64:	2032      	movs	r0, #50	; 0x32
 8004c66:	f001 feaf 	bl	80069c8 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0001);
 8004c6a:	2101      	movs	r1, #1
 8004c6c:	2007      	movs	r0, #7
 8004c6e:	f7fb ff03 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0001); //开启电源
 8004c72:	2101      	movs	r1, #1
 8004c74:	2017      	movs	r0, #23
 8004c76:	f7fb feff 	bl	8000a78 <LCD_WriteReg>
		HAL_Delay(50);
 8004c7a:	2032      	movs	r0, #50	; 0x32
 8004c7c:	f001 fea4 	bl	80069c8 <HAL_Delay>
		//电源配置
		LCD_WriteReg(0x0010, 0x17A0);
 8004c80:	f44f 51bd 	mov.w	r1, #6048	; 0x17a0
 8004c84:	2010      	movs	r0, #16
 8004c86:	f7fb fef7 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0217); //reference voltage VC[2:0]   Vciout = 1.00*Vcivl
 8004c8a:	f240 2117 	movw	r1, #535	; 0x217
 8004c8e:	2011      	movs	r0, #17
 8004c90:	f7fb fef2 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x011E); //0x011c  //Vreg1out = Vcilvl*1.80   is it the same as Vgama1out ?
 8004c94:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8004c98:	2012      	movs	r0, #18
 8004c9a:	f7fb feed 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0F00); //VDV[4:0]-->VCOM Amplitude VcomL = VcomH - Vcom Ampl
 8004c9e:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8004ca2:	2013      	movs	r0, #19
 8004ca4:	f7fb fee8 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x0000);
 8004ca8:	2100      	movs	r1, #0
 8004caa:	202a      	movs	r0, #42	; 0x2a
 8004cac:	f7fb fee4 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x000A); //0x0001F  Vcomh = VCM1[4:0]*Vreg1out    gate source voltage??
 8004cb0:	210a      	movs	r1, #10
 8004cb2:	2029      	movs	r0, #41	; 0x29
 8004cb4:	f7fb fee0 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x013E); // 0x013C  power supply on
 8004cb8:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8004cbc:	2012      	movs	r0, #18
 8004cbe:	f7fb fedb 	bl	8000a78 <LCD_WriteReg>
		//Coordinates Control//
		LCD_WriteReg(0x0050, 0x0000);        //0x0e00
 8004cc2:	2100      	movs	r1, #0
 8004cc4:	2050      	movs	r0, #80	; 0x50
 8004cc6:	f7fb fed7 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 8004cca:	21ef      	movs	r1, #239	; 0xef
 8004ccc:	2051      	movs	r0, #81	; 0x51
 8004cce:	f7fb fed3 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8004cd2:	2100      	movs	r1, #0
 8004cd4:	2052      	movs	r0, #82	; 0x52
 8004cd6:	f7fb fecf 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8004cda:	f240 113f 	movw	r1, #319	; 0x13f
 8004cde:	2053      	movs	r0, #83	; 0x53
 8004ce0:	f7fb feca 	bl	8000a78 <LCD_WriteReg>
		//Pannel Image Control//
		LCD_WriteReg(0x0060, 0x2700);
 8004ce4:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004ce8:	2060      	movs	r0, #96	; 0x60
 8004cea:	f7fb fec5 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8004cee:	2101      	movs	r1, #1
 8004cf0:	2061      	movs	r0, #97	; 0x61
 8004cf2:	f7fb fec1 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8004cf6:	2100      	movs	r1, #0
 8004cf8:	206a      	movs	r0, #106	; 0x6a
 8004cfa:	f7fb febd 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 8004cfe:	2100      	movs	r1, #0
 8004d00:	2080      	movs	r0, #128	; 0x80
 8004d02:	f7fb feb9 	bl	8000a78 <LCD_WriteReg>
		//Partial Image Control//
		LCD_WriteReg(0x0081, 0x0000);
 8004d06:	2100      	movs	r1, #0
 8004d08:	2081      	movs	r0, #129	; 0x81
 8004d0a:	f7fb feb5 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004d0e:	2100      	movs	r1, #0
 8004d10:	2082      	movs	r0, #130	; 0x82
 8004d12:	f7fb feb1 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004d16:	2100      	movs	r1, #0
 8004d18:	2083      	movs	r0, #131	; 0x83
 8004d1a:	f7fb fead 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004d1e:	2100      	movs	r1, #0
 8004d20:	2084      	movs	r0, #132	; 0x84
 8004d22:	f7fb fea9 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004d26:	2100      	movs	r1, #0
 8004d28:	2085      	movs	r0, #133	; 0x85
 8004d2a:	f7fb fea5 	bl	8000a78 <LCD_WriteReg>
		//Panel Interface Control//
		LCD_WriteReg(0x0090, 0x0013);        //0x0010 frenqucy
 8004d2e:	2113      	movs	r1, #19
 8004d30:	2090      	movs	r0, #144	; 0x90
 8004d32:	f7fb fea1 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 8004d36:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004d3a:	2092      	movs	r0, #146	; 0x92
 8004d3c:	f7fb fe9c 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0005);
 8004d40:	2105      	movs	r1, #5
 8004d42:	2093      	movs	r0, #147	; 0x93
 8004d44:	f7fb fe98 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0095, 0x0000);
 8004d48:	2100      	movs	r1, #0
 8004d4a:	2095      	movs	r0, #149	; 0x95
 8004d4c:	f7fb fe94 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0097, 0x0000);
 8004d50:	2100      	movs	r1, #0
 8004d52:	2097      	movs	r0, #151	; 0x97
 8004d54:	f7fb fe90 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0098, 0x0000);
 8004d58:	2100      	movs	r1, #0
 8004d5a:	2098      	movs	r0, #152	; 0x98
 8004d5c:	f7fb fe8c 	bl	8000a78 <LCD_WriteReg>

		LCD_WriteReg(0x0001, 0x0100);
 8004d60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d64:	2001      	movs	r0, #1
 8004d66:	f7fb fe87 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8004d6a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004d6e:	2002      	movs	r0, #2
 8004d70:	f7fb fe82 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 8004d74:	f241 0138 	movw	r1, #4152	; 0x1038
 8004d78:	2003      	movs	r0, #3
 8004d7a:	f7fb fe7d 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8004d7e:	2100      	movs	r1, #0
 8004d80:	2004      	movs	r0, #4
 8004d82:	f7fb fe79 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8004d86:	2100      	movs	r1, #0
 8004d88:	200c      	movs	r0, #12
 8004d8a:	f7fb fe75 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8004d8e:	2100      	movs	r1, #0
 8004d90:	200f      	movs	r0, #15
 8004d92:	f7fb fe71 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);
 8004d96:	2100      	movs	r1, #0
 8004d98:	2020      	movs	r0, #32
 8004d9a:	f7fb fe6d 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8004d9e:	2100      	movs	r1, #0
 8004da0:	2021      	movs	r0, #33	; 0x21
 8004da2:	f7fb fe69 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0021);
 8004da6:	2121      	movs	r1, #33	; 0x21
 8004da8:	2007      	movs	r0, #7
 8004daa:	f7fb fe65 	bl	8000a78 <LCD_WriteReg>
		HAL_Delay(20);
 8004dae:	2014      	movs	r0, #20
 8004db0:	f001 fe0a 	bl	80069c8 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 8004db4:	2161      	movs	r1, #97	; 0x61
 8004db6:	2007      	movs	r0, #7
 8004db8:	f7fb fe5e 	bl	8000a78 <LCD_WriteReg>
		HAL_Delay(20);
 8004dbc:	2014      	movs	r0, #20
 8004dbe:	f001 fe03 	bl	80069c8 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0173);
 8004dc2:	f240 1173 	movw	r1, #371	; 0x173
 8004dc6:	2007      	movs	r0, #7
 8004dc8:	f7fb fe56 	bl	8000a78 <LCD_WriteReg>
		HAL_Delay(20);
 8004dcc:	2014      	movs	r0, #20
 8004dce:	f001 fdfb 	bl	80069c8 <HAL_Delay>
 8004dd2:	f000 bfd7 	b.w	8005d84 <LCD_Init+0x3e34>
 8004dd6:	bf00      	nop
 8004dd8:	200000e8 	.word	0x200000e8
	} else if (lcddev.id == 0xB505) {
 8004ddc:	4bf0      	ldr	r3, [pc, #960]	; (80051a0 <LCD_Init+0x3250>)
 8004dde:	889b      	ldrh	r3, [r3, #4]
 8004de0:	f24b 5205 	movw	r2, #46341	; 0xb505
 8004de4:	4293      	cmp	r3, r2
 8004de6:	f040 8103 	bne.w	8004ff0 <LCD_Init+0x30a0>
		LCD_WriteReg(0x0000, 0x0000);
 8004dea:	2100      	movs	r1, #0
 8004dec:	2000      	movs	r0, #0
 8004dee:	f7fb fe43 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004df2:	2100      	movs	r1, #0
 8004df4:	2000      	movs	r0, #0
 8004df6:	f7fb fe3f 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004dfa:	2100      	movs	r1, #0
 8004dfc:	2000      	movs	r0, #0
 8004dfe:	f7fb fe3b 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004e02:	2100      	movs	r1, #0
 8004e04:	2000      	movs	r0, #0
 8004e06:	f7fb fe37 	bl	8000a78 <LCD_WriteReg>

		LCD_WriteReg(0x00a4, 0x0001);
 8004e0a:	2101      	movs	r1, #1
 8004e0c:	20a4      	movs	r0, #164	; 0xa4
 8004e0e:	f7fb fe33 	bl	8000a78 <LCD_WriteReg>
		HAL_Delay(20);
 8004e12:	2014      	movs	r0, #20
 8004e14:	f001 fdd8 	bl	80069c8 <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 8004e18:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004e1c:	2060      	movs	r0, #96	; 0x60
 8004e1e:	f7fb fe2b 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8004e22:	f240 2102 	movw	r1, #514	; 0x202
 8004e26:	2008      	movs	r0, #8
 8004e28:	f7fb fe26 	bl	8000a78 <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0214);
 8004e2c:	f44f 7105 	mov.w	r1, #532	; 0x214
 8004e30:	2030      	movs	r0, #48	; 0x30
 8004e32:	f7fb fe21 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x3715);
 8004e36:	f243 7115 	movw	r1, #14101	; 0x3715
 8004e3a:	2031      	movs	r0, #49	; 0x31
 8004e3c:	f7fb fe1c 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0604);
 8004e40:	f240 6104 	movw	r1, #1540	; 0x604
 8004e44:	2032      	movs	r0, #50	; 0x32
 8004e46:	f7fb fe17 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0e16);
 8004e4a:	f640 6116 	movw	r1, #3606	; 0xe16
 8004e4e:	2033      	movs	r0, #51	; 0x33
 8004e50:	f7fb fe12 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x2211);
 8004e54:	f242 2111 	movw	r1, #8721	; 0x2211
 8004e58:	2034      	movs	r0, #52	; 0x34
 8004e5a:	f7fb fe0d 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x1500);
 8004e5e:	f44f 51a8 	mov.w	r1, #5376	; 0x1500
 8004e62:	2035      	movs	r0, #53	; 0x35
 8004e64:	f7fb fe08 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x8507);
 8004e68:	f248 5107 	movw	r1, #34055	; 0x8507
 8004e6c:	2036      	movs	r0, #54	; 0x36
 8004e6e:	f7fb fe03 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x1407);
 8004e72:	f241 4107 	movw	r1, #5127	; 0x1407
 8004e76:	2037      	movs	r0, #55	; 0x37
 8004e78:	f7fb fdfe 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x1403);
 8004e7c:	f241 4103 	movw	r1, #5123	; 0x1403
 8004e80:	2038      	movs	r0, #56	; 0x38
 8004e82:	f7fb fdf9 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0020);
 8004e86:	2120      	movs	r1, #32
 8004e88:	2039      	movs	r0, #57	; 0x39
 8004e8a:	f7fb fdf5 	bl	8000a78 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x001a);
 8004e8e:	211a      	movs	r1, #26
 8004e90:	2090      	movs	r0, #144	; 0x90
 8004e92:	f7fb fdf1 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 8004e96:	2100      	movs	r1, #0
 8004e98:	2010      	movs	r0, #16
 8004e9a:	f7fb fded 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 8004e9e:	2107      	movs	r1, #7
 8004ea0:	2011      	movs	r0, #17
 8004ea2:	f7fb fde9 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 8004ea6:	2100      	movs	r1, #0
 8004ea8:	2012      	movs	r0, #18
 8004eaa:	f7fb fde5 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 8004eae:	2100      	movs	r1, #0
 8004eb0:	2013      	movs	r0, #19
 8004eb2:	f7fb fde1 	bl	8000a78 <LCD_WriteReg>
		HAL_Delay(20);
 8004eb6:	2014      	movs	r0, #20
 8004eb8:	f001 fd86 	bl	80069c8 <HAL_Delay>

		LCD_WriteReg(0x0010, 0x0730);
 8004ebc:	f44f 61e6 	mov.w	r1, #1840	; 0x730
 8004ec0:	2010      	movs	r0, #16
 8004ec2:	f7fb fdd9 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0137);
 8004ec6:	f240 1137 	movw	r1, #311	; 0x137
 8004eca:	2011      	movs	r0, #17
 8004ecc:	f7fb fdd4 	bl	8000a78 <LCD_WriteReg>
		HAL_Delay(20);
 8004ed0:	2014      	movs	r0, #20
 8004ed2:	f001 fd79 	bl	80069c8 <HAL_Delay>

		LCD_WriteReg(0x0012, 0x01b8);
 8004ed6:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8004eda:	2012      	movs	r0, #18
 8004edc:	f7fb fdcc 	bl	8000a78 <LCD_WriteReg>
		HAL_Delay(20);
 8004ee0:	2014      	movs	r0, #20
 8004ee2:	f001 fd71 	bl	80069c8 <HAL_Delay>

		LCD_WriteReg(0x0013, 0x0f00);
 8004ee6:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8004eea:	2013      	movs	r0, #19
 8004eec:	f7fb fdc4 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x002a, 0x0080);
 8004ef0:	2180      	movs	r1, #128	; 0x80
 8004ef2:	202a      	movs	r0, #42	; 0x2a
 8004ef4:	f7fb fdc0 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0048);
 8004ef8:	2148      	movs	r1, #72	; 0x48
 8004efa:	2029      	movs	r0, #41	; 0x29
 8004efc:	f7fb fdbc 	bl	8000a78 <LCD_WriteReg>
		HAL_Delay(20);
 8004f00:	2014      	movs	r0, #20
 8004f02:	f001 fd61 	bl	80069c8 <HAL_Delay>

		LCD_WriteReg(0x0001, 0x0100);
 8004f06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004f0a:	2001      	movs	r0, #1
 8004f0c:	f7fb fdb4 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8004f10:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004f14:	2002      	movs	r0, #2
 8004f16:	f7fb fdaf 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 8004f1a:	f241 0138 	movw	r1, #4152	; 0x1038
 8004f1e:	2003      	movs	r0, #3
 8004f20:	f7fb fdaa 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8004f24:	f240 2102 	movw	r1, #514	; 0x202
 8004f28:	2008      	movs	r0, #8
 8004f2a:	f7fb fda5 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);
 8004f2e:	2100      	movs	r1, #0
 8004f30:	200a      	movs	r0, #10
 8004f32:	f7fb fda1 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0000);
 8004f36:	2100      	movs	r1, #0
 8004f38:	200c      	movs	r0, #12
 8004f3a:	f7fb fd9d 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);
 8004f3e:	2100      	movs	r1, #0
 8004f40:	200d      	movs	r0, #13
 8004f42:	f7fb fd99 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x000e, 0x0030);
 8004f46:	2130      	movs	r1, #48	; 0x30
 8004f48:	200e      	movs	r0, #14
 8004f4a:	f7fb fd95 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 8004f4e:	2100      	movs	r1, #0
 8004f50:	2050      	movs	r0, #80	; 0x50
 8004f52:	f7fb fd91 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef);
 8004f56:	21ef      	movs	r1, #239	; 0xef
 8004f58:	2051      	movs	r0, #81	; 0x51
 8004f5a:	f7fb fd8d 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8004f5e:	2100      	movs	r1, #0
 8004f60:	2052      	movs	r0, #82	; 0x52
 8004f62:	f7fb fd89 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f);
 8004f66:	f240 113f 	movw	r1, #319	; 0x13f
 8004f6a:	2053      	movs	r0, #83	; 0x53
 8004f6c:	f7fb fd84 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700);
 8004f70:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004f74:	2060      	movs	r0, #96	; 0x60
 8004f76:	f7fb fd7f 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8004f7a:	2101      	movs	r1, #1
 8004f7c:	2061      	movs	r0, #97	; 0x61
 8004f7e:	f7fb fd7b 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 8004f82:	2100      	movs	r1, #0
 8004f84:	206a      	movs	r0, #106	; 0x6a
 8004f86:	f7fb fd77 	bl	8000a78 <LCD_WriteReg>
		//LCD_WriteReg(0x0080,0x0000);
		//LCD_WriteReg(0x0081,0x0000);
		LCD_WriteReg(0x0090, 0X0011);
 8004f8a:	2111      	movs	r1, #17
 8004f8c:	2090      	movs	r0, #144	; 0x90
 8004f8e:	f7fb fd73 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004f92:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004f96:	2092      	movs	r0, #146	; 0x92
 8004f98:	f7fb fd6e 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0402);
 8004f9c:	f240 4102 	movw	r1, #1026	; 0x402
 8004fa0:	2093      	movs	r0, #147	; 0x93
 8004fa2:	f7fb fd69 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0094, 0x0002);
 8004fa6:	2102      	movs	r1, #2
 8004fa8:	2094      	movs	r0, #148	; 0x94
 8004faa:	f7fb fd65 	bl	8000a78 <LCD_WriteReg>
		HAL_Delay(20);
 8004fae:	2014      	movs	r0, #20
 8004fb0:	f001 fd0a 	bl	80069c8 <HAL_Delay>

		LCD_WriteReg(0x0007, 0x0001);
 8004fb4:	2101      	movs	r1, #1
 8004fb6:	2007      	movs	r0, #7
 8004fb8:	f7fb fd5e 	bl	8000a78 <LCD_WriteReg>
		HAL_Delay(20);
 8004fbc:	2014      	movs	r0, #20
 8004fbe:	f001 fd03 	bl	80069c8 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 8004fc2:	2161      	movs	r1, #97	; 0x61
 8004fc4:	2007      	movs	r0, #7
 8004fc6:	f7fb fd57 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0173);
 8004fca:	f240 1173 	movw	r1, #371	; 0x173
 8004fce:	2007      	movs	r0, #7
 8004fd0:	f7fb fd52 	bl	8000a78 <LCD_WriteReg>

		LCD_WriteReg(0x0020, 0x0000);
 8004fd4:	2100      	movs	r1, #0
 8004fd6:	2020      	movs	r0, #32
 8004fd8:	f7fb fd4e 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8004fdc:	2100      	movs	r1, #0
 8004fde:	2021      	movs	r0, #33	; 0x21
 8004fe0:	f7fb fd4a 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x22);
 8004fe4:	2122      	movs	r1, #34	; 0x22
 8004fe6:	2000      	movs	r0, #0
 8004fe8:	f7fb fd46 	bl	8000a78 <LCD_WriteReg>
 8004fec:	f000 beca 	b.w	8005d84 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0xC505) {
 8004ff0:	4b6b      	ldr	r3, [pc, #428]	; (80051a0 <LCD_Init+0x3250>)
 8004ff2:	889b      	ldrh	r3, [r3, #4]
 8004ff4:	f24c 5205 	movw	r2, #50437	; 0xc505
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	f040 80d3 	bne.w	80051a4 <LCD_Init+0x3254>
		LCD_WriteReg(0x0000, 0x0000);
 8004ffe:	2100      	movs	r1, #0
 8005000:	2000      	movs	r0, #0
 8005002:	f7fb fd39 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8005006:	2100      	movs	r1, #0
 8005008:	2000      	movs	r0, #0
 800500a:	f7fb fd35 	bl	8000a78 <LCD_WriteReg>
		HAL_Delay(20);
 800500e:	2014      	movs	r0, #20
 8005010:	f001 fcda 	bl	80069c8 <HAL_Delay>
		LCD_WriteReg(0x0000, 0x0000);
 8005014:	2100      	movs	r1, #0
 8005016:	2000      	movs	r0, #0
 8005018:	f7fb fd2e 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 800501c:	2100      	movs	r1, #0
 800501e:	2000      	movs	r0, #0
 8005020:	f7fb fd2a 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8005024:	2100      	movs	r1, #0
 8005026:	2000      	movs	r0, #0
 8005028:	f7fb fd26 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 800502c:	2100      	movs	r1, #0
 800502e:	2000      	movs	r0, #0
 8005030:	f7fb fd22 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x00a4, 0x0001);
 8005034:	2101      	movs	r1, #1
 8005036:	20a4      	movs	r0, #164	; 0xa4
 8005038:	f7fb fd1e 	bl	8000a78 <LCD_WriteReg>
		HAL_Delay(20);
 800503c:	2014      	movs	r0, #20
 800503e:	f001 fcc3 	bl	80069c8 <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 8005042:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005046:	2060      	movs	r0, #96	; 0x60
 8005048:	f7fb fd16 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0806);
 800504c:	f640 0106 	movw	r1, #2054	; 0x806
 8005050:	2008      	movs	r0, #8
 8005052:	f7fb fd11 	bl	8000a78 <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0703);		//gamma setting
 8005056:	f240 7103 	movw	r1, #1795	; 0x703
 800505a:	2030      	movs	r0, #48	; 0x30
 800505c:	f7fb fd0c 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0001);
 8005060:	2101      	movs	r1, #1
 8005062:	2031      	movs	r0, #49	; 0x31
 8005064:	f7fb fd08 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0004);
 8005068:	2104      	movs	r1, #4
 800506a:	2032      	movs	r0, #50	; 0x32
 800506c:	f7fb fd04 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0102);
 8005070:	f44f 7181 	mov.w	r1, #258	; 0x102
 8005074:	2033      	movs	r0, #51	; 0x33
 8005076:	f7fb fcff 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0300);
 800507a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800507e:	2034      	movs	r0, #52	; 0x34
 8005080:	f7fb fcfa 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0103);
 8005084:	f240 1103 	movw	r1, #259	; 0x103
 8005088:	2035      	movs	r0, #53	; 0x35
 800508a:	f7fb fcf5 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x001F);
 800508e:	211f      	movs	r1, #31
 8005090:	2036      	movs	r0, #54	; 0x36
 8005092:	f7fb fcf1 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0703);
 8005096:	f240 7103 	movw	r1, #1795	; 0x703
 800509a:	2037      	movs	r0, #55	; 0x37
 800509c:	f7fb fcec 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0001);
 80050a0:	2101      	movs	r1, #1
 80050a2:	2038      	movs	r0, #56	; 0x38
 80050a4:	f7fb fce8 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0004);
 80050a8:	2104      	movs	r1, #4
 80050aa:	2039      	movs	r0, #57	; 0x39
 80050ac:	f7fb fce4 	bl	8000a78 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0015);	//80Hz
 80050b0:	2115      	movs	r1, #21
 80050b2:	2090      	movs	r0, #144	; 0x90
 80050b4:	f7fb fce0 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0X0410);	//BT,AP
 80050b8:	f44f 6182 	mov.w	r1, #1040	; 0x410
 80050bc:	2010      	movs	r0, #16
 80050be:	f7fb fcdb 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0247);	//DC1,DC0,VC
 80050c2:	f240 2147 	movw	r1, #583	; 0x247
 80050c6:	2011      	movs	r0, #17
 80050c8:	f7fb fcd6 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x01BC);
 80050cc:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 80050d0:	2012      	movs	r0, #18
 80050d2:	f7fb fcd1 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0e00);
 80050d6:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 80050da:	2013      	movs	r0, #19
 80050dc:	f7fb fccc 	bl	8000a78 <LCD_WriteReg>
		HAL_Delay(120);
 80050e0:	2078      	movs	r0, #120	; 0x78
 80050e2:	f001 fc71 	bl	80069c8 <HAL_Delay>
		LCD_WriteReg(0x0001, 0x0100);
 80050e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80050ea:	2001      	movs	r0, #1
 80050ec:	f7fb fcc4 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200);
 80050f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80050f4:	2002      	movs	r0, #2
 80050f6:	f7fb fcbf 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 80050fa:	f241 0130 	movw	r1, #4144	; 0x1030
 80050fe:	2003      	movs	r0, #3
 8005100:	f7fb fcba 	bl	8000a78 <LCD_WriteReg>

		LCD_WriteReg(0x000A, 0x0008);
 8005104:	2108      	movs	r1, #8
 8005106:	200a      	movs	r0, #10
 8005108:	f7fb fcb6 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 800510c:	2100      	movs	r1, #0
 800510e:	200c      	movs	r0, #12
 8005110:	f7fb fcb2 	bl	8000a78 <LCD_WriteReg>

		LCD_WriteReg(0x000E, 0x0020);
 8005114:	2120      	movs	r1, #32
 8005116:	200e      	movs	r0, #14
 8005118:	f7fb fcae 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 800511c:	2100      	movs	r1, #0
 800511e:	200f      	movs	r0, #15
 8005120:	f7fb fcaa 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);	//H Start
 8005124:	2100      	movs	r1, #0
 8005126:	2020      	movs	r0, #32
 8005128:	f7fb fca6 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);	//V Start
 800512c:	2100      	movs	r1, #0
 800512e:	2021      	movs	r0, #33	; 0x21
 8005130:	f7fb fca2 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x003D);	//vcom2
 8005134:	213d      	movs	r1, #61	; 0x3d
 8005136:	202a      	movs	r0, #42	; 0x2a
 8005138:	f7fb fc9e 	bl	8000a78 <LCD_WriteReg>
		HAL_Delay(20);
 800513c:	2014      	movs	r0, #20
 800513e:	f001 fc43 	bl	80069c8 <HAL_Delay>
		LCD_WriteReg(0x0029, 0x002d);
 8005142:	212d      	movs	r1, #45	; 0x2d
 8005144:	2029      	movs	r0, #41	; 0x29
 8005146:	f7fb fc97 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 800514a:	2100      	movs	r1, #0
 800514c:	2050      	movs	r0, #80	; 0x50
 800514e:	f7fb fc93 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0xD0EF);
 8005152:	f24d 01ef 	movw	r1, #53487	; 0xd0ef
 8005156:	2051      	movs	r0, #81	; 0x51
 8005158:	f7fb fc8e 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 800515c:	2100      	movs	r1, #0
 800515e:	2052      	movs	r0, #82	; 0x52
 8005160:	f7fb fc8a 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8005164:	f240 113f 	movw	r1, #319	; 0x13f
 8005168:	2053      	movs	r0, #83	; 0x53
 800516a:	f7fb fc85 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0000);
 800516e:	2100      	movs	r1, #0
 8005170:	2061      	movs	r0, #97	; 0x61
 8005172:	f7fb fc81 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8005176:	2100      	movs	r1, #0
 8005178:	206a      	movs	r0, #106	; 0x6a
 800517a:	f7fb fc7d 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 800517e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005182:	2092      	movs	r0, #146	; 0x92
 8005184:	f7fb fc78 	bl	8000a78 <LCD_WriteReg>

		LCD_WriteReg(0x0093, 0x0005);
 8005188:	2105      	movs	r1, #5
 800518a:	2093      	movs	r0, #147	; 0x93
 800518c:	f7fb fc74 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0100);
 8005190:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005194:	2007      	movs	r0, #7
 8005196:	f7fb fc6f 	bl	8000a78 <LCD_WriteReg>
 800519a:	f000 bdf3 	b.w	8005d84 <LCD_Init+0x3e34>
 800519e:	bf00      	nop
 80051a0:	200000e8 	.word	0x200000e8
	} else if (lcddev.id == 0x8989)	//OK |/|/|
 80051a4:	4bc2      	ldr	r3, [pc, #776]	; (80054b0 <LCD_Init+0x3560>)
 80051a6:	889b      	ldrh	r3, [r3, #4]
 80051a8:	f648 1289 	movw	r2, #35209	; 0x8989
 80051ac:	4293      	cmp	r3, r2
 80051ae:	f040 80bc 	bne.w	800532a <LCD_Init+0x33da>
			{
		LCD_WriteReg(0x0000, 0x0001);	//打开晶振
 80051b2:	2101      	movs	r1, #1
 80051b4:	2000      	movs	r0, #0
 80051b6:	f7fb fc5f 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0xA8A4);	//0xA8A4
 80051ba:	f64a 01a4 	movw	r1, #43172	; 0xa8a4
 80051be:	2003      	movs	r0, #3
 80051c0:	f7fb fc5a 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 80051c4:	2100      	movs	r1, #0
 80051c6:	200c      	movs	r0, #12
 80051c8:	f7fb fc56 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x080C);
 80051cc:	f640 010c 	movw	r1, #2060	; 0x80c
 80051d0:	200d      	movs	r0, #13
 80051d2:	f7fb fc51 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x000E, 0x2B00);
 80051d6:	f44f 512c 	mov.w	r1, #11008	; 0x2b00
 80051da:	200e      	movs	r0, #14
 80051dc:	f7fb fc4c 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x001E, 0x00B0);
 80051e0:	21b0      	movs	r1, #176	; 0xb0
 80051e2:	201e      	movs	r0, #30
 80051e4:	f7fb fc48 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x2B3F);	//驱动输出控制320*240  0x6B3F
 80051e8:	f642 313f 	movw	r1, #11071	; 0x2b3f
 80051ec:	2001      	movs	r0, #1
 80051ee:	f7fb fc43 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0600);
 80051f2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80051f6:	2002      	movs	r0, #2
 80051f8:	f7fb fc3e 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 80051fc:	2100      	movs	r1, #0
 80051fe:	2010      	movs	r0, #16
 8005200:	f7fb fc3a 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x6078); //定义数据格式  16位色 		横屏 0x6058
 8005204:	f246 0178 	movw	r1, #24696	; 0x6078
 8005208:	2011      	movs	r0, #17
 800520a:	f7fb fc35 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0005, 0x0000);
 800520e:	2100      	movs	r1, #0
 8005210:	2005      	movs	r0, #5
 8005212:	f7fb fc31 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0006, 0x0000);
 8005216:	2100      	movs	r1, #0
 8005218:	2006      	movs	r0, #6
 800521a:	f7fb fc2d 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0016, 0xEF1C);
 800521e:	f64e 711c 	movw	r1, #61212	; 0xef1c
 8005222:	2016      	movs	r0, #22
 8005224:	f7fb fc28 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0003);
 8005228:	2103      	movs	r1, #3
 800522a:	2017      	movs	r0, #23
 800522c:	f7fb fc24 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0233); //0x0233
 8005230:	f240 2133 	movw	r1, #563	; 0x233
 8005234:	2007      	movs	r0, #7
 8005236:	f7fb fc1f 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x000B, 0x0000);
 800523a:	2100      	movs	r1, #0
 800523c:	200b      	movs	r0, #11
 800523e:	f7fb fc1b 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); //扫描开始地址
 8005242:	2100      	movs	r1, #0
 8005244:	200f      	movs	r0, #15
 8005246:	f7fb fc17 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0041, 0x0000);
 800524a:	2100      	movs	r1, #0
 800524c:	2041      	movs	r0, #65	; 0x41
 800524e:	f7fb fc13 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0042, 0x0000);
 8005252:	2100      	movs	r1, #0
 8005254:	2042      	movs	r0, #66	; 0x42
 8005256:	f7fb fc0f 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0048, 0x0000);
 800525a:	2100      	movs	r1, #0
 800525c:	2048      	movs	r0, #72	; 0x48
 800525e:	f7fb fc0b 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0049, 0x013F);
 8005262:	f240 113f 	movw	r1, #319	; 0x13f
 8005266:	2049      	movs	r0, #73	; 0x49
 8005268:	f7fb fc06 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x004A, 0x0000);
 800526c:	2100      	movs	r1, #0
 800526e:	204a      	movs	r0, #74	; 0x4a
 8005270:	f7fb fc02 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x004B, 0x0000);
 8005274:	2100      	movs	r1, #0
 8005276:	204b      	movs	r0, #75	; 0x4b
 8005278:	f7fb fbfe 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0044, 0xEF00);
 800527c:	f44f 416f 	mov.w	r1, #61184	; 0xef00
 8005280:	2044      	movs	r0, #68	; 0x44
 8005282:	f7fb fbf9 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0045, 0x0000);
 8005286:	2100      	movs	r1, #0
 8005288:	2045      	movs	r0, #69	; 0x45
 800528a:	f7fb fbf5 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0046, 0x013F);
 800528e:	f240 113f 	movw	r1, #319	; 0x13f
 8005292:	2046      	movs	r0, #70	; 0x46
 8005294:	f7fb fbf0 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0030, 0x0707);
 8005298:	f240 7107 	movw	r1, #1799	; 0x707
 800529c:	2030      	movs	r0, #48	; 0x30
 800529e:	f7fb fbeb 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0204);
 80052a2:	f44f 7101 	mov.w	r1, #516	; 0x204
 80052a6:	2031      	movs	r0, #49	; 0x31
 80052a8:	f7fb fbe6 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0204);
 80052ac:	f44f 7101 	mov.w	r1, #516	; 0x204
 80052b0:	2032      	movs	r0, #50	; 0x32
 80052b2:	f7fb fbe1 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0502);
 80052b6:	f240 5102 	movw	r1, #1282	; 0x502
 80052ba:	2033      	movs	r0, #51	; 0x33
 80052bc:	f7fb fbdc 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0507);
 80052c0:	f240 5107 	movw	r1, #1287	; 0x507
 80052c4:	2034      	movs	r0, #52	; 0x34
 80052c6:	f7fb fbd7 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 80052ca:	f44f 7101 	mov.w	r1, #516	; 0x204
 80052ce:	2035      	movs	r0, #53	; 0x35
 80052d0:	f7fb fbd2 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0204);
 80052d4:	f44f 7101 	mov.w	r1, #516	; 0x204
 80052d8:	2036      	movs	r0, #54	; 0x36
 80052da:	f7fb fbcd 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0502);
 80052de:	f240 5102 	movw	r1, #1282	; 0x502
 80052e2:	2037      	movs	r0, #55	; 0x37
 80052e4:	f7fb fbc8 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0302);
 80052e8:	f240 3102 	movw	r1, #770	; 0x302
 80052ec:	203a      	movs	r0, #58	; 0x3a
 80052ee:	f7fb fbc3 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0302);
 80052f2:	f240 3102 	movw	r1, #770	; 0x302
 80052f6:	203b      	movs	r0, #59	; 0x3b
 80052f8:	f7fb fbbe 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0023, 0x0000);
 80052fc:	2100      	movs	r1, #0
 80052fe:	2023      	movs	r0, #35	; 0x23
 8005300:	f7fb fbba 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0024, 0x0000);
 8005304:	2100      	movs	r1, #0
 8005306:	2024      	movs	r0, #36	; 0x24
 8005308:	f7fb fbb6 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x0025, 0x8000);
 800530c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005310:	2025      	movs	r0, #37	; 0x25
 8005312:	f7fb fbb1 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x004f, 0);        //行首址0
 8005316:	2100      	movs	r1, #0
 8005318:	204f      	movs	r0, #79	; 0x4f
 800531a:	f7fb fbad 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0x004e, 0);        //列首址0
 800531e:	2100      	movs	r1, #0
 8005320:	204e      	movs	r0, #78	; 0x4e
 8005322:	f7fb fba9 	bl	8000a78 <LCD_WriteReg>
 8005326:	f000 bd2d 	b.w	8005d84 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x4531)        //OK |/|/|
 800532a:	4b61      	ldr	r3, [pc, #388]	; (80054b0 <LCD_Init+0x3560>)
 800532c:	889b      	ldrh	r3, [r3, #4]
 800532e:	f244 5231 	movw	r2, #17713	; 0x4531
 8005332:	4293      	cmp	r3, r2
 8005334:	f040 80be 	bne.w	80054b4 <LCD_Init+0x3564>
			{
		LCD_WriteReg(0X00, 0X0001);
 8005338:	2101      	movs	r1, #1
 800533a:	2000      	movs	r0, #0
 800533c:	f7fb fb9c 	bl	8000a78 <LCD_WriteReg>
		HAL_Delay(10);
 8005340:	200a      	movs	r0, #10
 8005342:	f001 fb41 	bl	80069c8 <HAL_Delay>
		LCD_WriteReg(0X10, 0X1628);
 8005346:	f241 6128 	movw	r1, #5672	; 0x1628
 800534a:	2010      	movs	r0, #16
 800534c:	f7fb fb94 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X000e);        //0x0006
 8005350:	210e      	movs	r1, #14
 8005352:	2012      	movs	r0, #18
 8005354:	f7fb fb90 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X0A39);
 8005358:	f640 2139 	movw	r1, #2617	; 0xa39
 800535c:	2013      	movs	r0, #19
 800535e:	f7fb fb8b 	bl	8000a78 <LCD_WriteReg>
		HAL_Delay(10);
 8005362:	200a      	movs	r0, #10
 8005364:	f001 fb30 	bl	80069c8 <HAL_Delay>
		LCD_WriteReg(0X11, 0X0040);
 8005368:	2140      	movs	r1, #64	; 0x40
 800536a:	2011      	movs	r0, #17
 800536c:	f7fb fb84 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0X15, 0X0050);
 8005370:	2150      	movs	r1, #80	; 0x50
 8005372:	2015      	movs	r0, #21
 8005374:	f7fb fb80 	bl	8000a78 <LCD_WriteReg>
		HAL_Delay(10);
 8005378:	200a      	movs	r0, #10
 800537a:	f001 fb25 	bl	80069c8 <HAL_Delay>
		LCD_WriteReg(0X12, 0X001e);        //16
 800537e:	211e      	movs	r1, #30
 8005380:	2012      	movs	r0, #18
 8005382:	f7fb fb79 	bl	8000a78 <LCD_WriteReg>
		HAL_Delay(10);
 8005386:	200a      	movs	r0, #10
 8005388:	f001 fb1e 	bl	80069c8 <HAL_Delay>
		LCD_WriteReg(0X10, 0X1620);
 800538c:	f44f 51b1 	mov.w	r1, #5664	; 0x1620
 8005390:	2010      	movs	r0, #16
 8005392:	f7fb fb71 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X2A39);
 8005396:	f642 2139 	movw	r1, #10809	; 0x2a39
 800539a:	2013      	movs	r0, #19
 800539c:	f7fb fb6c 	bl	8000a78 <LCD_WriteReg>
		HAL_Delay(10);
 80053a0:	200a      	movs	r0, #10
 80053a2:	f001 fb11 	bl	80069c8 <HAL_Delay>
		LCD_WriteReg(0X01, 0X0100);
 80053a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80053aa:	2001      	movs	r0, #1
 80053ac:	f7fb fb64 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 80053b0:	f44f 7140 	mov.w	r1, #768	; 0x300
 80053b4:	2002      	movs	r0, #2
 80053b6:	f7fb fb5f 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1038);        //改变方向的
 80053ba:	f241 0138 	movw	r1, #4152	; 0x1038
 80053be:	2003      	movs	r0, #3
 80053c0:	f7fb fb5a 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0202);
 80053c4:	f240 2102 	movw	r1, #514	; 0x202
 80053c8:	2008      	movs	r0, #8
 80053ca:	f7fb fb55 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 80053ce:	2108      	movs	r1, #8
 80053d0:	200a      	movs	r0, #10
 80053d2:	f7fb fb51 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0X30, 0X0000);
 80053d6:	2100      	movs	r1, #0
 80053d8:	2030      	movs	r0, #48	; 0x30
 80053da:	f7fb fb4d 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 80053de:	f240 4102 	movw	r1, #1026	; 0x402
 80053e2:	2031      	movs	r0, #49	; 0x31
 80053e4:	f7fb fb48 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0106);
 80053e8:	f44f 7183 	mov.w	r1, #262	; 0x106
 80053ec:	2032      	movs	r0, #50	; 0x32
 80053ee:	f7fb fb43 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0503);
 80053f2:	f240 5103 	movw	r1, #1283	; 0x503
 80053f6:	2033      	movs	r0, #51	; 0x33
 80053f8:	f7fb fb3e 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0104);
 80053fc:	f44f 7182 	mov.w	r1, #260	; 0x104
 8005400:	2034      	movs	r0, #52	; 0x34
 8005402:	f7fb fb39 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0301);
 8005406:	f240 3101 	movw	r1, #769	; 0x301
 800540a:	2035      	movs	r0, #53	; 0x35
 800540c:	f7fb fb34 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 8005410:	f240 7107 	movw	r1, #1799	; 0x707
 8005414:	2036      	movs	r0, #54	; 0x36
 8005416:	f7fb fb2f 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 800541a:	f240 3105 	movw	r1, #773	; 0x305
 800541e:	2037      	movs	r0, #55	; 0x37
 8005420:	f7fb fb2a 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0208);
 8005424:	f44f 7102 	mov.w	r1, #520	; 0x208
 8005428:	2038      	movs	r0, #56	; 0x38
 800542a:	f7fb fb25 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0F0B);
 800542e:	f640 710b 	movw	r1, #3851	; 0xf0b
 8005432:	2039      	movs	r0, #57	; 0x39
 8005434:	f7fb fb20 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0X41, 0X0002);
 8005438:	2102      	movs	r1, #2
 800543a:	2041      	movs	r0, #65	; 0x41
 800543c:	f7fb fb1c 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 8005440:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005444:	2060      	movs	r0, #96	; 0x60
 8005446:	f7fb fb17 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 800544a:	2101      	movs	r1, #1
 800544c:	2061      	movs	r0, #97	; 0x61
 800544e:	f7fb fb13 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X0210);
 8005452:	f44f 7104 	mov.w	r1, #528	; 0x210
 8005456:	2090      	movs	r0, #144	; 0x90
 8005458:	f7fb fb0e 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X010A);
 800545c:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8005460:	2092      	movs	r0, #146	; 0x92
 8005462:	f7fb fb09 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0004);
 8005466:	2104      	movs	r1, #4
 8005468:	2093      	movs	r0, #147	; 0x93
 800546a:	f7fb fb05 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0100);
 800546e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005472:	20a0      	movs	r0, #160	; 0xa0
 8005474:	f7fb fb00 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 8005478:	2101      	movs	r1, #1
 800547a:	2007      	movs	r0, #7
 800547c:	f7fb fafc 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 8005480:	2121      	movs	r1, #33	; 0x21
 8005482:	2007      	movs	r0, #7
 8005484:	f7fb faf8 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 8005488:	2123      	movs	r1, #35	; 0x23
 800548a:	2007      	movs	r0, #7
 800548c:	f7fb faf4 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 8005490:	2133      	movs	r1, #51	; 0x33
 8005492:	2007      	movs	r0, #7
 8005494:	f7fb faf0 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 8005498:	f240 1133 	movw	r1, #307	; 0x133
 800549c:	2007      	movs	r0, #7
 800549e:	f7fb faeb 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0000);
 80054a2:	2100      	movs	r1, #0
 80054a4:	20a0      	movs	r0, #160	; 0xa0
 80054a6:	f7fb fae7 	bl	8000a78 <LCD_WriteReg>
 80054aa:	f000 bc6b 	b.w	8005d84 <LCD_Init+0x3e34>
 80054ae:	bf00      	nop
 80054b0:	200000e8 	.word	0x200000e8
	} else if (lcddev.id == 0x4535) {
 80054b4:	4b5b      	ldr	r3, [pc, #364]	; (8005624 <LCD_Init+0x36d4>)
 80054b6:	889b      	ldrh	r3, [r3, #4]
 80054b8:	f244 5235 	movw	r2, #17717	; 0x4535
 80054bc:	4293      	cmp	r3, r2
 80054be:	f040 80b3 	bne.w	8005628 <LCD_Init+0x36d8>
		LCD_WriteReg(0X15, 0X0030);
 80054c2:	2130      	movs	r1, #48	; 0x30
 80054c4:	2015      	movs	r0, #21
 80054c6:	f7fb fad7 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0X9A, 0X0010);
 80054ca:	2110      	movs	r1, #16
 80054cc:	209a      	movs	r0, #154	; 0x9a
 80054ce:	f7fb fad3 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0X11, 0X0020);
 80054d2:	2120      	movs	r1, #32
 80054d4:	2011      	movs	r0, #17
 80054d6:	f7fb facf 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0X10, 0X3428);
 80054da:	f243 4128 	movw	r1, #13352	; 0x3428
 80054de:	2010      	movs	r0, #16
 80054e0:	f7fb faca 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X0002);        //16
 80054e4:	2102      	movs	r1, #2
 80054e6:	2012      	movs	r0, #18
 80054e8:	f7fb fac6 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X1038);
 80054ec:	f241 0138 	movw	r1, #4152	; 0x1038
 80054f0:	2013      	movs	r0, #19
 80054f2:	f7fb fac1 	bl	8000a78 <LCD_WriteReg>
		HAL_Delay(40);
 80054f6:	2028      	movs	r0, #40	; 0x28
 80054f8:	f001 fa66 	bl	80069c8 <HAL_Delay>
		LCD_WriteReg(0X12, 0X0012);        //16
 80054fc:	2112      	movs	r1, #18
 80054fe:	2012      	movs	r0, #18
 8005500:	f7fb faba 	bl	8000a78 <LCD_WriteReg>
		HAL_Delay(40);
 8005504:	2028      	movs	r0, #40	; 0x28
 8005506:	f001 fa5f 	bl	80069c8 <HAL_Delay>
		LCD_WriteReg(0X10, 0X3420);
 800550a:	f243 4120 	movw	r1, #13344	; 0x3420
 800550e:	2010      	movs	r0, #16
 8005510:	f7fb fab2 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X3038);
 8005514:	f243 0138 	movw	r1, #12344	; 0x3038
 8005518:	2013      	movs	r0, #19
 800551a:	f7fb faad 	bl	8000a78 <LCD_WriteReg>
		HAL_Delay(70);
 800551e:	2046      	movs	r0, #70	; 0x46
 8005520:	f001 fa52 	bl	80069c8 <HAL_Delay>
		LCD_WriteReg(0X30, 0X0000);
 8005524:	2100      	movs	r1, #0
 8005526:	2030      	movs	r0, #48	; 0x30
 8005528:	f7fb faa6 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 800552c:	f240 4102 	movw	r1, #1026	; 0x402
 8005530:	2031      	movs	r0, #49	; 0x31
 8005532:	f7fb faa1 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0307);
 8005536:	f240 3107 	movw	r1, #775	; 0x307
 800553a:	2032      	movs	r0, #50	; 0x32
 800553c:	f7fb fa9c 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0304);
 8005540:	f44f 7141 	mov.w	r1, #772	; 0x304
 8005544:	2033      	movs	r0, #51	; 0x33
 8005546:	f7fb fa97 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0004);
 800554a:	2104      	movs	r1, #4
 800554c:	2034      	movs	r0, #52	; 0x34
 800554e:	f7fb fa93 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0401);
 8005552:	f240 4101 	movw	r1, #1025	; 0x401
 8005556:	2035      	movs	r0, #53	; 0x35
 8005558:	f7fb fa8e 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 800555c:	f240 7107 	movw	r1, #1799	; 0x707
 8005560:	2036      	movs	r0, #54	; 0x36
 8005562:	f7fb fa89 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 8005566:	f240 3105 	movw	r1, #773	; 0x305
 800556a:	2037      	movs	r0, #55	; 0x37
 800556c:	f7fb fa84 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0610);
 8005570:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8005574:	2038      	movs	r0, #56	; 0x38
 8005576:	f7fb fa7f 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0610);
 800557a:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 800557e:	2039      	movs	r0, #57	; 0x39
 8005580:	f7fb fa7a 	bl	8000a78 <LCD_WriteReg>

		LCD_WriteReg(0X01, 0X0100);
 8005584:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005588:	2001      	movs	r0, #1
 800558a:	f7fb fa75 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 800558e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005592:	2002      	movs	r0, #2
 8005594:	f7fb fa70 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1030);        //改变方向的
 8005598:	f241 0130 	movw	r1, #4144	; 0x1030
 800559c:	2003      	movs	r0, #3
 800559e:	f7fb fa6b 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0808);
 80055a2:	f640 0108 	movw	r1, #2056	; 0x808
 80055a6:	2008      	movs	r0, #8
 80055a8:	f7fb fa66 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 80055ac:	2108      	movs	r1, #8
 80055ae:	200a      	movs	r0, #10
 80055b0:	f7fb fa62 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 80055b4:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80055b8:	2060      	movs	r0, #96	; 0x60
 80055ba:	f7fb fa5d 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 80055be:	2101      	movs	r1, #1
 80055c0:	2061      	movs	r0, #97	; 0x61
 80055c2:	f7fb fa59 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X013E);
 80055c6:	f44f 719f 	mov.w	r1, #318	; 0x13e
 80055ca:	2090      	movs	r0, #144	; 0x90
 80055cc:	f7fb fa54 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X0100);
 80055d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80055d4:	2092      	movs	r0, #146	; 0x92
 80055d6:	f7fb fa4f 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0100);
 80055da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80055de:	2093      	movs	r0, #147	; 0x93
 80055e0:	f7fb fa4a 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X3000);
 80055e4:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80055e8:	20a0      	movs	r0, #160	; 0xa0
 80055ea:	f7fb fa45 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0XA3, 0X0010);
 80055ee:	2110      	movs	r1, #16
 80055f0:	20a3      	movs	r0, #163	; 0xa3
 80055f2:	f7fb fa41 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 80055f6:	2101      	movs	r1, #1
 80055f8:	2007      	movs	r0, #7
 80055fa:	f7fb fa3d 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 80055fe:	2121      	movs	r1, #33	; 0x21
 8005600:	2007      	movs	r0, #7
 8005602:	f7fb fa39 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 8005606:	2123      	movs	r1, #35	; 0x23
 8005608:	2007      	movs	r0, #7
 800560a:	f7fb fa35 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 800560e:	2133      	movs	r1, #51	; 0x33
 8005610:	2007      	movs	r0, #7
 8005612:	f7fb fa31 	bl	8000a78 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 8005616:	f240 1133 	movw	r1, #307	; 0x133
 800561a:	2007      	movs	r0, #7
 800561c:	f7fb fa2c 	bl	8000a78 <LCD_WriteReg>
 8005620:	e3b0      	b.n	8005d84 <LCD_Init+0x3e34>
 8005622:	bf00      	nop
 8005624:	200000e8 	.word	0x200000e8
	} else if (lcddev.id == 0X1963) {
 8005628:	4ba8      	ldr	r3, [pc, #672]	; (80058cc <LCD_Init+0x397c>)
 800562a:	889b      	ldrh	r3, [r3, #4]
 800562c:	f641 1263 	movw	r2, #6499	; 0x1963
 8005630:	4293      	cmp	r3, r2
 8005632:	f040 83a7 	bne.w	8005d84 <LCD_Init+0x3e34>
		LCD_WR_REG(0xE2);	//Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz
 8005636:	20e2      	movs	r0, #226	; 0xe2
 8005638:	f7fb f992 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATA(0x1D);		//参数1 
 800563c:	4ba4      	ldr	r3, [pc, #656]	; (80058d0 <LCD_Init+0x3980>)
 800563e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005642:	611a      	str	r2, [r3, #16]
 8005644:	4ba2      	ldr	r3, [pc, #648]	; (80058d0 <LCD_Init+0x3980>)
 8005646:	f44f 7200 	mov.w	r2, #512	; 0x200
 800564a:	615a      	str	r2, [r3, #20]
 800564c:	4ba1      	ldr	r3, [pc, #644]	; (80058d4 <LCD_Init+0x3984>)
 800564e:	221d      	movs	r2, #29
 8005650:	60da      	str	r2, [r3, #12]
 8005652:	4b9f      	ldr	r3, [pc, #636]	; (80058d0 <LCD_Init+0x3980>)
 8005654:	2280      	movs	r2, #128	; 0x80
 8005656:	615a      	str	r2, [r3, #20]
 8005658:	4b9d      	ldr	r3, [pc, #628]	; (80058d0 <LCD_Init+0x3980>)
 800565a:	2280      	movs	r2, #128	; 0x80
 800565c:	611a      	str	r2, [r3, #16]
 800565e:	4b9c      	ldr	r3, [pc, #624]	; (80058d0 <LCD_Init+0x3980>)
 8005660:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005664:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x02);		//参数2 Divider M = 2, PLL = 300/(M+1) = 100MHz
 8005666:	4b9a      	ldr	r3, [pc, #616]	; (80058d0 <LCD_Init+0x3980>)
 8005668:	f44f 7280 	mov.w	r2, #256	; 0x100
 800566c:	611a      	str	r2, [r3, #16]
 800566e:	4b98      	ldr	r3, [pc, #608]	; (80058d0 <LCD_Init+0x3980>)
 8005670:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005674:	615a      	str	r2, [r3, #20]
 8005676:	4b97      	ldr	r3, [pc, #604]	; (80058d4 <LCD_Init+0x3984>)
 8005678:	2202      	movs	r2, #2
 800567a:	60da      	str	r2, [r3, #12]
 800567c:	4b94      	ldr	r3, [pc, #592]	; (80058d0 <LCD_Init+0x3980>)
 800567e:	2280      	movs	r2, #128	; 0x80
 8005680:	615a      	str	r2, [r3, #20]
 8005682:	4b93      	ldr	r3, [pc, #588]	; (80058d0 <LCD_Init+0x3980>)
 8005684:	2280      	movs	r2, #128	; 0x80
 8005686:	611a      	str	r2, [r3, #16]
 8005688:	4b91      	ldr	r3, [pc, #580]	; (80058d0 <LCD_Init+0x3980>)
 800568a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800568e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x04);		//参数3 Validate M and N values   
 8005690:	4b8f      	ldr	r3, [pc, #572]	; (80058d0 <LCD_Init+0x3980>)
 8005692:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005696:	611a      	str	r2, [r3, #16]
 8005698:	4b8d      	ldr	r3, [pc, #564]	; (80058d0 <LCD_Init+0x3980>)
 800569a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800569e:	615a      	str	r2, [r3, #20]
 80056a0:	4b8c      	ldr	r3, [pc, #560]	; (80058d4 <LCD_Init+0x3984>)
 80056a2:	2204      	movs	r2, #4
 80056a4:	60da      	str	r2, [r3, #12]
 80056a6:	4b8a      	ldr	r3, [pc, #552]	; (80058d0 <LCD_Init+0x3980>)
 80056a8:	2280      	movs	r2, #128	; 0x80
 80056aa:	615a      	str	r2, [r3, #20]
 80056ac:	4b88      	ldr	r3, [pc, #544]	; (80058d0 <LCD_Init+0x3980>)
 80056ae:	2280      	movs	r2, #128	; 0x80
 80056b0:	611a      	str	r2, [r3, #16]
 80056b2:	4b87      	ldr	r3, [pc, #540]	; (80058d0 <LCD_Init+0x3980>)
 80056b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056b8:	611a      	str	r2, [r3, #16]
//		delay_us(100);
		HAL_Delay(1);
 80056ba:	2001      	movs	r0, #1
 80056bc:	f001 f984 	bl	80069c8 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command
 80056c0:	20e0      	movs	r0, #224	; 0xe0
 80056c2:	f7fb f94d 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATA(0x01);		// enable PLL
 80056c6:	4b82      	ldr	r3, [pc, #520]	; (80058d0 <LCD_Init+0x3980>)
 80056c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056cc:	611a      	str	r2, [r3, #16]
 80056ce:	4b80      	ldr	r3, [pc, #512]	; (80058d0 <LCD_Init+0x3980>)
 80056d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056d4:	615a      	str	r2, [r3, #20]
 80056d6:	4b7f      	ldr	r3, [pc, #508]	; (80058d4 <LCD_Init+0x3984>)
 80056d8:	2201      	movs	r2, #1
 80056da:	60da      	str	r2, [r3, #12]
 80056dc:	4b7c      	ldr	r3, [pc, #496]	; (80058d0 <LCD_Init+0x3980>)
 80056de:	2280      	movs	r2, #128	; 0x80
 80056e0:	615a      	str	r2, [r3, #20]
 80056e2:	4b7b      	ldr	r3, [pc, #492]	; (80058d0 <LCD_Init+0x3980>)
 80056e4:	2280      	movs	r2, #128	; 0x80
 80056e6:	611a      	str	r2, [r3, #16]
 80056e8:	4b79      	ldr	r3, [pc, #484]	; (80058d0 <LCD_Init+0x3980>)
 80056ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056ee:	611a      	str	r2, [r3, #16]
		HAL_Delay(10);
 80056f0:	200a      	movs	r0, #10
 80056f2:	f001 f969 	bl	80069c8 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command again
 80056f6:	20e0      	movs	r0, #224	; 0xe0
 80056f8:	f7fb f932 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATA(0x03);		// now, use PLL output as system clock	
 80056fc:	4b74      	ldr	r3, [pc, #464]	; (80058d0 <LCD_Init+0x3980>)
 80056fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005702:	611a      	str	r2, [r3, #16]
 8005704:	4b72      	ldr	r3, [pc, #456]	; (80058d0 <LCD_Init+0x3980>)
 8005706:	f44f 7200 	mov.w	r2, #512	; 0x200
 800570a:	615a      	str	r2, [r3, #20]
 800570c:	4b71      	ldr	r3, [pc, #452]	; (80058d4 <LCD_Init+0x3984>)
 800570e:	2203      	movs	r2, #3
 8005710:	60da      	str	r2, [r3, #12]
 8005712:	4b6f      	ldr	r3, [pc, #444]	; (80058d0 <LCD_Init+0x3980>)
 8005714:	2280      	movs	r2, #128	; 0x80
 8005716:	615a      	str	r2, [r3, #20]
 8005718:	4b6d      	ldr	r3, [pc, #436]	; (80058d0 <LCD_Init+0x3980>)
 800571a:	2280      	movs	r2, #128	; 0x80
 800571c:	611a      	str	r2, [r3, #16]
 800571e:	4b6c      	ldr	r3, [pc, #432]	; (80058d0 <LCD_Init+0x3980>)
 8005720:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005724:	611a      	str	r2, [r3, #16]
		HAL_Delay(12);
 8005726:	200c      	movs	r0, #12
 8005728:	f001 f94e 	bl	80069c8 <HAL_Delay>
		LCD_WR_REG(0x01);		//软复位
 800572c:	2001      	movs	r0, #1
 800572e:	f7fb f917 	bl	8000960 <LCD_WR_REG>
		HAL_Delay(10);
 8005732:	200a      	movs	r0, #10
 8005734:	f001 f948 	bl	80069c8 <HAL_Delay>

		LCD_WR_REG(0xE6);		//设置像素频率,33Mhz
 8005738:	20e6      	movs	r0, #230	; 0xe6
 800573a:	f7fb f911 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATA(0x2F);
 800573e:	4b64      	ldr	r3, [pc, #400]	; (80058d0 <LCD_Init+0x3980>)
 8005740:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005744:	611a      	str	r2, [r3, #16]
 8005746:	4b62      	ldr	r3, [pc, #392]	; (80058d0 <LCD_Init+0x3980>)
 8005748:	f44f 7200 	mov.w	r2, #512	; 0x200
 800574c:	615a      	str	r2, [r3, #20]
 800574e:	4b61      	ldr	r3, [pc, #388]	; (80058d4 <LCD_Init+0x3984>)
 8005750:	222f      	movs	r2, #47	; 0x2f
 8005752:	60da      	str	r2, [r3, #12]
 8005754:	4b5e      	ldr	r3, [pc, #376]	; (80058d0 <LCD_Init+0x3980>)
 8005756:	2280      	movs	r2, #128	; 0x80
 8005758:	615a      	str	r2, [r3, #20]
 800575a:	4b5d      	ldr	r3, [pc, #372]	; (80058d0 <LCD_Init+0x3980>)
 800575c:	2280      	movs	r2, #128	; 0x80
 800575e:	611a      	str	r2, [r3, #16]
 8005760:	4b5b      	ldr	r3, [pc, #364]	; (80058d0 <LCD_Init+0x3980>)
 8005762:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005766:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 8005768:	4b59      	ldr	r3, [pc, #356]	; (80058d0 <LCD_Init+0x3980>)
 800576a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800576e:	611a      	str	r2, [r3, #16]
 8005770:	4b57      	ldr	r3, [pc, #348]	; (80058d0 <LCD_Init+0x3980>)
 8005772:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005776:	615a      	str	r2, [r3, #20]
 8005778:	4b56      	ldr	r3, [pc, #344]	; (80058d4 <LCD_Init+0x3984>)
 800577a:	22ff      	movs	r2, #255	; 0xff
 800577c:	60da      	str	r2, [r3, #12]
 800577e:	4b54      	ldr	r3, [pc, #336]	; (80058d0 <LCD_Init+0x3980>)
 8005780:	2280      	movs	r2, #128	; 0x80
 8005782:	615a      	str	r2, [r3, #20]
 8005784:	4b52      	ldr	r3, [pc, #328]	; (80058d0 <LCD_Init+0x3980>)
 8005786:	2280      	movs	r2, #128	; 0x80
 8005788:	611a      	str	r2, [r3, #16]
 800578a:	4b51      	ldr	r3, [pc, #324]	; (80058d0 <LCD_Init+0x3980>)
 800578c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005790:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 8005792:	4b4f      	ldr	r3, [pc, #316]	; (80058d0 <LCD_Init+0x3980>)
 8005794:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005798:	611a      	str	r2, [r3, #16]
 800579a:	4b4d      	ldr	r3, [pc, #308]	; (80058d0 <LCD_Init+0x3980>)
 800579c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057a0:	615a      	str	r2, [r3, #20]
 80057a2:	4b4c      	ldr	r3, [pc, #304]	; (80058d4 <LCD_Init+0x3984>)
 80057a4:	22ff      	movs	r2, #255	; 0xff
 80057a6:	60da      	str	r2, [r3, #12]
 80057a8:	4b49      	ldr	r3, [pc, #292]	; (80058d0 <LCD_Init+0x3980>)
 80057aa:	2280      	movs	r2, #128	; 0x80
 80057ac:	615a      	str	r2, [r3, #20]
 80057ae:	4b48      	ldr	r3, [pc, #288]	; (80058d0 <LCD_Init+0x3980>)
 80057b0:	2280      	movs	r2, #128	; 0x80
 80057b2:	611a      	str	r2, [r3, #16]
 80057b4:	4b46      	ldr	r3, [pc, #280]	; (80058d0 <LCD_Init+0x3980>)
 80057b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057ba:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB0);		//设置LCD模式
 80057bc:	20b0      	movs	r0, #176	; 0xb0
 80057be:	f7fb f8cf 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATA(0x20);		//24位模式
 80057c2:	4b43      	ldr	r3, [pc, #268]	; (80058d0 <LCD_Init+0x3980>)
 80057c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057c8:	611a      	str	r2, [r3, #16]
 80057ca:	4b41      	ldr	r3, [pc, #260]	; (80058d0 <LCD_Init+0x3980>)
 80057cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057d0:	615a      	str	r2, [r3, #20]
 80057d2:	4b40      	ldr	r3, [pc, #256]	; (80058d4 <LCD_Init+0x3984>)
 80057d4:	2220      	movs	r2, #32
 80057d6:	60da      	str	r2, [r3, #12]
 80057d8:	4b3d      	ldr	r3, [pc, #244]	; (80058d0 <LCD_Init+0x3980>)
 80057da:	2280      	movs	r2, #128	; 0x80
 80057dc:	615a      	str	r2, [r3, #20]
 80057de:	4b3c      	ldr	r3, [pc, #240]	; (80058d0 <LCD_Init+0x3980>)
 80057e0:	2280      	movs	r2, #128	; 0x80
 80057e2:	611a      	str	r2, [r3, #16]
 80057e4:	4b3a      	ldr	r3, [pc, #232]	; (80058d0 <LCD_Init+0x3980>)
 80057e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057ea:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//TFT 模式 
 80057ec:	4b38      	ldr	r3, [pc, #224]	; (80058d0 <LCD_Init+0x3980>)
 80057ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057f2:	611a      	str	r2, [r3, #16]
 80057f4:	4b36      	ldr	r3, [pc, #216]	; (80058d0 <LCD_Init+0x3980>)
 80057f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057fa:	615a      	str	r2, [r3, #20]
 80057fc:	4b35      	ldr	r3, [pc, #212]	; (80058d4 <LCD_Init+0x3984>)
 80057fe:	2200      	movs	r2, #0
 8005800:	60da      	str	r2, [r3, #12]
 8005802:	4b33      	ldr	r3, [pc, #204]	; (80058d0 <LCD_Init+0x3980>)
 8005804:	2280      	movs	r2, #128	; 0x80
 8005806:	615a      	str	r2, [r3, #20]
 8005808:	4b31      	ldr	r3, [pc, #196]	; (80058d0 <LCD_Init+0x3980>)
 800580a:	2280      	movs	r2, #128	; 0x80
 800580c:	611a      	str	r2, [r3, #16]
 800580e:	4b30      	ldr	r3, [pc, #192]	; (80058d0 <LCD_Init+0x3980>)
 8005810:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005814:	611a      	str	r2, [r3, #16]

		LCD_WR_DATA((SSD_HOR_RESOLUTION-1)>>8);		//设置LCD水平像素
 8005816:	4b2e      	ldr	r3, [pc, #184]	; (80058d0 <LCD_Init+0x3980>)
 8005818:	f44f 7280 	mov.w	r2, #256	; 0x100
 800581c:	611a      	str	r2, [r3, #16]
 800581e:	4b2c      	ldr	r3, [pc, #176]	; (80058d0 <LCD_Init+0x3980>)
 8005820:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005824:	615a      	str	r2, [r3, #20]
 8005826:	4b2b      	ldr	r3, [pc, #172]	; (80058d4 <LCD_Init+0x3984>)
 8005828:	2203      	movs	r2, #3
 800582a:	60da      	str	r2, [r3, #12]
 800582c:	4b28      	ldr	r3, [pc, #160]	; (80058d0 <LCD_Init+0x3980>)
 800582e:	2280      	movs	r2, #128	; 0x80
 8005830:	615a      	str	r2, [r3, #20]
 8005832:	4b27      	ldr	r3, [pc, #156]	; (80058d0 <LCD_Init+0x3980>)
 8005834:	2280      	movs	r2, #128	; 0x80
 8005836:	611a      	str	r2, [r3, #16]
 8005838:	4b25      	ldr	r3, [pc, #148]	; (80058d0 <LCD_Init+0x3980>)
 800583a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800583e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_RESOLUTION-1);
 8005840:	4b23      	ldr	r3, [pc, #140]	; (80058d0 <LCD_Init+0x3980>)
 8005842:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005846:	611a      	str	r2, [r3, #16]
 8005848:	4b21      	ldr	r3, [pc, #132]	; (80058d0 <LCD_Init+0x3980>)
 800584a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800584e:	615a      	str	r2, [r3, #20]
 8005850:	4b20      	ldr	r3, [pc, #128]	; (80058d4 <LCD_Init+0x3984>)
 8005852:	f240 321f 	movw	r2, #799	; 0x31f
 8005856:	60da      	str	r2, [r3, #12]
 8005858:	4b1d      	ldr	r3, [pc, #116]	; (80058d0 <LCD_Init+0x3980>)
 800585a:	2280      	movs	r2, #128	; 0x80
 800585c:	615a      	str	r2, [r3, #20]
 800585e:	4b1c      	ldr	r3, [pc, #112]	; (80058d0 <LCD_Init+0x3980>)
 8005860:	2280      	movs	r2, #128	; 0x80
 8005862:	611a      	str	r2, [r3, #16]
 8005864:	4b1a      	ldr	r3, [pc, #104]	; (80058d0 <LCD_Init+0x3980>)
 8005866:	f44f 7200 	mov.w	r2, #512	; 0x200
 800586a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((SSD_VER_RESOLUTION-1)>>8);		//设置LCD垂直像素
 800586c:	4b18      	ldr	r3, [pc, #96]	; (80058d0 <LCD_Init+0x3980>)
 800586e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005872:	611a      	str	r2, [r3, #16]
 8005874:	4b16      	ldr	r3, [pc, #88]	; (80058d0 <LCD_Init+0x3980>)
 8005876:	f44f 7200 	mov.w	r2, #512	; 0x200
 800587a:	615a      	str	r2, [r3, #20]
 800587c:	4b15      	ldr	r3, [pc, #84]	; (80058d4 <LCD_Init+0x3984>)
 800587e:	2201      	movs	r2, #1
 8005880:	60da      	str	r2, [r3, #12]
 8005882:	4b13      	ldr	r3, [pc, #76]	; (80058d0 <LCD_Init+0x3980>)
 8005884:	2280      	movs	r2, #128	; 0x80
 8005886:	615a      	str	r2, [r3, #20]
 8005888:	4b11      	ldr	r3, [pc, #68]	; (80058d0 <LCD_Init+0x3980>)
 800588a:	2280      	movs	r2, #128	; 0x80
 800588c:	611a      	str	r2, [r3, #16]
 800588e:	4b10      	ldr	r3, [pc, #64]	; (80058d0 <LCD_Init+0x3980>)
 8005890:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005894:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_RESOLUTION-1);
 8005896:	4b0e      	ldr	r3, [pc, #56]	; (80058d0 <LCD_Init+0x3980>)
 8005898:	f44f 7280 	mov.w	r2, #256	; 0x100
 800589c:	611a      	str	r2, [r3, #16]
 800589e:	4b0c      	ldr	r3, [pc, #48]	; (80058d0 <LCD_Init+0x3980>)
 80058a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058a4:	615a      	str	r2, [r3, #20]
 80058a6:	4b0b      	ldr	r3, [pc, #44]	; (80058d4 <LCD_Init+0x3984>)
 80058a8:	f240 12df 	movw	r2, #479	; 0x1df
 80058ac:	60da      	str	r2, [r3, #12]
 80058ae:	4b08      	ldr	r3, [pc, #32]	; (80058d0 <LCD_Init+0x3980>)
 80058b0:	2280      	movs	r2, #128	; 0x80
 80058b2:	615a      	str	r2, [r3, #20]
 80058b4:	4b06      	ldr	r3, [pc, #24]	; (80058d0 <LCD_Init+0x3980>)
 80058b6:	2280      	movs	r2, #128	; 0x80
 80058b8:	611a      	str	r2, [r3, #16]
 80058ba:	4b05      	ldr	r3, [pc, #20]	; (80058d0 <LCD_Init+0x3980>)
 80058bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058c0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//RGB序列 
 80058c2:	4b03      	ldr	r3, [pc, #12]	; (80058d0 <LCD_Init+0x3980>)
 80058c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058c8:	e006      	b.n	80058d8 <LCD_Init+0x3988>
 80058ca:	bf00      	nop
 80058cc:	200000e8 	.word	0x200000e8
 80058d0:	40011000 	.word	0x40011000
 80058d4:	40010c00 	.word	0x40010c00
 80058d8:	611a      	str	r2, [r3, #16]
 80058da:	4ba3      	ldr	r3, [pc, #652]	; (8005b68 <LCD_Init+0x3c18>)
 80058dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058e0:	615a      	str	r2, [r3, #20]
 80058e2:	4ba2      	ldr	r3, [pc, #648]	; (8005b6c <LCD_Init+0x3c1c>)
 80058e4:	2200      	movs	r2, #0
 80058e6:	60da      	str	r2, [r3, #12]
 80058e8:	4b9f      	ldr	r3, [pc, #636]	; (8005b68 <LCD_Init+0x3c18>)
 80058ea:	2280      	movs	r2, #128	; 0x80
 80058ec:	615a      	str	r2, [r3, #20]
 80058ee:	4b9e      	ldr	r3, [pc, #632]	; (8005b68 <LCD_Init+0x3c18>)
 80058f0:	2280      	movs	r2, #128	; 0x80
 80058f2:	611a      	str	r2, [r3, #16]
 80058f4:	4b9c      	ldr	r3, [pc, #624]	; (8005b68 <LCD_Init+0x3c18>)
 80058f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058fa:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB4);		//Set horizontal period
 80058fc:	20b4      	movs	r0, #180	; 0xb4
 80058fe:	f7fb f82f 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATA((SSD_HT-1)>>8);
 8005902:	4b99      	ldr	r3, [pc, #612]	; (8005b68 <LCD_Init+0x3c18>)
 8005904:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005908:	611a      	str	r2, [r3, #16]
 800590a:	4b97      	ldr	r3, [pc, #604]	; (8005b68 <LCD_Init+0x3c18>)
 800590c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005910:	615a      	str	r2, [r3, #20]
 8005912:	4b96      	ldr	r3, [pc, #600]	; (8005b6c <LCD_Init+0x3c1c>)
 8005914:	2204      	movs	r2, #4
 8005916:	60da      	str	r2, [r3, #12]
 8005918:	4b93      	ldr	r3, [pc, #588]	; (8005b68 <LCD_Init+0x3c18>)
 800591a:	2280      	movs	r2, #128	; 0x80
 800591c:	615a      	str	r2, [r3, #20]
 800591e:	4b92      	ldr	r3, [pc, #584]	; (8005b68 <LCD_Init+0x3c18>)
 8005920:	2280      	movs	r2, #128	; 0x80
 8005922:	611a      	str	r2, [r3, #16]
 8005924:	4b90      	ldr	r3, [pc, #576]	; (8005b68 <LCD_Init+0x3c18>)
 8005926:	f44f 7200 	mov.w	r2, #512	; 0x200
 800592a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HT-1);
 800592c:	4b8e      	ldr	r3, [pc, #568]	; (8005b68 <LCD_Init+0x3c18>)
 800592e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005932:	611a      	str	r2, [r3, #16]
 8005934:	4b8c      	ldr	r3, [pc, #560]	; (8005b68 <LCD_Init+0x3c18>)
 8005936:	f44f 7200 	mov.w	r2, #512	; 0x200
 800593a:	615a      	str	r2, [r3, #20]
 800593c:	4b8b      	ldr	r3, [pc, #556]	; (8005b6c <LCD_Init+0x3c1c>)
 800593e:	f240 421f 	movw	r2, #1055	; 0x41f
 8005942:	60da      	str	r2, [r3, #12]
 8005944:	4b88      	ldr	r3, [pc, #544]	; (8005b68 <LCD_Init+0x3c18>)
 8005946:	2280      	movs	r2, #128	; 0x80
 8005948:	615a      	str	r2, [r3, #20]
 800594a:	4b87      	ldr	r3, [pc, #540]	; (8005b68 <LCD_Init+0x3c18>)
 800594c:	2280      	movs	r2, #128	; 0x80
 800594e:	611a      	str	r2, [r3, #16]
 8005950:	4b85      	ldr	r3, [pc, #532]	; (8005b68 <LCD_Init+0x3c18>)
 8005952:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005956:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS>>8);
 8005958:	4b83      	ldr	r3, [pc, #524]	; (8005b68 <LCD_Init+0x3c18>)
 800595a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800595e:	611a      	str	r2, [r3, #16]
 8005960:	4b81      	ldr	r3, [pc, #516]	; (8005b68 <LCD_Init+0x3c18>)
 8005962:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005966:	615a      	str	r2, [r3, #20]
 8005968:	4b80      	ldr	r3, [pc, #512]	; (8005b6c <LCD_Init+0x3c1c>)
 800596a:	2200      	movs	r2, #0
 800596c:	60da      	str	r2, [r3, #12]
 800596e:	4b7e      	ldr	r3, [pc, #504]	; (8005b68 <LCD_Init+0x3c18>)
 8005970:	2280      	movs	r2, #128	; 0x80
 8005972:	615a      	str	r2, [r3, #20]
 8005974:	4b7c      	ldr	r3, [pc, #496]	; (8005b68 <LCD_Init+0x3c18>)
 8005976:	2280      	movs	r2, #128	; 0x80
 8005978:	611a      	str	r2, [r3, #16]
 800597a:	4b7b      	ldr	r3, [pc, #492]	; (8005b68 <LCD_Init+0x3c18>)
 800597c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005980:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS);
 8005982:	4b79      	ldr	r3, [pc, #484]	; (8005b68 <LCD_Init+0x3c18>)
 8005984:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005988:	611a      	str	r2, [r3, #16]
 800598a:	4b77      	ldr	r3, [pc, #476]	; (8005b68 <LCD_Init+0x3c18>)
 800598c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005990:	615a      	str	r2, [r3, #20]
 8005992:	4b76      	ldr	r3, [pc, #472]	; (8005b6c <LCD_Init+0x3c1c>)
 8005994:	222e      	movs	r2, #46	; 0x2e
 8005996:	60da      	str	r2, [r3, #12]
 8005998:	4b73      	ldr	r3, [pc, #460]	; (8005b68 <LCD_Init+0x3c18>)
 800599a:	2280      	movs	r2, #128	; 0x80
 800599c:	615a      	str	r2, [r3, #20]
 800599e:	4b72      	ldr	r3, [pc, #456]	; (8005b68 <LCD_Init+0x3c18>)
 80059a0:	2280      	movs	r2, #128	; 0x80
 80059a2:	611a      	str	r2, [r3, #16]
 80059a4:	4b70      	ldr	r3, [pc, #448]	; (8005b68 <LCD_Init+0x3c18>)
 80059a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059aa:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_PULSE_WIDTH-1);
 80059ac:	4b6e      	ldr	r3, [pc, #440]	; (8005b68 <LCD_Init+0x3c18>)
 80059ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059b2:	611a      	str	r2, [r3, #16]
 80059b4:	4b6c      	ldr	r3, [pc, #432]	; (8005b68 <LCD_Init+0x3c18>)
 80059b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059ba:	615a      	str	r2, [r3, #20]
 80059bc:	4b6b      	ldr	r3, [pc, #428]	; (8005b6c <LCD_Init+0x3c1c>)
 80059be:	2200      	movs	r2, #0
 80059c0:	60da      	str	r2, [r3, #12]
 80059c2:	4b69      	ldr	r3, [pc, #420]	; (8005b68 <LCD_Init+0x3c18>)
 80059c4:	2280      	movs	r2, #128	; 0x80
 80059c6:	615a      	str	r2, [r3, #20]
 80059c8:	4b67      	ldr	r3, [pc, #412]	; (8005b68 <LCD_Init+0x3c18>)
 80059ca:	2280      	movs	r2, #128	; 0x80
 80059cc:	611a      	str	r2, [r3, #16]
 80059ce:	4b66      	ldr	r3, [pc, #408]	; (8005b68 <LCD_Init+0x3c18>)
 80059d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059d4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 80059d6:	4b64      	ldr	r3, [pc, #400]	; (8005b68 <LCD_Init+0x3c18>)
 80059d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059dc:	611a      	str	r2, [r3, #16]
 80059de:	4b62      	ldr	r3, [pc, #392]	; (8005b68 <LCD_Init+0x3c18>)
 80059e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059e4:	615a      	str	r2, [r3, #20]
 80059e6:	4b61      	ldr	r3, [pc, #388]	; (8005b6c <LCD_Init+0x3c1c>)
 80059e8:	2200      	movs	r2, #0
 80059ea:	60da      	str	r2, [r3, #12]
 80059ec:	4b5e      	ldr	r3, [pc, #376]	; (8005b68 <LCD_Init+0x3c18>)
 80059ee:	2280      	movs	r2, #128	; 0x80
 80059f0:	615a      	str	r2, [r3, #20]
 80059f2:	4b5d      	ldr	r3, [pc, #372]	; (8005b68 <LCD_Init+0x3c18>)
 80059f4:	2280      	movs	r2, #128	; 0x80
 80059f6:	611a      	str	r2, [r3, #16]
 80059f8:	4b5b      	ldr	r3, [pc, #364]	; (8005b68 <LCD_Init+0x3c18>)
 80059fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059fe:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005a00:	4b59      	ldr	r3, [pc, #356]	; (8005b68 <LCD_Init+0x3c18>)
 8005a02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a06:	611a      	str	r2, [r3, #16]
 8005a08:	4b57      	ldr	r3, [pc, #348]	; (8005b68 <LCD_Init+0x3c18>)
 8005a0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a0e:	615a      	str	r2, [r3, #20]
 8005a10:	4b56      	ldr	r3, [pc, #344]	; (8005b6c <LCD_Init+0x3c1c>)
 8005a12:	2200      	movs	r2, #0
 8005a14:	60da      	str	r2, [r3, #12]
 8005a16:	4b54      	ldr	r3, [pc, #336]	; (8005b68 <LCD_Init+0x3c18>)
 8005a18:	2280      	movs	r2, #128	; 0x80
 8005a1a:	615a      	str	r2, [r3, #20]
 8005a1c:	4b52      	ldr	r3, [pc, #328]	; (8005b68 <LCD_Init+0x3c18>)
 8005a1e:	2280      	movs	r2, #128	; 0x80
 8005a20:	611a      	str	r2, [r3, #16]
 8005a22:	4b51      	ldr	r3, [pc, #324]	; (8005b68 <LCD_Init+0x3c18>)
 8005a24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a28:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005a2a:	4b4f      	ldr	r3, [pc, #316]	; (8005b68 <LCD_Init+0x3c18>)
 8005a2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a30:	611a      	str	r2, [r3, #16]
 8005a32:	4b4d      	ldr	r3, [pc, #308]	; (8005b68 <LCD_Init+0x3c18>)
 8005a34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a38:	615a      	str	r2, [r3, #20]
 8005a3a:	4b4c      	ldr	r3, [pc, #304]	; (8005b6c <LCD_Init+0x3c1c>)
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	60da      	str	r2, [r3, #12]
 8005a40:	4b49      	ldr	r3, [pc, #292]	; (8005b68 <LCD_Init+0x3c18>)
 8005a42:	2280      	movs	r2, #128	; 0x80
 8005a44:	615a      	str	r2, [r3, #20]
 8005a46:	4b48      	ldr	r3, [pc, #288]	; (8005b68 <LCD_Init+0x3c18>)
 8005a48:	2280      	movs	r2, #128	; 0x80
 8005a4a:	611a      	str	r2, [r3, #16]
 8005a4c:	4b46      	ldr	r3, [pc, #280]	; (8005b68 <LCD_Init+0x3c18>)
 8005a4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a52:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xB6);		//Set vertical period
 8005a54:	20b6      	movs	r0, #182	; 0xb6
 8005a56:	f7fa ff83 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATA((SSD_VT-1)>>8);
 8005a5a:	4b43      	ldr	r3, [pc, #268]	; (8005b68 <LCD_Init+0x3c18>)
 8005a5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a60:	611a      	str	r2, [r3, #16]
 8005a62:	4b41      	ldr	r3, [pc, #260]	; (8005b68 <LCD_Init+0x3c18>)
 8005a64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a68:	615a      	str	r2, [r3, #20]
 8005a6a:	4b40      	ldr	r3, [pc, #256]	; (8005b6c <LCD_Init+0x3c1c>)
 8005a6c:	2202      	movs	r2, #2
 8005a6e:	60da      	str	r2, [r3, #12]
 8005a70:	4b3d      	ldr	r3, [pc, #244]	; (8005b68 <LCD_Init+0x3c18>)
 8005a72:	2280      	movs	r2, #128	; 0x80
 8005a74:	615a      	str	r2, [r3, #20]
 8005a76:	4b3c      	ldr	r3, [pc, #240]	; (8005b68 <LCD_Init+0x3c18>)
 8005a78:	2280      	movs	r2, #128	; 0x80
 8005a7a:	611a      	str	r2, [r3, #16]
 8005a7c:	4b3a      	ldr	r3, [pc, #232]	; (8005b68 <LCD_Init+0x3c18>)
 8005a7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a82:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VT-1);
 8005a84:	4b38      	ldr	r3, [pc, #224]	; (8005b68 <LCD_Init+0x3c18>)
 8005a86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a8a:	611a      	str	r2, [r3, #16]
 8005a8c:	4b36      	ldr	r3, [pc, #216]	; (8005b68 <LCD_Init+0x3c18>)
 8005a8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a92:	615a      	str	r2, [r3, #20]
 8005a94:	4b35      	ldr	r3, [pc, #212]	; (8005b6c <LCD_Init+0x3c1c>)
 8005a96:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8005a9a:	60da      	str	r2, [r3, #12]
 8005a9c:	4b32      	ldr	r3, [pc, #200]	; (8005b68 <LCD_Init+0x3c18>)
 8005a9e:	2280      	movs	r2, #128	; 0x80
 8005aa0:	615a      	str	r2, [r3, #20]
 8005aa2:	4b31      	ldr	r3, [pc, #196]	; (8005b68 <LCD_Init+0x3c18>)
 8005aa4:	2280      	movs	r2, #128	; 0x80
 8005aa6:	611a      	str	r2, [r3, #16]
 8005aa8:	4b2f      	ldr	r3, [pc, #188]	; (8005b68 <LCD_Init+0x3c18>)
 8005aaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005aae:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS>>8);
 8005ab0:	4b2d      	ldr	r3, [pc, #180]	; (8005b68 <LCD_Init+0x3c18>)
 8005ab2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ab6:	611a      	str	r2, [r3, #16]
 8005ab8:	4b2b      	ldr	r3, [pc, #172]	; (8005b68 <LCD_Init+0x3c18>)
 8005aba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005abe:	615a      	str	r2, [r3, #20]
 8005ac0:	4b2a      	ldr	r3, [pc, #168]	; (8005b6c <LCD_Init+0x3c1c>)
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	60da      	str	r2, [r3, #12]
 8005ac6:	4b28      	ldr	r3, [pc, #160]	; (8005b68 <LCD_Init+0x3c18>)
 8005ac8:	2280      	movs	r2, #128	; 0x80
 8005aca:	615a      	str	r2, [r3, #20]
 8005acc:	4b26      	ldr	r3, [pc, #152]	; (8005b68 <LCD_Init+0x3c18>)
 8005ace:	2280      	movs	r2, #128	; 0x80
 8005ad0:	611a      	str	r2, [r3, #16]
 8005ad2:	4b25      	ldr	r3, [pc, #148]	; (8005b68 <LCD_Init+0x3c18>)
 8005ad4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ad8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS);
 8005ada:	4b23      	ldr	r3, [pc, #140]	; (8005b68 <LCD_Init+0x3c18>)
 8005adc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ae0:	611a      	str	r2, [r3, #16]
 8005ae2:	4b21      	ldr	r3, [pc, #132]	; (8005b68 <LCD_Init+0x3c18>)
 8005ae4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ae8:	615a      	str	r2, [r3, #20]
 8005aea:	4b20      	ldr	r3, [pc, #128]	; (8005b6c <LCD_Init+0x3c1c>)
 8005aec:	2217      	movs	r2, #23
 8005aee:	60da      	str	r2, [r3, #12]
 8005af0:	4b1d      	ldr	r3, [pc, #116]	; (8005b68 <LCD_Init+0x3c18>)
 8005af2:	2280      	movs	r2, #128	; 0x80
 8005af4:	615a      	str	r2, [r3, #20]
 8005af6:	4b1c      	ldr	r3, [pc, #112]	; (8005b68 <LCD_Init+0x3c18>)
 8005af8:	2280      	movs	r2, #128	; 0x80
 8005afa:	611a      	str	r2, [r3, #16]
 8005afc:	4b1a      	ldr	r3, [pc, #104]	; (8005b68 <LCD_Init+0x3c18>)
 8005afe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b02:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_FRONT_PORCH-1);
 8005b04:	4b18      	ldr	r3, [pc, #96]	; (8005b68 <LCD_Init+0x3c18>)
 8005b06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b0a:	611a      	str	r2, [r3, #16]
 8005b0c:	4b16      	ldr	r3, [pc, #88]	; (8005b68 <LCD_Init+0x3c18>)
 8005b0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b12:	615a      	str	r2, [r3, #20]
 8005b14:	4b15      	ldr	r3, [pc, #84]	; (8005b6c <LCD_Init+0x3c1c>)
 8005b16:	2215      	movs	r2, #21
 8005b18:	60da      	str	r2, [r3, #12]
 8005b1a:	4b13      	ldr	r3, [pc, #76]	; (8005b68 <LCD_Init+0x3c18>)
 8005b1c:	2280      	movs	r2, #128	; 0x80
 8005b1e:	615a      	str	r2, [r3, #20]
 8005b20:	4b11      	ldr	r3, [pc, #68]	; (8005b68 <LCD_Init+0x3c18>)
 8005b22:	2280      	movs	r2, #128	; 0x80
 8005b24:	611a      	str	r2, [r3, #16]
 8005b26:	4b10      	ldr	r3, [pc, #64]	; (8005b68 <LCD_Init+0x3c18>)
 8005b28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b2c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005b2e:	4b0e      	ldr	r3, [pc, #56]	; (8005b68 <LCD_Init+0x3c18>)
 8005b30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b34:	611a      	str	r2, [r3, #16]
 8005b36:	4b0c      	ldr	r3, [pc, #48]	; (8005b68 <LCD_Init+0x3c18>)
 8005b38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b3c:	615a      	str	r2, [r3, #20]
 8005b3e:	4b0b      	ldr	r3, [pc, #44]	; (8005b6c <LCD_Init+0x3c1c>)
 8005b40:	2200      	movs	r2, #0
 8005b42:	60da      	str	r2, [r3, #12]
 8005b44:	4b08      	ldr	r3, [pc, #32]	; (8005b68 <LCD_Init+0x3c18>)
 8005b46:	2280      	movs	r2, #128	; 0x80
 8005b48:	615a      	str	r2, [r3, #20]
 8005b4a:	4b07      	ldr	r3, [pc, #28]	; (8005b68 <LCD_Init+0x3c18>)
 8005b4c:	2280      	movs	r2, #128	; 0x80
 8005b4e:	611a      	str	r2, [r3, #16]
 8005b50:	4b05      	ldr	r3, [pc, #20]	; (8005b68 <LCD_Init+0x3c18>)
 8005b52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b56:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005b58:	4b03      	ldr	r3, [pc, #12]	; (8005b68 <LCD_Init+0x3c18>)
 8005b5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b5e:	611a      	str	r2, [r3, #16]
 8005b60:	4b01      	ldr	r3, [pc, #4]	; (8005b68 <LCD_Init+0x3c18>)
 8005b62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b66:	e003      	b.n	8005b70 <LCD_Init+0x3c20>
 8005b68:	40011000 	.word	0x40011000
 8005b6c:	40010c00 	.word	0x40010c00
 8005b70:	615a      	str	r2, [r3, #20]
 8005b72:	4b8b      	ldr	r3, [pc, #556]	; (8005da0 <LCD_Init+0x3e50>)
 8005b74:	2200      	movs	r2, #0
 8005b76:	60da      	str	r2, [r3, #12]
 8005b78:	4b8a      	ldr	r3, [pc, #552]	; (8005da4 <LCD_Init+0x3e54>)
 8005b7a:	2280      	movs	r2, #128	; 0x80
 8005b7c:	615a      	str	r2, [r3, #20]
 8005b7e:	4b89      	ldr	r3, [pc, #548]	; (8005da4 <LCD_Init+0x3e54>)
 8005b80:	2280      	movs	r2, #128	; 0x80
 8005b82:	611a      	str	r2, [r3, #16]
 8005b84:	4b87      	ldr	r3, [pc, #540]	; (8005da4 <LCD_Init+0x3e54>)
 8005b86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b8a:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xF0);	//设置SSD1963与CPU接口为16bit  
 8005b8c:	20f0      	movs	r0, #240	; 0xf0
 8005b8e:	f7fa fee7 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//16-bit(565 format) data for 16bpp 
 8005b92:	4b84      	ldr	r3, [pc, #528]	; (8005da4 <LCD_Init+0x3e54>)
 8005b94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b98:	611a      	str	r2, [r3, #16]
 8005b9a:	4b82      	ldr	r3, [pc, #520]	; (8005da4 <LCD_Init+0x3e54>)
 8005b9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ba0:	615a      	str	r2, [r3, #20]
 8005ba2:	4b7f      	ldr	r3, [pc, #508]	; (8005da0 <LCD_Init+0x3e50>)
 8005ba4:	2203      	movs	r2, #3
 8005ba6:	60da      	str	r2, [r3, #12]
 8005ba8:	4b7e      	ldr	r3, [pc, #504]	; (8005da4 <LCD_Init+0x3e54>)
 8005baa:	2280      	movs	r2, #128	; 0x80
 8005bac:	615a      	str	r2, [r3, #20]
 8005bae:	4b7d      	ldr	r3, [pc, #500]	; (8005da4 <LCD_Init+0x3e54>)
 8005bb0:	2280      	movs	r2, #128	; 0x80
 8005bb2:	611a      	str	r2, [r3, #16]
 8005bb4:	4b7b      	ldr	r3, [pc, #492]	; (8005da4 <LCD_Init+0x3e54>)
 8005bb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bba:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0x29);	//开启显示
 8005bbc:	2029      	movs	r0, #41	; 0x29
 8005bbe:	f7fa fecf 	bl	8000960 <LCD_WR_REG>
		//设置PWM输出  背光通过占空比可调 
		LCD_WR_REG(0xD0);	//设置自动白平衡DBC
 8005bc2:	20d0      	movs	r0, #208	; 0xd0
 8005bc4:	f7fa fecc 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATA(0x00);	//disable
 8005bc8:	4b76      	ldr	r3, [pc, #472]	; (8005da4 <LCD_Init+0x3e54>)
 8005bca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bce:	611a      	str	r2, [r3, #16]
 8005bd0:	4b74      	ldr	r3, [pc, #464]	; (8005da4 <LCD_Init+0x3e54>)
 8005bd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bd6:	615a      	str	r2, [r3, #20]
 8005bd8:	4b71      	ldr	r3, [pc, #452]	; (8005da0 <LCD_Init+0x3e50>)
 8005bda:	2200      	movs	r2, #0
 8005bdc:	60da      	str	r2, [r3, #12]
 8005bde:	4b71      	ldr	r3, [pc, #452]	; (8005da4 <LCD_Init+0x3e54>)
 8005be0:	2280      	movs	r2, #128	; 0x80
 8005be2:	615a      	str	r2, [r3, #20]
 8005be4:	4b6f      	ldr	r3, [pc, #444]	; (8005da4 <LCD_Init+0x3e54>)
 8005be6:	2280      	movs	r2, #128	; 0x80
 8005be8:	611a      	str	r2, [r3, #16]
 8005bea:	4b6e      	ldr	r3, [pc, #440]	; (8005da4 <LCD_Init+0x3e54>)
 8005bec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bf0:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xBE);	//配置PWM输出
 8005bf2:	20be      	movs	r0, #190	; 0xbe
 8005bf4:	f7fa feb4 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATA(0x05);	//1设置PWM频率
 8005bf8:	4b6a      	ldr	r3, [pc, #424]	; (8005da4 <LCD_Init+0x3e54>)
 8005bfa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bfe:	611a      	str	r2, [r3, #16]
 8005c00:	4b68      	ldr	r3, [pc, #416]	; (8005da4 <LCD_Init+0x3e54>)
 8005c02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c06:	615a      	str	r2, [r3, #20]
 8005c08:	4b65      	ldr	r3, [pc, #404]	; (8005da0 <LCD_Init+0x3e50>)
 8005c0a:	2205      	movs	r2, #5
 8005c0c:	60da      	str	r2, [r3, #12]
 8005c0e:	4b65      	ldr	r3, [pc, #404]	; (8005da4 <LCD_Init+0x3e54>)
 8005c10:	2280      	movs	r2, #128	; 0x80
 8005c12:	615a      	str	r2, [r3, #20]
 8005c14:	4b63      	ldr	r3, [pc, #396]	; (8005da4 <LCD_Init+0x3e54>)
 8005c16:	2280      	movs	r2, #128	; 0x80
 8005c18:	611a      	str	r2, [r3, #16]
 8005c1a:	4b62      	ldr	r3, [pc, #392]	; (8005da4 <LCD_Init+0x3e54>)
 8005c1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c20:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFE);	//2设置PWM占空比
 8005c22:	4b60      	ldr	r3, [pc, #384]	; (8005da4 <LCD_Init+0x3e54>)
 8005c24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c28:	611a      	str	r2, [r3, #16]
 8005c2a:	4b5e      	ldr	r3, [pc, #376]	; (8005da4 <LCD_Init+0x3e54>)
 8005c2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c30:	615a      	str	r2, [r3, #20]
 8005c32:	4b5b      	ldr	r3, [pc, #364]	; (8005da0 <LCD_Init+0x3e50>)
 8005c34:	22fe      	movs	r2, #254	; 0xfe
 8005c36:	60da      	str	r2, [r3, #12]
 8005c38:	4b5a      	ldr	r3, [pc, #360]	; (8005da4 <LCD_Init+0x3e54>)
 8005c3a:	2280      	movs	r2, #128	; 0x80
 8005c3c:	615a      	str	r2, [r3, #20]
 8005c3e:	4b59      	ldr	r3, [pc, #356]	; (8005da4 <LCD_Init+0x3e54>)
 8005c40:	2280      	movs	r2, #128	; 0x80
 8005c42:	611a      	str	r2, [r3, #16]
 8005c44:	4b57      	ldr	r3, [pc, #348]	; (8005da4 <LCD_Init+0x3e54>)
 8005c46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c4a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//3设置C
 8005c4c:	4b55      	ldr	r3, [pc, #340]	; (8005da4 <LCD_Init+0x3e54>)
 8005c4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c52:	611a      	str	r2, [r3, #16]
 8005c54:	4b53      	ldr	r3, [pc, #332]	; (8005da4 <LCD_Init+0x3e54>)
 8005c56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c5a:	615a      	str	r2, [r3, #20]
 8005c5c:	4b50      	ldr	r3, [pc, #320]	; (8005da0 <LCD_Init+0x3e50>)
 8005c5e:	2201      	movs	r2, #1
 8005c60:	60da      	str	r2, [r3, #12]
 8005c62:	4b50      	ldr	r3, [pc, #320]	; (8005da4 <LCD_Init+0x3e54>)
 8005c64:	2280      	movs	r2, #128	; 0x80
 8005c66:	615a      	str	r2, [r3, #20]
 8005c68:	4b4e      	ldr	r3, [pc, #312]	; (8005da4 <LCD_Init+0x3e54>)
 8005c6a:	2280      	movs	r2, #128	; 0x80
 8005c6c:	611a      	str	r2, [r3, #16]
 8005c6e:	4b4d      	ldr	r3, [pc, #308]	; (8005da4 <LCD_Init+0x3e54>)
 8005c70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c74:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//4设置D
 8005c76:	4b4b      	ldr	r3, [pc, #300]	; (8005da4 <LCD_Init+0x3e54>)
 8005c78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c7c:	611a      	str	r2, [r3, #16]
 8005c7e:	4b49      	ldr	r3, [pc, #292]	; (8005da4 <LCD_Init+0x3e54>)
 8005c80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c84:	615a      	str	r2, [r3, #20]
 8005c86:	4b46      	ldr	r3, [pc, #280]	; (8005da0 <LCD_Init+0x3e50>)
 8005c88:	2200      	movs	r2, #0
 8005c8a:	60da      	str	r2, [r3, #12]
 8005c8c:	4b45      	ldr	r3, [pc, #276]	; (8005da4 <LCD_Init+0x3e54>)
 8005c8e:	2280      	movs	r2, #128	; 0x80
 8005c90:	615a      	str	r2, [r3, #20]
 8005c92:	4b44      	ldr	r3, [pc, #272]	; (8005da4 <LCD_Init+0x3e54>)
 8005c94:	2280      	movs	r2, #128	; 0x80
 8005c96:	611a      	str	r2, [r3, #16]
 8005c98:	4b42      	ldr	r3, [pc, #264]	; (8005da4 <LCD_Init+0x3e54>)
 8005c9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c9e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//5设置E 
 8005ca0:	4b40      	ldr	r3, [pc, #256]	; (8005da4 <LCD_Init+0x3e54>)
 8005ca2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ca6:	611a      	str	r2, [r3, #16]
 8005ca8:	4b3e      	ldr	r3, [pc, #248]	; (8005da4 <LCD_Init+0x3e54>)
 8005caa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cae:	615a      	str	r2, [r3, #20]
 8005cb0:	4b3b      	ldr	r3, [pc, #236]	; (8005da0 <LCD_Init+0x3e50>)
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	60da      	str	r2, [r3, #12]
 8005cb6:	4b3b      	ldr	r3, [pc, #236]	; (8005da4 <LCD_Init+0x3e54>)
 8005cb8:	2280      	movs	r2, #128	; 0x80
 8005cba:	615a      	str	r2, [r3, #20]
 8005cbc:	4b39      	ldr	r3, [pc, #228]	; (8005da4 <LCD_Init+0x3e54>)
 8005cbe:	2280      	movs	r2, #128	; 0x80
 8005cc0:	611a      	str	r2, [r3, #16]
 8005cc2:	4b38      	ldr	r3, [pc, #224]	; (8005da4 <LCD_Init+0x3e54>)
 8005cc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cc8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//6设置F 
 8005cca:	4b36      	ldr	r3, [pc, #216]	; (8005da4 <LCD_Init+0x3e54>)
 8005ccc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005cd0:	611a      	str	r2, [r3, #16]
 8005cd2:	4b34      	ldr	r3, [pc, #208]	; (8005da4 <LCD_Init+0x3e54>)
 8005cd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cd8:	615a      	str	r2, [r3, #20]
 8005cda:	4b31      	ldr	r3, [pc, #196]	; (8005da0 <LCD_Init+0x3e50>)
 8005cdc:	2200      	movs	r2, #0
 8005cde:	60da      	str	r2, [r3, #12]
 8005ce0:	4b30      	ldr	r3, [pc, #192]	; (8005da4 <LCD_Init+0x3e54>)
 8005ce2:	2280      	movs	r2, #128	; 0x80
 8005ce4:	615a      	str	r2, [r3, #20]
 8005ce6:	4b2f      	ldr	r3, [pc, #188]	; (8005da4 <LCD_Init+0x3e54>)
 8005ce8:	2280      	movs	r2, #128	; 0x80
 8005cea:	611a      	str	r2, [r3, #16]
 8005cec:	4b2d      	ldr	r3, [pc, #180]	; (8005da4 <LCD_Init+0x3e54>)
 8005cee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cf2:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB8);	//设置GPIO配置
 8005cf4:	20b8      	movs	r0, #184	; 0xb8
 8005cf6:	f7fa fe33 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//2个IO口设置成输出
 8005cfa:	4b2a      	ldr	r3, [pc, #168]	; (8005da4 <LCD_Init+0x3e54>)
 8005cfc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d00:	611a      	str	r2, [r3, #16]
 8005d02:	4b28      	ldr	r3, [pc, #160]	; (8005da4 <LCD_Init+0x3e54>)
 8005d04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d08:	615a      	str	r2, [r3, #20]
 8005d0a:	4b25      	ldr	r3, [pc, #148]	; (8005da0 <LCD_Init+0x3e50>)
 8005d0c:	2203      	movs	r2, #3
 8005d0e:	60da      	str	r2, [r3, #12]
 8005d10:	4b24      	ldr	r3, [pc, #144]	; (8005da4 <LCD_Init+0x3e54>)
 8005d12:	2280      	movs	r2, #128	; 0x80
 8005d14:	615a      	str	r2, [r3, #20]
 8005d16:	4b23      	ldr	r3, [pc, #140]	; (8005da4 <LCD_Init+0x3e54>)
 8005d18:	2280      	movs	r2, #128	; 0x80
 8005d1a:	611a      	str	r2, [r3, #16]
 8005d1c:	4b21      	ldr	r3, [pc, #132]	; (8005da4 <LCD_Init+0x3e54>)
 8005d1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d22:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//GPIO使用正常的IO功能 
 8005d24:	4b1f      	ldr	r3, [pc, #124]	; (8005da4 <LCD_Init+0x3e54>)
 8005d26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d2a:	611a      	str	r2, [r3, #16]
 8005d2c:	4b1d      	ldr	r3, [pc, #116]	; (8005da4 <LCD_Init+0x3e54>)
 8005d2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d32:	615a      	str	r2, [r3, #20]
 8005d34:	4b1a      	ldr	r3, [pc, #104]	; (8005da0 <LCD_Init+0x3e50>)
 8005d36:	2201      	movs	r2, #1
 8005d38:	60da      	str	r2, [r3, #12]
 8005d3a:	4b1a      	ldr	r3, [pc, #104]	; (8005da4 <LCD_Init+0x3e54>)
 8005d3c:	2280      	movs	r2, #128	; 0x80
 8005d3e:	615a      	str	r2, [r3, #20]
 8005d40:	4b18      	ldr	r3, [pc, #96]	; (8005da4 <LCD_Init+0x3e54>)
 8005d42:	2280      	movs	r2, #128	; 0x80
 8005d44:	611a      	str	r2, [r3, #16]
 8005d46:	4b17      	ldr	r3, [pc, #92]	; (8005da4 <LCD_Init+0x3e54>)
 8005d48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d4c:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xBA);
 8005d4e:	20ba      	movs	r0, #186	; 0xba
 8005d50:	f7fa fe06 	bl	8000960 <LCD_WR_REG>
		LCD_WR_DATA(0X01);	//GPIO[1:0]=01,控制LCD方向
 8005d54:	4b13      	ldr	r3, [pc, #76]	; (8005da4 <LCD_Init+0x3e54>)
 8005d56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d5a:	611a      	str	r2, [r3, #16]
 8005d5c:	4b11      	ldr	r3, [pc, #68]	; (8005da4 <LCD_Init+0x3e54>)
 8005d5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d62:	615a      	str	r2, [r3, #20]
 8005d64:	4b0e      	ldr	r3, [pc, #56]	; (8005da0 <LCD_Init+0x3e50>)
 8005d66:	2201      	movs	r2, #1
 8005d68:	60da      	str	r2, [r3, #12]
 8005d6a:	4b0e      	ldr	r3, [pc, #56]	; (8005da4 <LCD_Init+0x3e54>)
 8005d6c:	2280      	movs	r2, #128	; 0x80
 8005d6e:	615a      	str	r2, [r3, #20]
 8005d70:	4b0c      	ldr	r3, [pc, #48]	; (8005da4 <LCD_Init+0x3e54>)
 8005d72:	2280      	movs	r2, #128	; 0x80
 8005d74:	611a      	str	r2, [r3, #16]
 8005d76:	4b0b      	ldr	r3, [pc, #44]	; (8005da4 <LCD_Init+0x3e54>)
 8005d78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d7c:	611a      	str	r2, [r3, #16]

		LCD_SSD_BackLightSet(100);	//背光设置为最亮
 8005d7e:	2064      	movs	r0, #100	; 0x64
 8005d80:	f7fb ff36 	bl	8001bf0 <LCD_SSD_BackLightSet>
	}
	LCD_Display_Dir(0);		 	//默认为竖屏
 8005d84:	2000      	movs	r0, #0
 8005d86:	f7fb ffd7 	bl	8001d38 <LCD_Display_Dir>
	LCD_LED = 1;					//点亮背光
 8005d8a:	4b07      	ldr	r3, [pc, #28]	; (8005da8 <LCD_Init+0x3e58>)
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	601a      	str	r2, [r3, #0]
	LCD_Clear(WHITE);
 8005d90:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005d94:	f000 f80a 	bl	8005dac <LCD_Clear>
}
 8005d98:	bf00      	nop
 8005d9a:	3718      	adds	r7, #24
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}
 8005da0:	40010c00 	.word	0x40010c00
 8005da4:	40011000 	.word	0x40011000
 8005da8:	422201a8 	.word	0x422201a8

08005dac <LCD_Clear>:

// Clear the screen with specific color
void LCD_Clear(uint16_t color) {
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	4603      	mov	r3, r0
 8005db4:	80fb      	strh	r3, [r7, #6]
	uint32_t index = 0;
 8005db6:	2300      	movs	r3, #0
 8005db8:	60fb      	str	r3, [r7, #12]
	uint32_t totalpoint = lcddev.width;
 8005dba:	4b2a      	ldr	r3, [pc, #168]	; (8005e64 <LCD_Clear+0xb8>)
 8005dbc:	881b      	ldrh	r3, [r3, #0]
 8005dbe:	60bb      	str	r3, [r7, #8]
	totalpoint *= lcddev.height; 			//得到总点数
 8005dc0:	4b28      	ldr	r3, [pc, #160]	; (8005e64 <LCD_Clear+0xb8>)
 8005dc2:	885b      	ldrh	r3, [r3, #2]
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	fb02 f303 	mul.w	r3, r2, r3
 8005dcc:	60bb      	str	r3, [r7, #8]
	if ((lcddev.id == 0X6804) && (lcddev.dir == 1)) 			//6804横屏的时候特殊处理
 8005dce:	4b25      	ldr	r3, [pc, #148]	; (8005e64 <LCD_Clear+0xb8>)
 8005dd0:	889b      	ldrh	r3, [r3, #4]
 8005dd2:	f646 0204 	movw	r2, #26628	; 0x6804
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d11a      	bne.n	8005e10 <LCD_Clear+0x64>
 8005dda:	4b22      	ldr	r3, [pc, #136]	; (8005e64 <LCD_Clear+0xb8>)
 8005ddc:	799b      	ldrb	r3, [r3, #6]
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d116      	bne.n	8005e10 <LCD_Clear+0x64>
			{
		lcddev.dir = 0;
 8005de2:	4b20      	ldr	r3, [pc, #128]	; (8005e64 <LCD_Clear+0xb8>)
 8005de4:	2200      	movs	r2, #0
 8005de6:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2A;
 8005de8:	4b1e      	ldr	r3, [pc, #120]	; (8005e64 <LCD_Clear+0xb8>)
 8005dea:	222a      	movs	r2, #42	; 0x2a
 8005dec:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2B;
 8005dee:	4b1d      	ldr	r3, [pc, #116]	; (8005e64 <LCD_Clear+0xb8>)
 8005df0:	222b      	movs	r2, #43	; 0x2b
 8005df2:	819a      	strh	r2, [r3, #12]
		LCD_SetCursor(0x00, 0x0000);		//设置光标位置
 8005df4:	2100      	movs	r1, #0
 8005df6:	2000      	movs	r0, #0
 8005df8:	f7fa fe84 	bl	8000b04 <LCD_SetCursor>
		lcddev.dir = 1;
 8005dfc:	4b19      	ldr	r3, [pc, #100]	; (8005e64 <LCD_Clear+0xb8>)
 8005dfe:	2201      	movs	r2, #1
 8005e00:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2B;
 8005e02:	4b18      	ldr	r3, [pc, #96]	; (8005e64 <LCD_Clear+0xb8>)
 8005e04:	222b      	movs	r2, #43	; 0x2b
 8005e06:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2A;
 8005e08:	4b16      	ldr	r3, [pc, #88]	; (8005e64 <LCD_Clear+0xb8>)
 8005e0a:	222a      	movs	r2, #42	; 0x2a
 8005e0c:	819a      	strh	r2, [r3, #12]
 8005e0e:	e003      	b.n	8005e18 <LCD_Clear+0x6c>
	} else
		LCD_SetCursor(0x00, 0x0000);	//设置光标位置
 8005e10:	2100      	movs	r1, #0
 8005e12:	2000      	movs	r0, #0
 8005e14:	f7fa fe76 	bl	8000b04 <LCD_SetCursor>
	LCD_WriteRAM_Prepare();     		//开始写入GRAM	  	  
 8005e18:	f7fa fe68 	bl	8000aec <LCD_WriteRAM_Prepare>
	for (index = 0; index < totalpoint; index++)
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	60fb      	str	r3, [r7, #12]
 8005e20:	e017      	b.n	8005e52 <LCD_Clear+0xa6>
		LCD_WR_DATA(color);
 8005e22:	4b11      	ldr	r3, [pc, #68]	; (8005e68 <LCD_Clear+0xbc>)
 8005e24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e28:	611a      	str	r2, [r3, #16]
 8005e2a:	4b0f      	ldr	r3, [pc, #60]	; (8005e68 <LCD_Clear+0xbc>)
 8005e2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e30:	615a      	str	r2, [r3, #20]
 8005e32:	4a0e      	ldr	r2, [pc, #56]	; (8005e6c <LCD_Clear+0xc0>)
 8005e34:	88fb      	ldrh	r3, [r7, #6]
 8005e36:	60d3      	str	r3, [r2, #12]
 8005e38:	4b0b      	ldr	r3, [pc, #44]	; (8005e68 <LCD_Clear+0xbc>)
 8005e3a:	2280      	movs	r2, #128	; 0x80
 8005e3c:	615a      	str	r2, [r3, #20]
 8005e3e:	4b0a      	ldr	r3, [pc, #40]	; (8005e68 <LCD_Clear+0xbc>)
 8005e40:	2280      	movs	r2, #128	; 0x80
 8005e42:	611a      	str	r2, [r3, #16]
 8005e44:	4b08      	ldr	r3, [pc, #32]	; (8005e68 <LCD_Clear+0xbc>)
 8005e46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e4a:	611a      	str	r2, [r3, #16]
	for (index = 0; index < totalpoint; index++)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	3301      	adds	r3, #1
 8005e50:	60fb      	str	r3, [r7, #12]
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d3e3      	bcc.n	8005e22 <LCD_Clear+0x76>
}
 8005e5a:	bf00      	nop
 8005e5c:	bf00      	nop
 8005e5e:	3710      	adds	r7, #16
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	200000e8 	.word	0x200000e8
 8005e68:	40011000 	.word	0x40011000
 8005e6c:	40010c00 	.word	0x40010c00

08005e70 <LCD_ShowChar>:
// num: char to be displayed
// size: font size 12/16/24
// mode: display characters on the displayed content and do not wipe away the displayed content(1)
//       display characters on the displayed content and wipe away the displayed content(0)
void LCD_ShowChar(uint16_t x, uint16_t y, uint8_t num, uint8_t size,
		uint8_t mode) {
 8005e70:	b590      	push	{r4, r7, lr}
 8005e72:	b085      	sub	sp, #20
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	4604      	mov	r4, r0
 8005e78:	4608      	mov	r0, r1
 8005e7a:	4611      	mov	r1, r2
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	4623      	mov	r3, r4
 8005e80:	80fb      	strh	r3, [r7, #6]
 8005e82:	4603      	mov	r3, r0
 8005e84:	80bb      	strh	r3, [r7, #4]
 8005e86:	460b      	mov	r3, r1
 8005e88:	70fb      	strb	r3, [r7, #3]
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	70bb      	strb	r3, [r7, #2]
	uint8_t temp, t1, t;
	uint16_t y0 = y;
 8005e8e:	88bb      	ldrh	r3, [r7, #4]
 8005e90:	817b      	strh	r3, [r7, #10]
	uint8_t csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2);	//得到字体一个字符对应点阵集所占的字节数
 8005e92:	78bb      	ldrb	r3, [r7, #2]
 8005e94:	08db      	lsrs	r3, r3, #3
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	461a      	mov	r2, r3
 8005e9a:	78bb      	ldrb	r3, [r7, #2]
 8005e9c:	f003 0307 	and.w	r3, r3, #7
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	bf14      	ite	ne
 8005ea6:	2301      	movne	r3, #1
 8005ea8:	2300      	moveq	r3, #0
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	4413      	add	r3, r2
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	78ba      	ldrb	r2, [r7, #2]
 8005eb2:	0852      	lsrs	r2, r2, #1
 8005eb4:	b2d2      	uxtb	r2, r2
 8005eb6:	fb02 f303 	mul.w	r3, r2, r3
 8005eba:	727b      	strb	r3, [r7, #9]
	num = num - ' ';		//得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库）
 8005ebc:	78fb      	ldrb	r3, [r7, #3]
 8005ebe:	3b20      	subs	r3, #32
 8005ec0:	70fb      	strb	r3, [r7, #3]
	for (t = 0; t < csize; t++) {
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	737b      	strb	r3, [r7, #13]
 8005ec6:	e069      	b.n	8005f9c <LCD_ShowChar+0x12c>
		if (size == 12)
 8005ec8:	78bb      	ldrb	r3, [r7, #2]
 8005eca:	2b0c      	cmp	r3, #12
 8005ecc:	d10b      	bne.n	8005ee6 <LCD_ShowChar+0x76>
			temp = asc2_1206[num][t]; 	 	//调用1206字体
 8005ece:	78fa      	ldrb	r2, [r7, #3]
 8005ed0:	7b79      	ldrb	r1, [r7, #13]
 8005ed2:	4838      	ldr	r0, [pc, #224]	; (8005fb4 <LCD_ShowChar+0x144>)
 8005ed4:	4613      	mov	r3, r2
 8005ed6:	005b      	lsls	r3, r3, #1
 8005ed8:	4413      	add	r3, r2
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	4403      	add	r3, r0
 8005ede:	440b      	add	r3, r1
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	73fb      	strb	r3, [r7, #15]
 8005ee4:	e019      	b.n	8005f1a <LCD_ShowChar+0xaa>
		else if (size == 16)
 8005ee6:	78bb      	ldrb	r3, [r7, #2]
 8005ee8:	2b10      	cmp	r3, #16
 8005eea:	d108      	bne.n	8005efe <LCD_ShowChar+0x8e>
			temp = asc2_1608[num][t];	//调用1608字体
 8005eec:	78fa      	ldrb	r2, [r7, #3]
 8005eee:	7b7b      	ldrb	r3, [r7, #13]
 8005ef0:	4931      	ldr	r1, [pc, #196]	; (8005fb8 <LCD_ShowChar+0x148>)
 8005ef2:	0112      	lsls	r2, r2, #4
 8005ef4:	440a      	add	r2, r1
 8005ef6:	4413      	add	r3, r2
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	73fb      	strb	r3, [r7, #15]
 8005efc:	e00d      	b.n	8005f1a <LCD_ShowChar+0xaa>
		else if (size == 24)
 8005efe:	78bb      	ldrb	r3, [r7, #2]
 8005f00:	2b18      	cmp	r3, #24
 8005f02:	d150      	bne.n	8005fa6 <LCD_ShowChar+0x136>
			temp = asc2_2412[num][t];	//调用2412字体
 8005f04:	78fa      	ldrb	r2, [r7, #3]
 8005f06:	7b79      	ldrb	r1, [r7, #13]
 8005f08:	482c      	ldr	r0, [pc, #176]	; (8005fbc <LCD_ShowChar+0x14c>)
 8005f0a:	4613      	mov	r3, r2
 8005f0c:	00db      	lsls	r3, r3, #3
 8005f0e:	4413      	add	r3, r2
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	4403      	add	r3, r0
 8005f14:	440b      	add	r3, r1
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	73fb      	strb	r3, [r7, #15]
		else
			return;								//没有的字库
		for (t1 = 0; t1 < 8; t1++) {
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	73bb      	strb	r3, [r7, #14]
 8005f1e:	e035      	b.n	8005f8c <LCD_ShowChar+0x11c>
			if (temp & 0x80)
 8005f20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	da07      	bge.n	8005f38 <LCD_ShowChar+0xc8>
				LCD_Fast_DrawPoint(x, y, POINT_COLOR);
 8005f28:	4b25      	ldr	r3, [pc, #148]	; (8005fc0 <LCD_ShowChar+0x150>)
 8005f2a:	881a      	ldrh	r2, [r3, #0]
 8005f2c:	88b9      	ldrh	r1, [r7, #4]
 8005f2e:	88fb      	ldrh	r3, [r7, #6]
 8005f30:	4618      	mov	r0, r3
 8005f32:	f7fb fbc5 	bl	80016c0 <LCD_Fast_DrawPoint>
 8005f36:	e00a      	b.n	8005f4e <LCD_ShowChar+0xde>
			else if (mode == 0)
 8005f38:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d106      	bne.n	8005f4e <LCD_ShowChar+0xde>
				LCD_Fast_DrawPoint(x, y, BACK_COLOR);
 8005f40:	4b20      	ldr	r3, [pc, #128]	; (8005fc4 <LCD_ShowChar+0x154>)
 8005f42:	881a      	ldrh	r2, [r3, #0]
 8005f44:	88b9      	ldrh	r1, [r7, #4]
 8005f46:	88fb      	ldrh	r3, [r7, #6]
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f7fb fbb9 	bl	80016c0 <LCD_Fast_DrawPoint>
			temp <<= 1;
 8005f4e:	7bfb      	ldrb	r3, [r7, #15]
 8005f50:	005b      	lsls	r3, r3, #1
 8005f52:	73fb      	strb	r3, [r7, #15]
			y++;
 8005f54:	88bb      	ldrh	r3, [r7, #4]
 8005f56:	3301      	adds	r3, #1
 8005f58:	80bb      	strh	r3, [r7, #4]
			if (y >= lcddev.height)
 8005f5a:	4b1b      	ldr	r3, [pc, #108]	; (8005fc8 <LCD_ShowChar+0x158>)
 8005f5c:	885b      	ldrh	r3, [r3, #2]
 8005f5e:	88ba      	ldrh	r2, [r7, #4]
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d222      	bcs.n	8005faa <LCD_ShowChar+0x13a>
				return;		//超区域了
			if ((y - y0) == size) {
 8005f64:	88ba      	ldrh	r2, [r7, #4]
 8005f66:	897b      	ldrh	r3, [r7, #10]
 8005f68:	1ad2      	subs	r2, r2, r3
 8005f6a:	78bb      	ldrb	r3, [r7, #2]
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d10a      	bne.n	8005f86 <LCD_ShowChar+0x116>
				y = y0;
 8005f70:	897b      	ldrh	r3, [r7, #10]
 8005f72:	80bb      	strh	r3, [r7, #4]
				x++;
 8005f74:	88fb      	ldrh	r3, [r7, #6]
 8005f76:	3301      	adds	r3, #1
 8005f78:	80fb      	strh	r3, [r7, #6]
				if (x >= lcddev.width)
 8005f7a:	4b13      	ldr	r3, [pc, #76]	; (8005fc8 <LCD_ShowChar+0x158>)
 8005f7c:	881b      	ldrh	r3, [r3, #0]
 8005f7e:	88fa      	ldrh	r2, [r7, #6]
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d307      	bcc.n	8005f94 <LCD_ShowChar+0x124>
					return;	//超区域了
 8005f84:	e012      	b.n	8005fac <LCD_ShowChar+0x13c>
		for (t1 = 0; t1 < 8; t1++) {
 8005f86:	7bbb      	ldrb	r3, [r7, #14]
 8005f88:	3301      	adds	r3, #1
 8005f8a:	73bb      	strb	r3, [r7, #14]
 8005f8c:	7bbb      	ldrb	r3, [r7, #14]
 8005f8e:	2b07      	cmp	r3, #7
 8005f90:	d9c6      	bls.n	8005f20 <LCD_ShowChar+0xb0>
 8005f92:	e000      	b.n	8005f96 <LCD_ShowChar+0x126>
				break;
 8005f94:	bf00      	nop
	for (t = 0; t < csize; t++) {
 8005f96:	7b7b      	ldrb	r3, [r7, #13]
 8005f98:	3301      	adds	r3, #1
 8005f9a:	737b      	strb	r3, [r7, #13]
 8005f9c:	7b7a      	ldrb	r2, [r7, #13]
 8005f9e:	7a7b      	ldrb	r3, [r7, #9]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d391      	bcc.n	8005ec8 <LCD_ShowChar+0x58>
 8005fa4:	e002      	b.n	8005fac <LCD_ShowChar+0x13c>
			return;								//没有的字库
 8005fa6:	bf00      	nop
 8005fa8:	e000      	b.n	8005fac <LCD_ShowChar+0x13c>
				return;		//超区域了
 8005faa:	bf00      	nop
			}
		}
	}
}
 8005fac:	3714      	adds	r7, #20
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd90      	pop	{r4, r7, pc}
 8005fb2:	bf00      	nop
 8005fb4:	080098f0 	.word	0x080098f0
 8005fb8:	08009d64 	.word	0x08009d64
 8005fbc:	0800a354 	.word	0x0800a354
 8005fc0:	200000b8 	.word	0x200000b8
 8005fc4:	20000000 	.word	0x20000000
 8005fc8:	200000e8 	.word	0x200000e8

08005fcc <LCD_ShowString>:
// x,y: starting coordinate
// width, height: display area size
// size: font size // x,y: starting coordinate
// *p: string
void LCD_ShowString(uint16_t x, uint16_t y, uint16_t width, uint16_t height,
		uint8_t size, uint8_t *p) {
 8005fcc:	b590      	push	{r4, r7, lr}
 8005fce:	b087      	sub	sp, #28
 8005fd0:	af02      	add	r7, sp, #8
 8005fd2:	4604      	mov	r4, r0
 8005fd4:	4608      	mov	r0, r1
 8005fd6:	4611      	mov	r1, r2
 8005fd8:	461a      	mov	r2, r3
 8005fda:	4623      	mov	r3, r4
 8005fdc:	80fb      	strh	r3, [r7, #6]
 8005fde:	4603      	mov	r3, r0
 8005fe0:	80bb      	strh	r3, [r7, #4]
 8005fe2:	460b      	mov	r3, r1
 8005fe4:	807b      	strh	r3, [r7, #2]
 8005fe6:	4613      	mov	r3, r2
 8005fe8:	803b      	strh	r3, [r7, #0]
	uint8_t x0 = x;
 8005fea:	88fb      	ldrh	r3, [r7, #6]
 8005fec:	73fb      	strb	r3, [r7, #15]
	width += x;
 8005fee:	887a      	ldrh	r2, [r7, #2]
 8005ff0:	88fb      	ldrh	r3, [r7, #6]
 8005ff2:	4413      	add	r3, r2
 8005ff4:	807b      	strh	r3, [r7, #2]
	height += y;
 8005ff6:	883a      	ldrh	r2, [r7, #0]
 8005ff8:	88bb      	ldrh	r3, [r7, #4]
 8005ffa:	4413      	add	r3, r2
 8005ffc:	803b      	strh	r3, [r7, #0]
	while ((*p <= '~') && (*p >= ' '))	//判断是不是非法字符!
 8005ffe:	e024      	b.n	800604a <LCD_ShowString+0x7e>
	{
		if (x >= width) {
 8006000:	88fa      	ldrh	r2, [r7, #6]
 8006002:	887b      	ldrh	r3, [r7, #2]
 8006004:	429a      	cmp	r2, r3
 8006006:	d307      	bcc.n	8006018 <LCD_ShowString+0x4c>
			x = x0;
 8006008:	7bfb      	ldrb	r3, [r7, #15]
 800600a:	80fb      	strh	r3, [r7, #6]
			y += size;
 800600c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006010:	b29a      	uxth	r2, r3
 8006012:	88bb      	ldrh	r3, [r7, #4]
 8006014:	4413      	add	r3, r2
 8006016:	80bb      	strh	r3, [r7, #4]
		}
		if (y >= height)
 8006018:	88ba      	ldrh	r2, [r7, #4]
 800601a:	883b      	ldrh	r3, [r7, #0]
 800601c:	429a      	cmp	r2, r3
 800601e:	d21d      	bcs.n	800605c <LCD_ShowString+0x90>
			break;	//退出
		LCD_ShowChar(x, y, *p, size, 0);
 8006020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006022:	781a      	ldrb	r2, [r3, #0]
 8006024:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006028:	88b9      	ldrh	r1, [r7, #4]
 800602a:	88f8      	ldrh	r0, [r7, #6]
 800602c:	2400      	movs	r4, #0
 800602e:	9400      	str	r4, [sp, #0]
 8006030:	f7ff ff1e 	bl	8005e70 <LCD_ShowChar>
		x += size / 2;
 8006034:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006038:	085b      	lsrs	r3, r3, #1
 800603a:	b2db      	uxtb	r3, r3
 800603c:	b29a      	uxth	r2, r3
 800603e:	88fb      	ldrh	r3, [r7, #6]
 8006040:	4413      	add	r3, r2
 8006042:	80fb      	strh	r3, [r7, #6]
		p++;
 8006044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006046:	3301      	adds	r3, #1
 8006048:	627b      	str	r3, [r7, #36]	; 0x24
	while ((*p <= '~') && (*p >= ' '))	//判断是不是非法字符!
 800604a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	2b7e      	cmp	r3, #126	; 0x7e
 8006050:	d805      	bhi.n	800605e <LCD_ShowString+0x92>
 8006052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	2b1f      	cmp	r3, #31
 8006058:	d8d2      	bhi.n	8006000 <LCD_ShowString+0x34>
	}
}
 800605a:	e000      	b.n	800605e <LCD_ShowString+0x92>
			break;	//退出
 800605c:	bf00      	nop
}
 800605e:	bf00      	nop
 8006060:	3714      	adds	r7, #20
 8006062:	46bd      	mov	sp, r7
 8006064:	bd90      	pop	{r4, r7, pc}
	...

08006068 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800606c:	f000 fc4a 	bl	8006904 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006070:	f000 f814 	bl	800609c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  LCD_Init();
 8006074:	f7fb ff6c 	bl	8001f50 <LCD_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006078:	f7fa fbe4 	bl	8000844 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800607c:	f000 fb9e 	bl	80067bc <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8006080:	f000 fb2a 	bl	80066d8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, (uint8_t *)rxBuffer, 1);
 8006084:	2201      	movs	r2, #1
 8006086:	4903      	ldr	r1, [pc, #12]	; (8006094 <main+0x2c>)
 8006088:	4803      	ldr	r0, [pc, #12]	; (8006098 <main+0x30>)
 800608a:	f002 fa42 	bl	8008512 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  Question();
 800608e:	f000 f84b 	bl	8006128 <Question>
  while (1)
 8006092:	e7fe      	b.n	8006092 <main+0x2a>
 8006094:	200001ac 	.word	0x200001ac
 8006098:	20000160 	.word	0x20000160

0800609c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b090      	sub	sp, #64	; 0x40
 80060a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80060a2:	f107 0318 	add.w	r3, r7, #24
 80060a6:	2228      	movs	r2, #40	; 0x28
 80060a8:	2100      	movs	r1, #0
 80060aa:	4618      	mov	r0, r3
 80060ac:	f002 feb8 	bl	8008e20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80060b0:	1d3b      	adds	r3, r7, #4
 80060b2:	2200      	movs	r2, #0
 80060b4:	601a      	str	r2, [r3, #0]
 80060b6:	605a      	str	r2, [r3, #4]
 80060b8:	609a      	str	r2, [r3, #8]
 80060ba:	60da      	str	r2, [r3, #12]
 80060bc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80060be:	2301      	movs	r3, #1
 80060c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80060c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80060c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80060c8:	2300      	movs	r3, #0
 80060ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80060cc:	2301      	movs	r3, #1
 80060ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80060d0:	2302      	movs	r3, #2
 80060d2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80060d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80060d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80060da:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80060de:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80060e0:	f107 0318 	add.w	r3, r7, #24
 80060e4:	4618      	mov	r0, r3
 80060e6:	f001 f8bf 	bl	8007268 <HAL_RCC_OscConfig>
 80060ea:	4603      	mov	r3, r0
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d001      	beq.n	80060f4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80060f0:	f000 fa2c 	bl	800654c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80060f4:	230f      	movs	r3, #15
 80060f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80060f8:	2302      	movs	r3, #2
 80060fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80060fc:	2300      	movs	r3, #0
 80060fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006100:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006104:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006106:	2300      	movs	r3, #0
 8006108:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800610a:	1d3b      	adds	r3, r7, #4
 800610c:	2102      	movs	r1, #2
 800610e:	4618      	mov	r0, r3
 8006110:	f001 fb2a 	bl	8007768 <HAL_RCC_ClockConfig>
 8006114:	4603      	mov	r3, r0
 8006116:	2b00      	cmp	r3, #0
 8006118:	d001      	beq.n	800611e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800611a:	f000 fa17 	bl	800654c <Error_Handler>
  }
}
 800611e:	bf00      	nop
 8006120:	3740      	adds	r7, #64	; 0x40
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
	...

08006128 <Question>:
char *answer;
unsigned char msg[100];


void Question()
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b082      	sub	sp, #8
 800612c:	af02      	add	r7, sp, #8
  state = QuestionState;
 800612e:	4b24      	ldr	r3, [pc, #144]	; (80061c0 <Question+0x98>)
 8006130:	2200      	movs	r2, #0
 8006132:	701a      	strb	r2, [r3, #0]

  q = &questions[answerIndex];
 8006134:	4b23      	ldr	r3, [pc, #140]	; (80061c4 <Question+0x9c>)
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	4613      	mov	r3, r2
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	4413      	add	r3, r2
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	4a21      	ldr	r2, [pc, #132]	; (80061c8 <Question+0xa0>)
 8006142:	4413      	add	r3, r2
 8006144:	4a21      	ldr	r2, [pc, #132]	; (80061cc <Question+0xa4>)
 8006146:	6013      	str	r3, [r2, #0]
  POINT_COLOR = RED;
 8006148:	4b21      	ldr	r3, [pc, #132]	; (80061d0 <Question+0xa8>)
 800614a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800614e:	801a      	strh	r2, [r3, #0]
  LCD_Clear(WHITE);
 8006150:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006154:	f7ff fe2a 	bl	8005dac <LCD_Clear>
  // LCD_Color_Fill(0,0,240, 320,WHITE);
  LCD_ShowString(30, 40, 200, 24, 16, "Question   Time:5s");
 8006158:	4b1e      	ldr	r3, [pc, #120]	; (80061d4 <Question+0xac>)
 800615a:	9301      	str	r3, [sp, #4]
 800615c:	2310      	movs	r3, #16
 800615e:	9300      	str	r3, [sp, #0]
 8006160:	2318      	movs	r3, #24
 8006162:	22c8      	movs	r2, #200	; 0xc8
 8006164:	2128      	movs	r1, #40	; 0x28
 8006166:	201e      	movs	r0, #30
 8006168:	f7ff ff30 	bl	8005fcc <LCD_ShowString>
  LCD_ShowString(30, 70, 200, 16, 12, q->content);
 800616c:	4b17      	ldr	r3, [pc, #92]	; (80061cc <Question+0xa4>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	9301      	str	r3, [sp, #4]
 8006174:	230c      	movs	r3, #12
 8006176:	9300      	str	r3, [sp, #0]
 8006178:	2310      	movs	r3, #16
 800617a:	22c8      	movs	r2, #200	; 0xc8
 800617c:	2146      	movs	r1, #70	; 0x46
 800617e:	201e      	movs	r0, #30
 8006180:	f7ff ff24 	bl	8005fcc <LCD_ShowString>
  LCD_ShowString(30, 150, 200, 16, 12, "Click any key to send the question.");
 8006184:	4b14      	ldr	r3, [pc, #80]	; (80061d8 <Question+0xb0>)
 8006186:	9301      	str	r3, [sp, #4]
 8006188:	230c      	movs	r3, #12
 800618a:	9300      	str	r3, [sp, #0]
 800618c:	2310      	movs	r3, #16
 800618e:	22c8      	movs	r2, #200	; 0xc8
 8006190:	2196      	movs	r1, #150	; 0x96
 8006192:	201e      	movs	r0, #30
 8006194:	f7ff ff1a 	bl	8005fcc <LCD_ShowString>
  // LCD_ShowString(30, 70, 200, 16, 16, q->content);
  POINT_COLOR = BLACK;
 8006198:	4b0d      	ldr	r3, [pc, #52]	; (80061d0 <Question+0xa8>)
 800619a:	2200      	movs	r2, #0
 800619c:	801a      	strh	r2, [r3, #0]

  answerIndex++;
 800619e:	4b09      	ldr	r3, [pc, #36]	; (80061c4 <Question+0x9c>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	3301      	adds	r3, #1
 80061a4:	4a07      	ldr	r2, [pc, #28]	; (80061c4 <Question+0x9c>)
 80061a6:	6013      	str	r3, [r2, #0]
  answerIndex %= 2;
 80061a8:	4b06      	ldr	r3, [pc, #24]	; (80061c4 <Question+0x9c>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	f003 0301 	and.w	r3, r3, #1
 80061b2:	bfb8      	it	lt
 80061b4:	425b      	neglt	r3, r3
 80061b6:	4a03      	ldr	r2, [pc, #12]	; (80061c4 <Question+0x9c>)
 80061b8:	6013      	str	r3, [r2, #0]
}
 80061ba:	bf00      	nop
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}
 80061c0:	2000015c 	.word	0x2000015c
 80061c4:	200000bc 	.word	0x200000bc
 80061c8:	20000004 	.word	0x20000004
 80061cc:	200001a8 	.word	0x200001a8
 80061d0:	200000b8 	.word	0x200000b8
 80061d4:	08009820 	.word	0x08009820
 80061d8:	08009834 	.word	0x08009834

080061dc <Answer>:

void Answer(char* ans)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b084      	sub	sp, #16
 80061e0:	af02      	add	r7, sp, #8
 80061e2:	6078      	str	r0, [r7, #4]
  // switch (state)
  // {
  // case AnswerState:
    if (atoi(ans)== q->answerIndex)
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f002 fded 	bl	8008dc4 <atoi>
 80061ea:	4602      	mov	r2, r0
 80061ec:	4b1d      	ldr	r3, [pc, #116]	; (8006264 <Answer+0x88>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	68db      	ldr	r3, [r3, #12]
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d10d      	bne.n	8006212 <Answer+0x36>
    {
      HAL_TIM_Base_Stop_IT(&htim2);
 80061f6:	481c      	ldr	r0, [pc, #112]	; (8006268 <Answer+0x8c>)
 80061f8:	f001 fd00 	bl	8007bfc <HAL_TIM_Base_Stop_IT>
      // LCD_ShowString(30, 70, 200, 16, 12, "Check right!");
      point = point + q->pointAward;
 80061fc:	4b19      	ldr	r3, [pc, #100]	; (8006264 <Answer+0x88>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	691a      	ldr	r2, [r3, #16]
 8006202:	4b1a      	ldr	r3, [pc, #104]	; (800626c <Answer+0x90>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4413      	add	r3, r2
 8006208:	4a18      	ldr	r2, [pc, #96]	; (800626c <Answer+0x90>)
 800620a:	6013      	str	r3, [r2, #0]
      // HAL_Delay(500);
      Judge();
 800620c:	f000 f838 	bl	8006280 <Judge>
  //   break;

  // default:
  //   break;
  // }
}
 8006210:	e023      	b.n	800625a <Answer+0x7e>
      sprintf(msg,"Check wrong: %d %d\n",atoi(ans),q->answerIndex);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f002 fdd6 	bl	8008dc4 <atoi>
 8006218:	4602      	mov	r2, r0
 800621a:	4b12      	ldr	r3, [pc, #72]	; (8006264 <Answer+0x88>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	4913      	ldr	r1, [pc, #76]	; (8006270 <Answer+0x94>)
 8006222:	4814      	ldr	r0, [pc, #80]	; (8006274 <Answer+0x98>)
 8006224:	f002 fe04 	bl	8008e30 <siprintf>
      HAL_UART_Transmit(&huart1,msg,strlen(msg),HAL_MAX_DELAY);
 8006228:	4812      	ldr	r0, [pc, #72]	; (8006274 <Answer+0x98>)
 800622a:	f7f9 fffd 	bl	8000228 <strlen>
 800622e:	4603      	mov	r3, r0
 8006230:	b29a      	uxth	r2, r3
 8006232:	f04f 33ff 	mov.w	r3, #4294967295
 8006236:	490f      	ldr	r1, [pc, #60]	; (8006274 <Answer+0x98>)
 8006238:	480f      	ldr	r0, [pc, #60]	; (8006278 <Answer+0x9c>)
 800623a:	f002 f8d8 	bl	80083ee <HAL_UART_Transmit>
      LCD_Clear(RED);
 800623e:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8006242:	f7ff fdb3 	bl	8005dac <LCD_Clear>
      LCD_ShowString(30, 70, 200, 16, 12, "Check wrong!");
 8006246:	4b0d      	ldr	r3, [pc, #52]	; (800627c <Answer+0xa0>)
 8006248:	9301      	str	r3, [sp, #4]
 800624a:	230c      	movs	r3, #12
 800624c:	9300      	str	r3, [sp, #0]
 800624e:	2310      	movs	r3, #16
 8006250:	22c8      	movs	r2, #200	; 0xc8
 8006252:	2146      	movs	r1, #70	; 0x46
 8006254:	201e      	movs	r0, #30
 8006256:	f7ff feb9 	bl	8005fcc <LCD_ShowString>
}
 800625a:	bf00      	nop
 800625c:	3708      	adds	r7, #8
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	200001a8 	.word	0x200001a8
 8006268:	200001c0 	.word	0x200001c0
 800626c:	200000c0 	.word	0x200000c0
 8006270:	08009858 	.word	0x08009858
 8006274:	200000f8 	.word	0x200000f8
 8006278:	20000160 	.word	0x20000160
 800627c:	0800986c 	.word	0x0800986c

08006280 <Judge>:

void Judge()
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b092      	sub	sp, #72	; 0x48
 8006284:	af02      	add	r7, sp, #8
  HAL_UART_Transmit(&huart1,"Enter Judge\n",strlen("Enter Judge\n"),HAL_MAX_DELAY);
 8006286:	f04f 33ff 	mov.w	r3, #4294967295
 800628a:	220c      	movs	r2, #12
 800628c:	4914      	ldr	r1, [pc, #80]	; (80062e0 <Judge+0x60>)
 800628e:	4815      	ldr	r0, [pc, #84]	; (80062e4 <Judge+0x64>)
 8006290:	f002 f8ad 	bl	80083ee <HAL_UART_Transmit>
  state=JudgeState;
 8006294:	4b14      	ldr	r3, [pc, #80]	; (80062e8 <Judge+0x68>)
 8006296:	2202      	movs	r2, #2
 8006298:	701a      	strb	r2, [r3, #0]
  char strs[64];
  sprintf(strs, "Your point: %d", point);
 800629a:	4b14      	ldr	r3, [pc, #80]	; (80062ec <Judge+0x6c>)
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	463b      	mov	r3, r7
 80062a0:	4913      	ldr	r1, [pc, #76]	; (80062f0 <Judge+0x70>)
 80062a2:	4618      	mov	r0, r3
 80062a4:	f002 fdc4 	bl	8008e30 <siprintf>
  LCD_Clear(WHITE);
 80062a8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80062ac:	f7ff fd7e 	bl	8005dac <LCD_Clear>
  // LCD_Color_Fill(0,0,240, 320,WHITE);
  LCD_ShowString(30, 70, 200, 16, 12, strs);
 80062b0:	463b      	mov	r3, r7
 80062b2:	9301      	str	r3, [sp, #4]
 80062b4:	230c      	movs	r3, #12
 80062b6:	9300      	str	r3, [sp, #0]
 80062b8:	2310      	movs	r3, #16
 80062ba:	22c8      	movs	r2, #200	; 0xc8
 80062bc:	2146      	movs	r1, #70	; 0x46
 80062be:	201e      	movs	r0, #30
 80062c0:	f7ff fe84 	bl	8005fcc <LCD_ShowString>
  LCD_ShowString(30, 200, 200, 16, 12, "Click 1 to play and 0 to reset.");
 80062c4:	4b0b      	ldr	r3, [pc, #44]	; (80062f4 <Judge+0x74>)
 80062c6:	9301      	str	r3, [sp, #4]
 80062c8:	230c      	movs	r3, #12
 80062ca:	9300      	str	r3, [sp, #0]
 80062cc:	2310      	movs	r3, #16
 80062ce:	22c8      	movs	r2, #200	; 0xc8
 80062d0:	21c8      	movs	r1, #200	; 0xc8
 80062d2:	201e      	movs	r0, #30
 80062d4:	f7ff fe7a 	bl	8005fcc <LCD_ShowString>
}
 80062d8:	bf00      	nop
 80062da:	3740      	adds	r7, #64	; 0x40
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	0800987c 	.word	0x0800987c
 80062e4:	20000160 	.word	0x20000160
 80062e8:	2000015c 	.word	0x2000015c
 80062ec:	200000c0 	.word	0x200000c0
 80062f0:	0800988c 	.word	0x0800988c
 80062f4:	0800989c 	.word	0x0800989c

080062f8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  Judge();
 8006300:	f7ff ffbe 	bl	8006280 <Judge>
}
 8006304:	bf00      	nop
 8006306:	3708      	adds	r7, #8
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af02      	add	r7, sp, #8
 8006312:	4603      	mov	r3, r0
 8006314:	80fb      	strh	r3, [r7, #6]

  switch (GPIO_Pin)
 8006316:	88fb      	ldrh	r3, [r7, #6]
 8006318:	2b20      	cmp	r3, #32
 800631a:	d003      	beq.n	8006324 <HAL_GPIO_EXTI_Callback+0x18>
 800631c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006320:	d052      	beq.n	80063c8 <HAL_GPIO_EXTI_Callback+0xbc>
      default:
        break;
      }
    }
  }
}
 8006322:	e0a0      	b.n	8006466 <HAL_GPIO_EXTI_Callback+0x15a>
    if (HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin) == GPIO_PIN_RESET)
 8006324:	2120      	movs	r1, #32
 8006326:	4852      	ldr	r0, [pc, #328]	; (8006470 <HAL_GPIO_EXTI_Callback+0x164>)
 8006328:	f000 ff56 	bl	80071d8 <HAL_GPIO_ReadPin>
 800632c:	4603      	mov	r3, r0
 800632e:	2b00      	cmp	r3, #0
 8006330:	d148      	bne.n	80063c4 <HAL_GPIO_EXTI_Callback+0xb8>
      HAL_UART_Transmit(&huart1,(uint8_t*)"Key 0 pressed\n",20,HAL_MAX_DELAY);
 8006332:	f04f 33ff 	mov.w	r3, #4294967295
 8006336:	2214      	movs	r2, #20
 8006338:	494e      	ldr	r1, [pc, #312]	; (8006474 <HAL_GPIO_EXTI_Callback+0x168>)
 800633a:	484f      	ldr	r0, [pc, #316]	; (8006478 <HAL_GPIO_EXTI_Callback+0x16c>)
 800633c:	f002 f857 	bl	80083ee <HAL_UART_Transmit>
      switch (state)
 8006340:	4b4e      	ldr	r3, [pc, #312]	; (800647c <HAL_GPIO_EXTI_Callback+0x170>)
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d002      	beq.n	800634e <HAL_GPIO_EXTI_Callback+0x42>
 8006348:	2b02      	cmp	r3, #2
 800634a:	d032      	beq.n	80063b2 <HAL_GPIO_EXTI_Callback+0xa6>
        break;
 800634c:	e03b      	b.n	80063c6 <HAL_GPIO_EXTI_Callback+0xba>
        sprintf(msg,"%s",q->content);
 800634e:	4b4c      	ldr	r3, [pc, #304]	; (8006480 <HAL_GPIO_EXTI_Callback+0x174>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	461a      	mov	r2, r3
 8006356:	494b      	ldr	r1, [pc, #300]	; (8006484 <HAL_GPIO_EXTI_Callback+0x178>)
 8006358:	484b      	ldr	r0, [pc, #300]	; (8006488 <HAL_GPIO_EXTI_Callback+0x17c>)
 800635a:	f002 fd69 	bl	8008e30 <siprintf>
        HAL_UART_Transmit(&huart1, msg, strlen(msg), 0xffff);
 800635e:	484a      	ldr	r0, [pc, #296]	; (8006488 <HAL_GPIO_EXTI_Callback+0x17c>)
 8006360:	f7f9 ff62 	bl	8000228 <strlen>
 8006364:	4603      	mov	r3, r0
 8006366:	b29a      	uxth	r2, r3
 8006368:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800636c:	4946      	ldr	r1, [pc, #280]	; (8006488 <HAL_GPIO_EXTI_Callback+0x17c>)
 800636e:	4842      	ldr	r0, [pc, #264]	; (8006478 <HAL_GPIO_EXTI_Callback+0x16c>)
 8006370:	f002 f83d 	bl	80083ee <HAL_UART_Transmit>
        LCD_Clear(GREEN);
 8006374:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8006378:	f7ff fd18 	bl	8005dac <LCD_Clear>
        LCD_ShowString(30, 40, 200, 24, 16, "Question   Time:5s");
 800637c:	4b43      	ldr	r3, [pc, #268]	; (800648c <HAL_GPIO_EXTI_Callback+0x180>)
 800637e:	9301      	str	r3, [sp, #4]
 8006380:	2310      	movs	r3, #16
 8006382:	9300      	str	r3, [sp, #0]
 8006384:	2318      	movs	r3, #24
 8006386:	22c8      	movs	r2, #200	; 0xc8
 8006388:	2128      	movs	r1, #40	; 0x28
 800638a:	201e      	movs	r0, #30
 800638c:	f7ff fe1e 	bl	8005fcc <LCD_ShowString>
        LCD_ShowString(30, 70, 200, 16, 12, msg);
 8006390:	4b3d      	ldr	r3, [pc, #244]	; (8006488 <HAL_GPIO_EXTI_Callback+0x17c>)
 8006392:	9301      	str	r3, [sp, #4]
 8006394:	230c      	movs	r3, #12
 8006396:	9300      	str	r3, [sp, #0]
 8006398:	2310      	movs	r3, #16
 800639a:	22c8      	movs	r2, #200	; 0xc8
 800639c:	2146      	movs	r1, #70	; 0x46
 800639e:	201e      	movs	r0, #30
 80063a0:	f7ff fe14 	bl	8005fcc <LCD_ShowString>
        HAL_TIM_Base_Start_IT(&htim2);
 80063a4:	483a      	ldr	r0, [pc, #232]	; (8006490 <HAL_GPIO_EXTI_Callback+0x184>)
 80063a6:	f001 fbc9 	bl	8007b3c <HAL_TIM_Base_Start_IT>
        state = AnswerState;
 80063aa:	4b34      	ldr	r3, [pc, #208]	; (800647c <HAL_GPIO_EXTI_Callback+0x170>)
 80063ac:	2201      	movs	r2, #1
 80063ae:	701a      	strb	r2, [r3, #0]
        break;
 80063b0:	e009      	b.n	80063c6 <HAL_GPIO_EXTI_Callback+0xba>
        answerIndex = 0;
 80063b2:	4b38      	ldr	r3, [pc, #224]	; (8006494 <HAL_GPIO_EXTI_Callback+0x188>)
 80063b4:	2200      	movs	r2, #0
 80063b6:	601a      	str	r2, [r3, #0]
        state = QuestionState;
 80063b8:	4b30      	ldr	r3, [pc, #192]	; (800647c <HAL_GPIO_EXTI_Callback+0x170>)
 80063ba:	2200      	movs	r2, #0
 80063bc:	701a      	strb	r2, [r3, #0]
        Question();
 80063be:	f7ff feb3 	bl	8006128 <Question>
        break;
 80063c2:	e000      	b.n	80063c6 <HAL_GPIO_EXTI_Callback+0xba>
    }
 80063c4:	bf00      	nop
    break;
 80063c6:	e04e      	b.n	8006466 <HAL_GPIO_EXTI_Callback+0x15a>
  HAL_UART_Transmit(&huart1,(uint8_t*)"Key 1 pressed\n",20,HAL_MAX_DELAY);
 80063c8:	f04f 33ff 	mov.w	r3, #4294967295
 80063cc:	2214      	movs	r2, #20
 80063ce:	4932      	ldr	r1, [pc, #200]	; (8006498 <HAL_GPIO_EXTI_Callback+0x18c>)
 80063d0:	4829      	ldr	r0, [pc, #164]	; (8006478 <HAL_GPIO_EXTI_Callback+0x16c>)
 80063d2:	f002 f80c 	bl	80083ee <HAL_UART_Transmit>
    if (HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin) == GPIO_PIN_RESET)
 80063d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80063da:	4830      	ldr	r0, [pc, #192]	; (800649c <HAL_GPIO_EXTI_Callback+0x190>)
 80063dc:	f000 fefc 	bl	80071d8 <HAL_GPIO_ReadPin>
 80063e0:	4603      	mov	r3, r0
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d13e      	bne.n	8006464 <HAL_GPIO_EXTI_Callback+0x158>
      switch (state)
 80063e6:	4b25      	ldr	r3, [pc, #148]	; (800647c <HAL_GPIO_EXTI_Callback+0x170>)
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d002      	beq.n	80063f4 <HAL_GPIO_EXTI_Callback+0xe8>
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d032      	beq.n	8006458 <HAL_GPIO_EXTI_Callback+0x14c>
        break;
 80063f2:	e038      	b.n	8006466 <HAL_GPIO_EXTI_Callback+0x15a>
        sprintf(msg,"%s",q->content);
 80063f4:	4b22      	ldr	r3, [pc, #136]	; (8006480 <HAL_GPIO_EXTI_Callback+0x174>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	461a      	mov	r2, r3
 80063fc:	4921      	ldr	r1, [pc, #132]	; (8006484 <HAL_GPIO_EXTI_Callback+0x178>)
 80063fe:	4822      	ldr	r0, [pc, #136]	; (8006488 <HAL_GPIO_EXTI_Callback+0x17c>)
 8006400:	f002 fd16 	bl	8008e30 <siprintf>
        HAL_UART_Transmit(&huart1, msg, strlen(msg), 0xffff);
 8006404:	4820      	ldr	r0, [pc, #128]	; (8006488 <HAL_GPIO_EXTI_Callback+0x17c>)
 8006406:	f7f9 ff0f 	bl	8000228 <strlen>
 800640a:	4603      	mov	r3, r0
 800640c:	b29a      	uxth	r2, r3
 800640e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006412:	491d      	ldr	r1, [pc, #116]	; (8006488 <HAL_GPIO_EXTI_Callback+0x17c>)
 8006414:	4818      	ldr	r0, [pc, #96]	; (8006478 <HAL_GPIO_EXTI_Callback+0x16c>)
 8006416:	f001 ffea 	bl	80083ee <HAL_UART_Transmit>
        LCD_Clear(GREEN);
 800641a:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 800641e:	f7ff fcc5 	bl	8005dac <LCD_Clear>
        LCD_ShowString(30, 40, 200, 24, 16, "Question   Time:5s");
 8006422:	4b1a      	ldr	r3, [pc, #104]	; (800648c <HAL_GPIO_EXTI_Callback+0x180>)
 8006424:	9301      	str	r3, [sp, #4]
 8006426:	2310      	movs	r3, #16
 8006428:	9300      	str	r3, [sp, #0]
 800642a:	2318      	movs	r3, #24
 800642c:	22c8      	movs	r2, #200	; 0xc8
 800642e:	2128      	movs	r1, #40	; 0x28
 8006430:	201e      	movs	r0, #30
 8006432:	f7ff fdcb 	bl	8005fcc <LCD_ShowString>
        LCD_ShowString(30, 70, 200, 16, 12, msg);
 8006436:	4b14      	ldr	r3, [pc, #80]	; (8006488 <HAL_GPIO_EXTI_Callback+0x17c>)
 8006438:	9301      	str	r3, [sp, #4]
 800643a:	230c      	movs	r3, #12
 800643c:	9300      	str	r3, [sp, #0]
 800643e:	2310      	movs	r3, #16
 8006440:	22c8      	movs	r2, #200	; 0xc8
 8006442:	2146      	movs	r1, #70	; 0x46
 8006444:	201e      	movs	r0, #30
 8006446:	f7ff fdc1 	bl	8005fcc <LCD_ShowString>
        HAL_TIM_Base_Start_IT(&htim2);
 800644a:	4811      	ldr	r0, [pc, #68]	; (8006490 <HAL_GPIO_EXTI_Callback+0x184>)
 800644c:	f001 fb76 	bl	8007b3c <HAL_TIM_Base_Start_IT>
        state = AnswerState;
 8006450:	4b0a      	ldr	r3, [pc, #40]	; (800647c <HAL_GPIO_EXTI_Callback+0x170>)
 8006452:	2201      	movs	r2, #1
 8006454:	701a      	strb	r2, [r3, #0]
        break;
 8006456:	e006      	b.n	8006466 <HAL_GPIO_EXTI_Callback+0x15a>
        state = QuestionState;
 8006458:	4b08      	ldr	r3, [pc, #32]	; (800647c <HAL_GPIO_EXTI_Callback+0x170>)
 800645a:	2200      	movs	r2, #0
 800645c:	701a      	strb	r2, [r3, #0]
        Question();
 800645e:	f7ff fe63 	bl	8006128 <Question>
        break;
 8006462:	e000      	b.n	8006466 <HAL_GPIO_EXTI_Callback+0x15a>
    }
 8006464:	bf00      	nop
}
 8006466:	bf00      	nop
 8006468:	3708      	adds	r7, #8
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
 800646e:	bf00      	nop
 8006470:	40011000 	.word	0x40011000
 8006474:	080098bc 	.word	0x080098bc
 8006478:	20000160 	.word	0x20000160
 800647c:	2000015c 	.word	0x2000015c
 8006480:	200001a8 	.word	0x200001a8
 8006484:	080098cc 	.word	0x080098cc
 8006488:	200000f8 	.word	0x200000f8
 800648c:	08009820 	.word	0x08009820
 8006490:	200001c0 	.word	0x200001c0
 8006494:	200000bc 	.word	0x200000bc
 8006498:	080098d0 	.word	0x080098d0
 800649c:	40010800 	.word	0x40010800

080064a0 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b084      	sub	sp, #16
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART1){
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a22      	ldr	r2, [pc, #136]	; (8006538 <HAL_UART_RxCpltCallback+0x98>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d13e      	bne.n	8006530 <HAL_UART_RxCpltCallback+0x90>
		static unsigned char uRx_Data[20] = {0};
		static unsigned char uLength = 0;
		if(rxBuffer[0] == '\n'){
 80064b2:	4b22      	ldr	r3, [pc, #136]	; (800653c <HAL_UART_RxCpltCallback+0x9c>)
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	2b0a      	cmp	r3, #10
 80064b8:	d129      	bne.n	800650e <HAL_UART_RxCpltCallback+0x6e>
			uLength = 0;
 80064ba:	4b21      	ldr	r3, [pc, #132]	; (8006540 <HAL_UART_RxCpltCallback+0xa0>)
 80064bc:	2200      	movs	r2, #0
 80064be:	701a      	strb	r2, [r3, #0]
      HAL_UART_Transmit(&huart1,(uint8_t*)uRx_Data,12,HAL_MAX_DELAY);
 80064c0:	f04f 33ff 	mov.w	r3, #4294967295
 80064c4:	220c      	movs	r2, #12
 80064c6:	491f      	ldr	r1, [pc, #124]	; (8006544 <HAL_UART_RxCpltCallback+0xa4>)
 80064c8:	481f      	ldr	r0, [pc, #124]	; (8006548 <HAL_UART_RxCpltCallback+0xa8>)
 80064ca:	f001 ff90 	bl	80083ee <HAL_UART_Transmit>
      Answer(uRx_Data);
 80064ce:	481d      	ldr	r0, [pc, #116]	; (8006544 <HAL_UART_RxCpltCallback+0xa4>)
 80064d0:	f7ff fe84 	bl	80061dc <Answer>
			for(int i = 0; i < 20; i++){
 80064d4:	2300      	movs	r3, #0
 80064d6:	60fb      	str	r3, [r7, #12]
 80064d8:	e007      	b.n	80064ea <HAL_UART_RxCpltCallback+0x4a>
				uRx_Data[i] = '\0';
 80064da:	4a1a      	ldr	r2, [pc, #104]	; (8006544 <HAL_UART_RxCpltCallback+0xa4>)
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	4413      	add	r3, r2
 80064e0:	2200      	movs	r2, #0
 80064e2:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < 20; i++){
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	3301      	adds	r3, #1
 80064e8:	60fb      	str	r3, [r7, #12]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2b13      	cmp	r3, #19
 80064ee:	ddf4      	ble.n	80064da <HAL_UART_RxCpltCallback+0x3a>
			}
			for(int i = 0; i < 20; i++){
 80064f0:	2300      	movs	r3, #0
 80064f2:	60bb      	str	r3, [r7, #8]
 80064f4:	e007      	b.n	8006506 <HAL_UART_RxCpltCallback+0x66>
				rxBuffer[i] = '\0';
 80064f6:	4a11      	ldr	r2, [pc, #68]	; (800653c <HAL_UART_RxCpltCallback+0x9c>)
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	4413      	add	r3, r2
 80064fc:	2200      	movs	r2, #0
 80064fe:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < 20; i++){
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	3301      	adds	r3, #1
 8006504:	60bb      	str	r3, [r7, #8]
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	2b13      	cmp	r3, #19
 800650a:	ddf4      	ble.n	80064f6 <HAL_UART_RxCpltCallback+0x56>
		else{
			uRx_Data[uLength] = rxBuffer[0];
			uLength++;
		}
	}
}
 800650c:	e010      	b.n	8006530 <HAL_UART_RxCpltCallback+0x90>
		else if (rxBuffer[0] == '\r') {
 800650e:	4b0b      	ldr	r3, [pc, #44]	; (800653c <HAL_UART_RxCpltCallback+0x9c>)
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	2b0d      	cmp	r3, #13
 8006514:	d00c      	beq.n	8006530 <HAL_UART_RxCpltCallback+0x90>
			uRx_Data[uLength] = rxBuffer[0];
 8006516:	4b0a      	ldr	r3, [pc, #40]	; (8006540 <HAL_UART_RxCpltCallback+0xa0>)
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	461a      	mov	r2, r3
 800651c:	4b07      	ldr	r3, [pc, #28]	; (800653c <HAL_UART_RxCpltCallback+0x9c>)
 800651e:	7819      	ldrb	r1, [r3, #0]
 8006520:	4b08      	ldr	r3, [pc, #32]	; (8006544 <HAL_UART_RxCpltCallback+0xa4>)
 8006522:	5499      	strb	r1, [r3, r2]
			uLength++;
 8006524:	4b06      	ldr	r3, [pc, #24]	; (8006540 <HAL_UART_RxCpltCallback+0xa0>)
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	3301      	adds	r3, #1
 800652a:	b2da      	uxtb	r2, r3
 800652c:	4b04      	ldr	r3, [pc, #16]	; (8006540 <HAL_UART_RxCpltCallback+0xa0>)
 800652e:	701a      	strb	r2, [r3, #0]
}
 8006530:	bf00      	nop
 8006532:	3710      	adds	r7, #16
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}
 8006538:	40013800 	.word	0x40013800
 800653c:	200001ac 	.word	0x200001ac
 8006540:	200000c4 	.word	0x200000c4
 8006544:	200000c8 	.word	0x200000c8
 8006548:	20000160 	.word	0x20000160

0800654c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800654c:	b480      	push	{r7}
 800654e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006550:	b672      	cpsid	i
}
 8006552:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8006554:	e7fe      	b.n	8006554 <Error_Handler+0x8>
	...

08006558 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800655e:	4b16      	ldr	r3, [pc, #88]	; (80065b8 <HAL_MspInit+0x60>)
 8006560:	699b      	ldr	r3, [r3, #24]
 8006562:	4a15      	ldr	r2, [pc, #84]	; (80065b8 <HAL_MspInit+0x60>)
 8006564:	f043 0301 	orr.w	r3, r3, #1
 8006568:	6193      	str	r3, [r2, #24]
 800656a:	4b13      	ldr	r3, [pc, #76]	; (80065b8 <HAL_MspInit+0x60>)
 800656c:	699b      	ldr	r3, [r3, #24]
 800656e:	f003 0301 	and.w	r3, r3, #1
 8006572:	60bb      	str	r3, [r7, #8]
 8006574:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006576:	4b10      	ldr	r3, [pc, #64]	; (80065b8 <HAL_MspInit+0x60>)
 8006578:	69db      	ldr	r3, [r3, #28]
 800657a:	4a0f      	ldr	r2, [pc, #60]	; (80065b8 <HAL_MspInit+0x60>)
 800657c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006580:	61d3      	str	r3, [r2, #28]
 8006582:	4b0d      	ldr	r3, [pc, #52]	; (80065b8 <HAL_MspInit+0x60>)
 8006584:	69db      	ldr	r3, [r3, #28]
 8006586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800658a:	607b      	str	r3, [r7, #4]
 800658c:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 800658e:	2005      	movs	r0, #5
 8006590:	f000 fb0a 	bl	8006ba8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8006594:	4b09      	ldr	r3, [pc, #36]	; (80065bc <HAL_MspInit+0x64>)
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	60fb      	str	r3, [r7, #12]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80065a0:	60fb      	str	r3, [r7, #12]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80065a8:	60fb      	str	r3, [r7, #12]
 80065aa:	4a04      	ldr	r2, [pc, #16]	; (80065bc <HAL_MspInit+0x64>)
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80065b0:	bf00      	nop
 80065b2:	3710      	adds	r7, #16
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}
 80065b8:	40021000 	.word	0x40021000
 80065bc:	40010000 	.word	0x40010000

080065c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80065c0:	b480      	push	{r7}
 80065c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80065c4:	e7fe      	b.n	80065c4 <NMI_Handler+0x4>

080065c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80065c6:	b480      	push	{r7}
 80065c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80065ca:	e7fe      	b.n	80065ca <HardFault_Handler+0x4>

080065cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80065cc:	b480      	push	{r7}
 80065ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80065d0:	e7fe      	b.n	80065d0 <MemManage_Handler+0x4>

080065d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80065d2:	b480      	push	{r7}
 80065d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80065d6:	e7fe      	b.n	80065d6 <BusFault_Handler+0x4>

080065d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80065d8:	b480      	push	{r7}
 80065da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80065dc:	e7fe      	b.n	80065dc <UsageFault_Handler+0x4>

080065de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80065de:	b480      	push	{r7}
 80065e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80065e2:	bf00      	nop
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bc80      	pop	{r7}
 80065e8:	4770      	bx	lr

080065ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80065ea:	b480      	push	{r7}
 80065ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80065ee:	bf00      	nop
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bc80      	pop	{r7}
 80065f4:	4770      	bx	lr

080065f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80065f6:	b480      	push	{r7}
 80065f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80065fa:	bf00      	nop
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bc80      	pop	{r7}
 8006600:	4770      	bx	lr

08006602 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006602:	b580      	push	{r7, lr}
 8006604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006606:	f000 f9c3 	bl	8006990 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800660a:	bf00      	nop
 800660c:	bd80      	pop	{r7, pc}

0800660e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800660e:	b580      	push	{r7, lr}
 8006610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8006612:	2020      	movs	r0, #32
 8006614:	f000 fe10 	bl	8007238 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8006618:	bf00      	nop
 800661a:	bd80      	pop	{r7, pc}

0800661c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006620:	4802      	ldr	r0, [pc, #8]	; (800662c <TIM2_IRQHandler+0x10>)
 8006622:	f001 fb19 	bl	8007c58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8006626:	bf00      	nop
 8006628:	bd80      	pop	{r7, pc}
 800662a:	bf00      	nop
 800662c:	200001c0 	.word	0x200001c0

08006630 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006634:	4804      	ldr	r0, [pc, #16]	; (8006648 <USART1_IRQHandler+0x18>)
 8006636:	f001 ff9d 	bl	8008574 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  HAL_UART_Receive_IT(&huart1,(uint8_t*)rxBuffer,1);
 800663a:	2201      	movs	r2, #1
 800663c:	4903      	ldr	r1, [pc, #12]	; (800664c <USART1_IRQHandler+0x1c>)
 800663e:	4802      	ldr	r0, [pc, #8]	; (8006648 <USART1_IRQHandler+0x18>)
 8006640:	f001 ff67 	bl	8008512 <HAL_UART_Receive_IT>
  /* USER CODE END USART1_IRQn 1 */
}
 8006644:	bf00      	nop
 8006646:	bd80      	pop	{r7, pc}
 8006648:	20000160 	.word	0x20000160
 800664c:	200001ac 	.word	0x200001ac

08006650 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8006654:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006658:	f000 fdee 	bl	8007238 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800665c:	bf00      	nop
 800665e:	bd80      	pop	{r7, pc}

08006660 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b086      	sub	sp, #24
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006668:	4a14      	ldr	r2, [pc, #80]	; (80066bc <_sbrk+0x5c>)
 800666a:	4b15      	ldr	r3, [pc, #84]	; (80066c0 <_sbrk+0x60>)
 800666c:	1ad3      	subs	r3, r2, r3
 800666e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006674:	4b13      	ldr	r3, [pc, #76]	; (80066c4 <_sbrk+0x64>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d102      	bne.n	8006682 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800667c:	4b11      	ldr	r3, [pc, #68]	; (80066c4 <_sbrk+0x64>)
 800667e:	4a12      	ldr	r2, [pc, #72]	; (80066c8 <_sbrk+0x68>)
 8006680:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006682:	4b10      	ldr	r3, [pc, #64]	; (80066c4 <_sbrk+0x64>)
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4413      	add	r3, r2
 800668a:	693a      	ldr	r2, [r7, #16]
 800668c:	429a      	cmp	r2, r3
 800668e:	d207      	bcs.n	80066a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006690:	f002 fb9c 	bl	8008dcc <__errno>
 8006694:	4603      	mov	r3, r0
 8006696:	220c      	movs	r2, #12
 8006698:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800669a:	f04f 33ff 	mov.w	r3, #4294967295
 800669e:	e009      	b.n	80066b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80066a0:	4b08      	ldr	r3, [pc, #32]	; (80066c4 <_sbrk+0x64>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80066a6:	4b07      	ldr	r3, [pc, #28]	; (80066c4 <_sbrk+0x64>)
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4413      	add	r3, r2
 80066ae:	4a05      	ldr	r2, [pc, #20]	; (80066c4 <_sbrk+0x64>)
 80066b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80066b2:	68fb      	ldr	r3, [r7, #12]
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3718      	adds	r7, #24
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}
 80066bc:	2000c000 	.word	0x2000c000
 80066c0:	00000400 	.word	0x00000400
 80066c4:	200000dc 	.word	0x200000dc
 80066c8:	20000220 	.word	0x20000220

080066cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80066cc:	b480      	push	{r7}
 80066ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80066d0:	bf00      	nop
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bc80      	pop	{r7}
 80066d6:	4770      	bx	lr

080066d8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b086      	sub	sp, #24
 80066dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80066de:	f107 0308 	add.w	r3, r7, #8
 80066e2:	2200      	movs	r2, #0
 80066e4:	601a      	str	r2, [r3, #0]
 80066e6:	605a      	str	r2, [r3, #4]
 80066e8:	609a      	str	r2, [r3, #8]
 80066ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80066ec:	463b      	mov	r3, r7
 80066ee:	2200      	movs	r2, #0
 80066f0:	601a      	str	r2, [r3, #0]
 80066f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80066f4:	4b1e      	ldr	r3, [pc, #120]	; (8006770 <MX_TIM2_Init+0x98>)
 80066f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80066fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35999;
 80066fc:	4b1c      	ldr	r3, [pc, #112]	; (8006770 <MX_TIM2_Init+0x98>)
 80066fe:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8006702:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006704:	4b1a      	ldr	r3, [pc, #104]	; (8006770 <MX_TIM2_Init+0x98>)
 8006706:	2200      	movs	r2, #0
 8006708:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 800670a:	4b19      	ldr	r3, [pc, #100]	; (8006770 <MX_TIM2_Init+0x98>)
 800670c:	f242 720f 	movw	r2, #9999	; 0x270f
 8006710:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006712:	4b17      	ldr	r3, [pc, #92]	; (8006770 <MX_TIM2_Init+0x98>)
 8006714:	2200      	movs	r2, #0
 8006716:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006718:	4b15      	ldr	r3, [pc, #84]	; (8006770 <MX_TIM2_Init+0x98>)
 800671a:	2200      	movs	r2, #0
 800671c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800671e:	4814      	ldr	r0, [pc, #80]	; (8006770 <MX_TIM2_Init+0x98>)
 8006720:	f001 f9bc 	bl	8007a9c <HAL_TIM_Base_Init>
 8006724:	4603      	mov	r3, r0
 8006726:	2b00      	cmp	r3, #0
 8006728:	d001      	beq.n	800672e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800672a:	f7ff ff0f 	bl	800654c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800672e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006732:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006734:	f107 0308 	add.w	r3, r7, #8
 8006738:	4619      	mov	r1, r3
 800673a:	480d      	ldr	r0, [pc, #52]	; (8006770 <MX_TIM2_Init+0x98>)
 800673c:	f001 fb94 	bl	8007e68 <HAL_TIM_ConfigClockSource>
 8006740:	4603      	mov	r3, r0
 8006742:	2b00      	cmp	r3, #0
 8006744:	d001      	beq.n	800674a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8006746:	f7ff ff01 	bl	800654c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800674a:	2300      	movs	r3, #0
 800674c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800674e:	2300      	movs	r3, #0
 8006750:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006752:	463b      	mov	r3, r7
 8006754:	4619      	mov	r1, r3
 8006756:	4806      	ldr	r0, [pc, #24]	; (8006770 <MX_TIM2_Init+0x98>)
 8006758:	f001 fd7e 	bl	8008258 <HAL_TIMEx_MasterConfigSynchronization>
 800675c:	4603      	mov	r3, r0
 800675e:	2b00      	cmp	r3, #0
 8006760:	d001      	beq.n	8006766 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8006762:	f7ff fef3 	bl	800654c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8006766:	bf00      	nop
 8006768:	3718      	adds	r7, #24
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	200001c0 	.word	0x200001c0

08006774 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b084      	sub	sp, #16
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006784:	d113      	bne.n	80067ae <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006786:	4b0c      	ldr	r3, [pc, #48]	; (80067b8 <HAL_TIM_Base_MspInit+0x44>)
 8006788:	69db      	ldr	r3, [r3, #28]
 800678a:	4a0b      	ldr	r2, [pc, #44]	; (80067b8 <HAL_TIM_Base_MspInit+0x44>)
 800678c:	f043 0301 	orr.w	r3, r3, #1
 8006790:	61d3      	str	r3, [r2, #28]
 8006792:	4b09      	ldr	r3, [pc, #36]	; (80067b8 <HAL_TIM_Base_MspInit+0x44>)
 8006794:	69db      	ldr	r3, [r3, #28]
 8006796:	f003 0301 	and.w	r3, r3, #1
 800679a:	60fb      	str	r3, [r7, #12]
 800679c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 2);
 800679e:	2202      	movs	r2, #2
 80067a0:	2101      	movs	r1, #1
 80067a2:	201c      	movs	r0, #28
 80067a4:	f000 fa0b 	bl	8006bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80067a8:	201c      	movs	r0, #28
 80067aa:	f000 fa24 	bl	8006bf6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80067ae:	bf00      	nop
 80067b0:	3710      	adds	r7, #16
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
 80067b6:	bf00      	nop
 80067b8:	40021000 	.word	0x40021000

080067bc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80067c0:	4b11      	ldr	r3, [pc, #68]	; (8006808 <MX_USART1_UART_Init+0x4c>)
 80067c2:	4a12      	ldr	r2, [pc, #72]	; (800680c <MX_USART1_UART_Init+0x50>)
 80067c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80067c6:	4b10      	ldr	r3, [pc, #64]	; (8006808 <MX_USART1_UART_Init+0x4c>)
 80067c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80067cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80067ce:	4b0e      	ldr	r3, [pc, #56]	; (8006808 <MX_USART1_UART_Init+0x4c>)
 80067d0:	2200      	movs	r2, #0
 80067d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80067d4:	4b0c      	ldr	r3, [pc, #48]	; (8006808 <MX_USART1_UART_Init+0x4c>)
 80067d6:	2200      	movs	r2, #0
 80067d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80067da:	4b0b      	ldr	r3, [pc, #44]	; (8006808 <MX_USART1_UART_Init+0x4c>)
 80067dc:	2200      	movs	r2, #0
 80067de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80067e0:	4b09      	ldr	r3, [pc, #36]	; (8006808 <MX_USART1_UART_Init+0x4c>)
 80067e2:	220c      	movs	r2, #12
 80067e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80067e6:	4b08      	ldr	r3, [pc, #32]	; (8006808 <MX_USART1_UART_Init+0x4c>)
 80067e8:	2200      	movs	r2, #0
 80067ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80067ec:	4b06      	ldr	r3, [pc, #24]	; (8006808 <MX_USART1_UART_Init+0x4c>)
 80067ee:	2200      	movs	r2, #0
 80067f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80067f2:	4805      	ldr	r0, [pc, #20]	; (8006808 <MX_USART1_UART_Init+0x4c>)
 80067f4:	f001 fdae 	bl	8008354 <HAL_UART_Init>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d001      	beq.n	8006802 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80067fe:	f7ff fea5 	bl	800654c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006802:	bf00      	nop
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	20000160 	.word	0x20000160
 800680c:	40013800 	.word	0x40013800

08006810 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b088      	sub	sp, #32
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006818:	f107 0310 	add.w	r3, r7, #16
 800681c:	2200      	movs	r2, #0
 800681e:	601a      	str	r2, [r3, #0]
 8006820:	605a      	str	r2, [r3, #4]
 8006822:	609a      	str	r2, [r3, #8]
 8006824:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a20      	ldr	r2, [pc, #128]	; (80068ac <HAL_UART_MspInit+0x9c>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d139      	bne.n	80068a4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006830:	4b1f      	ldr	r3, [pc, #124]	; (80068b0 <HAL_UART_MspInit+0xa0>)
 8006832:	699b      	ldr	r3, [r3, #24]
 8006834:	4a1e      	ldr	r2, [pc, #120]	; (80068b0 <HAL_UART_MspInit+0xa0>)
 8006836:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800683a:	6193      	str	r3, [r2, #24]
 800683c:	4b1c      	ldr	r3, [pc, #112]	; (80068b0 <HAL_UART_MspInit+0xa0>)
 800683e:	699b      	ldr	r3, [r3, #24]
 8006840:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006844:	60fb      	str	r3, [r7, #12]
 8006846:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006848:	4b19      	ldr	r3, [pc, #100]	; (80068b0 <HAL_UART_MspInit+0xa0>)
 800684a:	699b      	ldr	r3, [r3, #24]
 800684c:	4a18      	ldr	r2, [pc, #96]	; (80068b0 <HAL_UART_MspInit+0xa0>)
 800684e:	f043 0304 	orr.w	r3, r3, #4
 8006852:	6193      	str	r3, [r2, #24]
 8006854:	4b16      	ldr	r3, [pc, #88]	; (80068b0 <HAL_UART_MspInit+0xa0>)
 8006856:	699b      	ldr	r3, [r3, #24]
 8006858:	f003 0304 	and.w	r3, r3, #4
 800685c:	60bb      	str	r3, [r7, #8]
 800685e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006860:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006864:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006866:	2302      	movs	r3, #2
 8006868:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800686a:	2303      	movs	r3, #3
 800686c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800686e:	f107 0310 	add.w	r3, r7, #16
 8006872:	4619      	mov	r1, r3
 8006874:	480f      	ldr	r0, [pc, #60]	; (80068b4 <HAL_UART_MspInit+0xa4>)
 8006876:	f000 fb1b 	bl	8006eb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800687a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800687e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006880:	2300      	movs	r3, #0
 8006882:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006884:	2300      	movs	r3, #0
 8006886:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006888:	f107 0310 	add.w	r3, r7, #16
 800688c:	4619      	mov	r1, r3
 800688e:	4809      	ldr	r0, [pc, #36]	; (80068b4 <HAL_UART_MspInit+0xa4>)
 8006890:	f000 fb0e 	bl	8006eb0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8006894:	2200      	movs	r2, #0
 8006896:	2101      	movs	r1, #1
 8006898:	2025      	movs	r0, #37	; 0x25
 800689a:	f000 f990 	bl	8006bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800689e:	2025      	movs	r0, #37	; 0x25
 80068a0:	f000 f9a9 	bl	8006bf6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80068a4:	bf00      	nop
 80068a6:	3720      	adds	r7, #32
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}
 80068ac:	40013800 	.word	0x40013800
 80068b0:	40021000 	.word	0x40021000
 80068b4:	40010800 	.word	0x40010800

080068b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80068b8:	480c      	ldr	r0, [pc, #48]	; (80068ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80068ba:	490d      	ldr	r1, [pc, #52]	; (80068f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80068bc:	4a0d      	ldr	r2, [pc, #52]	; (80068f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80068be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80068c0:	e002      	b.n	80068c8 <LoopCopyDataInit>

080068c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80068c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80068c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80068c6:	3304      	adds	r3, #4

080068c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80068c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80068ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80068cc:	d3f9      	bcc.n	80068c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80068ce:	4a0a      	ldr	r2, [pc, #40]	; (80068f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80068d0:	4c0a      	ldr	r4, [pc, #40]	; (80068fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80068d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80068d4:	e001      	b.n	80068da <LoopFillZerobss>

080068d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80068d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80068d8:	3204      	adds	r2, #4

080068da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80068da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80068dc:	d3fb      	bcc.n	80068d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80068de:	f7ff fef5 	bl	80066cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80068e2:	f002 fa79 	bl	8008dd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80068e6:	f7ff fbbf 	bl	8006068 <main>
  bx lr
 80068ea:	4770      	bx	lr
  ldr r0, =_sdata
 80068ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80068f0:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 80068f4:	0800b204 	.word	0x0800b204
  ldr r2, =_sbss
 80068f8:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 80068fc:	2000021c 	.word	0x2000021c

08006900 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006900:	e7fe      	b.n	8006900 <ADC1_2_IRQHandler>
	...

08006904 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006908:	4b08      	ldr	r3, [pc, #32]	; (800692c <HAL_Init+0x28>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a07      	ldr	r2, [pc, #28]	; (800692c <HAL_Init+0x28>)
 800690e:	f043 0310 	orr.w	r3, r3, #16
 8006912:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006914:	2003      	movs	r0, #3
 8006916:	f000 f947 	bl	8006ba8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800691a:	2001      	movs	r0, #1
 800691c:	f000 f808 	bl	8006930 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006920:	f7ff fe1a 	bl	8006558 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006924:	2300      	movs	r3, #0
}
 8006926:	4618      	mov	r0, r3
 8006928:	bd80      	pop	{r7, pc}
 800692a:	bf00      	nop
 800692c:	40022000 	.word	0x40022000

08006930 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006938:	4b12      	ldr	r3, [pc, #72]	; (8006984 <HAL_InitTick+0x54>)
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	4b12      	ldr	r3, [pc, #72]	; (8006988 <HAL_InitTick+0x58>)
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	4619      	mov	r1, r3
 8006942:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006946:	fbb3 f3f1 	udiv	r3, r3, r1
 800694a:	fbb2 f3f3 	udiv	r3, r2, r3
 800694e:	4618      	mov	r0, r3
 8006950:	f000 f95f 	bl	8006c12 <HAL_SYSTICK_Config>
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d001      	beq.n	800695e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	e00e      	b.n	800697c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2b0f      	cmp	r3, #15
 8006962:	d80a      	bhi.n	800697a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006964:	2200      	movs	r2, #0
 8006966:	6879      	ldr	r1, [r7, #4]
 8006968:	f04f 30ff 	mov.w	r0, #4294967295
 800696c:	f000 f927 	bl	8006bbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006970:	4a06      	ldr	r2, [pc, #24]	; (800698c <HAL_InitTick+0x5c>)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006976:	2300      	movs	r3, #0
 8006978:	e000      	b.n	800697c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800697a:	2301      	movs	r3, #1
}
 800697c:	4618      	mov	r0, r3
 800697e:	3708      	adds	r7, #8
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}
 8006984:	2000002c 	.word	0x2000002c
 8006988:	20000034 	.word	0x20000034
 800698c:	20000030 	.word	0x20000030

08006990 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006990:	b480      	push	{r7}
 8006992:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006994:	4b05      	ldr	r3, [pc, #20]	; (80069ac <HAL_IncTick+0x1c>)
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	461a      	mov	r2, r3
 800699a:	4b05      	ldr	r3, [pc, #20]	; (80069b0 <HAL_IncTick+0x20>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4413      	add	r3, r2
 80069a0:	4a03      	ldr	r2, [pc, #12]	; (80069b0 <HAL_IncTick+0x20>)
 80069a2:	6013      	str	r3, [r2, #0]
}
 80069a4:	bf00      	nop
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bc80      	pop	{r7}
 80069aa:	4770      	bx	lr
 80069ac:	20000034 	.word	0x20000034
 80069b0:	20000208 	.word	0x20000208

080069b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80069b4:	b480      	push	{r7}
 80069b6:	af00      	add	r7, sp, #0
  return uwTick;
 80069b8:	4b02      	ldr	r3, [pc, #8]	; (80069c4 <HAL_GetTick+0x10>)
 80069ba:	681b      	ldr	r3, [r3, #0]
}
 80069bc:	4618      	mov	r0, r3
 80069be:	46bd      	mov	sp, r7
 80069c0:	bc80      	pop	{r7}
 80069c2:	4770      	bx	lr
 80069c4:	20000208 	.word	0x20000208

080069c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b084      	sub	sp, #16
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80069d0:	f7ff fff0 	bl	80069b4 <HAL_GetTick>
 80069d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069e0:	d005      	beq.n	80069ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80069e2:	4b0a      	ldr	r3, [pc, #40]	; (8006a0c <HAL_Delay+0x44>)
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	461a      	mov	r2, r3
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	4413      	add	r3, r2
 80069ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80069ee:	bf00      	nop
 80069f0:	f7ff ffe0 	bl	80069b4 <HAL_GetTick>
 80069f4:	4602      	mov	r2, r0
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	1ad3      	subs	r3, r2, r3
 80069fa:	68fa      	ldr	r2, [r7, #12]
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d8f7      	bhi.n	80069f0 <HAL_Delay+0x28>
  {
  }
}
 8006a00:	bf00      	nop
 8006a02:	bf00      	nop
 8006a04:	3710      	adds	r7, #16
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	bf00      	nop
 8006a0c:	20000034 	.word	0x20000034

08006a10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b085      	sub	sp, #20
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f003 0307 	and.w	r3, r3, #7
 8006a1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006a20:	4b0c      	ldr	r3, [pc, #48]	; (8006a54 <__NVIC_SetPriorityGrouping+0x44>)
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006a26:	68ba      	ldr	r2, [r7, #8]
 8006a28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006a2c:	4013      	ands	r3, r2
 8006a2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006a38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006a3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006a42:	4a04      	ldr	r2, [pc, #16]	; (8006a54 <__NVIC_SetPriorityGrouping+0x44>)
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	60d3      	str	r3, [r2, #12]
}
 8006a48:	bf00      	nop
 8006a4a:	3714      	adds	r7, #20
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bc80      	pop	{r7}
 8006a50:	4770      	bx	lr
 8006a52:	bf00      	nop
 8006a54:	e000ed00 	.word	0xe000ed00

08006a58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006a5c:	4b04      	ldr	r3, [pc, #16]	; (8006a70 <__NVIC_GetPriorityGrouping+0x18>)
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	0a1b      	lsrs	r3, r3, #8
 8006a62:	f003 0307 	and.w	r3, r3, #7
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bc80      	pop	{r7}
 8006a6c:	4770      	bx	lr
 8006a6e:	bf00      	nop
 8006a70:	e000ed00 	.word	0xe000ed00

08006a74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b083      	sub	sp, #12
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	db0b      	blt.n	8006a9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006a86:	79fb      	ldrb	r3, [r7, #7]
 8006a88:	f003 021f 	and.w	r2, r3, #31
 8006a8c:	4906      	ldr	r1, [pc, #24]	; (8006aa8 <__NVIC_EnableIRQ+0x34>)
 8006a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a92:	095b      	lsrs	r3, r3, #5
 8006a94:	2001      	movs	r0, #1
 8006a96:	fa00 f202 	lsl.w	r2, r0, r2
 8006a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006a9e:	bf00      	nop
 8006aa0:	370c      	adds	r7, #12
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bc80      	pop	{r7}
 8006aa6:	4770      	bx	lr
 8006aa8:	e000e100 	.word	0xe000e100

08006aac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b083      	sub	sp, #12
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	6039      	str	r1, [r7, #0]
 8006ab6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	db0a      	blt.n	8006ad6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	b2da      	uxtb	r2, r3
 8006ac4:	490c      	ldr	r1, [pc, #48]	; (8006af8 <__NVIC_SetPriority+0x4c>)
 8006ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006aca:	0112      	lsls	r2, r2, #4
 8006acc:	b2d2      	uxtb	r2, r2
 8006ace:	440b      	add	r3, r1
 8006ad0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006ad4:	e00a      	b.n	8006aec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	b2da      	uxtb	r2, r3
 8006ada:	4908      	ldr	r1, [pc, #32]	; (8006afc <__NVIC_SetPriority+0x50>)
 8006adc:	79fb      	ldrb	r3, [r7, #7]
 8006ade:	f003 030f 	and.w	r3, r3, #15
 8006ae2:	3b04      	subs	r3, #4
 8006ae4:	0112      	lsls	r2, r2, #4
 8006ae6:	b2d2      	uxtb	r2, r2
 8006ae8:	440b      	add	r3, r1
 8006aea:	761a      	strb	r2, [r3, #24]
}
 8006aec:	bf00      	nop
 8006aee:	370c      	adds	r7, #12
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bc80      	pop	{r7}
 8006af4:	4770      	bx	lr
 8006af6:	bf00      	nop
 8006af8:	e000e100 	.word	0xe000e100
 8006afc:	e000ed00 	.word	0xe000ed00

08006b00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b089      	sub	sp, #36	; 0x24
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	60f8      	str	r0, [r7, #12]
 8006b08:	60b9      	str	r1, [r7, #8]
 8006b0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f003 0307 	and.w	r3, r3, #7
 8006b12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	f1c3 0307 	rsb	r3, r3, #7
 8006b1a:	2b04      	cmp	r3, #4
 8006b1c:	bf28      	it	cs
 8006b1e:	2304      	movcs	r3, #4
 8006b20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	3304      	adds	r3, #4
 8006b26:	2b06      	cmp	r3, #6
 8006b28:	d902      	bls.n	8006b30 <NVIC_EncodePriority+0x30>
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	3b03      	subs	r3, #3
 8006b2e:	e000      	b.n	8006b32 <NVIC_EncodePriority+0x32>
 8006b30:	2300      	movs	r3, #0
 8006b32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b34:	f04f 32ff 	mov.w	r2, #4294967295
 8006b38:	69bb      	ldr	r3, [r7, #24]
 8006b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b3e:	43da      	mvns	r2, r3
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	401a      	ands	r2, r3
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006b48:	f04f 31ff 	mov.w	r1, #4294967295
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8006b52:	43d9      	mvns	r1, r3
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b58:	4313      	orrs	r3, r2
         );
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3724      	adds	r7, #36	; 0x24
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bc80      	pop	{r7}
 8006b62:	4770      	bx	lr

08006b64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b082      	sub	sp, #8
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	3b01      	subs	r3, #1
 8006b70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006b74:	d301      	bcc.n	8006b7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006b76:	2301      	movs	r3, #1
 8006b78:	e00f      	b.n	8006b9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006b7a:	4a0a      	ldr	r2, [pc, #40]	; (8006ba4 <SysTick_Config+0x40>)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	3b01      	subs	r3, #1
 8006b80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006b82:	210f      	movs	r1, #15
 8006b84:	f04f 30ff 	mov.w	r0, #4294967295
 8006b88:	f7ff ff90 	bl	8006aac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006b8c:	4b05      	ldr	r3, [pc, #20]	; (8006ba4 <SysTick_Config+0x40>)
 8006b8e:	2200      	movs	r2, #0
 8006b90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006b92:	4b04      	ldr	r3, [pc, #16]	; (8006ba4 <SysTick_Config+0x40>)
 8006b94:	2207      	movs	r2, #7
 8006b96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006b98:	2300      	movs	r3, #0
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3708      	adds	r7, #8
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}
 8006ba2:	bf00      	nop
 8006ba4:	e000e010 	.word	0xe000e010

08006ba8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b082      	sub	sp, #8
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f7ff ff2d 	bl	8006a10 <__NVIC_SetPriorityGrouping>
}
 8006bb6:	bf00      	nop
 8006bb8:	3708      	adds	r7, #8
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}

08006bbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006bbe:	b580      	push	{r7, lr}
 8006bc0:	b086      	sub	sp, #24
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	60b9      	str	r1, [r7, #8]
 8006bc8:	607a      	str	r2, [r7, #4]
 8006bca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006bd0:	f7ff ff42 	bl	8006a58 <__NVIC_GetPriorityGrouping>
 8006bd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	68b9      	ldr	r1, [r7, #8]
 8006bda:	6978      	ldr	r0, [r7, #20]
 8006bdc:	f7ff ff90 	bl	8006b00 <NVIC_EncodePriority>
 8006be0:	4602      	mov	r2, r0
 8006be2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006be6:	4611      	mov	r1, r2
 8006be8:	4618      	mov	r0, r3
 8006bea:	f7ff ff5f 	bl	8006aac <__NVIC_SetPriority>
}
 8006bee:	bf00      	nop
 8006bf0:	3718      	adds	r7, #24
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}

08006bf6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006bf6:	b580      	push	{r7, lr}
 8006bf8:	b082      	sub	sp, #8
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c04:	4618      	mov	r0, r3
 8006c06:	f7ff ff35 	bl	8006a74 <__NVIC_EnableIRQ>
}
 8006c0a:	bf00      	nop
 8006c0c:	3708      	adds	r7, #8
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}

08006c12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006c12:	b580      	push	{r7, lr}
 8006c14:	b082      	sub	sp, #8
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f7ff ffa2 	bl	8006b64 <SysTick_Config>
 8006c20:	4603      	mov	r3, r0
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3708      	adds	r7, #8
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}

08006c2a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006c2a:	b480      	push	{r7}
 8006c2c:	b085      	sub	sp, #20
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c32:	2300      	movs	r3, #0
 8006c34:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006c3c:	2b02      	cmp	r3, #2
 8006c3e:	d008      	beq.n	8006c52 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2204      	movs	r2, #4
 8006c44:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e020      	b.n	8006c94 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f022 020e 	bic.w	r2, r2, #14
 8006c60:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f022 0201 	bic.w	r2, r2, #1
 8006c70:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c7a:	2101      	movs	r1, #1
 8006c7c:	fa01 f202 	lsl.w	r2, r1, r2
 8006c80:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2201      	movs	r2, #1
 8006c86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8006c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3714      	adds	r7, #20
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bc80      	pop	{r7}
 8006c9c:	4770      	bx	lr
	...

08006ca0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006cb2:	2b02      	cmp	r3, #2
 8006cb4:	d005      	beq.n	8006cc2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2204      	movs	r2, #4
 8006cba:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	73fb      	strb	r3, [r7, #15]
 8006cc0:	e0d6      	b.n	8006e70 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f022 020e 	bic.w	r2, r2, #14
 8006cd0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f022 0201 	bic.w	r2, r2, #1
 8006ce0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	4b64      	ldr	r3, [pc, #400]	; (8006e7c <HAL_DMA_Abort_IT+0x1dc>)
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d958      	bls.n	8006da0 <HAL_DMA_Abort_IT+0x100>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a63      	ldr	r2, [pc, #396]	; (8006e80 <HAL_DMA_Abort_IT+0x1e0>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d04f      	beq.n	8006d98 <HAL_DMA_Abort_IT+0xf8>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a61      	ldr	r2, [pc, #388]	; (8006e84 <HAL_DMA_Abort_IT+0x1e4>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d048      	beq.n	8006d94 <HAL_DMA_Abort_IT+0xf4>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a60      	ldr	r2, [pc, #384]	; (8006e88 <HAL_DMA_Abort_IT+0x1e8>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d040      	beq.n	8006d8e <HAL_DMA_Abort_IT+0xee>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a5e      	ldr	r2, [pc, #376]	; (8006e8c <HAL_DMA_Abort_IT+0x1ec>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d038      	beq.n	8006d88 <HAL_DMA_Abort_IT+0xe8>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a5d      	ldr	r2, [pc, #372]	; (8006e90 <HAL_DMA_Abort_IT+0x1f0>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d030      	beq.n	8006d82 <HAL_DMA_Abort_IT+0xe2>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a5b      	ldr	r2, [pc, #364]	; (8006e94 <HAL_DMA_Abort_IT+0x1f4>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d028      	beq.n	8006d7c <HAL_DMA_Abort_IT+0xdc>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a53      	ldr	r2, [pc, #332]	; (8006e7c <HAL_DMA_Abort_IT+0x1dc>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d020      	beq.n	8006d76 <HAL_DMA_Abort_IT+0xd6>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a57      	ldr	r2, [pc, #348]	; (8006e98 <HAL_DMA_Abort_IT+0x1f8>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d019      	beq.n	8006d72 <HAL_DMA_Abort_IT+0xd2>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a56      	ldr	r2, [pc, #344]	; (8006e9c <HAL_DMA_Abort_IT+0x1fc>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d012      	beq.n	8006d6e <HAL_DMA_Abort_IT+0xce>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a54      	ldr	r2, [pc, #336]	; (8006ea0 <HAL_DMA_Abort_IT+0x200>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d00a      	beq.n	8006d68 <HAL_DMA_Abort_IT+0xc8>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a53      	ldr	r2, [pc, #332]	; (8006ea4 <HAL_DMA_Abort_IT+0x204>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d102      	bne.n	8006d62 <HAL_DMA_Abort_IT+0xc2>
 8006d5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006d60:	e01b      	b.n	8006d9a <HAL_DMA_Abort_IT+0xfa>
 8006d62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006d66:	e018      	b.n	8006d9a <HAL_DMA_Abort_IT+0xfa>
 8006d68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d6c:	e015      	b.n	8006d9a <HAL_DMA_Abort_IT+0xfa>
 8006d6e:	2310      	movs	r3, #16
 8006d70:	e013      	b.n	8006d9a <HAL_DMA_Abort_IT+0xfa>
 8006d72:	2301      	movs	r3, #1
 8006d74:	e011      	b.n	8006d9a <HAL_DMA_Abort_IT+0xfa>
 8006d76:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006d7a:	e00e      	b.n	8006d9a <HAL_DMA_Abort_IT+0xfa>
 8006d7c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006d80:	e00b      	b.n	8006d9a <HAL_DMA_Abort_IT+0xfa>
 8006d82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006d86:	e008      	b.n	8006d9a <HAL_DMA_Abort_IT+0xfa>
 8006d88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006d8c:	e005      	b.n	8006d9a <HAL_DMA_Abort_IT+0xfa>
 8006d8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d92:	e002      	b.n	8006d9a <HAL_DMA_Abort_IT+0xfa>
 8006d94:	2310      	movs	r3, #16
 8006d96:	e000      	b.n	8006d9a <HAL_DMA_Abort_IT+0xfa>
 8006d98:	2301      	movs	r3, #1
 8006d9a:	4a43      	ldr	r2, [pc, #268]	; (8006ea8 <HAL_DMA_Abort_IT+0x208>)
 8006d9c:	6053      	str	r3, [r2, #4]
 8006d9e:	e057      	b.n	8006e50 <HAL_DMA_Abort_IT+0x1b0>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a36      	ldr	r2, [pc, #216]	; (8006e80 <HAL_DMA_Abort_IT+0x1e0>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d04f      	beq.n	8006e4a <HAL_DMA_Abort_IT+0x1aa>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a35      	ldr	r2, [pc, #212]	; (8006e84 <HAL_DMA_Abort_IT+0x1e4>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d048      	beq.n	8006e46 <HAL_DMA_Abort_IT+0x1a6>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a33      	ldr	r2, [pc, #204]	; (8006e88 <HAL_DMA_Abort_IT+0x1e8>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d040      	beq.n	8006e40 <HAL_DMA_Abort_IT+0x1a0>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a32      	ldr	r2, [pc, #200]	; (8006e8c <HAL_DMA_Abort_IT+0x1ec>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d038      	beq.n	8006e3a <HAL_DMA_Abort_IT+0x19a>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a30      	ldr	r2, [pc, #192]	; (8006e90 <HAL_DMA_Abort_IT+0x1f0>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d030      	beq.n	8006e34 <HAL_DMA_Abort_IT+0x194>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a2f      	ldr	r2, [pc, #188]	; (8006e94 <HAL_DMA_Abort_IT+0x1f4>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d028      	beq.n	8006e2e <HAL_DMA_Abort_IT+0x18e>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a26      	ldr	r2, [pc, #152]	; (8006e7c <HAL_DMA_Abort_IT+0x1dc>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d020      	beq.n	8006e28 <HAL_DMA_Abort_IT+0x188>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a2b      	ldr	r2, [pc, #172]	; (8006e98 <HAL_DMA_Abort_IT+0x1f8>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d019      	beq.n	8006e24 <HAL_DMA_Abort_IT+0x184>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a29      	ldr	r2, [pc, #164]	; (8006e9c <HAL_DMA_Abort_IT+0x1fc>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d012      	beq.n	8006e20 <HAL_DMA_Abort_IT+0x180>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a28      	ldr	r2, [pc, #160]	; (8006ea0 <HAL_DMA_Abort_IT+0x200>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d00a      	beq.n	8006e1a <HAL_DMA_Abort_IT+0x17a>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a26      	ldr	r2, [pc, #152]	; (8006ea4 <HAL_DMA_Abort_IT+0x204>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d102      	bne.n	8006e14 <HAL_DMA_Abort_IT+0x174>
 8006e0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006e12:	e01b      	b.n	8006e4c <HAL_DMA_Abort_IT+0x1ac>
 8006e14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006e18:	e018      	b.n	8006e4c <HAL_DMA_Abort_IT+0x1ac>
 8006e1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e1e:	e015      	b.n	8006e4c <HAL_DMA_Abort_IT+0x1ac>
 8006e20:	2310      	movs	r3, #16
 8006e22:	e013      	b.n	8006e4c <HAL_DMA_Abort_IT+0x1ac>
 8006e24:	2301      	movs	r3, #1
 8006e26:	e011      	b.n	8006e4c <HAL_DMA_Abort_IT+0x1ac>
 8006e28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006e2c:	e00e      	b.n	8006e4c <HAL_DMA_Abort_IT+0x1ac>
 8006e2e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006e32:	e00b      	b.n	8006e4c <HAL_DMA_Abort_IT+0x1ac>
 8006e34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006e38:	e008      	b.n	8006e4c <HAL_DMA_Abort_IT+0x1ac>
 8006e3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006e3e:	e005      	b.n	8006e4c <HAL_DMA_Abort_IT+0x1ac>
 8006e40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e44:	e002      	b.n	8006e4c <HAL_DMA_Abort_IT+0x1ac>
 8006e46:	2310      	movs	r3, #16
 8006e48:	e000      	b.n	8006e4c <HAL_DMA_Abort_IT+0x1ac>
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	4a17      	ldr	r2, [pc, #92]	; (8006eac <HAL_DMA_Abort_IT+0x20c>)
 8006e4e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2201      	movs	r2, #1
 8006e54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d003      	beq.n	8006e70 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	4798      	blx	r3
    } 
  }
  return status;
 8006e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3710      	adds	r7, #16
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	bf00      	nop
 8006e7c:	40020080 	.word	0x40020080
 8006e80:	40020008 	.word	0x40020008
 8006e84:	4002001c 	.word	0x4002001c
 8006e88:	40020030 	.word	0x40020030
 8006e8c:	40020044 	.word	0x40020044
 8006e90:	40020058 	.word	0x40020058
 8006e94:	4002006c 	.word	0x4002006c
 8006e98:	40020408 	.word	0x40020408
 8006e9c:	4002041c 	.word	0x4002041c
 8006ea0:	40020430 	.word	0x40020430
 8006ea4:	40020444 	.word	0x40020444
 8006ea8:	40020400 	.word	0x40020400
 8006eac:	40020000 	.word	0x40020000

08006eb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b08b      	sub	sp, #44	; 0x2c
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006ec2:	e179      	b.n	80071b8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8006ecc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	69fa      	ldr	r2, [r7, #28]
 8006ed4:	4013      	ands	r3, r2
 8006ed6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006ed8:	69ba      	ldr	r2, [r7, #24]
 8006eda:	69fb      	ldr	r3, [r7, #28]
 8006edc:	429a      	cmp	r2, r3
 8006ede:	f040 8168 	bne.w	80071b2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	4aa0      	ldr	r2, [pc, #640]	; (8007168 <HAL_GPIO_Init+0x2b8>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d05e      	beq.n	8006faa <HAL_GPIO_Init+0xfa>
 8006eec:	4a9e      	ldr	r2, [pc, #632]	; (8007168 <HAL_GPIO_Init+0x2b8>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d875      	bhi.n	8006fde <HAL_GPIO_Init+0x12e>
 8006ef2:	4a9e      	ldr	r2, [pc, #632]	; (800716c <HAL_GPIO_Init+0x2bc>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d058      	beq.n	8006faa <HAL_GPIO_Init+0xfa>
 8006ef8:	4a9c      	ldr	r2, [pc, #624]	; (800716c <HAL_GPIO_Init+0x2bc>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d86f      	bhi.n	8006fde <HAL_GPIO_Init+0x12e>
 8006efe:	4a9c      	ldr	r2, [pc, #624]	; (8007170 <HAL_GPIO_Init+0x2c0>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d052      	beq.n	8006faa <HAL_GPIO_Init+0xfa>
 8006f04:	4a9a      	ldr	r2, [pc, #616]	; (8007170 <HAL_GPIO_Init+0x2c0>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d869      	bhi.n	8006fde <HAL_GPIO_Init+0x12e>
 8006f0a:	4a9a      	ldr	r2, [pc, #616]	; (8007174 <HAL_GPIO_Init+0x2c4>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d04c      	beq.n	8006faa <HAL_GPIO_Init+0xfa>
 8006f10:	4a98      	ldr	r2, [pc, #608]	; (8007174 <HAL_GPIO_Init+0x2c4>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d863      	bhi.n	8006fde <HAL_GPIO_Init+0x12e>
 8006f16:	4a98      	ldr	r2, [pc, #608]	; (8007178 <HAL_GPIO_Init+0x2c8>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d046      	beq.n	8006faa <HAL_GPIO_Init+0xfa>
 8006f1c:	4a96      	ldr	r2, [pc, #600]	; (8007178 <HAL_GPIO_Init+0x2c8>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d85d      	bhi.n	8006fde <HAL_GPIO_Init+0x12e>
 8006f22:	2b12      	cmp	r3, #18
 8006f24:	d82a      	bhi.n	8006f7c <HAL_GPIO_Init+0xcc>
 8006f26:	2b12      	cmp	r3, #18
 8006f28:	d859      	bhi.n	8006fde <HAL_GPIO_Init+0x12e>
 8006f2a:	a201      	add	r2, pc, #4	; (adr r2, 8006f30 <HAL_GPIO_Init+0x80>)
 8006f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f30:	08006fab 	.word	0x08006fab
 8006f34:	08006f85 	.word	0x08006f85
 8006f38:	08006f97 	.word	0x08006f97
 8006f3c:	08006fd9 	.word	0x08006fd9
 8006f40:	08006fdf 	.word	0x08006fdf
 8006f44:	08006fdf 	.word	0x08006fdf
 8006f48:	08006fdf 	.word	0x08006fdf
 8006f4c:	08006fdf 	.word	0x08006fdf
 8006f50:	08006fdf 	.word	0x08006fdf
 8006f54:	08006fdf 	.word	0x08006fdf
 8006f58:	08006fdf 	.word	0x08006fdf
 8006f5c:	08006fdf 	.word	0x08006fdf
 8006f60:	08006fdf 	.word	0x08006fdf
 8006f64:	08006fdf 	.word	0x08006fdf
 8006f68:	08006fdf 	.word	0x08006fdf
 8006f6c:	08006fdf 	.word	0x08006fdf
 8006f70:	08006fdf 	.word	0x08006fdf
 8006f74:	08006f8d 	.word	0x08006f8d
 8006f78:	08006fa1 	.word	0x08006fa1
 8006f7c:	4a7f      	ldr	r2, [pc, #508]	; (800717c <HAL_GPIO_Init+0x2cc>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d013      	beq.n	8006faa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006f82:	e02c      	b.n	8006fde <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	623b      	str	r3, [r7, #32]
          break;
 8006f8a:	e029      	b.n	8006fe0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	3304      	adds	r3, #4
 8006f92:	623b      	str	r3, [r7, #32]
          break;
 8006f94:	e024      	b.n	8006fe0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	68db      	ldr	r3, [r3, #12]
 8006f9a:	3308      	adds	r3, #8
 8006f9c:	623b      	str	r3, [r7, #32]
          break;
 8006f9e:	e01f      	b.n	8006fe0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	68db      	ldr	r3, [r3, #12]
 8006fa4:	330c      	adds	r3, #12
 8006fa6:	623b      	str	r3, [r7, #32]
          break;
 8006fa8:	e01a      	b.n	8006fe0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d102      	bne.n	8006fb8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8006fb2:	2304      	movs	r3, #4
 8006fb4:	623b      	str	r3, [r7, #32]
          break;
 8006fb6:	e013      	b.n	8006fe0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d105      	bne.n	8006fcc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006fc0:	2308      	movs	r3, #8
 8006fc2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	69fa      	ldr	r2, [r7, #28]
 8006fc8:	611a      	str	r2, [r3, #16]
          break;
 8006fca:	e009      	b.n	8006fe0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006fcc:	2308      	movs	r3, #8
 8006fce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	69fa      	ldr	r2, [r7, #28]
 8006fd4:	615a      	str	r2, [r3, #20]
          break;
 8006fd6:	e003      	b.n	8006fe0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	623b      	str	r3, [r7, #32]
          break;
 8006fdc:	e000      	b.n	8006fe0 <HAL_GPIO_Init+0x130>
          break;
 8006fde:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006fe0:	69bb      	ldr	r3, [r7, #24]
 8006fe2:	2bff      	cmp	r3, #255	; 0xff
 8006fe4:	d801      	bhi.n	8006fea <HAL_GPIO_Init+0x13a>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	e001      	b.n	8006fee <HAL_GPIO_Init+0x13e>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	3304      	adds	r3, #4
 8006fee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006ff0:	69bb      	ldr	r3, [r7, #24]
 8006ff2:	2bff      	cmp	r3, #255	; 0xff
 8006ff4:	d802      	bhi.n	8006ffc <HAL_GPIO_Init+0x14c>
 8006ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	e002      	b.n	8007002 <HAL_GPIO_Init+0x152>
 8006ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffe:	3b08      	subs	r3, #8
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	210f      	movs	r1, #15
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	fa01 f303 	lsl.w	r3, r1, r3
 8007010:	43db      	mvns	r3, r3
 8007012:	401a      	ands	r2, r3
 8007014:	6a39      	ldr	r1, [r7, #32]
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	fa01 f303 	lsl.w	r3, r1, r3
 800701c:	431a      	orrs	r2, r3
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800702a:	2b00      	cmp	r3, #0
 800702c:	f000 80c1 	beq.w	80071b2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8007030:	4b53      	ldr	r3, [pc, #332]	; (8007180 <HAL_GPIO_Init+0x2d0>)
 8007032:	699b      	ldr	r3, [r3, #24]
 8007034:	4a52      	ldr	r2, [pc, #328]	; (8007180 <HAL_GPIO_Init+0x2d0>)
 8007036:	f043 0301 	orr.w	r3, r3, #1
 800703a:	6193      	str	r3, [r2, #24]
 800703c:	4b50      	ldr	r3, [pc, #320]	; (8007180 <HAL_GPIO_Init+0x2d0>)
 800703e:	699b      	ldr	r3, [r3, #24]
 8007040:	f003 0301 	and.w	r3, r3, #1
 8007044:	60bb      	str	r3, [r7, #8]
 8007046:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8007048:	4a4e      	ldr	r2, [pc, #312]	; (8007184 <HAL_GPIO_Init+0x2d4>)
 800704a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704c:	089b      	lsrs	r3, r3, #2
 800704e:	3302      	adds	r3, #2
 8007050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007054:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8007056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007058:	f003 0303 	and.w	r3, r3, #3
 800705c:	009b      	lsls	r3, r3, #2
 800705e:	220f      	movs	r2, #15
 8007060:	fa02 f303 	lsl.w	r3, r2, r3
 8007064:	43db      	mvns	r3, r3
 8007066:	68fa      	ldr	r2, [r7, #12]
 8007068:	4013      	ands	r3, r2
 800706a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	4a46      	ldr	r2, [pc, #280]	; (8007188 <HAL_GPIO_Init+0x2d8>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d01f      	beq.n	80070b4 <HAL_GPIO_Init+0x204>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	4a45      	ldr	r2, [pc, #276]	; (800718c <HAL_GPIO_Init+0x2dc>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d019      	beq.n	80070b0 <HAL_GPIO_Init+0x200>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	4a44      	ldr	r2, [pc, #272]	; (8007190 <HAL_GPIO_Init+0x2e0>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d013      	beq.n	80070ac <HAL_GPIO_Init+0x1fc>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	4a43      	ldr	r2, [pc, #268]	; (8007194 <HAL_GPIO_Init+0x2e4>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d00d      	beq.n	80070a8 <HAL_GPIO_Init+0x1f8>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	4a42      	ldr	r2, [pc, #264]	; (8007198 <HAL_GPIO_Init+0x2e8>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d007      	beq.n	80070a4 <HAL_GPIO_Init+0x1f4>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	4a41      	ldr	r2, [pc, #260]	; (800719c <HAL_GPIO_Init+0x2ec>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d101      	bne.n	80070a0 <HAL_GPIO_Init+0x1f0>
 800709c:	2305      	movs	r3, #5
 800709e:	e00a      	b.n	80070b6 <HAL_GPIO_Init+0x206>
 80070a0:	2306      	movs	r3, #6
 80070a2:	e008      	b.n	80070b6 <HAL_GPIO_Init+0x206>
 80070a4:	2304      	movs	r3, #4
 80070a6:	e006      	b.n	80070b6 <HAL_GPIO_Init+0x206>
 80070a8:	2303      	movs	r3, #3
 80070aa:	e004      	b.n	80070b6 <HAL_GPIO_Init+0x206>
 80070ac:	2302      	movs	r3, #2
 80070ae:	e002      	b.n	80070b6 <HAL_GPIO_Init+0x206>
 80070b0:	2301      	movs	r3, #1
 80070b2:	e000      	b.n	80070b6 <HAL_GPIO_Init+0x206>
 80070b4:	2300      	movs	r3, #0
 80070b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070b8:	f002 0203 	and.w	r2, r2, #3
 80070bc:	0092      	lsls	r2, r2, #2
 80070be:	4093      	lsls	r3, r2
 80070c0:	68fa      	ldr	r2, [r7, #12]
 80070c2:	4313      	orrs	r3, r2
 80070c4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80070c6:	492f      	ldr	r1, [pc, #188]	; (8007184 <HAL_GPIO_Init+0x2d4>)
 80070c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ca:	089b      	lsrs	r3, r3, #2
 80070cc:	3302      	adds	r3, #2
 80070ce:	68fa      	ldr	r2, [r7, #12]
 80070d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d006      	beq.n	80070ee <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80070e0:	4b2f      	ldr	r3, [pc, #188]	; (80071a0 <HAL_GPIO_Init+0x2f0>)
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	492e      	ldr	r1, [pc, #184]	; (80071a0 <HAL_GPIO_Init+0x2f0>)
 80070e6:	69bb      	ldr	r3, [r7, #24]
 80070e8:	4313      	orrs	r3, r2
 80070ea:	600b      	str	r3, [r1, #0]
 80070ec:	e006      	b.n	80070fc <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80070ee:	4b2c      	ldr	r3, [pc, #176]	; (80071a0 <HAL_GPIO_Init+0x2f0>)
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	69bb      	ldr	r3, [r7, #24]
 80070f4:	43db      	mvns	r3, r3
 80070f6:	492a      	ldr	r1, [pc, #168]	; (80071a0 <HAL_GPIO_Init+0x2f0>)
 80070f8:	4013      	ands	r3, r2
 80070fa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007104:	2b00      	cmp	r3, #0
 8007106:	d006      	beq.n	8007116 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8007108:	4b25      	ldr	r3, [pc, #148]	; (80071a0 <HAL_GPIO_Init+0x2f0>)
 800710a:	685a      	ldr	r2, [r3, #4]
 800710c:	4924      	ldr	r1, [pc, #144]	; (80071a0 <HAL_GPIO_Init+0x2f0>)
 800710e:	69bb      	ldr	r3, [r7, #24]
 8007110:	4313      	orrs	r3, r2
 8007112:	604b      	str	r3, [r1, #4]
 8007114:	e006      	b.n	8007124 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8007116:	4b22      	ldr	r3, [pc, #136]	; (80071a0 <HAL_GPIO_Init+0x2f0>)
 8007118:	685a      	ldr	r2, [r3, #4]
 800711a:	69bb      	ldr	r3, [r7, #24]
 800711c:	43db      	mvns	r3, r3
 800711e:	4920      	ldr	r1, [pc, #128]	; (80071a0 <HAL_GPIO_Init+0x2f0>)
 8007120:	4013      	ands	r3, r2
 8007122:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800712c:	2b00      	cmp	r3, #0
 800712e:	d006      	beq.n	800713e <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8007130:	4b1b      	ldr	r3, [pc, #108]	; (80071a0 <HAL_GPIO_Init+0x2f0>)
 8007132:	689a      	ldr	r2, [r3, #8]
 8007134:	491a      	ldr	r1, [pc, #104]	; (80071a0 <HAL_GPIO_Init+0x2f0>)
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	4313      	orrs	r3, r2
 800713a:	608b      	str	r3, [r1, #8]
 800713c:	e006      	b.n	800714c <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800713e:	4b18      	ldr	r3, [pc, #96]	; (80071a0 <HAL_GPIO_Init+0x2f0>)
 8007140:	689a      	ldr	r2, [r3, #8]
 8007142:	69bb      	ldr	r3, [r7, #24]
 8007144:	43db      	mvns	r3, r3
 8007146:	4916      	ldr	r1, [pc, #88]	; (80071a0 <HAL_GPIO_Init+0x2f0>)
 8007148:	4013      	ands	r3, r2
 800714a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007154:	2b00      	cmp	r3, #0
 8007156:	d025      	beq.n	80071a4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8007158:	4b11      	ldr	r3, [pc, #68]	; (80071a0 <HAL_GPIO_Init+0x2f0>)
 800715a:	68da      	ldr	r2, [r3, #12]
 800715c:	4910      	ldr	r1, [pc, #64]	; (80071a0 <HAL_GPIO_Init+0x2f0>)
 800715e:	69bb      	ldr	r3, [r7, #24]
 8007160:	4313      	orrs	r3, r2
 8007162:	60cb      	str	r3, [r1, #12]
 8007164:	e025      	b.n	80071b2 <HAL_GPIO_Init+0x302>
 8007166:	bf00      	nop
 8007168:	10320000 	.word	0x10320000
 800716c:	10310000 	.word	0x10310000
 8007170:	10220000 	.word	0x10220000
 8007174:	10210000 	.word	0x10210000
 8007178:	10120000 	.word	0x10120000
 800717c:	10110000 	.word	0x10110000
 8007180:	40021000 	.word	0x40021000
 8007184:	40010000 	.word	0x40010000
 8007188:	40010800 	.word	0x40010800
 800718c:	40010c00 	.word	0x40010c00
 8007190:	40011000 	.word	0x40011000
 8007194:	40011400 	.word	0x40011400
 8007198:	40011800 	.word	0x40011800
 800719c:	40011c00 	.word	0x40011c00
 80071a0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80071a4:	4b0b      	ldr	r3, [pc, #44]	; (80071d4 <HAL_GPIO_Init+0x324>)
 80071a6:	68da      	ldr	r2, [r3, #12]
 80071a8:	69bb      	ldr	r3, [r7, #24]
 80071aa:	43db      	mvns	r3, r3
 80071ac:	4909      	ldr	r1, [pc, #36]	; (80071d4 <HAL_GPIO_Init+0x324>)
 80071ae:	4013      	ands	r3, r2
 80071b0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80071b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b4:	3301      	adds	r3, #1
 80071b6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071be:	fa22 f303 	lsr.w	r3, r2, r3
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	f47f ae7e 	bne.w	8006ec4 <HAL_GPIO_Init+0x14>
  }
}
 80071c8:	bf00      	nop
 80071ca:	bf00      	nop
 80071cc:	372c      	adds	r7, #44	; 0x2c
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bc80      	pop	{r7}
 80071d2:	4770      	bx	lr
 80071d4:	40010400 	.word	0x40010400

080071d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80071d8:	b480      	push	{r7}
 80071da:	b085      	sub	sp, #20
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	460b      	mov	r3, r1
 80071e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	689a      	ldr	r2, [r3, #8]
 80071e8:	887b      	ldrh	r3, [r7, #2]
 80071ea:	4013      	ands	r3, r2
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d002      	beq.n	80071f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80071f0:	2301      	movs	r3, #1
 80071f2:	73fb      	strb	r3, [r7, #15]
 80071f4:	e001      	b.n	80071fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80071f6:	2300      	movs	r3, #0
 80071f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80071fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3714      	adds	r7, #20
 8007200:	46bd      	mov	sp, r7
 8007202:	bc80      	pop	{r7}
 8007204:	4770      	bx	lr

08007206 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007206:	b480      	push	{r7}
 8007208:	b083      	sub	sp, #12
 800720a:	af00      	add	r7, sp, #0
 800720c:	6078      	str	r0, [r7, #4]
 800720e:	460b      	mov	r3, r1
 8007210:	807b      	strh	r3, [r7, #2]
 8007212:	4613      	mov	r3, r2
 8007214:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007216:	787b      	ldrb	r3, [r7, #1]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d003      	beq.n	8007224 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800721c:	887a      	ldrh	r2, [r7, #2]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8007222:	e003      	b.n	800722c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8007224:	887b      	ldrh	r3, [r7, #2]
 8007226:	041a      	lsls	r2, r3, #16
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	611a      	str	r2, [r3, #16]
}
 800722c:	bf00      	nop
 800722e:	370c      	adds	r7, #12
 8007230:	46bd      	mov	sp, r7
 8007232:	bc80      	pop	{r7}
 8007234:	4770      	bx	lr
	...

08007238 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
 800723e:	4603      	mov	r3, r0
 8007240:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007242:	4b08      	ldr	r3, [pc, #32]	; (8007264 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007244:	695a      	ldr	r2, [r3, #20]
 8007246:	88fb      	ldrh	r3, [r7, #6]
 8007248:	4013      	ands	r3, r2
 800724a:	2b00      	cmp	r3, #0
 800724c:	d006      	beq.n	800725c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800724e:	4a05      	ldr	r2, [pc, #20]	; (8007264 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007250:	88fb      	ldrh	r3, [r7, #6]
 8007252:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007254:	88fb      	ldrh	r3, [r7, #6]
 8007256:	4618      	mov	r0, r3
 8007258:	f7ff f858 	bl	800630c <HAL_GPIO_EXTI_Callback>
  }
}
 800725c:	bf00      	nop
 800725e:	3708      	adds	r7, #8
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}
 8007264:	40010400 	.word	0x40010400

08007268 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b086      	sub	sp, #24
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d101      	bne.n	800727a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007276:	2301      	movs	r3, #1
 8007278:	e26c      	b.n	8007754 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f003 0301 	and.w	r3, r3, #1
 8007282:	2b00      	cmp	r3, #0
 8007284:	f000 8087 	beq.w	8007396 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007288:	4b92      	ldr	r3, [pc, #584]	; (80074d4 <HAL_RCC_OscConfig+0x26c>)
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	f003 030c 	and.w	r3, r3, #12
 8007290:	2b04      	cmp	r3, #4
 8007292:	d00c      	beq.n	80072ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007294:	4b8f      	ldr	r3, [pc, #572]	; (80074d4 <HAL_RCC_OscConfig+0x26c>)
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	f003 030c 	and.w	r3, r3, #12
 800729c:	2b08      	cmp	r3, #8
 800729e:	d112      	bne.n	80072c6 <HAL_RCC_OscConfig+0x5e>
 80072a0:	4b8c      	ldr	r3, [pc, #560]	; (80074d4 <HAL_RCC_OscConfig+0x26c>)
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072ac:	d10b      	bne.n	80072c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072ae:	4b89      	ldr	r3, [pc, #548]	; (80074d4 <HAL_RCC_OscConfig+0x26c>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d06c      	beq.n	8007394 <HAL_RCC_OscConfig+0x12c>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d168      	bne.n	8007394 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	e246      	b.n	8007754 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072ce:	d106      	bne.n	80072de <HAL_RCC_OscConfig+0x76>
 80072d0:	4b80      	ldr	r3, [pc, #512]	; (80074d4 <HAL_RCC_OscConfig+0x26c>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a7f      	ldr	r2, [pc, #508]	; (80074d4 <HAL_RCC_OscConfig+0x26c>)
 80072d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072da:	6013      	str	r3, [r2, #0]
 80072dc:	e02e      	b.n	800733c <HAL_RCC_OscConfig+0xd4>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d10c      	bne.n	8007300 <HAL_RCC_OscConfig+0x98>
 80072e6:	4b7b      	ldr	r3, [pc, #492]	; (80074d4 <HAL_RCC_OscConfig+0x26c>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a7a      	ldr	r2, [pc, #488]	; (80074d4 <HAL_RCC_OscConfig+0x26c>)
 80072ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072f0:	6013      	str	r3, [r2, #0]
 80072f2:	4b78      	ldr	r3, [pc, #480]	; (80074d4 <HAL_RCC_OscConfig+0x26c>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a77      	ldr	r2, [pc, #476]	; (80074d4 <HAL_RCC_OscConfig+0x26c>)
 80072f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80072fc:	6013      	str	r3, [r2, #0]
 80072fe:	e01d      	b.n	800733c <HAL_RCC_OscConfig+0xd4>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007308:	d10c      	bne.n	8007324 <HAL_RCC_OscConfig+0xbc>
 800730a:	4b72      	ldr	r3, [pc, #456]	; (80074d4 <HAL_RCC_OscConfig+0x26c>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a71      	ldr	r2, [pc, #452]	; (80074d4 <HAL_RCC_OscConfig+0x26c>)
 8007310:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007314:	6013      	str	r3, [r2, #0]
 8007316:	4b6f      	ldr	r3, [pc, #444]	; (80074d4 <HAL_RCC_OscConfig+0x26c>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a6e      	ldr	r2, [pc, #440]	; (80074d4 <HAL_RCC_OscConfig+0x26c>)
 800731c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007320:	6013      	str	r3, [r2, #0]
 8007322:	e00b      	b.n	800733c <HAL_RCC_OscConfig+0xd4>
 8007324:	4b6b      	ldr	r3, [pc, #428]	; (80074d4 <HAL_RCC_OscConfig+0x26c>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a6a      	ldr	r2, [pc, #424]	; (80074d4 <HAL_RCC_OscConfig+0x26c>)
 800732a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800732e:	6013      	str	r3, [r2, #0]
 8007330:	4b68      	ldr	r3, [pc, #416]	; (80074d4 <HAL_RCC_OscConfig+0x26c>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a67      	ldr	r2, [pc, #412]	; (80074d4 <HAL_RCC_OscConfig+0x26c>)
 8007336:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800733a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d013      	beq.n	800736c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007344:	f7ff fb36 	bl	80069b4 <HAL_GetTick>
 8007348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800734a:	e008      	b.n	800735e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800734c:	f7ff fb32 	bl	80069b4 <HAL_GetTick>
 8007350:	4602      	mov	r2, r0
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	1ad3      	subs	r3, r2, r3
 8007356:	2b64      	cmp	r3, #100	; 0x64
 8007358:	d901      	bls.n	800735e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800735a:	2303      	movs	r3, #3
 800735c:	e1fa      	b.n	8007754 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800735e:	4b5d      	ldr	r3, [pc, #372]	; (80074d4 <HAL_RCC_OscConfig+0x26c>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007366:	2b00      	cmp	r3, #0
 8007368:	d0f0      	beq.n	800734c <HAL_RCC_OscConfig+0xe4>
 800736a:	e014      	b.n	8007396 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800736c:	f7ff fb22 	bl	80069b4 <HAL_GetTick>
 8007370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007372:	e008      	b.n	8007386 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007374:	f7ff fb1e 	bl	80069b4 <HAL_GetTick>
 8007378:	4602      	mov	r2, r0
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	1ad3      	subs	r3, r2, r3
 800737e:	2b64      	cmp	r3, #100	; 0x64
 8007380:	d901      	bls.n	8007386 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007382:	2303      	movs	r3, #3
 8007384:	e1e6      	b.n	8007754 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007386:	4b53      	ldr	r3, [pc, #332]	; (80074d4 <HAL_RCC_OscConfig+0x26c>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800738e:	2b00      	cmp	r3, #0
 8007390:	d1f0      	bne.n	8007374 <HAL_RCC_OscConfig+0x10c>
 8007392:	e000      	b.n	8007396 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007394:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f003 0302 	and.w	r3, r3, #2
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d063      	beq.n	800746a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80073a2:	4b4c      	ldr	r3, [pc, #304]	; (80074d4 <HAL_RCC_OscConfig+0x26c>)
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	f003 030c 	and.w	r3, r3, #12
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d00b      	beq.n	80073c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80073ae:	4b49      	ldr	r3, [pc, #292]	; (80074d4 <HAL_RCC_OscConfig+0x26c>)
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	f003 030c 	and.w	r3, r3, #12
 80073b6:	2b08      	cmp	r3, #8
 80073b8:	d11c      	bne.n	80073f4 <HAL_RCC_OscConfig+0x18c>
 80073ba:	4b46      	ldr	r3, [pc, #280]	; (80074d4 <HAL_RCC_OscConfig+0x26c>)
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d116      	bne.n	80073f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80073c6:	4b43      	ldr	r3, [pc, #268]	; (80074d4 <HAL_RCC_OscConfig+0x26c>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f003 0302 	and.w	r3, r3, #2
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d005      	beq.n	80073de <HAL_RCC_OscConfig+0x176>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	691b      	ldr	r3, [r3, #16]
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d001      	beq.n	80073de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80073da:	2301      	movs	r3, #1
 80073dc:	e1ba      	b.n	8007754 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073de:	4b3d      	ldr	r3, [pc, #244]	; (80074d4 <HAL_RCC_OscConfig+0x26c>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	695b      	ldr	r3, [r3, #20]
 80073ea:	00db      	lsls	r3, r3, #3
 80073ec:	4939      	ldr	r1, [pc, #228]	; (80074d4 <HAL_RCC_OscConfig+0x26c>)
 80073ee:	4313      	orrs	r3, r2
 80073f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80073f2:	e03a      	b.n	800746a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	691b      	ldr	r3, [r3, #16]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d020      	beq.n	800743e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80073fc:	4b36      	ldr	r3, [pc, #216]	; (80074d8 <HAL_RCC_OscConfig+0x270>)
 80073fe:	2201      	movs	r2, #1
 8007400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007402:	f7ff fad7 	bl	80069b4 <HAL_GetTick>
 8007406:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007408:	e008      	b.n	800741c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800740a:	f7ff fad3 	bl	80069b4 <HAL_GetTick>
 800740e:	4602      	mov	r2, r0
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	1ad3      	subs	r3, r2, r3
 8007414:	2b02      	cmp	r3, #2
 8007416:	d901      	bls.n	800741c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007418:	2303      	movs	r3, #3
 800741a:	e19b      	b.n	8007754 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800741c:	4b2d      	ldr	r3, [pc, #180]	; (80074d4 <HAL_RCC_OscConfig+0x26c>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f003 0302 	and.w	r3, r3, #2
 8007424:	2b00      	cmp	r3, #0
 8007426:	d0f0      	beq.n	800740a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007428:	4b2a      	ldr	r3, [pc, #168]	; (80074d4 <HAL_RCC_OscConfig+0x26c>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	695b      	ldr	r3, [r3, #20]
 8007434:	00db      	lsls	r3, r3, #3
 8007436:	4927      	ldr	r1, [pc, #156]	; (80074d4 <HAL_RCC_OscConfig+0x26c>)
 8007438:	4313      	orrs	r3, r2
 800743a:	600b      	str	r3, [r1, #0]
 800743c:	e015      	b.n	800746a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800743e:	4b26      	ldr	r3, [pc, #152]	; (80074d8 <HAL_RCC_OscConfig+0x270>)
 8007440:	2200      	movs	r2, #0
 8007442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007444:	f7ff fab6 	bl	80069b4 <HAL_GetTick>
 8007448:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800744a:	e008      	b.n	800745e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800744c:	f7ff fab2 	bl	80069b4 <HAL_GetTick>
 8007450:	4602      	mov	r2, r0
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	1ad3      	subs	r3, r2, r3
 8007456:	2b02      	cmp	r3, #2
 8007458:	d901      	bls.n	800745e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800745a:	2303      	movs	r3, #3
 800745c:	e17a      	b.n	8007754 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800745e:	4b1d      	ldr	r3, [pc, #116]	; (80074d4 <HAL_RCC_OscConfig+0x26c>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f003 0302 	and.w	r3, r3, #2
 8007466:	2b00      	cmp	r3, #0
 8007468:	d1f0      	bne.n	800744c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f003 0308 	and.w	r3, r3, #8
 8007472:	2b00      	cmp	r3, #0
 8007474:	d03a      	beq.n	80074ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	699b      	ldr	r3, [r3, #24]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d019      	beq.n	80074b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800747e:	4b17      	ldr	r3, [pc, #92]	; (80074dc <HAL_RCC_OscConfig+0x274>)
 8007480:	2201      	movs	r2, #1
 8007482:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007484:	f7ff fa96 	bl	80069b4 <HAL_GetTick>
 8007488:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800748a:	e008      	b.n	800749e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800748c:	f7ff fa92 	bl	80069b4 <HAL_GetTick>
 8007490:	4602      	mov	r2, r0
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	1ad3      	subs	r3, r2, r3
 8007496:	2b02      	cmp	r3, #2
 8007498:	d901      	bls.n	800749e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800749a:	2303      	movs	r3, #3
 800749c:	e15a      	b.n	8007754 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800749e:	4b0d      	ldr	r3, [pc, #52]	; (80074d4 <HAL_RCC_OscConfig+0x26c>)
 80074a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a2:	f003 0302 	and.w	r3, r3, #2
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d0f0      	beq.n	800748c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80074aa:	2001      	movs	r0, #1
 80074ac:	f000 fad8 	bl	8007a60 <RCC_Delay>
 80074b0:	e01c      	b.n	80074ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80074b2:	4b0a      	ldr	r3, [pc, #40]	; (80074dc <HAL_RCC_OscConfig+0x274>)
 80074b4:	2200      	movs	r2, #0
 80074b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80074b8:	f7ff fa7c 	bl	80069b4 <HAL_GetTick>
 80074bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80074be:	e00f      	b.n	80074e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80074c0:	f7ff fa78 	bl	80069b4 <HAL_GetTick>
 80074c4:	4602      	mov	r2, r0
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	1ad3      	subs	r3, r2, r3
 80074ca:	2b02      	cmp	r3, #2
 80074cc:	d908      	bls.n	80074e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80074ce:	2303      	movs	r3, #3
 80074d0:	e140      	b.n	8007754 <HAL_RCC_OscConfig+0x4ec>
 80074d2:	bf00      	nop
 80074d4:	40021000 	.word	0x40021000
 80074d8:	42420000 	.word	0x42420000
 80074dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80074e0:	4b9e      	ldr	r3, [pc, #632]	; (800775c <HAL_RCC_OscConfig+0x4f4>)
 80074e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e4:	f003 0302 	and.w	r3, r3, #2
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d1e9      	bne.n	80074c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f003 0304 	and.w	r3, r3, #4
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	f000 80a6 	beq.w	8007646 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80074fa:	2300      	movs	r3, #0
 80074fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80074fe:	4b97      	ldr	r3, [pc, #604]	; (800775c <HAL_RCC_OscConfig+0x4f4>)
 8007500:	69db      	ldr	r3, [r3, #28]
 8007502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007506:	2b00      	cmp	r3, #0
 8007508:	d10d      	bne.n	8007526 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800750a:	4b94      	ldr	r3, [pc, #592]	; (800775c <HAL_RCC_OscConfig+0x4f4>)
 800750c:	69db      	ldr	r3, [r3, #28]
 800750e:	4a93      	ldr	r2, [pc, #588]	; (800775c <HAL_RCC_OscConfig+0x4f4>)
 8007510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007514:	61d3      	str	r3, [r2, #28]
 8007516:	4b91      	ldr	r3, [pc, #580]	; (800775c <HAL_RCC_OscConfig+0x4f4>)
 8007518:	69db      	ldr	r3, [r3, #28]
 800751a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800751e:	60bb      	str	r3, [r7, #8]
 8007520:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007522:	2301      	movs	r3, #1
 8007524:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007526:	4b8e      	ldr	r3, [pc, #568]	; (8007760 <HAL_RCC_OscConfig+0x4f8>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800752e:	2b00      	cmp	r3, #0
 8007530:	d118      	bne.n	8007564 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007532:	4b8b      	ldr	r3, [pc, #556]	; (8007760 <HAL_RCC_OscConfig+0x4f8>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a8a      	ldr	r2, [pc, #552]	; (8007760 <HAL_RCC_OscConfig+0x4f8>)
 8007538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800753c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800753e:	f7ff fa39 	bl	80069b4 <HAL_GetTick>
 8007542:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007544:	e008      	b.n	8007558 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007546:	f7ff fa35 	bl	80069b4 <HAL_GetTick>
 800754a:	4602      	mov	r2, r0
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	1ad3      	subs	r3, r2, r3
 8007550:	2b64      	cmp	r3, #100	; 0x64
 8007552:	d901      	bls.n	8007558 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007554:	2303      	movs	r3, #3
 8007556:	e0fd      	b.n	8007754 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007558:	4b81      	ldr	r3, [pc, #516]	; (8007760 <HAL_RCC_OscConfig+0x4f8>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007560:	2b00      	cmp	r3, #0
 8007562:	d0f0      	beq.n	8007546 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	2b01      	cmp	r3, #1
 800756a:	d106      	bne.n	800757a <HAL_RCC_OscConfig+0x312>
 800756c:	4b7b      	ldr	r3, [pc, #492]	; (800775c <HAL_RCC_OscConfig+0x4f4>)
 800756e:	6a1b      	ldr	r3, [r3, #32]
 8007570:	4a7a      	ldr	r2, [pc, #488]	; (800775c <HAL_RCC_OscConfig+0x4f4>)
 8007572:	f043 0301 	orr.w	r3, r3, #1
 8007576:	6213      	str	r3, [r2, #32]
 8007578:	e02d      	b.n	80075d6 <HAL_RCC_OscConfig+0x36e>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	68db      	ldr	r3, [r3, #12]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d10c      	bne.n	800759c <HAL_RCC_OscConfig+0x334>
 8007582:	4b76      	ldr	r3, [pc, #472]	; (800775c <HAL_RCC_OscConfig+0x4f4>)
 8007584:	6a1b      	ldr	r3, [r3, #32]
 8007586:	4a75      	ldr	r2, [pc, #468]	; (800775c <HAL_RCC_OscConfig+0x4f4>)
 8007588:	f023 0301 	bic.w	r3, r3, #1
 800758c:	6213      	str	r3, [r2, #32]
 800758e:	4b73      	ldr	r3, [pc, #460]	; (800775c <HAL_RCC_OscConfig+0x4f4>)
 8007590:	6a1b      	ldr	r3, [r3, #32]
 8007592:	4a72      	ldr	r2, [pc, #456]	; (800775c <HAL_RCC_OscConfig+0x4f4>)
 8007594:	f023 0304 	bic.w	r3, r3, #4
 8007598:	6213      	str	r3, [r2, #32]
 800759a:	e01c      	b.n	80075d6 <HAL_RCC_OscConfig+0x36e>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	2b05      	cmp	r3, #5
 80075a2:	d10c      	bne.n	80075be <HAL_RCC_OscConfig+0x356>
 80075a4:	4b6d      	ldr	r3, [pc, #436]	; (800775c <HAL_RCC_OscConfig+0x4f4>)
 80075a6:	6a1b      	ldr	r3, [r3, #32]
 80075a8:	4a6c      	ldr	r2, [pc, #432]	; (800775c <HAL_RCC_OscConfig+0x4f4>)
 80075aa:	f043 0304 	orr.w	r3, r3, #4
 80075ae:	6213      	str	r3, [r2, #32]
 80075b0:	4b6a      	ldr	r3, [pc, #424]	; (800775c <HAL_RCC_OscConfig+0x4f4>)
 80075b2:	6a1b      	ldr	r3, [r3, #32]
 80075b4:	4a69      	ldr	r2, [pc, #420]	; (800775c <HAL_RCC_OscConfig+0x4f4>)
 80075b6:	f043 0301 	orr.w	r3, r3, #1
 80075ba:	6213      	str	r3, [r2, #32]
 80075bc:	e00b      	b.n	80075d6 <HAL_RCC_OscConfig+0x36e>
 80075be:	4b67      	ldr	r3, [pc, #412]	; (800775c <HAL_RCC_OscConfig+0x4f4>)
 80075c0:	6a1b      	ldr	r3, [r3, #32]
 80075c2:	4a66      	ldr	r2, [pc, #408]	; (800775c <HAL_RCC_OscConfig+0x4f4>)
 80075c4:	f023 0301 	bic.w	r3, r3, #1
 80075c8:	6213      	str	r3, [r2, #32]
 80075ca:	4b64      	ldr	r3, [pc, #400]	; (800775c <HAL_RCC_OscConfig+0x4f4>)
 80075cc:	6a1b      	ldr	r3, [r3, #32]
 80075ce:	4a63      	ldr	r2, [pc, #396]	; (800775c <HAL_RCC_OscConfig+0x4f4>)
 80075d0:	f023 0304 	bic.w	r3, r3, #4
 80075d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	68db      	ldr	r3, [r3, #12]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d015      	beq.n	800760a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80075de:	f7ff f9e9 	bl	80069b4 <HAL_GetTick>
 80075e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075e4:	e00a      	b.n	80075fc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075e6:	f7ff f9e5 	bl	80069b4 <HAL_GetTick>
 80075ea:	4602      	mov	r2, r0
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	1ad3      	subs	r3, r2, r3
 80075f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d901      	bls.n	80075fc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80075f8:	2303      	movs	r3, #3
 80075fa:	e0ab      	b.n	8007754 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075fc:	4b57      	ldr	r3, [pc, #348]	; (800775c <HAL_RCC_OscConfig+0x4f4>)
 80075fe:	6a1b      	ldr	r3, [r3, #32]
 8007600:	f003 0302 	and.w	r3, r3, #2
 8007604:	2b00      	cmp	r3, #0
 8007606:	d0ee      	beq.n	80075e6 <HAL_RCC_OscConfig+0x37e>
 8007608:	e014      	b.n	8007634 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800760a:	f7ff f9d3 	bl	80069b4 <HAL_GetTick>
 800760e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007610:	e00a      	b.n	8007628 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007612:	f7ff f9cf 	bl	80069b4 <HAL_GetTick>
 8007616:	4602      	mov	r2, r0
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	1ad3      	subs	r3, r2, r3
 800761c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007620:	4293      	cmp	r3, r2
 8007622:	d901      	bls.n	8007628 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007624:	2303      	movs	r3, #3
 8007626:	e095      	b.n	8007754 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007628:	4b4c      	ldr	r3, [pc, #304]	; (800775c <HAL_RCC_OscConfig+0x4f4>)
 800762a:	6a1b      	ldr	r3, [r3, #32]
 800762c:	f003 0302 	and.w	r3, r3, #2
 8007630:	2b00      	cmp	r3, #0
 8007632:	d1ee      	bne.n	8007612 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007634:	7dfb      	ldrb	r3, [r7, #23]
 8007636:	2b01      	cmp	r3, #1
 8007638:	d105      	bne.n	8007646 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800763a:	4b48      	ldr	r3, [pc, #288]	; (800775c <HAL_RCC_OscConfig+0x4f4>)
 800763c:	69db      	ldr	r3, [r3, #28]
 800763e:	4a47      	ldr	r2, [pc, #284]	; (800775c <HAL_RCC_OscConfig+0x4f4>)
 8007640:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007644:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	69db      	ldr	r3, [r3, #28]
 800764a:	2b00      	cmp	r3, #0
 800764c:	f000 8081 	beq.w	8007752 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007650:	4b42      	ldr	r3, [pc, #264]	; (800775c <HAL_RCC_OscConfig+0x4f4>)
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	f003 030c 	and.w	r3, r3, #12
 8007658:	2b08      	cmp	r3, #8
 800765a:	d061      	beq.n	8007720 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	69db      	ldr	r3, [r3, #28]
 8007660:	2b02      	cmp	r3, #2
 8007662:	d146      	bne.n	80076f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007664:	4b3f      	ldr	r3, [pc, #252]	; (8007764 <HAL_RCC_OscConfig+0x4fc>)
 8007666:	2200      	movs	r2, #0
 8007668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800766a:	f7ff f9a3 	bl	80069b4 <HAL_GetTick>
 800766e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007670:	e008      	b.n	8007684 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007672:	f7ff f99f 	bl	80069b4 <HAL_GetTick>
 8007676:	4602      	mov	r2, r0
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	1ad3      	subs	r3, r2, r3
 800767c:	2b02      	cmp	r3, #2
 800767e:	d901      	bls.n	8007684 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007680:	2303      	movs	r3, #3
 8007682:	e067      	b.n	8007754 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007684:	4b35      	ldr	r3, [pc, #212]	; (800775c <HAL_RCC_OscConfig+0x4f4>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800768c:	2b00      	cmp	r3, #0
 800768e:	d1f0      	bne.n	8007672 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6a1b      	ldr	r3, [r3, #32]
 8007694:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007698:	d108      	bne.n	80076ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800769a:	4b30      	ldr	r3, [pc, #192]	; (800775c <HAL_RCC_OscConfig+0x4f4>)
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	492d      	ldr	r1, [pc, #180]	; (800775c <HAL_RCC_OscConfig+0x4f4>)
 80076a8:	4313      	orrs	r3, r2
 80076aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80076ac:	4b2b      	ldr	r3, [pc, #172]	; (800775c <HAL_RCC_OscConfig+0x4f4>)
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6a19      	ldr	r1, [r3, #32]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076bc:	430b      	orrs	r3, r1
 80076be:	4927      	ldr	r1, [pc, #156]	; (800775c <HAL_RCC_OscConfig+0x4f4>)
 80076c0:	4313      	orrs	r3, r2
 80076c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80076c4:	4b27      	ldr	r3, [pc, #156]	; (8007764 <HAL_RCC_OscConfig+0x4fc>)
 80076c6:	2201      	movs	r2, #1
 80076c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076ca:	f7ff f973 	bl	80069b4 <HAL_GetTick>
 80076ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80076d0:	e008      	b.n	80076e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076d2:	f7ff f96f 	bl	80069b4 <HAL_GetTick>
 80076d6:	4602      	mov	r2, r0
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	1ad3      	subs	r3, r2, r3
 80076dc:	2b02      	cmp	r3, #2
 80076de:	d901      	bls.n	80076e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80076e0:	2303      	movs	r3, #3
 80076e2:	e037      	b.n	8007754 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80076e4:	4b1d      	ldr	r3, [pc, #116]	; (800775c <HAL_RCC_OscConfig+0x4f4>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d0f0      	beq.n	80076d2 <HAL_RCC_OscConfig+0x46a>
 80076f0:	e02f      	b.n	8007752 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076f2:	4b1c      	ldr	r3, [pc, #112]	; (8007764 <HAL_RCC_OscConfig+0x4fc>)
 80076f4:	2200      	movs	r2, #0
 80076f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076f8:	f7ff f95c 	bl	80069b4 <HAL_GetTick>
 80076fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80076fe:	e008      	b.n	8007712 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007700:	f7ff f958 	bl	80069b4 <HAL_GetTick>
 8007704:	4602      	mov	r2, r0
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	1ad3      	subs	r3, r2, r3
 800770a:	2b02      	cmp	r3, #2
 800770c:	d901      	bls.n	8007712 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800770e:	2303      	movs	r3, #3
 8007710:	e020      	b.n	8007754 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007712:	4b12      	ldr	r3, [pc, #72]	; (800775c <HAL_RCC_OscConfig+0x4f4>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800771a:	2b00      	cmp	r3, #0
 800771c:	d1f0      	bne.n	8007700 <HAL_RCC_OscConfig+0x498>
 800771e:	e018      	b.n	8007752 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	69db      	ldr	r3, [r3, #28]
 8007724:	2b01      	cmp	r3, #1
 8007726:	d101      	bne.n	800772c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8007728:	2301      	movs	r3, #1
 800772a:	e013      	b.n	8007754 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800772c:	4b0b      	ldr	r3, [pc, #44]	; (800775c <HAL_RCC_OscConfig+0x4f4>)
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6a1b      	ldr	r3, [r3, #32]
 800773c:	429a      	cmp	r2, r3
 800773e:	d106      	bne.n	800774e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800774a:	429a      	cmp	r2, r3
 800774c:	d001      	beq.n	8007752 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800774e:	2301      	movs	r3, #1
 8007750:	e000      	b.n	8007754 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8007752:	2300      	movs	r3, #0
}
 8007754:	4618      	mov	r0, r3
 8007756:	3718      	adds	r7, #24
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}
 800775c:	40021000 	.word	0x40021000
 8007760:	40007000 	.word	0x40007000
 8007764:	42420060 	.word	0x42420060

08007768 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b084      	sub	sp, #16
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d101      	bne.n	800777c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007778:	2301      	movs	r3, #1
 800777a:	e0d0      	b.n	800791e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800777c:	4b6a      	ldr	r3, [pc, #424]	; (8007928 <HAL_RCC_ClockConfig+0x1c0>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f003 0307 	and.w	r3, r3, #7
 8007784:	683a      	ldr	r2, [r7, #0]
 8007786:	429a      	cmp	r2, r3
 8007788:	d910      	bls.n	80077ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800778a:	4b67      	ldr	r3, [pc, #412]	; (8007928 <HAL_RCC_ClockConfig+0x1c0>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f023 0207 	bic.w	r2, r3, #7
 8007792:	4965      	ldr	r1, [pc, #404]	; (8007928 <HAL_RCC_ClockConfig+0x1c0>)
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	4313      	orrs	r3, r2
 8007798:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800779a:	4b63      	ldr	r3, [pc, #396]	; (8007928 <HAL_RCC_ClockConfig+0x1c0>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f003 0307 	and.w	r3, r3, #7
 80077a2:	683a      	ldr	r2, [r7, #0]
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d001      	beq.n	80077ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80077a8:	2301      	movs	r3, #1
 80077aa:	e0b8      	b.n	800791e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f003 0302 	and.w	r3, r3, #2
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d020      	beq.n	80077fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f003 0304 	and.w	r3, r3, #4
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d005      	beq.n	80077d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80077c4:	4b59      	ldr	r3, [pc, #356]	; (800792c <HAL_RCC_ClockConfig+0x1c4>)
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	4a58      	ldr	r2, [pc, #352]	; (800792c <HAL_RCC_ClockConfig+0x1c4>)
 80077ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80077ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f003 0308 	and.w	r3, r3, #8
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d005      	beq.n	80077e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80077dc:	4b53      	ldr	r3, [pc, #332]	; (800792c <HAL_RCC_ClockConfig+0x1c4>)
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	4a52      	ldr	r2, [pc, #328]	; (800792c <HAL_RCC_ClockConfig+0x1c4>)
 80077e2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80077e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80077e8:	4b50      	ldr	r3, [pc, #320]	; (800792c <HAL_RCC_ClockConfig+0x1c4>)
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	689b      	ldr	r3, [r3, #8]
 80077f4:	494d      	ldr	r1, [pc, #308]	; (800792c <HAL_RCC_ClockConfig+0x1c4>)
 80077f6:	4313      	orrs	r3, r2
 80077f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f003 0301 	and.w	r3, r3, #1
 8007802:	2b00      	cmp	r3, #0
 8007804:	d040      	beq.n	8007888 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	2b01      	cmp	r3, #1
 800780c:	d107      	bne.n	800781e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800780e:	4b47      	ldr	r3, [pc, #284]	; (800792c <HAL_RCC_ClockConfig+0x1c4>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007816:	2b00      	cmp	r3, #0
 8007818:	d115      	bne.n	8007846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800781a:	2301      	movs	r3, #1
 800781c:	e07f      	b.n	800791e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	2b02      	cmp	r3, #2
 8007824:	d107      	bne.n	8007836 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007826:	4b41      	ldr	r3, [pc, #260]	; (800792c <HAL_RCC_ClockConfig+0x1c4>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800782e:	2b00      	cmp	r3, #0
 8007830:	d109      	bne.n	8007846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007832:	2301      	movs	r3, #1
 8007834:	e073      	b.n	800791e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007836:	4b3d      	ldr	r3, [pc, #244]	; (800792c <HAL_RCC_ClockConfig+0x1c4>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f003 0302 	and.w	r3, r3, #2
 800783e:	2b00      	cmp	r3, #0
 8007840:	d101      	bne.n	8007846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007842:	2301      	movs	r3, #1
 8007844:	e06b      	b.n	800791e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007846:	4b39      	ldr	r3, [pc, #228]	; (800792c <HAL_RCC_ClockConfig+0x1c4>)
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	f023 0203 	bic.w	r2, r3, #3
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	4936      	ldr	r1, [pc, #216]	; (800792c <HAL_RCC_ClockConfig+0x1c4>)
 8007854:	4313      	orrs	r3, r2
 8007856:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007858:	f7ff f8ac 	bl	80069b4 <HAL_GetTick>
 800785c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800785e:	e00a      	b.n	8007876 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007860:	f7ff f8a8 	bl	80069b4 <HAL_GetTick>
 8007864:	4602      	mov	r2, r0
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	1ad3      	subs	r3, r2, r3
 800786a:	f241 3288 	movw	r2, #5000	; 0x1388
 800786e:	4293      	cmp	r3, r2
 8007870:	d901      	bls.n	8007876 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007872:	2303      	movs	r3, #3
 8007874:	e053      	b.n	800791e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007876:	4b2d      	ldr	r3, [pc, #180]	; (800792c <HAL_RCC_ClockConfig+0x1c4>)
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	f003 020c 	and.w	r2, r3, #12
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	009b      	lsls	r3, r3, #2
 8007884:	429a      	cmp	r2, r3
 8007886:	d1eb      	bne.n	8007860 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007888:	4b27      	ldr	r3, [pc, #156]	; (8007928 <HAL_RCC_ClockConfig+0x1c0>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f003 0307 	and.w	r3, r3, #7
 8007890:	683a      	ldr	r2, [r7, #0]
 8007892:	429a      	cmp	r2, r3
 8007894:	d210      	bcs.n	80078b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007896:	4b24      	ldr	r3, [pc, #144]	; (8007928 <HAL_RCC_ClockConfig+0x1c0>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f023 0207 	bic.w	r2, r3, #7
 800789e:	4922      	ldr	r1, [pc, #136]	; (8007928 <HAL_RCC_ClockConfig+0x1c0>)
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	4313      	orrs	r3, r2
 80078a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80078a6:	4b20      	ldr	r3, [pc, #128]	; (8007928 <HAL_RCC_ClockConfig+0x1c0>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f003 0307 	and.w	r3, r3, #7
 80078ae:	683a      	ldr	r2, [r7, #0]
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d001      	beq.n	80078b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80078b4:	2301      	movs	r3, #1
 80078b6:	e032      	b.n	800791e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f003 0304 	and.w	r3, r3, #4
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d008      	beq.n	80078d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80078c4:	4b19      	ldr	r3, [pc, #100]	; (800792c <HAL_RCC_ClockConfig+0x1c4>)
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	68db      	ldr	r3, [r3, #12]
 80078d0:	4916      	ldr	r1, [pc, #88]	; (800792c <HAL_RCC_ClockConfig+0x1c4>)
 80078d2:	4313      	orrs	r3, r2
 80078d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f003 0308 	and.w	r3, r3, #8
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d009      	beq.n	80078f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80078e2:	4b12      	ldr	r3, [pc, #72]	; (800792c <HAL_RCC_ClockConfig+0x1c4>)
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	691b      	ldr	r3, [r3, #16]
 80078ee:	00db      	lsls	r3, r3, #3
 80078f0:	490e      	ldr	r1, [pc, #56]	; (800792c <HAL_RCC_ClockConfig+0x1c4>)
 80078f2:	4313      	orrs	r3, r2
 80078f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80078f6:	f000 f821 	bl	800793c <HAL_RCC_GetSysClockFreq>
 80078fa:	4602      	mov	r2, r0
 80078fc:	4b0b      	ldr	r3, [pc, #44]	; (800792c <HAL_RCC_ClockConfig+0x1c4>)
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	091b      	lsrs	r3, r3, #4
 8007902:	f003 030f 	and.w	r3, r3, #15
 8007906:	490a      	ldr	r1, [pc, #40]	; (8007930 <HAL_RCC_ClockConfig+0x1c8>)
 8007908:	5ccb      	ldrb	r3, [r1, r3]
 800790a:	fa22 f303 	lsr.w	r3, r2, r3
 800790e:	4a09      	ldr	r2, [pc, #36]	; (8007934 <HAL_RCC_ClockConfig+0x1cc>)
 8007910:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007912:	4b09      	ldr	r3, [pc, #36]	; (8007938 <HAL_RCC_ClockConfig+0x1d0>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4618      	mov	r0, r3
 8007918:	f7ff f80a 	bl	8006930 <HAL_InitTick>

  return HAL_OK;
 800791c:	2300      	movs	r3, #0
}
 800791e:	4618      	mov	r0, r3
 8007920:	3710      	adds	r7, #16
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
 8007926:	bf00      	nop
 8007928:	40022000 	.word	0x40022000
 800792c:	40021000 	.word	0x40021000
 8007930:	0800b0b0 	.word	0x0800b0b0
 8007934:	2000002c 	.word	0x2000002c
 8007938:	20000030 	.word	0x20000030

0800793c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800793c:	b490      	push	{r4, r7}
 800793e:	b08a      	sub	sp, #40	; 0x28
 8007940:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8007942:	4b2a      	ldr	r3, [pc, #168]	; (80079ec <HAL_RCC_GetSysClockFreq+0xb0>)
 8007944:	1d3c      	adds	r4, r7, #4
 8007946:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007948:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800794c:	f240 2301 	movw	r3, #513	; 0x201
 8007950:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007952:	2300      	movs	r3, #0
 8007954:	61fb      	str	r3, [r7, #28]
 8007956:	2300      	movs	r3, #0
 8007958:	61bb      	str	r3, [r7, #24]
 800795a:	2300      	movs	r3, #0
 800795c:	627b      	str	r3, [r7, #36]	; 0x24
 800795e:	2300      	movs	r3, #0
 8007960:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8007962:	2300      	movs	r3, #0
 8007964:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007966:	4b22      	ldr	r3, [pc, #136]	; (80079f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800796c:	69fb      	ldr	r3, [r7, #28]
 800796e:	f003 030c 	and.w	r3, r3, #12
 8007972:	2b04      	cmp	r3, #4
 8007974:	d002      	beq.n	800797c <HAL_RCC_GetSysClockFreq+0x40>
 8007976:	2b08      	cmp	r3, #8
 8007978:	d003      	beq.n	8007982 <HAL_RCC_GetSysClockFreq+0x46>
 800797a:	e02d      	b.n	80079d8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800797c:	4b1d      	ldr	r3, [pc, #116]	; (80079f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800797e:	623b      	str	r3, [r7, #32]
      break;
 8007980:	e02d      	b.n	80079de <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007982:	69fb      	ldr	r3, [r7, #28]
 8007984:	0c9b      	lsrs	r3, r3, #18
 8007986:	f003 030f 	and.w	r3, r3, #15
 800798a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800798e:	4413      	add	r3, r2
 8007990:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8007994:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007996:	69fb      	ldr	r3, [r7, #28]
 8007998:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800799c:	2b00      	cmp	r3, #0
 800799e:	d013      	beq.n	80079c8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80079a0:	4b13      	ldr	r3, [pc, #76]	; (80079f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	0c5b      	lsrs	r3, r3, #17
 80079a6:	f003 0301 	and.w	r3, r3, #1
 80079aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80079ae:	4413      	add	r3, r2
 80079b0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80079b4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	4a0e      	ldr	r2, [pc, #56]	; (80079f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80079ba:	fb02 f203 	mul.w	r2, r2, r3
 80079be:	69bb      	ldr	r3, [r7, #24]
 80079c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80079c4:	627b      	str	r3, [r7, #36]	; 0x24
 80079c6:	e004      	b.n	80079d2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	4a0b      	ldr	r2, [pc, #44]	; (80079f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80079cc:	fb02 f303 	mul.w	r3, r2, r3
 80079d0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80079d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d4:	623b      	str	r3, [r7, #32]
      break;
 80079d6:	e002      	b.n	80079de <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80079d8:	4b06      	ldr	r3, [pc, #24]	; (80079f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80079da:	623b      	str	r3, [r7, #32]
      break;
 80079dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80079de:	6a3b      	ldr	r3, [r7, #32]
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3728      	adds	r7, #40	; 0x28
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bc90      	pop	{r4, r7}
 80079e8:	4770      	bx	lr
 80079ea:	bf00      	nop
 80079ec:	080098e0 	.word	0x080098e0
 80079f0:	40021000 	.word	0x40021000
 80079f4:	007a1200 	.word	0x007a1200
 80079f8:	003d0900 	.word	0x003d0900

080079fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80079fc:	b480      	push	{r7}
 80079fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007a00:	4b02      	ldr	r3, [pc, #8]	; (8007a0c <HAL_RCC_GetHCLKFreq+0x10>)
 8007a02:	681b      	ldr	r3, [r3, #0]
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bc80      	pop	{r7}
 8007a0a:	4770      	bx	lr
 8007a0c:	2000002c 	.word	0x2000002c

08007a10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007a14:	f7ff fff2 	bl	80079fc <HAL_RCC_GetHCLKFreq>
 8007a18:	4602      	mov	r2, r0
 8007a1a:	4b05      	ldr	r3, [pc, #20]	; (8007a30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	0a1b      	lsrs	r3, r3, #8
 8007a20:	f003 0307 	and.w	r3, r3, #7
 8007a24:	4903      	ldr	r1, [pc, #12]	; (8007a34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007a26:	5ccb      	ldrb	r3, [r1, r3]
 8007a28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	bd80      	pop	{r7, pc}
 8007a30:	40021000 	.word	0x40021000
 8007a34:	0800b0c0 	.word	0x0800b0c0

08007a38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007a3c:	f7ff ffde 	bl	80079fc <HAL_RCC_GetHCLKFreq>
 8007a40:	4602      	mov	r2, r0
 8007a42:	4b05      	ldr	r3, [pc, #20]	; (8007a58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	0adb      	lsrs	r3, r3, #11
 8007a48:	f003 0307 	and.w	r3, r3, #7
 8007a4c:	4903      	ldr	r1, [pc, #12]	; (8007a5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007a4e:	5ccb      	ldrb	r3, [r1, r3]
 8007a50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	bd80      	pop	{r7, pc}
 8007a58:	40021000 	.word	0x40021000
 8007a5c:	0800b0c0 	.word	0x0800b0c0

08007a60 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b085      	sub	sp, #20
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007a68:	4b0a      	ldr	r3, [pc, #40]	; (8007a94 <RCC_Delay+0x34>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a0a      	ldr	r2, [pc, #40]	; (8007a98 <RCC_Delay+0x38>)
 8007a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8007a72:	0a5b      	lsrs	r3, r3, #9
 8007a74:	687a      	ldr	r2, [r7, #4]
 8007a76:	fb02 f303 	mul.w	r3, r2, r3
 8007a7a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007a7c:	bf00      	nop
  }
  while (Delay --);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	1e5a      	subs	r2, r3, #1
 8007a82:	60fa      	str	r2, [r7, #12]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d1f9      	bne.n	8007a7c <RCC_Delay+0x1c>
}
 8007a88:	bf00      	nop
 8007a8a:	bf00      	nop
 8007a8c:	3714      	adds	r7, #20
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bc80      	pop	{r7}
 8007a92:	4770      	bx	lr
 8007a94:	2000002c 	.word	0x2000002c
 8007a98:	10624dd3 	.word	0x10624dd3

08007a9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b082      	sub	sp, #8
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d101      	bne.n	8007aae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	e041      	b.n	8007b32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d106      	bne.n	8007ac8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2200      	movs	r2, #0
 8007abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f7fe fe56 	bl	8006774 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2202      	movs	r2, #2
 8007acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681a      	ldr	r2, [r3, #0]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	3304      	adds	r3, #4
 8007ad8:	4619      	mov	r1, r3
 8007ada:	4610      	mov	r0, r2
 8007adc:	f000 faac 	bl	8008038 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2201      	movs	r2, #1
 8007aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2201      	movs	r2, #1
 8007af4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2201      	movs	r2, #1
 8007afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2201      	movs	r2, #1
 8007b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2201      	movs	r2, #1
 8007b14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2201      	movs	r2, #1
 8007b24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b30:	2300      	movs	r3, #0
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3708      	adds	r7, #8
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
	...

08007b3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b085      	sub	sp, #20
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b4a:	b2db      	uxtb	r3, r3
 8007b4c:	2b01      	cmp	r3, #1
 8007b4e:	d001      	beq.n	8007b54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007b50:	2301      	movs	r3, #1
 8007b52:	e044      	b.n	8007bde <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2202      	movs	r2, #2
 8007b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	68da      	ldr	r2, [r3, #12]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f042 0201 	orr.w	r2, r2, #1
 8007b6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a1d      	ldr	r2, [pc, #116]	; (8007be8 <HAL_TIM_Base_Start_IT+0xac>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d018      	beq.n	8007ba8 <HAL_TIM_Base_Start_IT+0x6c>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a1c      	ldr	r2, [pc, #112]	; (8007bec <HAL_TIM_Base_Start_IT+0xb0>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d013      	beq.n	8007ba8 <HAL_TIM_Base_Start_IT+0x6c>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b88:	d00e      	beq.n	8007ba8 <HAL_TIM_Base_Start_IT+0x6c>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a18      	ldr	r2, [pc, #96]	; (8007bf0 <HAL_TIM_Base_Start_IT+0xb4>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d009      	beq.n	8007ba8 <HAL_TIM_Base_Start_IT+0x6c>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a16      	ldr	r2, [pc, #88]	; (8007bf4 <HAL_TIM_Base_Start_IT+0xb8>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d004      	beq.n	8007ba8 <HAL_TIM_Base_Start_IT+0x6c>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a15      	ldr	r2, [pc, #84]	; (8007bf8 <HAL_TIM_Base_Start_IT+0xbc>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d111      	bne.n	8007bcc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	689b      	ldr	r3, [r3, #8]
 8007bae:	f003 0307 	and.w	r3, r3, #7
 8007bb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2b06      	cmp	r3, #6
 8007bb8:	d010      	beq.n	8007bdc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	681a      	ldr	r2, [r3, #0]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f042 0201 	orr.w	r2, r2, #1
 8007bc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bca:	e007      	b.n	8007bdc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	681a      	ldr	r2, [r3, #0]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f042 0201 	orr.w	r2, r2, #1
 8007bda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007bdc:	2300      	movs	r3, #0
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3714      	adds	r7, #20
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bc80      	pop	{r7}
 8007be6:	4770      	bx	lr
 8007be8:	40012c00 	.word	0x40012c00
 8007bec:	40013400 	.word	0x40013400
 8007bf0:	40000400 	.word	0x40000400
 8007bf4:	40000800 	.word	0x40000800
 8007bf8:	40000c00 	.word	0x40000c00

08007bfc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b083      	sub	sp, #12
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	68da      	ldr	r2, [r3, #12]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f022 0201 	bic.w	r2, r2, #1
 8007c12:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	6a1a      	ldr	r2, [r3, #32]
 8007c1a:	f241 1311 	movw	r3, #4369	; 0x1111
 8007c1e:	4013      	ands	r3, r2
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d10f      	bne.n	8007c44 <HAL_TIM_Base_Stop_IT+0x48>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	6a1a      	ldr	r2, [r3, #32]
 8007c2a:	f240 4344 	movw	r3, #1092	; 0x444
 8007c2e:	4013      	ands	r3, r2
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d107      	bne.n	8007c44 <HAL_TIM_Base_Stop_IT+0x48>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f022 0201 	bic.w	r2, r2, #1
 8007c42:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2201      	movs	r2, #1
 8007c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007c4c:	2300      	movs	r3, #0
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	370c      	adds	r7, #12
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bc80      	pop	{r7}
 8007c56:	4770      	bx	lr

08007c58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b082      	sub	sp, #8
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	691b      	ldr	r3, [r3, #16]
 8007c66:	f003 0302 	and.w	r3, r3, #2
 8007c6a:	2b02      	cmp	r3, #2
 8007c6c:	d122      	bne.n	8007cb4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	68db      	ldr	r3, [r3, #12]
 8007c74:	f003 0302 	and.w	r3, r3, #2
 8007c78:	2b02      	cmp	r3, #2
 8007c7a:	d11b      	bne.n	8007cb4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f06f 0202 	mvn.w	r2, #2
 8007c84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2201      	movs	r2, #1
 8007c8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	699b      	ldr	r3, [r3, #24]
 8007c92:	f003 0303 	and.w	r3, r3, #3
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d003      	beq.n	8007ca2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 f9b1 	bl	8008002 <HAL_TIM_IC_CaptureCallback>
 8007ca0:	e005      	b.n	8007cae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 f9a4 	bl	8007ff0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f000 f9b3 	bl	8008014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	691b      	ldr	r3, [r3, #16]
 8007cba:	f003 0304 	and.w	r3, r3, #4
 8007cbe:	2b04      	cmp	r3, #4
 8007cc0:	d122      	bne.n	8007d08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	68db      	ldr	r3, [r3, #12]
 8007cc8:	f003 0304 	and.w	r3, r3, #4
 8007ccc:	2b04      	cmp	r3, #4
 8007cce:	d11b      	bne.n	8007d08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f06f 0204 	mvn.w	r2, #4
 8007cd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2202      	movs	r2, #2
 8007cde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	699b      	ldr	r3, [r3, #24]
 8007ce6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d003      	beq.n	8007cf6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 f987 	bl	8008002 <HAL_TIM_IC_CaptureCallback>
 8007cf4:	e005      	b.n	8007d02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 f97a 	bl	8007ff0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 f989 	bl	8008014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2200      	movs	r2, #0
 8007d06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	691b      	ldr	r3, [r3, #16]
 8007d0e:	f003 0308 	and.w	r3, r3, #8
 8007d12:	2b08      	cmp	r3, #8
 8007d14:	d122      	bne.n	8007d5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	68db      	ldr	r3, [r3, #12]
 8007d1c:	f003 0308 	and.w	r3, r3, #8
 8007d20:	2b08      	cmp	r3, #8
 8007d22:	d11b      	bne.n	8007d5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f06f 0208 	mvn.w	r2, #8
 8007d2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2204      	movs	r2, #4
 8007d32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	69db      	ldr	r3, [r3, #28]
 8007d3a:	f003 0303 	and.w	r3, r3, #3
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d003      	beq.n	8007d4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 f95d 	bl	8008002 <HAL_TIM_IC_CaptureCallback>
 8007d48:	e005      	b.n	8007d56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f000 f950 	bl	8007ff0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f000 f95f 	bl	8008014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	691b      	ldr	r3, [r3, #16]
 8007d62:	f003 0310 	and.w	r3, r3, #16
 8007d66:	2b10      	cmp	r3, #16
 8007d68:	d122      	bne.n	8007db0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	68db      	ldr	r3, [r3, #12]
 8007d70:	f003 0310 	and.w	r3, r3, #16
 8007d74:	2b10      	cmp	r3, #16
 8007d76:	d11b      	bne.n	8007db0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f06f 0210 	mvn.w	r2, #16
 8007d80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2208      	movs	r2, #8
 8007d86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	69db      	ldr	r3, [r3, #28]
 8007d8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d003      	beq.n	8007d9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 f933 	bl	8008002 <HAL_TIM_IC_CaptureCallback>
 8007d9c:	e005      	b.n	8007daa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 f926 	bl	8007ff0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f000 f935 	bl	8008014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2200      	movs	r2, #0
 8007dae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	691b      	ldr	r3, [r3, #16]
 8007db6:	f003 0301 	and.w	r3, r3, #1
 8007dba:	2b01      	cmp	r3, #1
 8007dbc:	d10e      	bne.n	8007ddc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	68db      	ldr	r3, [r3, #12]
 8007dc4:	f003 0301 	and.w	r3, r3, #1
 8007dc8:	2b01      	cmp	r3, #1
 8007dca:	d107      	bne.n	8007ddc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f06f 0201 	mvn.w	r2, #1
 8007dd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f7fe fa8e 	bl	80062f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	691b      	ldr	r3, [r3, #16]
 8007de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007de6:	2b80      	cmp	r3, #128	; 0x80
 8007de8:	d10e      	bne.n	8007e08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	68db      	ldr	r3, [r3, #12]
 8007df0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007df4:	2b80      	cmp	r3, #128	; 0x80
 8007df6:	d107      	bne.n	8007e08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007e00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f000 fa9d 	bl	8008342 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	691b      	ldr	r3, [r3, #16]
 8007e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e12:	2b40      	cmp	r3, #64	; 0x40
 8007e14:	d10e      	bne.n	8007e34 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	68db      	ldr	r3, [r3, #12]
 8007e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e20:	2b40      	cmp	r3, #64	; 0x40
 8007e22:	d107      	bne.n	8007e34 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 f8f9 	bl	8008026 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	691b      	ldr	r3, [r3, #16]
 8007e3a:	f003 0320 	and.w	r3, r3, #32
 8007e3e:	2b20      	cmp	r3, #32
 8007e40:	d10e      	bne.n	8007e60 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	68db      	ldr	r3, [r3, #12]
 8007e48:	f003 0320 	and.w	r3, r3, #32
 8007e4c:	2b20      	cmp	r3, #32
 8007e4e:	d107      	bne.n	8007e60 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f06f 0220 	mvn.w	r2, #32
 8007e58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 fa68 	bl	8008330 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007e60:	bf00      	nop
 8007e62:	3708      	adds	r7, #8
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b084      	sub	sp, #16
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d101      	bne.n	8007e80 <HAL_TIM_ConfigClockSource+0x18>
 8007e7c:	2302      	movs	r3, #2
 8007e7e:	e0b3      	b.n	8007fe8 <HAL_TIM_ConfigClockSource+0x180>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2201      	movs	r2, #1
 8007e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2202      	movs	r2, #2
 8007e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	689b      	ldr	r3, [r3, #8]
 8007e96:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007e9e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ea6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	68fa      	ldr	r2, [r7, #12]
 8007eae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007eb8:	d03e      	beq.n	8007f38 <HAL_TIM_ConfigClockSource+0xd0>
 8007eba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ebe:	f200 8087 	bhi.w	8007fd0 <HAL_TIM_ConfigClockSource+0x168>
 8007ec2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ec6:	f000 8085 	beq.w	8007fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8007eca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ece:	d87f      	bhi.n	8007fd0 <HAL_TIM_ConfigClockSource+0x168>
 8007ed0:	2b70      	cmp	r3, #112	; 0x70
 8007ed2:	d01a      	beq.n	8007f0a <HAL_TIM_ConfigClockSource+0xa2>
 8007ed4:	2b70      	cmp	r3, #112	; 0x70
 8007ed6:	d87b      	bhi.n	8007fd0 <HAL_TIM_ConfigClockSource+0x168>
 8007ed8:	2b60      	cmp	r3, #96	; 0x60
 8007eda:	d050      	beq.n	8007f7e <HAL_TIM_ConfigClockSource+0x116>
 8007edc:	2b60      	cmp	r3, #96	; 0x60
 8007ede:	d877      	bhi.n	8007fd0 <HAL_TIM_ConfigClockSource+0x168>
 8007ee0:	2b50      	cmp	r3, #80	; 0x50
 8007ee2:	d03c      	beq.n	8007f5e <HAL_TIM_ConfigClockSource+0xf6>
 8007ee4:	2b50      	cmp	r3, #80	; 0x50
 8007ee6:	d873      	bhi.n	8007fd0 <HAL_TIM_ConfigClockSource+0x168>
 8007ee8:	2b40      	cmp	r3, #64	; 0x40
 8007eea:	d058      	beq.n	8007f9e <HAL_TIM_ConfigClockSource+0x136>
 8007eec:	2b40      	cmp	r3, #64	; 0x40
 8007eee:	d86f      	bhi.n	8007fd0 <HAL_TIM_ConfigClockSource+0x168>
 8007ef0:	2b30      	cmp	r3, #48	; 0x30
 8007ef2:	d064      	beq.n	8007fbe <HAL_TIM_ConfigClockSource+0x156>
 8007ef4:	2b30      	cmp	r3, #48	; 0x30
 8007ef6:	d86b      	bhi.n	8007fd0 <HAL_TIM_ConfigClockSource+0x168>
 8007ef8:	2b20      	cmp	r3, #32
 8007efa:	d060      	beq.n	8007fbe <HAL_TIM_ConfigClockSource+0x156>
 8007efc:	2b20      	cmp	r3, #32
 8007efe:	d867      	bhi.n	8007fd0 <HAL_TIM_ConfigClockSource+0x168>
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d05c      	beq.n	8007fbe <HAL_TIM_ConfigClockSource+0x156>
 8007f04:	2b10      	cmp	r3, #16
 8007f06:	d05a      	beq.n	8007fbe <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007f08:	e062      	b.n	8007fd0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6818      	ldr	r0, [r3, #0]
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	6899      	ldr	r1, [r3, #8]
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	685a      	ldr	r2, [r3, #4]
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	68db      	ldr	r3, [r3, #12]
 8007f1a:	f000 f97e 	bl	800821a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	689b      	ldr	r3, [r3, #8]
 8007f24:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007f2c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	68fa      	ldr	r2, [r7, #12]
 8007f34:	609a      	str	r2, [r3, #8]
      break;
 8007f36:	e04e      	b.n	8007fd6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6818      	ldr	r0, [r3, #0]
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	6899      	ldr	r1, [r3, #8]
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	685a      	ldr	r2, [r3, #4]
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	68db      	ldr	r3, [r3, #12]
 8007f48:	f000 f967 	bl	800821a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	689a      	ldr	r2, [r3, #8]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007f5a:	609a      	str	r2, [r3, #8]
      break;
 8007f5c:	e03b      	b.n	8007fd6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6818      	ldr	r0, [r3, #0]
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	6859      	ldr	r1, [r3, #4]
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	68db      	ldr	r3, [r3, #12]
 8007f6a:	461a      	mov	r2, r3
 8007f6c:	f000 f8de 	bl	800812c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	2150      	movs	r1, #80	; 0x50
 8007f76:	4618      	mov	r0, r3
 8007f78:	f000 f935 	bl	80081e6 <TIM_ITRx_SetConfig>
      break;
 8007f7c:	e02b      	b.n	8007fd6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6818      	ldr	r0, [r3, #0]
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	6859      	ldr	r1, [r3, #4]
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	68db      	ldr	r3, [r3, #12]
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	f000 f8fc 	bl	8008188 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	2160      	movs	r1, #96	; 0x60
 8007f96:	4618      	mov	r0, r3
 8007f98:	f000 f925 	bl	80081e6 <TIM_ITRx_SetConfig>
      break;
 8007f9c:	e01b      	b.n	8007fd6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6818      	ldr	r0, [r3, #0]
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	6859      	ldr	r1, [r3, #4]
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	68db      	ldr	r3, [r3, #12]
 8007faa:	461a      	mov	r2, r3
 8007fac:	f000 f8be 	bl	800812c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	2140      	movs	r1, #64	; 0x40
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f000 f915 	bl	80081e6 <TIM_ITRx_SetConfig>
      break;
 8007fbc:	e00b      	b.n	8007fd6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681a      	ldr	r2, [r3, #0]
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4619      	mov	r1, r3
 8007fc8:	4610      	mov	r0, r2
 8007fca:	f000 f90c 	bl	80081e6 <TIM_ITRx_SetConfig>
        break;
 8007fce:	e002      	b.n	8007fd6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007fd0:	bf00      	nop
 8007fd2:	e000      	b.n	8007fd6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007fd4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2201      	movs	r2, #1
 8007fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007fe6:	2300      	movs	r3, #0
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3710      	adds	r7, #16
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b083      	sub	sp, #12
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007ff8:	bf00      	nop
 8007ffa:	370c      	adds	r7, #12
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bc80      	pop	{r7}
 8008000:	4770      	bx	lr

08008002 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008002:	b480      	push	{r7}
 8008004:	b083      	sub	sp, #12
 8008006:	af00      	add	r7, sp, #0
 8008008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800800a:	bf00      	nop
 800800c:	370c      	adds	r7, #12
 800800e:	46bd      	mov	sp, r7
 8008010:	bc80      	pop	{r7}
 8008012:	4770      	bx	lr

08008014 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008014:	b480      	push	{r7}
 8008016:	b083      	sub	sp, #12
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800801c:	bf00      	nop
 800801e:	370c      	adds	r7, #12
 8008020:	46bd      	mov	sp, r7
 8008022:	bc80      	pop	{r7}
 8008024:	4770      	bx	lr

08008026 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008026:	b480      	push	{r7}
 8008028:	b083      	sub	sp, #12
 800802a:	af00      	add	r7, sp, #0
 800802c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800802e:	bf00      	nop
 8008030:	370c      	adds	r7, #12
 8008032:	46bd      	mov	sp, r7
 8008034:	bc80      	pop	{r7}
 8008036:	4770      	bx	lr

08008038 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008038:	b480      	push	{r7}
 800803a:	b085      	sub	sp, #20
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	4a33      	ldr	r2, [pc, #204]	; (8008118 <TIM_Base_SetConfig+0xe0>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d013      	beq.n	8008078 <TIM_Base_SetConfig+0x40>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	4a32      	ldr	r2, [pc, #200]	; (800811c <TIM_Base_SetConfig+0xe4>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d00f      	beq.n	8008078 <TIM_Base_SetConfig+0x40>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800805e:	d00b      	beq.n	8008078 <TIM_Base_SetConfig+0x40>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	4a2f      	ldr	r2, [pc, #188]	; (8008120 <TIM_Base_SetConfig+0xe8>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d007      	beq.n	8008078 <TIM_Base_SetConfig+0x40>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	4a2e      	ldr	r2, [pc, #184]	; (8008124 <TIM_Base_SetConfig+0xec>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d003      	beq.n	8008078 <TIM_Base_SetConfig+0x40>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	4a2d      	ldr	r2, [pc, #180]	; (8008128 <TIM_Base_SetConfig+0xf0>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d108      	bne.n	800808a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800807e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	685b      	ldr	r3, [r3, #4]
 8008084:	68fa      	ldr	r2, [r7, #12]
 8008086:	4313      	orrs	r3, r2
 8008088:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	4a22      	ldr	r2, [pc, #136]	; (8008118 <TIM_Base_SetConfig+0xe0>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d013      	beq.n	80080ba <TIM_Base_SetConfig+0x82>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	4a21      	ldr	r2, [pc, #132]	; (800811c <TIM_Base_SetConfig+0xe4>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d00f      	beq.n	80080ba <TIM_Base_SetConfig+0x82>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080a0:	d00b      	beq.n	80080ba <TIM_Base_SetConfig+0x82>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	4a1e      	ldr	r2, [pc, #120]	; (8008120 <TIM_Base_SetConfig+0xe8>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d007      	beq.n	80080ba <TIM_Base_SetConfig+0x82>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	4a1d      	ldr	r2, [pc, #116]	; (8008124 <TIM_Base_SetConfig+0xec>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d003      	beq.n	80080ba <TIM_Base_SetConfig+0x82>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	4a1c      	ldr	r2, [pc, #112]	; (8008128 <TIM_Base_SetConfig+0xf0>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d108      	bne.n	80080cc <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	68db      	ldr	r3, [r3, #12]
 80080c6:	68fa      	ldr	r2, [r7, #12]
 80080c8:	4313      	orrs	r3, r2
 80080ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	695b      	ldr	r3, [r3, #20]
 80080d6:	4313      	orrs	r3, r2
 80080d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	68fa      	ldr	r2, [r7, #12]
 80080de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	689a      	ldr	r2, [r3, #8]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	681a      	ldr	r2, [r3, #0]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	4a09      	ldr	r2, [pc, #36]	; (8008118 <TIM_Base_SetConfig+0xe0>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d003      	beq.n	8008100 <TIM_Base_SetConfig+0xc8>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	4a08      	ldr	r2, [pc, #32]	; (800811c <TIM_Base_SetConfig+0xe4>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d103      	bne.n	8008108 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	691a      	ldr	r2, [r3, #16]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2201      	movs	r2, #1
 800810c:	615a      	str	r2, [r3, #20]
}
 800810e:	bf00      	nop
 8008110:	3714      	adds	r7, #20
 8008112:	46bd      	mov	sp, r7
 8008114:	bc80      	pop	{r7}
 8008116:	4770      	bx	lr
 8008118:	40012c00 	.word	0x40012c00
 800811c:	40013400 	.word	0x40013400
 8008120:	40000400 	.word	0x40000400
 8008124:	40000800 	.word	0x40000800
 8008128:	40000c00 	.word	0x40000c00

0800812c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800812c:	b480      	push	{r7}
 800812e:	b087      	sub	sp, #28
 8008130:	af00      	add	r7, sp, #0
 8008132:	60f8      	str	r0, [r7, #12]
 8008134:	60b9      	str	r1, [r7, #8]
 8008136:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	6a1b      	ldr	r3, [r3, #32]
 800813c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	6a1b      	ldr	r3, [r3, #32]
 8008142:	f023 0201 	bic.w	r2, r3, #1
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	699b      	ldr	r3, [r3, #24]
 800814e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008156:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	011b      	lsls	r3, r3, #4
 800815c:	693a      	ldr	r2, [r7, #16]
 800815e:	4313      	orrs	r3, r2
 8008160:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	f023 030a 	bic.w	r3, r3, #10
 8008168:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800816a:	697a      	ldr	r2, [r7, #20]
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	4313      	orrs	r3, r2
 8008170:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	693a      	ldr	r2, [r7, #16]
 8008176:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	697a      	ldr	r2, [r7, #20]
 800817c:	621a      	str	r2, [r3, #32]
}
 800817e:	bf00      	nop
 8008180:	371c      	adds	r7, #28
 8008182:	46bd      	mov	sp, r7
 8008184:	bc80      	pop	{r7}
 8008186:	4770      	bx	lr

08008188 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008188:	b480      	push	{r7}
 800818a:	b087      	sub	sp, #28
 800818c:	af00      	add	r7, sp, #0
 800818e:	60f8      	str	r0, [r7, #12]
 8008190:	60b9      	str	r1, [r7, #8]
 8008192:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	6a1b      	ldr	r3, [r3, #32]
 8008198:	f023 0210 	bic.w	r2, r3, #16
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	699b      	ldr	r3, [r3, #24]
 80081a4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	6a1b      	ldr	r3, [r3, #32]
 80081aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80081b2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	031b      	lsls	r3, r3, #12
 80081b8:	697a      	ldr	r2, [r7, #20]
 80081ba:	4313      	orrs	r3, r2
 80081bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80081c4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	011b      	lsls	r3, r3, #4
 80081ca:	693a      	ldr	r2, [r7, #16]
 80081cc:	4313      	orrs	r3, r2
 80081ce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	697a      	ldr	r2, [r7, #20]
 80081d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	693a      	ldr	r2, [r7, #16]
 80081da:	621a      	str	r2, [r3, #32]
}
 80081dc:	bf00      	nop
 80081de:	371c      	adds	r7, #28
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bc80      	pop	{r7}
 80081e4:	4770      	bx	lr

080081e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80081e6:	b480      	push	{r7}
 80081e8:	b085      	sub	sp, #20
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	6078      	str	r0, [r7, #4]
 80081ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	689b      	ldr	r3, [r3, #8]
 80081f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80081fe:	683a      	ldr	r2, [r7, #0]
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	4313      	orrs	r3, r2
 8008204:	f043 0307 	orr.w	r3, r3, #7
 8008208:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	68fa      	ldr	r2, [r7, #12]
 800820e:	609a      	str	r2, [r3, #8]
}
 8008210:	bf00      	nop
 8008212:	3714      	adds	r7, #20
 8008214:	46bd      	mov	sp, r7
 8008216:	bc80      	pop	{r7}
 8008218:	4770      	bx	lr

0800821a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800821a:	b480      	push	{r7}
 800821c:	b087      	sub	sp, #28
 800821e:	af00      	add	r7, sp, #0
 8008220:	60f8      	str	r0, [r7, #12]
 8008222:	60b9      	str	r1, [r7, #8]
 8008224:	607a      	str	r2, [r7, #4]
 8008226:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	689b      	ldr	r3, [r3, #8]
 800822c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008234:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	021a      	lsls	r2, r3, #8
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	431a      	orrs	r2, r3
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	4313      	orrs	r3, r2
 8008242:	697a      	ldr	r2, [r7, #20]
 8008244:	4313      	orrs	r3, r2
 8008246:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	697a      	ldr	r2, [r7, #20]
 800824c:	609a      	str	r2, [r3, #8]
}
 800824e:	bf00      	nop
 8008250:	371c      	adds	r7, #28
 8008252:	46bd      	mov	sp, r7
 8008254:	bc80      	pop	{r7}
 8008256:	4770      	bx	lr

08008258 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008258:	b480      	push	{r7}
 800825a:	b085      	sub	sp, #20
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
 8008260:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008268:	2b01      	cmp	r3, #1
 800826a:	d101      	bne.n	8008270 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800826c:	2302      	movs	r3, #2
 800826e:	e050      	b.n	8008312 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2201      	movs	r2, #1
 8008274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2202      	movs	r2, #2
 800827c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	689b      	ldr	r3, [r3, #8]
 800828e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008296:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	68fa      	ldr	r2, [r7, #12]
 800829e:	4313      	orrs	r3, r2
 80082a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	68fa      	ldr	r2, [r7, #12]
 80082a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a1b      	ldr	r2, [pc, #108]	; (800831c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d018      	beq.n	80082e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a19      	ldr	r2, [pc, #100]	; (8008320 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d013      	beq.n	80082e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082c6:	d00e      	beq.n	80082e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a15      	ldr	r2, [pc, #84]	; (8008324 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d009      	beq.n	80082e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a14      	ldr	r2, [pc, #80]	; (8008328 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d004      	beq.n	80082e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a12      	ldr	r2, [pc, #72]	; (800832c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d10c      	bne.n	8008300 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80082ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	68ba      	ldr	r2, [r7, #8]
 80082f4:	4313      	orrs	r3, r2
 80082f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	68ba      	ldr	r2, [r7, #8]
 80082fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2201      	movs	r2, #1
 8008304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2200      	movs	r2, #0
 800830c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008310:	2300      	movs	r3, #0
}
 8008312:	4618      	mov	r0, r3
 8008314:	3714      	adds	r7, #20
 8008316:	46bd      	mov	sp, r7
 8008318:	bc80      	pop	{r7}
 800831a:	4770      	bx	lr
 800831c:	40012c00 	.word	0x40012c00
 8008320:	40013400 	.word	0x40013400
 8008324:	40000400 	.word	0x40000400
 8008328:	40000800 	.word	0x40000800
 800832c:	40000c00 	.word	0x40000c00

08008330 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008330:	b480      	push	{r7}
 8008332:	b083      	sub	sp, #12
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008338:	bf00      	nop
 800833a:	370c      	adds	r7, #12
 800833c:	46bd      	mov	sp, r7
 800833e:	bc80      	pop	{r7}
 8008340:	4770      	bx	lr

08008342 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008342:	b480      	push	{r7}
 8008344:	b083      	sub	sp, #12
 8008346:	af00      	add	r7, sp, #0
 8008348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800834a:	bf00      	nop
 800834c:	370c      	adds	r7, #12
 800834e:	46bd      	mov	sp, r7
 8008350:	bc80      	pop	{r7}
 8008352:	4770      	bx	lr

08008354 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b082      	sub	sp, #8
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d101      	bne.n	8008366 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008362:	2301      	movs	r3, #1
 8008364:	e03f      	b.n	80083e6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800836c:	b2db      	uxtb	r3, r3
 800836e:	2b00      	cmp	r3, #0
 8008370:	d106      	bne.n	8008380 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2200      	movs	r2, #0
 8008376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f7fe fa48 	bl	8006810 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2224      	movs	r2, #36	; 0x24
 8008384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	68da      	ldr	r2, [r3, #12]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008396:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f000 fc85 	bl	8008ca8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	691a      	ldr	r2, [r3, #16]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80083ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	695a      	ldr	r2, [r3, #20]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80083bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	68da      	ldr	r2, [r3, #12]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80083cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2200      	movs	r2, #0
 80083d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2220      	movs	r2, #32
 80083d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2220      	movs	r2, #32
 80083e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80083e4:	2300      	movs	r3, #0
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3708      	adds	r7, #8
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}

080083ee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80083ee:	b580      	push	{r7, lr}
 80083f0:	b08a      	sub	sp, #40	; 0x28
 80083f2:	af02      	add	r7, sp, #8
 80083f4:	60f8      	str	r0, [r7, #12]
 80083f6:	60b9      	str	r1, [r7, #8]
 80083f8:	603b      	str	r3, [r7, #0]
 80083fa:	4613      	mov	r3, r2
 80083fc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80083fe:	2300      	movs	r3, #0
 8008400:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008408:	b2db      	uxtb	r3, r3
 800840a:	2b20      	cmp	r3, #32
 800840c:	d17c      	bne.n	8008508 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d002      	beq.n	800841a <HAL_UART_Transmit+0x2c>
 8008414:	88fb      	ldrh	r3, [r7, #6]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d101      	bne.n	800841e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800841a:	2301      	movs	r3, #1
 800841c:	e075      	b.n	800850a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008424:	2b01      	cmp	r3, #1
 8008426:	d101      	bne.n	800842c <HAL_UART_Transmit+0x3e>
 8008428:	2302      	movs	r3, #2
 800842a:	e06e      	b.n	800850a <HAL_UART_Transmit+0x11c>
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2201      	movs	r2, #1
 8008430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2200      	movs	r2, #0
 8008438:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2221      	movs	r2, #33	; 0x21
 800843e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008442:	f7fe fab7 	bl	80069b4 <HAL_GetTick>
 8008446:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	88fa      	ldrh	r2, [r7, #6]
 800844c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	88fa      	ldrh	r2, [r7, #6]
 8008452:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	689b      	ldr	r3, [r3, #8]
 8008458:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800845c:	d108      	bne.n	8008470 <HAL_UART_Transmit+0x82>
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	691b      	ldr	r3, [r3, #16]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d104      	bne.n	8008470 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008466:	2300      	movs	r3, #0
 8008468:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	61bb      	str	r3, [r7, #24]
 800846e:	e003      	b.n	8008478 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008474:	2300      	movs	r3, #0
 8008476:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2200      	movs	r2, #0
 800847c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008480:	e02a      	b.n	80084d8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	9300      	str	r3, [sp, #0]
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	2200      	movs	r2, #0
 800848a:	2180      	movs	r1, #128	; 0x80
 800848c:	68f8      	ldr	r0, [r7, #12]
 800848e:	f000 fa38 	bl	8008902 <UART_WaitOnFlagUntilTimeout>
 8008492:	4603      	mov	r3, r0
 8008494:	2b00      	cmp	r3, #0
 8008496:	d001      	beq.n	800849c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008498:	2303      	movs	r3, #3
 800849a:	e036      	b.n	800850a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800849c:	69fb      	ldr	r3, [r7, #28]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d10b      	bne.n	80084ba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80084a2:	69bb      	ldr	r3, [r7, #24]
 80084a4:	881b      	ldrh	r3, [r3, #0]
 80084a6:	461a      	mov	r2, r3
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80084b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80084b2:	69bb      	ldr	r3, [r7, #24]
 80084b4:	3302      	adds	r3, #2
 80084b6:	61bb      	str	r3, [r7, #24]
 80084b8:	e007      	b.n	80084ca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80084ba:	69fb      	ldr	r3, [r7, #28]
 80084bc:	781a      	ldrb	r2, [r3, #0]
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80084c4:	69fb      	ldr	r3, [r7, #28]
 80084c6:	3301      	adds	r3, #1
 80084c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80084ce:	b29b      	uxth	r3, r3
 80084d0:	3b01      	subs	r3, #1
 80084d2:	b29a      	uxth	r2, r3
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80084dc:	b29b      	uxth	r3, r3
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d1cf      	bne.n	8008482 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	9300      	str	r3, [sp, #0]
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	2200      	movs	r2, #0
 80084ea:	2140      	movs	r1, #64	; 0x40
 80084ec:	68f8      	ldr	r0, [r7, #12]
 80084ee:	f000 fa08 	bl	8008902 <UART_WaitOnFlagUntilTimeout>
 80084f2:	4603      	mov	r3, r0
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d001      	beq.n	80084fc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80084f8:	2303      	movs	r3, #3
 80084fa:	e006      	b.n	800850a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	2220      	movs	r2, #32
 8008500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008504:	2300      	movs	r3, #0
 8008506:	e000      	b.n	800850a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008508:	2302      	movs	r3, #2
  }
}
 800850a:	4618      	mov	r0, r3
 800850c:	3720      	adds	r7, #32
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}

08008512 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008512:	b580      	push	{r7, lr}
 8008514:	b084      	sub	sp, #16
 8008516:	af00      	add	r7, sp, #0
 8008518:	60f8      	str	r0, [r7, #12]
 800851a:	60b9      	str	r1, [r7, #8]
 800851c:	4613      	mov	r3, r2
 800851e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008526:	b2db      	uxtb	r3, r3
 8008528:	2b20      	cmp	r3, #32
 800852a:	d11d      	bne.n	8008568 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d002      	beq.n	8008538 <HAL_UART_Receive_IT+0x26>
 8008532:	88fb      	ldrh	r3, [r7, #6]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d101      	bne.n	800853c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008538:	2301      	movs	r3, #1
 800853a:	e016      	b.n	800856a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008542:	2b01      	cmp	r3, #1
 8008544:	d101      	bne.n	800854a <HAL_UART_Receive_IT+0x38>
 8008546:	2302      	movs	r3, #2
 8008548:	e00f      	b.n	800856a <HAL_UART_Receive_IT+0x58>
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	2201      	movs	r2, #1
 800854e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	2200      	movs	r2, #0
 8008556:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8008558:	88fb      	ldrh	r3, [r7, #6]
 800855a:	461a      	mov	r2, r3
 800855c:	68b9      	ldr	r1, [r7, #8]
 800855e:	68f8      	ldr	r0, [r7, #12]
 8008560:	f000 fa19 	bl	8008996 <UART_Start_Receive_IT>
 8008564:	4603      	mov	r3, r0
 8008566:	e000      	b.n	800856a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008568:	2302      	movs	r3, #2
  }
}
 800856a:	4618      	mov	r0, r3
 800856c:	3710      	adds	r7, #16
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}
	...

08008574 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b08a      	sub	sp, #40	; 0x28
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	68db      	ldr	r3, [r3, #12]
 800858a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	695b      	ldr	r3, [r3, #20]
 8008592:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8008594:	2300      	movs	r3, #0
 8008596:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8008598:	2300      	movs	r3, #0
 800859a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800859c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800859e:	f003 030f 	and.w	r3, r3, #15
 80085a2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80085a4:	69bb      	ldr	r3, [r7, #24]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d10d      	bne.n	80085c6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80085aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ac:	f003 0320 	and.w	r3, r3, #32
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d008      	beq.n	80085c6 <HAL_UART_IRQHandler+0x52>
 80085b4:	6a3b      	ldr	r3, [r7, #32]
 80085b6:	f003 0320 	and.w	r3, r3, #32
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d003      	beq.n	80085c6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 fac9 	bl	8008b56 <UART_Receive_IT>
      return;
 80085c4:	e17b      	b.n	80088be <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80085c6:	69bb      	ldr	r3, [r7, #24]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	f000 80b1 	beq.w	8008730 <HAL_UART_IRQHandler+0x1bc>
 80085ce:	69fb      	ldr	r3, [r7, #28]
 80085d0:	f003 0301 	and.w	r3, r3, #1
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d105      	bne.n	80085e4 <HAL_UART_IRQHandler+0x70>
 80085d8:	6a3b      	ldr	r3, [r7, #32]
 80085da:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80085de:	2b00      	cmp	r3, #0
 80085e0:	f000 80a6 	beq.w	8008730 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80085e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e6:	f003 0301 	and.w	r3, r3, #1
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d00a      	beq.n	8008604 <HAL_UART_IRQHandler+0x90>
 80085ee:	6a3b      	ldr	r3, [r7, #32]
 80085f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d005      	beq.n	8008604 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085fc:	f043 0201 	orr.w	r2, r3, #1
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008606:	f003 0304 	and.w	r3, r3, #4
 800860a:	2b00      	cmp	r3, #0
 800860c:	d00a      	beq.n	8008624 <HAL_UART_IRQHandler+0xb0>
 800860e:	69fb      	ldr	r3, [r7, #28]
 8008610:	f003 0301 	and.w	r3, r3, #1
 8008614:	2b00      	cmp	r3, #0
 8008616:	d005      	beq.n	8008624 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800861c:	f043 0202 	orr.w	r2, r3, #2
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008626:	f003 0302 	and.w	r3, r3, #2
 800862a:	2b00      	cmp	r3, #0
 800862c:	d00a      	beq.n	8008644 <HAL_UART_IRQHandler+0xd0>
 800862e:	69fb      	ldr	r3, [r7, #28]
 8008630:	f003 0301 	and.w	r3, r3, #1
 8008634:	2b00      	cmp	r3, #0
 8008636:	d005      	beq.n	8008644 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800863c:	f043 0204 	orr.w	r2, r3, #4
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008646:	f003 0308 	and.w	r3, r3, #8
 800864a:	2b00      	cmp	r3, #0
 800864c:	d00f      	beq.n	800866e <HAL_UART_IRQHandler+0xfa>
 800864e:	6a3b      	ldr	r3, [r7, #32]
 8008650:	f003 0320 	and.w	r3, r3, #32
 8008654:	2b00      	cmp	r3, #0
 8008656:	d104      	bne.n	8008662 <HAL_UART_IRQHandler+0xee>
 8008658:	69fb      	ldr	r3, [r7, #28]
 800865a:	f003 0301 	and.w	r3, r3, #1
 800865e:	2b00      	cmp	r3, #0
 8008660:	d005      	beq.n	800866e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008666:	f043 0208 	orr.w	r2, r3, #8
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008672:	2b00      	cmp	r3, #0
 8008674:	f000 811e 	beq.w	80088b4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867a:	f003 0320 	and.w	r3, r3, #32
 800867e:	2b00      	cmp	r3, #0
 8008680:	d007      	beq.n	8008692 <HAL_UART_IRQHandler+0x11e>
 8008682:	6a3b      	ldr	r3, [r7, #32]
 8008684:	f003 0320 	and.w	r3, r3, #32
 8008688:	2b00      	cmp	r3, #0
 800868a:	d002      	beq.n	8008692 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f000 fa62 	bl	8008b56 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	695b      	ldr	r3, [r3, #20]
 8008698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800869c:	2b00      	cmp	r3, #0
 800869e:	bf14      	ite	ne
 80086a0:	2301      	movne	r3, #1
 80086a2:	2300      	moveq	r3, #0
 80086a4:	b2db      	uxtb	r3, r3
 80086a6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ac:	f003 0308 	and.w	r3, r3, #8
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d102      	bne.n	80086ba <HAL_UART_IRQHandler+0x146>
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d031      	beq.n	800871e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f000 f9a4 	bl	8008a08 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	695b      	ldr	r3, [r3, #20]
 80086c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d023      	beq.n	8008716 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	695a      	ldr	r2, [r3, #20]
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80086dc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d013      	beq.n	800870e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ea:	4a76      	ldr	r2, [pc, #472]	; (80088c4 <HAL_UART_IRQHandler+0x350>)
 80086ec:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086f2:	4618      	mov	r0, r3
 80086f4:	f7fe fad4 	bl	8006ca0 <HAL_DMA_Abort_IT>
 80086f8:	4603      	mov	r3, r0
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d016      	beq.n	800872c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008708:	4610      	mov	r0, r2
 800870a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800870c:	e00e      	b.n	800872c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f000 f8e3 	bl	80088da <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008714:	e00a      	b.n	800872c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f000 f8df 	bl	80088da <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800871c:	e006      	b.n	800872c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 f8db 	bl	80088da <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2200      	movs	r2, #0
 8008728:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800872a:	e0c3      	b.n	80088b4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800872c:	bf00      	nop
    return;
 800872e:	e0c1      	b.n	80088b4 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008734:	2b01      	cmp	r3, #1
 8008736:	f040 80a1 	bne.w	800887c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800873a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873c:	f003 0310 	and.w	r3, r3, #16
 8008740:	2b00      	cmp	r3, #0
 8008742:	f000 809b 	beq.w	800887c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8008746:	6a3b      	ldr	r3, [r7, #32]
 8008748:	f003 0310 	and.w	r3, r3, #16
 800874c:	2b00      	cmp	r3, #0
 800874e:	f000 8095 	beq.w	800887c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008752:	2300      	movs	r3, #0
 8008754:	60fb      	str	r3, [r7, #12]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	60fb      	str	r3, [r7, #12]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	60fb      	str	r3, [r7, #12]
 8008766:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	695b      	ldr	r3, [r3, #20]
 800876e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008772:	2b00      	cmp	r3, #0
 8008774:	d04e      	beq.n	8008814 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8008780:	8a3b      	ldrh	r3, [r7, #16]
 8008782:	2b00      	cmp	r3, #0
 8008784:	f000 8098 	beq.w	80088b8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800878c:	8a3a      	ldrh	r2, [r7, #16]
 800878e:	429a      	cmp	r2, r3
 8008790:	f080 8092 	bcs.w	80088b8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	8a3a      	ldrh	r2, [r7, #16]
 8008798:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800879e:	699b      	ldr	r3, [r3, #24]
 80087a0:	2b20      	cmp	r3, #32
 80087a2:	d02b      	beq.n	80087fc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	68da      	ldr	r2, [r3, #12]
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80087b2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	695a      	ldr	r2, [r3, #20]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f022 0201 	bic.w	r2, r2, #1
 80087c2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	695a      	ldr	r2, [r3, #20]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087d2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2220      	movs	r2, #32
 80087d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2200      	movs	r2, #0
 80087e0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	68da      	ldr	r2, [r3, #12]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f022 0210 	bic.w	r2, r2, #16
 80087f0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087f6:	4618      	mov	r0, r3
 80087f8:	f7fe fa17 	bl	8006c2a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008804:	b29b      	uxth	r3, r3
 8008806:	1ad3      	subs	r3, r2, r3
 8008808:	b29b      	uxth	r3, r3
 800880a:	4619      	mov	r1, r3
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f000 f86d 	bl	80088ec <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008812:	e051      	b.n	80088b8 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800881c:	b29b      	uxth	r3, r3
 800881e:	1ad3      	subs	r3, r2, r3
 8008820:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008826:	b29b      	uxth	r3, r3
 8008828:	2b00      	cmp	r3, #0
 800882a:	d047      	beq.n	80088bc <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800882c:	8a7b      	ldrh	r3, [r7, #18]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d044      	beq.n	80088bc <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	68da      	ldr	r2, [r3, #12]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008840:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	695a      	ldr	r2, [r3, #20]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f022 0201 	bic.w	r2, r2, #1
 8008850:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2220      	movs	r2, #32
 8008856:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2200      	movs	r2, #0
 800885e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	68da      	ldr	r2, [r3, #12]
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f022 0210 	bic.w	r2, r2, #16
 800886e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008870:	8a7b      	ldrh	r3, [r7, #18]
 8008872:	4619      	mov	r1, r3
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f000 f839 	bl	80088ec <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800887a:	e01f      	b.n	80088bc <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800887c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800887e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008882:	2b00      	cmp	r3, #0
 8008884:	d008      	beq.n	8008898 <HAL_UART_IRQHandler+0x324>
 8008886:	6a3b      	ldr	r3, [r7, #32]
 8008888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800888c:	2b00      	cmp	r3, #0
 800888e:	d003      	beq.n	8008898 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f000 f8f9 	bl	8008a88 <UART_Transmit_IT>
    return;
 8008896:	e012      	b.n	80088be <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800889a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d00d      	beq.n	80088be <HAL_UART_IRQHandler+0x34a>
 80088a2:	6a3b      	ldr	r3, [r7, #32]
 80088a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d008      	beq.n	80088be <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 f93a 	bl	8008b26 <UART_EndTransmit_IT>
    return;
 80088b2:	e004      	b.n	80088be <HAL_UART_IRQHandler+0x34a>
    return;
 80088b4:	bf00      	nop
 80088b6:	e002      	b.n	80088be <HAL_UART_IRQHandler+0x34a>
      return;
 80088b8:	bf00      	nop
 80088ba:	e000      	b.n	80088be <HAL_UART_IRQHandler+0x34a>
      return;
 80088bc:	bf00      	nop
  }
}
 80088be:	3728      	adds	r7, #40	; 0x28
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}
 80088c4:	08008a61 	.word	0x08008a61

080088c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b083      	sub	sp, #12
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80088d0:	bf00      	nop
 80088d2:	370c      	adds	r7, #12
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bc80      	pop	{r7}
 80088d8:	4770      	bx	lr

080088da <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80088da:	b480      	push	{r7}
 80088dc:	b083      	sub	sp, #12
 80088de:	af00      	add	r7, sp, #0
 80088e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80088e2:	bf00      	nop
 80088e4:	370c      	adds	r7, #12
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bc80      	pop	{r7}
 80088ea:	4770      	bx	lr

080088ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80088ec:	b480      	push	{r7}
 80088ee:	b083      	sub	sp, #12
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	460b      	mov	r3, r1
 80088f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80088f8:	bf00      	nop
 80088fa:	370c      	adds	r7, #12
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bc80      	pop	{r7}
 8008900:	4770      	bx	lr

08008902 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008902:	b580      	push	{r7, lr}
 8008904:	b084      	sub	sp, #16
 8008906:	af00      	add	r7, sp, #0
 8008908:	60f8      	str	r0, [r7, #12]
 800890a:	60b9      	str	r1, [r7, #8]
 800890c:	603b      	str	r3, [r7, #0]
 800890e:	4613      	mov	r3, r2
 8008910:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008912:	e02c      	b.n	800896e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008914:	69bb      	ldr	r3, [r7, #24]
 8008916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800891a:	d028      	beq.n	800896e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800891c:	69bb      	ldr	r3, [r7, #24]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d007      	beq.n	8008932 <UART_WaitOnFlagUntilTimeout+0x30>
 8008922:	f7fe f847 	bl	80069b4 <HAL_GetTick>
 8008926:	4602      	mov	r2, r0
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	1ad3      	subs	r3, r2, r3
 800892c:	69ba      	ldr	r2, [r7, #24]
 800892e:	429a      	cmp	r2, r3
 8008930:	d21d      	bcs.n	800896e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	68da      	ldr	r2, [r3, #12]
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008940:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	695a      	ldr	r2, [r3, #20]
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f022 0201 	bic.w	r2, r2, #1
 8008950:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	2220      	movs	r2, #32
 8008956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2220      	movs	r2, #32
 800895e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2200      	movs	r2, #0
 8008966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800896a:	2303      	movs	r3, #3
 800896c:	e00f      	b.n	800898e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	681a      	ldr	r2, [r3, #0]
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	4013      	ands	r3, r2
 8008978:	68ba      	ldr	r2, [r7, #8]
 800897a:	429a      	cmp	r2, r3
 800897c:	bf0c      	ite	eq
 800897e:	2301      	moveq	r3, #1
 8008980:	2300      	movne	r3, #0
 8008982:	b2db      	uxtb	r3, r3
 8008984:	461a      	mov	r2, r3
 8008986:	79fb      	ldrb	r3, [r7, #7]
 8008988:	429a      	cmp	r2, r3
 800898a:	d0c3      	beq.n	8008914 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800898c:	2300      	movs	r3, #0
}
 800898e:	4618      	mov	r0, r3
 8008990:	3710      	adds	r7, #16
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}

08008996 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008996:	b480      	push	{r7}
 8008998:	b085      	sub	sp, #20
 800899a:	af00      	add	r7, sp, #0
 800899c:	60f8      	str	r0, [r7, #12]
 800899e:	60b9      	str	r1, [r7, #8]
 80089a0:	4613      	mov	r3, r2
 80089a2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	68ba      	ldr	r2, [r7, #8]
 80089a8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	88fa      	ldrh	r2, [r7, #6]
 80089ae:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	88fa      	ldrh	r2, [r7, #6]
 80089b4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	2200      	movs	r2, #0
 80089ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2222      	movs	r2, #34	; 0x22
 80089c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2200      	movs	r2, #0
 80089c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	68da      	ldr	r2, [r3, #12]
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80089da:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	695a      	ldr	r2, [r3, #20]
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f042 0201 	orr.w	r2, r2, #1
 80089ea:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	68da      	ldr	r2, [r3, #12]
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f042 0220 	orr.w	r2, r2, #32
 80089fa:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80089fc:	2300      	movs	r3, #0
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3714      	adds	r7, #20
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bc80      	pop	{r7}
 8008a06:	4770      	bx	lr

08008a08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b083      	sub	sp, #12
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	68da      	ldr	r2, [r3, #12]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008a1e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	695a      	ldr	r2, [r3, #20]
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f022 0201 	bic.w	r2, r2, #1
 8008a2e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	d107      	bne.n	8008a48 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	68da      	ldr	r2, [r3, #12]
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f022 0210 	bic.w	r2, r2, #16
 8008a46:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2220      	movs	r2, #32
 8008a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2200      	movs	r2, #0
 8008a54:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008a56:	bf00      	nop
 8008a58:	370c      	adds	r7, #12
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bc80      	pop	{r7}
 8008a5e:	4770      	bx	lr

08008a60 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b084      	sub	sp, #16
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a6c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2200      	movs	r2, #0
 8008a72:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	2200      	movs	r2, #0
 8008a78:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008a7a:	68f8      	ldr	r0, [r7, #12]
 8008a7c:	f7ff ff2d 	bl	80088da <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a80:	bf00      	nop
 8008a82:	3710      	adds	r7, #16
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b085      	sub	sp, #20
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a96:	b2db      	uxtb	r3, r3
 8008a98:	2b21      	cmp	r3, #33	; 0x21
 8008a9a:	d13e      	bne.n	8008b1a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	689b      	ldr	r3, [r3, #8]
 8008aa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008aa4:	d114      	bne.n	8008ad0 <UART_Transmit_IT+0x48>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	691b      	ldr	r3, [r3, #16]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d110      	bne.n	8008ad0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6a1b      	ldr	r3, [r3, #32]
 8008ab2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	881b      	ldrh	r3, [r3, #0]
 8008ab8:	461a      	mov	r2, r3
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ac2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6a1b      	ldr	r3, [r3, #32]
 8008ac8:	1c9a      	adds	r2, r3, #2
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	621a      	str	r2, [r3, #32]
 8008ace:	e008      	b.n	8008ae2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6a1b      	ldr	r3, [r3, #32]
 8008ad4:	1c59      	adds	r1, r3, #1
 8008ad6:	687a      	ldr	r2, [r7, #4]
 8008ad8:	6211      	str	r1, [r2, #32]
 8008ada:	781a      	ldrb	r2, [r3, #0]
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008ae6:	b29b      	uxth	r3, r3
 8008ae8:	3b01      	subs	r3, #1
 8008aea:	b29b      	uxth	r3, r3
 8008aec:	687a      	ldr	r2, [r7, #4]
 8008aee:	4619      	mov	r1, r3
 8008af0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d10f      	bne.n	8008b16 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	68da      	ldr	r2, [r3, #12]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008b04:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	68da      	ldr	r2, [r3, #12]
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b14:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008b16:	2300      	movs	r3, #0
 8008b18:	e000      	b.n	8008b1c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008b1a:	2302      	movs	r3, #2
  }
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3714      	adds	r7, #20
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bc80      	pop	{r7}
 8008b24:	4770      	bx	lr

08008b26 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008b26:	b580      	push	{r7, lr}
 8008b28:	b082      	sub	sp, #8
 8008b2a:	af00      	add	r7, sp, #0
 8008b2c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	68da      	ldr	r2, [r3, #12]
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b3c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2220      	movs	r2, #32
 8008b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f7ff febe 	bl	80088c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008b4c:	2300      	movs	r3, #0
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3708      	adds	r7, #8
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}

08008b56 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008b56:	b580      	push	{r7, lr}
 8008b58:	b086      	sub	sp, #24
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008b64:	b2db      	uxtb	r3, r3
 8008b66:	2b22      	cmp	r3, #34	; 0x22
 8008b68:	f040 8099 	bne.w	8008c9e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	689b      	ldr	r3, [r3, #8]
 8008b70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b74:	d117      	bne.n	8008ba6 <UART_Receive_IT+0x50>
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	691b      	ldr	r3, [r3, #16]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d113      	bne.n	8008ba6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b86:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	685b      	ldr	r3, [r3, #4]
 8008b8e:	b29b      	uxth	r3, r3
 8008b90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b94:	b29a      	uxth	r2, r3
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b9e:	1c9a      	adds	r2, r3, #2
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	629a      	str	r2, [r3, #40]	; 0x28
 8008ba4:	e026      	b.n	8008bf4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008baa:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8008bac:	2300      	movs	r3, #0
 8008bae:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	689b      	ldr	r3, [r3, #8]
 8008bb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bb8:	d007      	beq.n	8008bca <UART_Receive_IT+0x74>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	689b      	ldr	r3, [r3, #8]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d10a      	bne.n	8008bd8 <UART_Receive_IT+0x82>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	691b      	ldr	r3, [r3, #16]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d106      	bne.n	8008bd8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	685b      	ldr	r3, [r3, #4]
 8008bd0:	b2da      	uxtb	r2, r3
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	701a      	strb	r2, [r3, #0]
 8008bd6:	e008      	b.n	8008bea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	b2db      	uxtb	r3, r3
 8008be0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008be4:	b2da      	uxtb	r2, r3
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bee:	1c5a      	adds	r2, r3, #1
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008bf8:	b29b      	uxth	r3, r3
 8008bfa:	3b01      	subs	r3, #1
 8008bfc:	b29b      	uxth	r3, r3
 8008bfe:	687a      	ldr	r2, [r7, #4]
 8008c00:	4619      	mov	r1, r3
 8008c02:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d148      	bne.n	8008c9a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	68da      	ldr	r2, [r3, #12]
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f022 0220 	bic.w	r2, r2, #32
 8008c16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	68da      	ldr	r2, [r3, #12]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008c26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	695a      	ldr	r2, [r3, #20]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f022 0201 	bic.w	r2, r2, #1
 8008c36:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2220      	movs	r2, #32
 8008c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c44:	2b01      	cmp	r3, #1
 8008c46:	d123      	bne.n	8008c90 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	68da      	ldr	r2, [r3, #12]
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f022 0210 	bic.w	r2, r2, #16
 8008c5c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f003 0310 	and.w	r3, r3, #16
 8008c68:	2b10      	cmp	r3, #16
 8008c6a:	d10a      	bne.n	8008c82 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	60fb      	str	r3, [r7, #12]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	60fb      	str	r3, [r7, #12]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	60fb      	str	r3, [r7, #12]
 8008c80:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008c86:	4619      	mov	r1, r3
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f7ff fe2f 	bl	80088ec <HAL_UARTEx_RxEventCallback>
 8008c8e:	e002      	b.n	8008c96 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f7fd fc05 	bl	80064a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008c96:	2300      	movs	r3, #0
 8008c98:	e002      	b.n	8008ca0 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	e000      	b.n	8008ca0 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8008c9e:	2302      	movs	r3, #2
  }
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3718      	adds	r7, #24
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b084      	sub	sp, #16
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	691b      	ldr	r3, [r3, #16]
 8008cb6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	68da      	ldr	r2, [r3, #12]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	430a      	orrs	r2, r1
 8008cc4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	689a      	ldr	r2, [r3, #8]
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	691b      	ldr	r3, [r3, #16]
 8008cce:	431a      	orrs	r2, r3
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	695b      	ldr	r3, [r3, #20]
 8008cd4:	4313      	orrs	r3, r2
 8008cd6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	68db      	ldr	r3, [r3, #12]
 8008cde:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008ce2:	f023 030c 	bic.w	r3, r3, #12
 8008ce6:	687a      	ldr	r2, [r7, #4]
 8008ce8:	6812      	ldr	r2, [r2, #0]
 8008cea:	68b9      	ldr	r1, [r7, #8]
 8008cec:	430b      	orrs	r3, r1
 8008cee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	695b      	ldr	r3, [r3, #20]
 8008cf6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	699a      	ldr	r2, [r3, #24]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	430a      	orrs	r2, r1
 8008d04:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4a2c      	ldr	r2, [pc, #176]	; (8008dbc <UART_SetConfig+0x114>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d103      	bne.n	8008d18 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008d10:	f7fe fe92 	bl	8007a38 <HAL_RCC_GetPCLK2Freq>
 8008d14:	60f8      	str	r0, [r7, #12]
 8008d16:	e002      	b.n	8008d1e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008d18:	f7fe fe7a 	bl	8007a10 <HAL_RCC_GetPCLK1Freq>
 8008d1c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008d1e:	68fa      	ldr	r2, [r7, #12]
 8008d20:	4613      	mov	r3, r2
 8008d22:	009b      	lsls	r3, r3, #2
 8008d24:	4413      	add	r3, r2
 8008d26:	009a      	lsls	r2, r3, #2
 8008d28:	441a      	add	r2, r3
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	009b      	lsls	r3, r3, #2
 8008d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d34:	4a22      	ldr	r2, [pc, #136]	; (8008dc0 <UART_SetConfig+0x118>)
 8008d36:	fba2 2303 	umull	r2, r3, r2, r3
 8008d3a:	095b      	lsrs	r3, r3, #5
 8008d3c:	0119      	lsls	r1, r3, #4
 8008d3e:	68fa      	ldr	r2, [r7, #12]
 8008d40:	4613      	mov	r3, r2
 8008d42:	009b      	lsls	r3, r3, #2
 8008d44:	4413      	add	r3, r2
 8008d46:	009a      	lsls	r2, r3, #2
 8008d48:	441a      	add	r2, r3
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	009b      	lsls	r3, r3, #2
 8008d50:	fbb2 f2f3 	udiv	r2, r2, r3
 8008d54:	4b1a      	ldr	r3, [pc, #104]	; (8008dc0 <UART_SetConfig+0x118>)
 8008d56:	fba3 0302 	umull	r0, r3, r3, r2
 8008d5a:	095b      	lsrs	r3, r3, #5
 8008d5c:	2064      	movs	r0, #100	; 0x64
 8008d5e:	fb00 f303 	mul.w	r3, r0, r3
 8008d62:	1ad3      	subs	r3, r2, r3
 8008d64:	011b      	lsls	r3, r3, #4
 8008d66:	3332      	adds	r3, #50	; 0x32
 8008d68:	4a15      	ldr	r2, [pc, #84]	; (8008dc0 <UART_SetConfig+0x118>)
 8008d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8008d6e:	095b      	lsrs	r3, r3, #5
 8008d70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008d74:	4419      	add	r1, r3
 8008d76:	68fa      	ldr	r2, [r7, #12]
 8008d78:	4613      	mov	r3, r2
 8008d7a:	009b      	lsls	r3, r3, #2
 8008d7c:	4413      	add	r3, r2
 8008d7e:	009a      	lsls	r2, r3, #2
 8008d80:	441a      	add	r2, r3
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	009b      	lsls	r3, r3, #2
 8008d88:	fbb2 f2f3 	udiv	r2, r2, r3
 8008d8c:	4b0c      	ldr	r3, [pc, #48]	; (8008dc0 <UART_SetConfig+0x118>)
 8008d8e:	fba3 0302 	umull	r0, r3, r3, r2
 8008d92:	095b      	lsrs	r3, r3, #5
 8008d94:	2064      	movs	r0, #100	; 0x64
 8008d96:	fb00 f303 	mul.w	r3, r0, r3
 8008d9a:	1ad3      	subs	r3, r2, r3
 8008d9c:	011b      	lsls	r3, r3, #4
 8008d9e:	3332      	adds	r3, #50	; 0x32
 8008da0:	4a07      	ldr	r2, [pc, #28]	; (8008dc0 <UART_SetConfig+0x118>)
 8008da2:	fba2 2303 	umull	r2, r3, r2, r3
 8008da6:	095b      	lsrs	r3, r3, #5
 8008da8:	f003 020f 	and.w	r2, r3, #15
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	440a      	add	r2, r1
 8008db2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008db4:	bf00      	nop
 8008db6:	3710      	adds	r7, #16
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}
 8008dbc:	40013800 	.word	0x40013800
 8008dc0:	51eb851f 	.word	0x51eb851f

08008dc4 <atoi>:
 8008dc4:	220a      	movs	r2, #10
 8008dc6:	2100      	movs	r1, #0
 8008dc8:	f000 b8d8 	b.w	8008f7c <strtol>

08008dcc <__errno>:
 8008dcc:	4b01      	ldr	r3, [pc, #4]	; (8008dd4 <__errno+0x8>)
 8008dce:	6818      	ldr	r0, [r3, #0]
 8008dd0:	4770      	bx	lr
 8008dd2:	bf00      	nop
 8008dd4:	20000038 	.word	0x20000038

08008dd8 <__libc_init_array>:
 8008dd8:	b570      	push	{r4, r5, r6, lr}
 8008dda:	2600      	movs	r6, #0
 8008ddc:	4d0c      	ldr	r5, [pc, #48]	; (8008e10 <__libc_init_array+0x38>)
 8008dde:	4c0d      	ldr	r4, [pc, #52]	; (8008e14 <__libc_init_array+0x3c>)
 8008de0:	1b64      	subs	r4, r4, r5
 8008de2:	10a4      	asrs	r4, r4, #2
 8008de4:	42a6      	cmp	r6, r4
 8008de6:	d109      	bne.n	8008dfc <__libc_init_array+0x24>
 8008de8:	f000 fcec 	bl	80097c4 <_init>
 8008dec:	2600      	movs	r6, #0
 8008dee:	4d0a      	ldr	r5, [pc, #40]	; (8008e18 <__libc_init_array+0x40>)
 8008df0:	4c0a      	ldr	r4, [pc, #40]	; (8008e1c <__libc_init_array+0x44>)
 8008df2:	1b64      	subs	r4, r4, r5
 8008df4:	10a4      	asrs	r4, r4, #2
 8008df6:	42a6      	cmp	r6, r4
 8008df8:	d105      	bne.n	8008e06 <__libc_init_array+0x2e>
 8008dfa:	bd70      	pop	{r4, r5, r6, pc}
 8008dfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e00:	4798      	blx	r3
 8008e02:	3601      	adds	r6, #1
 8008e04:	e7ee      	b.n	8008de4 <__libc_init_array+0xc>
 8008e06:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e0a:	4798      	blx	r3
 8008e0c:	3601      	adds	r6, #1
 8008e0e:	e7f2      	b.n	8008df6 <__libc_init_array+0x1e>
 8008e10:	0800b1fc 	.word	0x0800b1fc
 8008e14:	0800b1fc 	.word	0x0800b1fc
 8008e18:	0800b1fc 	.word	0x0800b1fc
 8008e1c:	0800b200 	.word	0x0800b200

08008e20 <memset>:
 8008e20:	4603      	mov	r3, r0
 8008e22:	4402      	add	r2, r0
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d100      	bne.n	8008e2a <memset+0xa>
 8008e28:	4770      	bx	lr
 8008e2a:	f803 1b01 	strb.w	r1, [r3], #1
 8008e2e:	e7f9      	b.n	8008e24 <memset+0x4>

08008e30 <siprintf>:
 8008e30:	b40e      	push	{r1, r2, r3}
 8008e32:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008e36:	b500      	push	{lr}
 8008e38:	b09c      	sub	sp, #112	; 0x70
 8008e3a:	ab1d      	add	r3, sp, #116	; 0x74
 8008e3c:	9002      	str	r0, [sp, #8]
 8008e3e:	9006      	str	r0, [sp, #24]
 8008e40:	9107      	str	r1, [sp, #28]
 8008e42:	9104      	str	r1, [sp, #16]
 8008e44:	4808      	ldr	r0, [pc, #32]	; (8008e68 <siprintf+0x38>)
 8008e46:	4909      	ldr	r1, [pc, #36]	; (8008e6c <siprintf+0x3c>)
 8008e48:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e4c:	9105      	str	r1, [sp, #20]
 8008e4e:	6800      	ldr	r0, [r0, #0]
 8008e50:	a902      	add	r1, sp, #8
 8008e52:	9301      	str	r3, [sp, #4]
 8008e54:	f000 f8f8 	bl	8009048 <_svfiprintf_r>
 8008e58:	2200      	movs	r2, #0
 8008e5a:	9b02      	ldr	r3, [sp, #8]
 8008e5c:	701a      	strb	r2, [r3, #0]
 8008e5e:	b01c      	add	sp, #112	; 0x70
 8008e60:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e64:	b003      	add	sp, #12
 8008e66:	4770      	bx	lr
 8008e68:	20000038 	.word	0x20000038
 8008e6c:	ffff0208 	.word	0xffff0208

08008e70 <_strtol_l.isra.0>:
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e76:	4686      	mov	lr, r0
 8008e78:	d001      	beq.n	8008e7e <_strtol_l.isra.0+0xe>
 8008e7a:	2b24      	cmp	r3, #36	; 0x24
 8008e7c:	d906      	bls.n	8008e8c <_strtol_l.isra.0+0x1c>
 8008e7e:	f7ff ffa5 	bl	8008dcc <__errno>
 8008e82:	2316      	movs	r3, #22
 8008e84:	6003      	str	r3, [r0, #0]
 8008e86:	2000      	movs	r0, #0
 8008e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e8c:	468c      	mov	ip, r1
 8008e8e:	4e3a      	ldr	r6, [pc, #232]	; (8008f78 <_strtol_l.isra.0+0x108>)
 8008e90:	4660      	mov	r0, ip
 8008e92:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8008e96:	5da5      	ldrb	r5, [r4, r6]
 8008e98:	f015 0508 	ands.w	r5, r5, #8
 8008e9c:	d1f8      	bne.n	8008e90 <_strtol_l.isra.0+0x20>
 8008e9e:	2c2d      	cmp	r4, #45	; 0x2d
 8008ea0:	d133      	bne.n	8008f0a <_strtol_l.isra.0+0x9a>
 8008ea2:	f04f 0801 	mov.w	r8, #1
 8008ea6:	f89c 4000 	ldrb.w	r4, [ip]
 8008eaa:	f100 0c02 	add.w	ip, r0, #2
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d05d      	beq.n	8008f6e <_strtol_l.isra.0+0xfe>
 8008eb2:	2b10      	cmp	r3, #16
 8008eb4:	d10c      	bne.n	8008ed0 <_strtol_l.isra.0+0x60>
 8008eb6:	2c30      	cmp	r4, #48	; 0x30
 8008eb8:	d10a      	bne.n	8008ed0 <_strtol_l.isra.0+0x60>
 8008eba:	f89c 0000 	ldrb.w	r0, [ip]
 8008ebe:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8008ec2:	2858      	cmp	r0, #88	; 0x58
 8008ec4:	d14e      	bne.n	8008f64 <_strtol_l.isra.0+0xf4>
 8008ec6:	2310      	movs	r3, #16
 8008ec8:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8008ecc:	f10c 0c02 	add.w	ip, ip, #2
 8008ed0:	2500      	movs	r5, #0
 8008ed2:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8008ed6:	3f01      	subs	r7, #1
 8008ed8:	fbb7 f9f3 	udiv	r9, r7, r3
 8008edc:	4628      	mov	r0, r5
 8008ede:	fb03 7a19 	mls	sl, r3, r9, r7
 8008ee2:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8008ee6:	2e09      	cmp	r6, #9
 8008ee8:	d818      	bhi.n	8008f1c <_strtol_l.isra.0+0xac>
 8008eea:	4634      	mov	r4, r6
 8008eec:	42a3      	cmp	r3, r4
 8008eee:	dd24      	ble.n	8008f3a <_strtol_l.isra.0+0xca>
 8008ef0:	2d00      	cmp	r5, #0
 8008ef2:	db1f      	blt.n	8008f34 <_strtol_l.isra.0+0xc4>
 8008ef4:	4581      	cmp	r9, r0
 8008ef6:	d31d      	bcc.n	8008f34 <_strtol_l.isra.0+0xc4>
 8008ef8:	d101      	bne.n	8008efe <_strtol_l.isra.0+0x8e>
 8008efa:	45a2      	cmp	sl, r4
 8008efc:	db1a      	blt.n	8008f34 <_strtol_l.isra.0+0xc4>
 8008efe:	2501      	movs	r5, #1
 8008f00:	fb00 4003 	mla	r0, r0, r3, r4
 8008f04:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8008f08:	e7eb      	b.n	8008ee2 <_strtol_l.isra.0+0x72>
 8008f0a:	2c2b      	cmp	r4, #43	; 0x2b
 8008f0c:	bf08      	it	eq
 8008f0e:	f89c 4000 	ldrbeq.w	r4, [ip]
 8008f12:	46a8      	mov	r8, r5
 8008f14:	bf08      	it	eq
 8008f16:	f100 0c02 	addeq.w	ip, r0, #2
 8008f1a:	e7c8      	b.n	8008eae <_strtol_l.isra.0+0x3e>
 8008f1c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8008f20:	2e19      	cmp	r6, #25
 8008f22:	d801      	bhi.n	8008f28 <_strtol_l.isra.0+0xb8>
 8008f24:	3c37      	subs	r4, #55	; 0x37
 8008f26:	e7e1      	b.n	8008eec <_strtol_l.isra.0+0x7c>
 8008f28:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8008f2c:	2e19      	cmp	r6, #25
 8008f2e:	d804      	bhi.n	8008f3a <_strtol_l.isra.0+0xca>
 8008f30:	3c57      	subs	r4, #87	; 0x57
 8008f32:	e7db      	b.n	8008eec <_strtol_l.isra.0+0x7c>
 8008f34:	f04f 35ff 	mov.w	r5, #4294967295
 8008f38:	e7e4      	b.n	8008f04 <_strtol_l.isra.0+0x94>
 8008f3a:	2d00      	cmp	r5, #0
 8008f3c:	da08      	bge.n	8008f50 <_strtol_l.isra.0+0xe0>
 8008f3e:	2322      	movs	r3, #34	; 0x22
 8008f40:	4638      	mov	r0, r7
 8008f42:	f8ce 3000 	str.w	r3, [lr]
 8008f46:	2a00      	cmp	r2, #0
 8008f48:	d09e      	beq.n	8008e88 <_strtol_l.isra.0+0x18>
 8008f4a:	f10c 31ff 	add.w	r1, ip, #4294967295
 8008f4e:	e007      	b.n	8008f60 <_strtol_l.isra.0+0xf0>
 8008f50:	f1b8 0f00 	cmp.w	r8, #0
 8008f54:	d000      	beq.n	8008f58 <_strtol_l.isra.0+0xe8>
 8008f56:	4240      	negs	r0, r0
 8008f58:	2a00      	cmp	r2, #0
 8008f5a:	d095      	beq.n	8008e88 <_strtol_l.isra.0+0x18>
 8008f5c:	2d00      	cmp	r5, #0
 8008f5e:	d1f4      	bne.n	8008f4a <_strtol_l.isra.0+0xda>
 8008f60:	6011      	str	r1, [r2, #0]
 8008f62:	e791      	b.n	8008e88 <_strtol_l.isra.0+0x18>
 8008f64:	2430      	movs	r4, #48	; 0x30
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d1b2      	bne.n	8008ed0 <_strtol_l.isra.0+0x60>
 8008f6a:	2308      	movs	r3, #8
 8008f6c:	e7b0      	b.n	8008ed0 <_strtol_l.isra.0+0x60>
 8008f6e:	2c30      	cmp	r4, #48	; 0x30
 8008f70:	d0a3      	beq.n	8008eba <_strtol_l.isra.0+0x4a>
 8008f72:	230a      	movs	r3, #10
 8008f74:	e7ac      	b.n	8008ed0 <_strtol_l.isra.0+0x60>
 8008f76:	bf00      	nop
 8008f78:	0800b0c9 	.word	0x0800b0c9

08008f7c <strtol>:
 8008f7c:	4613      	mov	r3, r2
 8008f7e:	460a      	mov	r2, r1
 8008f80:	4601      	mov	r1, r0
 8008f82:	4802      	ldr	r0, [pc, #8]	; (8008f8c <strtol+0x10>)
 8008f84:	6800      	ldr	r0, [r0, #0]
 8008f86:	f7ff bf73 	b.w	8008e70 <_strtol_l.isra.0>
 8008f8a:	bf00      	nop
 8008f8c:	20000038 	.word	0x20000038

08008f90 <__ssputs_r>:
 8008f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f94:	688e      	ldr	r6, [r1, #8]
 8008f96:	4682      	mov	sl, r0
 8008f98:	429e      	cmp	r6, r3
 8008f9a:	460c      	mov	r4, r1
 8008f9c:	4690      	mov	r8, r2
 8008f9e:	461f      	mov	r7, r3
 8008fa0:	d838      	bhi.n	8009014 <__ssputs_r+0x84>
 8008fa2:	898a      	ldrh	r2, [r1, #12]
 8008fa4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008fa8:	d032      	beq.n	8009010 <__ssputs_r+0x80>
 8008faa:	6825      	ldr	r5, [r4, #0]
 8008fac:	6909      	ldr	r1, [r1, #16]
 8008fae:	3301      	adds	r3, #1
 8008fb0:	eba5 0901 	sub.w	r9, r5, r1
 8008fb4:	6965      	ldr	r5, [r4, #20]
 8008fb6:	444b      	add	r3, r9
 8008fb8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008fbc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008fc0:	106d      	asrs	r5, r5, #1
 8008fc2:	429d      	cmp	r5, r3
 8008fc4:	bf38      	it	cc
 8008fc6:	461d      	movcc	r5, r3
 8008fc8:	0553      	lsls	r3, r2, #21
 8008fca:	d531      	bpl.n	8009030 <__ssputs_r+0xa0>
 8008fcc:	4629      	mov	r1, r5
 8008fce:	f000 fb53 	bl	8009678 <_malloc_r>
 8008fd2:	4606      	mov	r6, r0
 8008fd4:	b950      	cbnz	r0, 8008fec <__ssputs_r+0x5c>
 8008fd6:	230c      	movs	r3, #12
 8008fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8008fdc:	f8ca 3000 	str.w	r3, [sl]
 8008fe0:	89a3      	ldrh	r3, [r4, #12]
 8008fe2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fe6:	81a3      	strh	r3, [r4, #12]
 8008fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fec:	464a      	mov	r2, r9
 8008fee:	6921      	ldr	r1, [r4, #16]
 8008ff0:	f000 face 	bl	8009590 <memcpy>
 8008ff4:	89a3      	ldrh	r3, [r4, #12]
 8008ff6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008ffa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ffe:	81a3      	strh	r3, [r4, #12]
 8009000:	6126      	str	r6, [r4, #16]
 8009002:	444e      	add	r6, r9
 8009004:	6026      	str	r6, [r4, #0]
 8009006:	463e      	mov	r6, r7
 8009008:	6165      	str	r5, [r4, #20]
 800900a:	eba5 0509 	sub.w	r5, r5, r9
 800900e:	60a5      	str	r5, [r4, #8]
 8009010:	42be      	cmp	r6, r7
 8009012:	d900      	bls.n	8009016 <__ssputs_r+0x86>
 8009014:	463e      	mov	r6, r7
 8009016:	4632      	mov	r2, r6
 8009018:	4641      	mov	r1, r8
 800901a:	6820      	ldr	r0, [r4, #0]
 800901c:	f000 fac6 	bl	80095ac <memmove>
 8009020:	68a3      	ldr	r3, [r4, #8]
 8009022:	6822      	ldr	r2, [r4, #0]
 8009024:	1b9b      	subs	r3, r3, r6
 8009026:	4432      	add	r2, r6
 8009028:	2000      	movs	r0, #0
 800902a:	60a3      	str	r3, [r4, #8]
 800902c:	6022      	str	r2, [r4, #0]
 800902e:	e7db      	b.n	8008fe8 <__ssputs_r+0x58>
 8009030:	462a      	mov	r2, r5
 8009032:	f000 fb7b 	bl	800972c <_realloc_r>
 8009036:	4606      	mov	r6, r0
 8009038:	2800      	cmp	r0, #0
 800903a:	d1e1      	bne.n	8009000 <__ssputs_r+0x70>
 800903c:	4650      	mov	r0, sl
 800903e:	6921      	ldr	r1, [r4, #16]
 8009040:	f000 face 	bl	80095e0 <_free_r>
 8009044:	e7c7      	b.n	8008fd6 <__ssputs_r+0x46>
	...

08009048 <_svfiprintf_r>:
 8009048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800904c:	4698      	mov	r8, r3
 800904e:	898b      	ldrh	r3, [r1, #12]
 8009050:	4607      	mov	r7, r0
 8009052:	061b      	lsls	r3, r3, #24
 8009054:	460d      	mov	r5, r1
 8009056:	4614      	mov	r4, r2
 8009058:	b09d      	sub	sp, #116	; 0x74
 800905a:	d50e      	bpl.n	800907a <_svfiprintf_r+0x32>
 800905c:	690b      	ldr	r3, [r1, #16]
 800905e:	b963      	cbnz	r3, 800907a <_svfiprintf_r+0x32>
 8009060:	2140      	movs	r1, #64	; 0x40
 8009062:	f000 fb09 	bl	8009678 <_malloc_r>
 8009066:	6028      	str	r0, [r5, #0]
 8009068:	6128      	str	r0, [r5, #16]
 800906a:	b920      	cbnz	r0, 8009076 <_svfiprintf_r+0x2e>
 800906c:	230c      	movs	r3, #12
 800906e:	603b      	str	r3, [r7, #0]
 8009070:	f04f 30ff 	mov.w	r0, #4294967295
 8009074:	e0d1      	b.n	800921a <_svfiprintf_r+0x1d2>
 8009076:	2340      	movs	r3, #64	; 0x40
 8009078:	616b      	str	r3, [r5, #20]
 800907a:	2300      	movs	r3, #0
 800907c:	9309      	str	r3, [sp, #36]	; 0x24
 800907e:	2320      	movs	r3, #32
 8009080:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009084:	2330      	movs	r3, #48	; 0x30
 8009086:	f04f 0901 	mov.w	r9, #1
 800908a:	f8cd 800c 	str.w	r8, [sp, #12]
 800908e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009234 <_svfiprintf_r+0x1ec>
 8009092:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009096:	4623      	mov	r3, r4
 8009098:	469a      	mov	sl, r3
 800909a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800909e:	b10a      	cbz	r2, 80090a4 <_svfiprintf_r+0x5c>
 80090a0:	2a25      	cmp	r2, #37	; 0x25
 80090a2:	d1f9      	bne.n	8009098 <_svfiprintf_r+0x50>
 80090a4:	ebba 0b04 	subs.w	fp, sl, r4
 80090a8:	d00b      	beq.n	80090c2 <_svfiprintf_r+0x7a>
 80090aa:	465b      	mov	r3, fp
 80090ac:	4622      	mov	r2, r4
 80090ae:	4629      	mov	r1, r5
 80090b0:	4638      	mov	r0, r7
 80090b2:	f7ff ff6d 	bl	8008f90 <__ssputs_r>
 80090b6:	3001      	adds	r0, #1
 80090b8:	f000 80aa 	beq.w	8009210 <_svfiprintf_r+0x1c8>
 80090bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090be:	445a      	add	r2, fp
 80090c0:	9209      	str	r2, [sp, #36]	; 0x24
 80090c2:	f89a 3000 	ldrb.w	r3, [sl]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	f000 80a2 	beq.w	8009210 <_svfiprintf_r+0x1c8>
 80090cc:	2300      	movs	r3, #0
 80090ce:	f04f 32ff 	mov.w	r2, #4294967295
 80090d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090d6:	f10a 0a01 	add.w	sl, sl, #1
 80090da:	9304      	str	r3, [sp, #16]
 80090dc:	9307      	str	r3, [sp, #28]
 80090de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80090e2:	931a      	str	r3, [sp, #104]	; 0x68
 80090e4:	4654      	mov	r4, sl
 80090e6:	2205      	movs	r2, #5
 80090e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090ec:	4851      	ldr	r0, [pc, #324]	; (8009234 <_svfiprintf_r+0x1ec>)
 80090ee:	f000 fa41 	bl	8009574 <memchr>
 80090f2:	9a04      	ldr	r2, [sp, #16]
 80090f4:	b9d8      	cbnz	r0, 800912e <_svfiprintf_r+0xe6>
 80090f6:	06d0      	lsls	r0, r2, #27
 80090f8:	bf44      	itt	mi
 80090fa:	2320      	movmi	r3, #32
 80090fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009100:	0711      	lsls	r1, r2, #28
 8009102:	bf44      	itt	mi
 8009104:	232b      	movmi	r3, #43	; 0x2b
 8009106:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800910a:	f89a 3000 	ldrb.w	r3, [sl]
 800910e:	2b2a      	cmp	r3, #42	; 0x2a
 8009110:	d015      	beq.n	800913e <_svfiprintf_r+0xf6>
 8009112:	4654      	mov	r4, sl
 8009114:	2000      	movs	r0, #0
 8009116:	f04f 0c0a 	mov.w	ip, #10
 800911a:	9a07      	ldr	r2, [sp, #28]
 800911c:	4621      	mov	r1, r4
 800911e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009122:	3b30      	subs	r3, #48	; 0x30
 8009124:	2b09      	cmp	r3, #9
 8009126:	d94e      	bls.n	80091c6 <_svfiprintf_r+0x17e>
 8009128:	b1b0      	cbz	r0, 8009158 <_svfiprintf_r+0x110>
 800912a:	9207      	str	r2, [sp, #28]
 800912c:	e014      	b.n	8009158 <_svfiprintf_r+0x110>
 800912e:	eba0 0308 	sub.w	r3, r0, r8
 8009132:	fa09 f303 	lsl.w	r3, r9, r3
 8009136:	4313      	orrs	r3, r2
 8009138:	46a2      	mov	sl, r4
 800913a:	9304      	str	r3, [sp, #16]
 800913c:	e7d2      	b.n	80090e4 <_svfiprintf_r+0x9c>
 800913e:	9b03      	ldr	r3, [sp, #12]
 8009140:	1d19      	adds	r1, r3, #4
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	9103      	str	r1, [sp, #12]
 8009146:	2b00      	cmp	r3, #0
 8009148:	bfbb      	ittet	lt
 800914a:	425b      	neglt	r3, r3
 800914c:	f042 0202 	orrlt.w	r2, r2, #2
 8009150:	9307      	strge	r3, [sp, #28]
 8009152:	9307      	strlt	r3, [sp, #28]
 8009154:	bfb8      	it	lt
 8009156:	9204      	strlt	r2, [sp, #16]
 8009158:	7823      	ldrb	r3, [r4, #0]
 800915a:	2b2e      	cmp	r3, #46	; 0x2e
 800915c:	d10c      	bne.n	8009178 <_svfiprintf_r+0x130>
 800915e:	7863      	ldrb	r3, [r4, #1]
 8009160:	2b2a      	cmp	r3, #42	; 0x2a
 8009162:	d135      	bne.n	80091d0 <_svfiprintf_r+0x188>
 8009164:	9b03      	ldr	r3, [sp, #12]
 8009166:	3402      	adds	r4, #2
 8009168:	1d1a      	adds	r2, r3, #4
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	9203      	str	r2, [sp, #12]
 800916e:	2b00      	cmp	r3, #0
 8009170:	bfb8      	it	lt
 8009172:	f04f 33ff 	movlt.w	r3, #4294967295
 8009176:	9305      	str	r3, [sp, #20]
 8009178:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009244 <_svfiprintf_r+0x1fc>
 800917c:	2203      	movs	r2, #3
 800917e:	4650      	mov	r0, sl
 8009180:	7821      	ldrb	r1, [r4, #0]
 8009182:	f000 f9f7 	bl	8009574 <memchr>
 8009186:	b140      	cbz	r0, 800919a <_svfiprintf_r+0x152>
 8009188:	2340      	movs	r3, #64	; 0x40
 800918a:	eba0 000a 	sub.w	r0, r0, sl
 800918e:	fa03 f000 	lsl.w	r0, r3, r0
 8009192:	9b04      	ldr	r3, [sp, #16]
 8009194:	3401      	adds	r4, #1
 8009196:	4303      	orrs	r3, r0
 8009198:	9304      	str	r3, [sp, #16]
 800919a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800919e:	2206      	movs	r2, #6
 80091a0:	4825      	ldr	r0, [pc, #148]	; (8009238 <_svfiprintf_r+0x1f0>)
 80091a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80091a6:	f000 f9e5 	bl	8009574 <memchr>
 80091aa:	2800      	cmp	r0, #0
 80091ac:	d038      	beq.n	8009220 <_svfiprintf_r+0x1d8>
 80091ae:	4b23      	ldr	r3, [pc, #140]	; (800923c <_svfiprintf_r+0x1f4>)
 80091b0:	bb1b      	cbnz	r3, 80091fa <_svfiprintf_r+0x1b2>
 80091b2:	9b03      	ldr	r3, [sp, #12]
 80091b4:	3307      	adds	r3, #7
 80091b6:	f023 0307 	bic.w	r3, r3, #7
 80091ba:	3308      	adds	r3, #8
 80091bc:	9303      	str	r3, [sp, #12]
 80091be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091c0:	4433      	add	r3, r6
 80091c2:	9309      	str	r3, [sp, #36]	; 0x24
 80091c4:	e767      	b.n	8009096 <_svfiprintf_r+0x4e>
 80091c6:	460c      	mov	r4, r1
 80091c8:	2001      	movs	r0, #1
 80091ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80091ce:	e7a5      	b.n	800911c <_svfiprintf_r+0xd4>
 80091d0:	2300      	movs	r3, #0
 80091d2:	f04f 0c0a 	mov.w	ip, #10
 80091d6:	4619      	mov	r1, r3
 80091d8:	3401      	adds	r4, #1
 80091da:	9305      	str	r3, [sp, #20]
 80091dc:	4620      	mov	r0, r4
 80091de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091e2:	3a30      	subs	r2, #48	; 0x30
 80091e4:	2a09      	cmp	r2, #9
 80091e6:	d903      	bls.n	80091f0 <_svfiprintf_r+0x1a8>
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d0c5      	beq.n	8009178 <_svfiprintf_r+0x130>
 80091ec:	9105      	str	r1, [sp, #20]
 80091ee:	e7c3      	b.n	8009178 <_svfiprintf_r+0x130>
 80091f0:	4604      	mov	r4, r0
 80091f2:	2301      	movs	r3, #1
 80091f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80091f8:	e7f0      	b.n	80091dc <_svfiprintf_r+0x194>
 80091fa:	ab03      	add	r3, sp, #12
 80091fc:	9300      	str	r3, [sp, #0]
 80091fe:	462a      	mov	r2, r5
 8009200:	4638      	mov	r0, r7
 8009202:	4b0f      	ldr	r3, [pc, #60]	; (8009240 <_svfiprintf_r+0x1f8>)
 8009204:	a904      	add	r1, sp, #16
 8009206:	f3af 8000 	nop.w
 800920a:	1c42      	adds	r2, r0, #1
 800920c:	4606      	mov	r6, r0
 800920e:	d1d6      	bne.n	80091be <_svfiprintf_r+0x176>
 8009210:	89ab      	ldrh	r3, [r5, #12]
 8009212:	065b      	lsls	r3, r3, #25
 8009214:	f53f af2c 	bmi.w	8009070 <_svfiprintf_r+0x28>
 8009218:	9809      	ldr	r0, [sp, #36]	; 0x24
 800921a:	b01d      	add	sp, #116	; 0x74
 800921c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009220:	ab03      	add	r3, sp, #12
 8009222:	9300      	str	r3, [sp, #0]
 8009224:	462a      	mov	r2, r5
 8009226:	4638      	mov	r0, r7
 8009228:	4b05      	ldr	r3, [pc, #20]	; (8009240 <_svfiprintf_r+0x1f8>)
 800922a:	a904      	add	r1, sp, #16
 800922c:	f000 f87c 	bl	8009328 <_printf_i>
 8009230:	e7eb      	b.n	800920a <_svfiprintf_r+0x1c2>
 8009232:	bf00      	nop
 8009234:	0800b1c9 	.word	0x0800b1c9
 8009238:	0800b1d3 	.word	0x0800b1d3
 800923c:	00000000 	.word	0x00000000
 8009240:	08008f91 	.word	0x08008f91
 8009244:	0800b1cf 	.word	0x0800b1cf

08009248 <_printf_common>:
 8009248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800924c:	4616      	mov	r6, r2
 800924e:	4699      	mov	r9, r3
 8009250:	688a      	ldr	r2, [r1, #8]
 8009252:	690b      	ldr	r3, [r1, #16]
 8009254:	4607      	mov	r7, r0
 8009256:	4293      	cmp	r3, r2
 8009258:	bfb8      	it	lt
 800925a:	4613      	movlt	r3, r2
 800925c:	6033      	str	r3, [r6, #0]
 800925e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009262:	460c      	mov	r4, r1
 8009264:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009268:	b10a      	cbz	r2, 800926e <_printf_common+0x26>
 800926a:	3301      	adds	r3, #1
 800926c:	6033      	str	r3, [r6, #0]
 800926e:	6823      	ldr	r3, [r4, #0]
 8009270:	0699      	lsls	r1, r3, #26
 8009272:	bf42      	ittt	mi
 8009274:	6833      	ldrmi	r3, [r6, #0]
 8009276:	3302      	addmi	r3, #2
 8009278:	6033      	strmi	r3, [r6, #0]
 800927a:	6825      	ldr	r5, [r4, #0]
 800927c:	f015 0506 	ands.w	r5, r5, #6
 8009280:	d106      	bne.n	8009290 <_printf_common+0x48>
 8009282:	f104 0a19 	add.w	sl, r4, #25
 8009286:	68e3      	ldr	r3, [r4, #12]
 8009288:	6832      	ldr	r2, [r6, #0]
 800928a:	1a9b      	subs	r3, r3, r2
 800928c:	42ab      	cmp	r3, r5
 800928e:	dc28      	bgt.n	80092e2 <_printf_common+0x9a>
 8009290:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009294:	1e13      	subs	r3, r2, #0
 8009296:	6822      	ldr	r2, [r4, #0]
 8009298:	bf18      	it	ne
 800929a:	2301      	movne	r3, #1
 800929c:	0692      	lsls	r2, r2, #26
 800929e:	d42d      	bmi.n	80092fc <_printf_common+0xb4>
 80092a0:	4649      	mov	r1, r9
 80092a2:	4638      	mov	r0, r7
 80092a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80092a8:	47c0      	blx	r8
 80092aa:	3001      	adds	r0, #1
 80092ac:	d020      	beq.n	80092f0 <_printf_common+0xa8>
 80092ae:	6823      	ldr	r3, [r4, #0]
 80092b0:	68e5      	ldr	r5, [r4, #12]
 80092b2:	f003 0306 	and.w	r3, r3, #6
 80092b6:	2b04      	cmp	r3, #4
 80092b8:	bf18      	it	ne
 80092ba:	2500      	movne	r5, #0
 80092bc:	6832      	ldr	r2, [r6, #0]
 80092be:	f04f 0600 	mov.w	r6, #0
 80092c2:	68a3      	ldr	r3, [r4, #8]
 80092c4:	bf08      	it	eq
 80092c6:	1aad      	subeq	r5, r5, r2
 80092c8:	6922      	ldr	r2, [r4, #16]
 80092ca:	bf08      	it	eq
 80092cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80092d0:	4293      	cmp	r3, r2
 80092d2:	bfc4      	itt	gt
 80092d4:	1a9b      	subgt	r3, r3, r2
 80092d6:	18ed      	addgt	r5, r5, r3
 80092d8:	341a      	adds	r4, #26
 80092da:	42b5      	cmp	r5, r6
 80092dc:	d11a      	bne.n	8009314 <_printf_common+0xcc>
 80092de:	2000      	movs	r0, #0
 80092e0:	e008      	b.n	80092f4 <_printf_common+0xac>
 80092e2:	2301      	movs	r3, #1
 80092e4:	4652      	mov	r2, sl
 80092e6:	4649      	mov	r1, r9
 80092e8:	4638      	mov	r0, r7
 80092ea:	47c0      	blx	r8
 80092ec:	3001      	adds	r0, #1
 80092ee:	d103      	bne.n	80092f8 <_printf_common+0xb0>
 80092f0:	f04f 30ff 	mov.w	r0, #4294967295
 80092f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092f8:	3501      	adds	r5, #1
 80092fa:	e7c4      	b.n	8009286 <_printf_common+0x3e>
 80092fc:	2030      	movs	r0, #48	; 0x30
 80092fe:	18e1      	adds	r1, r4, r3
 8009300:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009304:	1c5a      	adds	r2, r3, #1
 8009306:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800930a:	4422      	add	r2, r4
 800930c:	3302      	adds	r3, #2
 800930e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009312:	e7c5      	b.n	80092a0 <_printf_common+0x58>
 8009314:	2301      	movs	r3, #1
 8009316:	4622      	mov	r2, r4
 8009318:	4649      	mov	r1, r9
 800931a:	4638      	mov	r0, r7
 800931c:	47c0      	blx	r8
 800931e:	3001      	adds	r0, #1
 8009320:	d0e6      	beq.n	80092f0 <_printf_common+0xa8>
 8009322:	3601      	adds	r6, #1
 8009324:	e7d9      	b.n	80092da <_printf_common+0x92>
	...

08009328 <_printf_i>:
 8009328:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800932c:	460c      	mov	r4, r1
 800932e:	7e27      	ldrb	r7, [r4, #24]
 8009330:	4691      	mov	r9, r2
 8009332:	2f78      	cmp	r7, #120	; 0x78
 8009334:	4680      	mov	r8, r0
 8009336:	469a      	mov	sl, r3
 8009338:	990c      	ldr	r1, [sp, #48]	; 0x30
 800933a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800933e:	d807      	bhi.n	8009350 <_printf_i+0x28>
 8009340:	2f62      	cmp	r7, #98	; 0x62
 8009342:	d80a      	bhi.n	800935a <_printf_i+0x32>
 8009344:	2f00      	cmp	r7, #0
 8009346:	f000 80d9 	beq.w	80094fc <_printf_i+0x1d4>
 800934a:	2f58      	cmp	r7, #88	; 0x58
 800934c:	f000 80a4 	beq.w	8009498 <_printf_i+0x170>
 8009350:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009354:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009358:	e03a      	b.n	80093d0 <_printf_i+0xa8>
 800935a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800935e:	2b15      	cmp	r3, #21
 8009360:	d8f6      	bhi.n	8009350 <_printf_i+0x28>
 8009362:	a001      	add	r0, pc, #4	; (adr r0, 8009368 <_printf_i+0x40>)
 8009364:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009368:	080093c1 	.word	0x080093c1
 800936c:	080093d5 	.word	0x080093d5
 8009370:	08009351 	.word	0x08009351
 8009374:	08009351 	.word	0x08009351
 8009378:	08009351 	.word	0x08009351
 800937c:	08009351 	.word	0x08009351
 8009380:	080093d5 	.word	0x080093d5
 8009384:	08009351 	.word	0x08009351
 8009388:	08009351 	.word	0x08009351
 800938c:	08009351 	.word	0x08009351
 8009390:	08009351 	.word	0x08009351
 8009394:	080094e3 	.word	0x080094e3
 8009398:	08009405 	.word	0x08009405
 800939c:	080094c5 	.word	0x080094c5
 80093a0:	08009351 	.word	0x08009351
 80093a4:	08009351 	.word	0x08009351
 80093a8:	08009505 	.word	0x08009505
 80093ac:	08009351 	.word	0x08009351
 80093b0:	08009405 	.word	0x08009405
 80093b4:	08009351 	.word	0x08009351
 80093b8:	08009351 	.word	0x08009351
 80093bc:	080094cd 	.word	0x080094cd
 80093c0:	680b      	ldr	r3, [r1, #0]
 80093c2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80093c6:	1d1a      	adds	r2, r3, #4
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	600a      	str	r2, [r1, #0]
 80093cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80093d0:	2301      	movs	r3, #1
 80093d2:	e0a4      	b.n	800951e <_printf_i+0x1f6>
 80093d4:	6825      	ldr	r5, [r4, #0]
 80093d6:	6808      	ldr	r0, [r1, #0]
 80093d8:	062e      	lsls	r6, r5, #24
 80093da:	f100 0304 	add.w	r3, r0, #4
 80093de:	d50a      	bpl.n	80093f6 <_printf_i+0xce>
 80093e0:	6805      	ldr	r5, [r0, #0]
 80093e2:	600b      	str	r3, [r1, #0]
 80093e4:	2d00      	cmp	r5, #0
 80093e6:	da03      	bge.n	80093f0 <_printf_i+0xc8>
 80093e8:	232d      	movs	r3, #45	; 0x2d
 80093ea:	426d      	negs	r5, r5
 80093ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093f0:	230a      	movs	r3, #10
 80093f2:	485e      	ldr	r0, [pc, #376]	; (800956c <_printf_i+0x244>)
 80093f4:	e019      	b.n	800942a <_printf_i+0x102>
 80093f6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80093fa:	6805      	ldr	r5, [r0, #0]
 80093fc:	600b      	str	r3, [r1, #0]
 80093fe:	bf18      	it	ne
 8009400:	b22d      	sxthne	r5, r5
 8009402:	e7ef      	b.n	80093e4 <_printf_i+0xbc>
 8009404:	680b      	ldr	r3, [r1, #0]
 8009406:	6825      	ldr	r5, [r4, #0]
 8009408:	1d18      	adds	r0, r3, #4
 800940a:	6008      	str	r0, [r1, #0]
 800940c:	0628      	lsls	r0, r5, #24
 800940e:	d501      	bpl.n	8009414 <_printf_i+0xec>
 8009410:	681d      	ldr	r5, [r3, #0]
 8009412:	e002      	b.n	800941a <_printf_i+0xf2>
 8009414:	0669      	lsls	r1, r5, #25
 8009416:	d5fb      	bpl.n	8009410 <_printf_i+0xe8>
 8009418:	881d      	ldrh	r5, [r3, #0]
 800941a:	2f6f      	cmp	r7, #111	; 0x6f
 800941c:	bf0c      	ite	eq
 800941e:	2308      	moveq	r3, #8
 8009420:	230a      	movne	r3, #10
 8009422:	4852      	ldr	r0, [pc, #328]	; (800956c <_printf_i+0x244>)
 8009424:	2100      	movs	r1, #0
 8009426:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800942a:	6866      	ldr	r6, [r4, #4]
 800942c:	2e00      	cmp	r6, #0
 800942e:	bfa8      	it	ge
 8009430:	6821      	ldrge	r1, [r4, #0]
 8009432:	60a6      	str	r6, [r4, #8]
 8009434:	bfa4      	itt	ge
 8009436:	f021 0104 	bicge.w	r1, r1, #4
 800943a:	6021      	strge	r1, [r4, #0]
 800943c:	b90d      	cbnz	r5, 8009442 <_printf_i+0x11a>
 800943e:	2e00      	cmp	r6, #0
 8009440:	d04d      	beq.n	80094de <_printf_i+0x1b6>
 8009442:	4616      	mov	r6, r2
 8009444:	fbb5 f1f3 	udiv	r1, r5, r3
 8009448:	fb03 5711 	mls	r7, r3, r1, r5
 800944c:	5dc7      	ldrb	r7, [r0, r7]
 800944e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009452:	462f      	mov	r7, r5
 8009454:	42bb      	cmp	r3, r7
 8009456:	460d      	mov	r5, r1
 8009458:	d9f4      	bls.n	8009444 <_printf_i+0x11c>
 800945a:	2b08      	cmp	r3, #8
 800945c:	d10b      	bne.n	8009476 <_printf_i+0x14e>
 800945e:	6823      	ldr	r3, [r4, #0]
 8009460:	07df      	lsls	r7, r3, #31
 8009462:	d508      	bpl.n	8009476 <_printf_i+0x14e>
 8009464:	6923      	ldr	r3, [r4, #16]
 8009466:	6861      	ldr	r1, [r4, #4]
 8009468:	4299      	cmp	r1, r3
 800946a:	bfde      	ittt	le
 800946c:	2330      	movle	r3, #48	; 0x30
 800946e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009472:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009476:	1b92      	subs	r2, r2, r6
 8009478:	6122      	str	r2, [r4, #16]
 800947a:	464b      	mov	r3, r9
 800947c:	4621      	mov	r1, r4
 800947e:	4640      	mov	r0, r8
 8009480:	f8cd a000 	str.w	sl, [sp]
 8009484:	aa03      	add	r2, sp, #12
 8009486:	f7ff fedf 	bl	8009248 <_printf_common>
 800948a:	3001      	adds	r0, #1
 800948c:	d14c      	bne.n	8009528 <_printf_i+0x200>
 800948e:	f04f 30ff 	mov.w	r0, #4294967295
 8009492:	b004      	add	sp, #16
 8009494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009498:	4834      	ldr	r0, [pc, #208]	; (800956c <_printf_i+0x244>)
 800949a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800949e:	680e      	ldr	r6, [r1, #0]
 80094a0:	6823      	ldr	r3, [r4, #0]
 80094a2:	f856 5b04 	ldr.w	r5, [r6], #4
 80094a6:	061f      	lsls	r7, r3, #24
 80094a8:	600e      	str	r6, [r1, #0]
 80094aa:	d514      	bpl.n	80094d6 <_printf_i+0x1ae>
 80094ac:	07d9      	lsls	r1, r3, #31
 80094ae:	bf44      	itt	mi
 80094b0:	f043 0320 	orrmi.w	r3, r3, #32
 80094b4:	6023      	strmi	r3, [r4, #0]
 80094b6:	b91d      	cbnz	r5, 80094c0 <_printf_i+0x198>
 80094b8:	6823      	ldr	r3, [r4, #0]
 80094ba:	f023 0320 	bic.w	r3, r3, #32
 80094be:	6023      	str	r3, [r4, #0]
 80094c0:	2310      	movs	r3, #16
 80094c2:	e7af      	b.n	8009424 <_printf_i+0xfc>
 80094c4:	6823      	ldr	r3, [r4, #0]
 80094c6:	f043 0320 	orr.w	r3, r3, #32
 80094ca:	6023      	str	r3, [r4, #0]
 80094cc:	2378      	movs	r3, #120	; 0x78
 80094ce:	4828      	ldr	r0, [pc, #160]	; (8009570 <_printf_i+0x248>)
 80094d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80094d4:	e7e3      	b.n	800949e <_printf_i+0x176>
 80094d6:	065e      	lsls	r6, r3, #25
 80094d8:	bf48      	it	mi
 80094da:	b2ad      	uxthmi	r5, r5
 80094dc:	e7e6      	b.n	80094ac <_printf_i+0x184>
 80094de:	4616      	mov	r6, r2
 80094e0:	e7bb      	b.n	800945a <_printf_i+0x132>
 80094e2:	680b      	ldr	r3, [r1, #0]
 80094e4:	6826      	ldr	r6, [r4, #0]
 80094e6:	1d1d      	adds	r5, r3, #4
 80094e8:	6960      	ldr	r0, [r4, #20]
 80094ea:	600d      	str	r5, [r1, #0]
 80094ec:	0635      	lsls	r5, r6, #24
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	d501      	bpl.n	80094f6 <_printf_i+0x1ce>
 80094f2:	6018      	str	r0, [r3, #0]
 80094f4:	e002      	b.n	80094fc <_printf_i+0x1d4>
 80094f6:	0671      	lsls	r1, r6, #25
 80094f8:	d5fb      	bpl.n	80094f2 <_printf_i+0x1ca>
 80094fa:	8018      	strh	r0, [r3, #0]
 80094fc:	2300      	movs	r3, #0
 80094fe:	4616      	mov	r6, r2
 8009500:	6123      	str	r3, [r4, #16]
 8009502:	e7ba      	b.n	800947a <_printf_i+0x152>
 8009504:	680b      	ldr	r3, [r1, #0]
 8009506:	1d1a      	adds	r2, r3, #4
 8009508:	600a      	str	r2, [r1, #0]
 800950a:	681e      	ldr	r6, [r3, #0]
 800950c:	2100      	movs	r1, #0
 800950e:	4630      	mov	r0, r6
 8009510:	6862      	ldr	r2, [r4, #4]
 8009512:	f000 f82f 	bl	8009574 <memchr>
 8009516:	b108      	cbz	r0, 800951c <_printf_i+0x1f4>
 8009518:	1b80      	subs	r0, r0, r6
 800951a:	6060      	str	r0, [r4, #4]
 800951c:	6863      	ldr	r3, [r4, #4]
 800951e:	6123      	str	r3, [r4, #16]
 8009520:	2300      	movs	r3, #0
 8009522:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009526:	e7a8      	b.n	800947a <_printf_i+0x152>
 8009528:	4632      	mov	r2, r6
 800952a:	4649      	mov	r1, r9
 800952c:	4640      	mov	r0, r8
 800952e:	6923      	ldr	r3, [r4, #16]
 8009530:	47d0      	blx	sl
 8009532:	3001      	adds	r0, #1
 8009534:	d0ab      	beq.n	800948e <_printf_i+0x166>
 8009536:	6823      	ldr	r3, [r4, #0]
 8009538:	079b      	lsls	r3, r3, #30
 800953a:	d413      	bmi.n	8009564 <_printf_i+0x23c>
 800953c:	68e0      	ldr	r0, [r4, #12]
 800953e:	9b03      	ldr	r3, [sp, #12]
 8009540:	4298      	cmp	r0, r3
 8009542:	bfb8      	it	lt
 8009544:	4618      	movlt	r0, r3
 8009546:	e7a4      	b.n	8009492 <_printf_i+0x16a>
 8009548:	2301      	movs	r3, #1
 800954a:	4632      	mov	r2, r6
 800954c:	4649      	mov	r1, r9
 800954e:	4640      	mov	r0, r8
 8009550:	47d0      	blx	sl
 8009552:	3001      	adds	r0, #1
 8009554:	d09b      	beq.n	800948e <_printf_i+0x166>
 8009556:	3501      	adds	r5, #1
 8009558:	68e3      	ldr	r3, [r4, #12]
 800955a:	9903      	ldr	r1, [sp, #12]
 800955c:	1a5b      	subs	r3, r3, r1
 800955e:	42ab      	cmp	r3, r5
 8009560:	dcf2      	bgt.n	8009548 <_printf_i+0x220>
 8009562:	e7eb      	b.n	800953c <_printf_i+0x214>
 8009564:	2500      	movs	r5, #0
 8009566:	f104 0619 	add.w	r6, r4, #25
 800956a:	e7f5      	b.n	8009558 <_printf_i+0x230>
 800956c:	0800b1da 	.word	0x0800b1da
 8009570:	0800b1eb 	.word	0x0800b1eb

08009574 <memchr>:
 8009574:	4603      	mov	r3, r0
 8009576:	b510      	push	{r4, lr}
 8009578:	b2c9      	uxtb	r1, r1
 800957a:	4402      	add	r2, r0
 800957c:	4293      	cmp	r3, r2
 800957e:	4618      	mov	r0, r3
 8009580:	d101      	bne.n	8009586 <memchr+0x12>
 8009582:	2000      	movs	r0, #0
 8009584:	e003      	b.n	800958e <memchr+0x1a>
 8009586:	7804      	ldrb	r4, [r0, #0]
 8009588:	3301      	adds	r3, #1
 800958a:	428c      	cmp	r4, r1
 800958c:	d1f6      	bne.n	800957c <memchr+0x8>
 800958e:	bd10      	pop	{r4, pc}

08009590 <memcpy>:
 8009590:	440a      	add	r2, r1
 8009592:	4291      	cmp	r1, r2
 8009594:	f100 33ff 	add.w	r3, r0, #4294967295
 8009598:	d100      	bne.n	800959c <memcpy+0xc>
 800959a:	4770      	bx	lr
 800959c:	b510      	push	{r4, lr}
 800959e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095a2:	4291      	cmp	r1, r2
 80095a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095a8:	d1f9      	bne.n	800959e <memcpy+0xe>
 80095aa:	bd10      	pop	{r4, pc}

080095ac <memmove>:
 80095ac:	4288      	cmp	r0, r1
 80095ae:	b510      	push	{r4, lr}
 80095b0:	eb01 0402 	add.w	r4, r1, r2
 80095b4:	d902      	bls.n	80095bc <memmove+0x10>
 80095b6:	4284      	cmp	r4, r0
 80095b8:	4623      	mov	r3, r4
 80095ba:	d807      	bhi.n	80095cc <memmove+0x20>
 80095bc:	1e43      	subs	r3, r0, #1
 80095be:	42a1      	cmp	r1, r4
 80095c0:	d008      	beq.n	80095d4 <memmove+0x28>
 80095c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80095c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80095ca:	e7f8      	b.n	80095be <memmove+0x12>
 80095cc:	4601      	mov	r1, r0
 80095ce:	4402      	add	r2, r0
 80095d0:	428a      	cmp	r2, r1
 80095d2:	d100      	bne.n	80095d6 <memmove+0x2a>
 80095d4:	bd10      	pop	{r4, pc}
 80095d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80095da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80095de:	e7f7      	b.n	80095d0 <memmove+0x24>

080095e0 <_free_r>:
 80095e0:	b538      	push	{r3, r4, r5, lr}
 80095e2:	4605      	mov	r5, r0
 80095e4:	2900      	cmp	r1, #0
 80095e6:	d043      	beq.n	8009670 <_free_r+0x90>
 80095e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095ec:	1f0c      	subs	r4, r1, #4
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	bfb8      	it	lt
 80095f2:	18e4      	addlt	r4, r4, r3
 80095f4:	f000 f8d0 	bl	8009798 <__malloc_lock>
 80095f8:	4a1e      	ldr	r2, [pc, #120]	; (8009674 <_free_r+0x94>)
 80095fa:	6813      	ldr	r3, [r2, #0]
 80095fc:	4610      	mov	r0, r2
 80095fe:	b933      	cbnz	r3, 800960e <_free_r+0x2e>
 8009600:	6063      	str	r3, [r4, #4]
 8009602:	6014      	str	r4, [r2, #0]
 8009604:	4628      	mov	r0, r5
 8009606:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800960a:	f000 b8cb 	b.w	80097a4 <__malloc_unlock>
 800960e:	42a3      	cmp	r3, r4
 8009610:	d90a      	bls.n	8009628 <_free_r+0x48>
 8009612:	6821      	ldr	r1, [r4, #0]
 8009614:	1862      	adds	r2, r4, r1
 8009616:	4293      	cmp	r3, r2
 8009618:	bf01      	itttt	eq
 800961a:	681a      	ldreq	r2, [r3, #0]
 800961c:	685b      	ldreq	r3, [r3, #4]
 800961e:	1852      	addeq	r2, r2, r1
 8009620:	6022      	streq	r2, [r4, #0]
 8009622:	6063      	str	r3, [r4, #4]
 8009624:	6004      	str	r4, [r0, #0]
 8009626:	e7ed      	b.n	8009604 <_free_r+0x24>
 8009628:	461a      	mov	r2, r3
 800962a:	685b      	ldr	r3, [r3, #4]
 800962c:	b10b      	cbz	r3, 8009632 <_free_r+0x52>
 800962e:	42a3      	cmp	r3, r4
 8009630:	d9fa      	bls.n	8009628 <_free_r+0x48>
 8009632:	6811      	ldr	r1, [r2, #0]
 8009634:	1850      	adds	r0, r2, r1
 8009636:	42a0      	cmp	r0, r4
 8009638:	d10b      	bne.n	8009652 <_free_r+0x72>
 800963a:	6820      	ldr	r0, [r4, #0]
 800963c:	4401      	add	r1, r0
 800963e:	1850      	adds	r0, r2, r1
 8009640:	4283      	cmp	r3, r0
 8009642:	6011      	str	r1, [r2, #0]
 8009644:	d1de      	bne.n	8009604 <_free_r+0x24>
 8009646:	6818      	ldr	r0, [r3, #0]
 8009648:	685b      	ldr	r3, [r3, #4]
 800964a:	4401      	add	r1, r0
 800964c:	6011      	str	r1, [r2, #0]
 800964e:	6053      	str	r3, [r2, #4]
 8009650:	e7d8      	b.n	8009604 <_free_r+0x24>
 8009652:	d902      	bls.n	800965a <_free_r+0x7a>
 8009654:	230c      	movs	r3, #12
 8009656:	602b      	str	r3, [r5, #0]
 8009658:	e7d4      	b.n	8009604 <_free_r+0x24>
 800965a:	6820      	ldr	r0, [r4, #0]
 800965c:	1821      	adds	r1, r4, r0
 800965e:	428b      	cmp	r3, r1
 8009660:	bf01      	itttt	eq
 8009662:	6819      	ldreq	r1, [r3, #0]
 8009664:	685b      	ldreq	r3, [r3, #4]
 8009666:	1809      	addeq	r1, r1, r0
 8009668:	6021      	streq	r1, [r4, #0]
 800966a:	6063      	str	r3, [r4, #4]
 800966c:	6054      	str	r4, [r2, #4]
 800966e:	e7c9      	b.n	8009604 <_free_r+0x24>
 8009670:	bd38      	pop	{r3, r4, r5, pc}
 8009672:	bf00      	nop
 8009674:	200000e0 	.word	0x200000e0

08009678 <_malloc_r>:
 8009678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800967a:	1ccd      	adds	r5, r1, #3
 800967c:	f025 0503 	bic.w	r5, r5, #3
 8009680:	3508      	adds	r5, #8
 8009682:	2d0c      	cmp	r5, #12
 8009684:	bf38      	it	cc
 8009686:	250c      	movcc	r5, #12
 8009688:	2d00      	cmp	r5, #0
 800968a:	4606      	mov	r6, r0
 800968c:	db01      	blt.n	8009692 <_malloc_r+0x1a>
 800968e:	42a9      	cmp	r1, r5
 8009690:	d903      	bls.n	800969a <_malloc_r+0x22>
 8009692:	230c      	movs	r3, #12
 8009694:	6033      	str	r3, [r6, #0]
 8009696:	2000      	movs	r0, #0
 8009698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800969a:	f000 f87d 	bl	8009798 <__malloc_lock>
 800969e:	4921      	ldr	r1, [pc, #132]	; (8009724 <_malloc_r+0xac>)
 80096a0:	680a      	ldr	r2, [r1, #0]
 80096a2:	4614      	mov	r4, r2
 80096a4:	b99c      	cbnz	r4, 80096ce <_malloc_r+0x56>
 80096a6:	4f20      	ldr	r7, [pc, #128]	; (8009728 <_malloc_r+0xb0>)
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	b923      	cbnz	r3, 80096b6 <_malloc_r+0x3e>
 80096ac:	4621      	mov	r1, r4
 80096ae:	4630      	mov	r0, r6
 80096b0:	f000 f862 	bl	8009778 <_sbrk_r>
 80096b4:	6038      	str	r0, [r7, #0]
 80096b6:	4629      	mov	r1, r5
 80096b8:	4630      	mov	r0, r6
 80096ba:	f000 f85d 	bl	8009778 <_sbrk_r>
 80096be:	1c43      	adds	r3, r0, #1
 80096c0:	d123      	bne.n	800970a <_malloc_r+0x92>
 80096c2:	230c      	movs	r3, #12
 80096c4:	4630      	mov	r0, r6
 80096c6:	6033      	str	r3, [r6, #0]
 80096c8:	f000 f86c 	bl	80097a4 <__malloc_unlock>
 80096cc:	e7e3      	b.n	8009696 <_malloc_r+0x1e>
 80096ce:	6823      	ldr	r3, [r4, #0]
 80096d0:	1b5b      	subs	r3, r3, r5
 80096d2:	d417      	bmi.n	8009704 <_malloc_r+0x8c>
 80096d4:	2b0b      	cmp	r3, #11
 80096d6:	d903      	bls.n	80096e0 <_malloc_r+0x68>
 80096d8:	6023      	str	r3, [r4, #0]
 80096da:	441c      	add	r4, r3
 80096dc:	6025      	str	r5, [r4, #0]
 80096de:	e004      	b.n	80096ea <_malloc_r+0x72>
 80096e0:	6863      	ldr	r3, [r4, #4]
 80096e2:	42a2      	cmp	r2, r4
 80096e4:	bf0c      	ite	eq
 80096e6:	600b      	streq	r3, [r1, #0]
 80096e8:	6053      	strne	r3, [r2, #4]
 80096ea:	4630      	mov	r0, r6
 80096ec:	f000 f85a 	bl	80097a4 <__malloc_unlock>
 80096f0:	f104 000b 	add.w	r0, r4, #11
 80096f4:	1d23      	adds	r3, r4, #4
 80096f6:	f020 0007 	bic.w	r0, r0, #7
 80096fa:	1ac2      	subs	r2, r0, r3
 80096fc:	d0cc      	beq.n	8009698 <_malloc_r+0x20>
 80096fe:	1a1b      	subs	r3, r3, r0
 8009700:	50a3      	str	r3, [r4, r2]
 8009702:	e7c9      	b.n	8009698 <_malloc_r+0x20>
 8009704:	4622      	mov	r2, r4
 8009706:	6864      	ldr	r4, [r4, #4]
 8009708:	e7cc      	b.n	80096a4 <_malloc_r+0x2c>
 800970a:	1cc4      	adds	r4, r0, #3
 800970c:	f024 0403 	bic.w	r4, r4, #3
 8009710:	42a0      	cmp	r0, r4
 8009712:	d0e3      	beq.n	80096dc <_malloc_r+0x64>
 8009714:	1a21      	subs	r1, r4, r0
 8009716:	4630      	mov	r0, r6
 8009718:	f000 f82e 	bl	8009778 <_sbrk_r>
 800971c:	3001      	adds	r0, #1
 800971e:	d1dd      	bne.n	80096dc <_malloc_r+0x64>
 8009720:	e7cf      	b.n	80096c2 <_malloc_r+0x4a>
 8009722:	bf00      	nop
 8009724:	200000e0 	.word	0x200000e0
 8009728:	200000e4 	.word	0x200000e4

0800972c <_realloc_r>:
 800972c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800972e:	4607      	mov	r7, r0
 8009730:	4614      	mov	r4, r2
 8009732:	460e      	mov	r6, r1
 8009734:	b921      	cbnz	r1, 8009740 <_realloc_r+0x14>
 8009736:	4611      	mov	r1, r2
 8009738:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800973c:	f7ff bf9c 	b.w	8009678 <_malloc_r>
 8009740:	b922      	cbnz	r2, 800974c <_realloc_r+0x20>
 8009742:	f7ff ff4d 	bl	80095e0 <_free_r>
 8009746:	4625      	mov	r5, r4
 8009748:	4628      	mov	r0, r5
 800974a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800974c:	f000 f830 	bl	80097b0 <_malloc_usable_size_r>
 8009750:	42a0      	cmp	r0, r4
 8009752:	d20f      	bcs.n	8009774 <_realloc_r+0x48>
 8009754:	4621      	mov	r1, r4
 8009756:	4638      	mov	r0, r7
 8009758:	f7ff ff8e 	bl	8009678 <_malloc_r>
 800975c:	4605      	mov	r5, r0
 800975e:	2800      	cmp	r0, #0
 8009760:	d0f2      	beq.n	8009748 <_realloc_r+0x1c>
 8009762:	4631      	mov	r1, r6
 8009764:	4622      	mov	r2, r4
 8009766:	f7ff ff13 	bl	8009590 <memcpy>
 800976a:	4631      	mov	r1, r6
 800976c:	4638      	mov	r0, r7
 800976e:	f7ff ff37 	bl	80095e0 <_free_r>
 8009772:	e7e9      	b.n	8009748 <_realloc_r+0x1c>
 8009774:	4635      	mov	r5, r6
 8009776:	e7e7      	b.n	8009748 <_realloc_r+0x1c>

08009778 <_sbrk_r>:
 8009778:	b538      	push	{r3, r4, r5, lr}
 800977a:	2300      	movs	r3, #0
 800977c:	4d05      	ldr	r5, [pc, #20]	; (8009794 <_sbrk_r+0x1c>)
 800977e:	4604      	mov	r4, r0
 8009780:	4608      	mov	r0, r1
 8009782:	602b      	str	r3, [r5, #0]
 8009784:	f7fc ff6c 	bl	8006660 <_sbrk>
 8009788:	1c43      	adds	r3, r0, #1
 800978a:	d102      	bne.n	8009792 <_sbrk_r+0x1a>
 800978c:	682b      	ldr	r3, [r5, #0]
 800978e:	b103      	cbz	r3, 8009792 <_sbrk_r+0x1a>
 8009790:	6023      	str	r3, [r4, #0]
 8009792:	bd38      	pop	{r3, r4, r5, pc}
 8009794:	2000020c 	.word	0x2000020c

08009798 <__malloc_lock>:
 8009798:	4801      	ldr	r0, [pc, #4]	; (80097a0 <__malloc_lock+0x8>)
 800979a:	f000 b811 	b.w	80097c0 <__retarget_lock_acquire_recursive>
 800979e:	bf00      	nop
 80097a0:	20000214 	.word	0x20000214

080097a4 <__malloc_unlock>:
 80097a4:	4801      	ldr	r0, [pc, #4]	; (80097ac <__malloc_unlock+0x8>)
 80097a6:	f000 b80c 	b.w	80097c2 <__retarget_lock_release_recursive>
 80097aa:	bf00      	nop
 80097ac:	20000214 	.word	0x20000214

080097b0 <_malloc_usable_size_r>:
 80097b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097b4:	1f18      	subs	r0, r3, #4
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	bfbc      	itt	lt
 80097ba:	580b      	ldrlt	r3, [r1, r0]
 80097bc:	18c0      	addlt	r0, r0, r3
 80097be:	4770      	bx	lr

080097c0 <__retarget_lock_acquire_recursive>:
 80097c0:	4770      	bx	lr

080097c2 <__retarget_lock_release_recursive>:
 80097c2:	4770      	bx	lr

080097c4 <_init>:
 80097c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097c6:	bf00      	nop
 80097c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097ca:	bc08      	pop	{r3}
 80097cc:	469e      	mov	lr, r3
 80097ce:	4770      	bx	lr

080097d0 <_fini>:
 80097d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097d2:	bf00      	nop
 80097d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097d6:	bc08      	pop	{r3}
 80097d8:	469e      	mov	lr, r3
 80097da:	4770      	bx	lr
